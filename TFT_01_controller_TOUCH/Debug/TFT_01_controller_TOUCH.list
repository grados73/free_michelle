
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d28  08012580  08012580  00022580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080262a8  080262a8  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  080262a8  080262a8  000362a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080262b0  080262b0  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080262b0  080262b0  000362b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080262b4  080262b4  000362b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080262b8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000214  080264cc  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  080264cc  000408bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c8c  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aa5  00000000  00000000  00062ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00067978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000077c0  00000000  00000000  000691c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002496a  00000000  00000000  00070988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00097e1e  00000000  00000000  000952f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012d110  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000016a8  00000000  00000000  0012d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078e0  00000000  00000000  0012e810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012564 	.word	0x08012564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08012564 	.word	0x08012564

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	2000028c 	.word	0x2000028c

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000028c 	.word	0x2000028c

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	2000028c 	.word	0x2000028c

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	2000028c 	.word	0x2000028c

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	2000028c 	.word	0x2000028c

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000028c 	.word	0x2000028c

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f005 fac4 	bl	80071bc <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000290 	.word	0x20000290

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f006 f9f5 	bl	800809c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f006 f9ef 	bl	800809c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f006 f9e4 	bl	800809c <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f006 f9d1 	bl	800809c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f006 f9cb 	bl	800809c <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f006 f9bf 	bl	800809c <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f006 f9b5 	bl	800809c <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f006 f8ba 	bl	800809c <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f006 f8b4 	bl	800809c <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f006 f87d 	bl	800809c <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	20000290 	.word	0x20000290

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f006 f85d 	bl	800809c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f006 f854 	bl	800809c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000290 	.word	0x20000290
 8002054:	08015684 	.word	0x08015684
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f006 f817 	bl	800809c <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f009 fe2e 	bl	800bcde <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f006 f807 	bl	800809c <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000294 	.word	0x20000294
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002bd 	.word	0x200002bd

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f004 ff64 	bl	80071a4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f005 fe9b 	bl	800806c <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f004 ff2f 	bl	80071a4 <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f004 ff29 	bl	80071a4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f005 fe5d 	bl	800806c <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f004 fef1 	bl	80071a4 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 f89e 	bl	8007528 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 f889 	bl	800750a <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 f858 	bl	80074ba <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002bd 	.word	0x200002bd
 8002420:	200002c0 	.word	0x200002c0
 8002424:	200002bc 	.word	0x200002bc
 8002428:	20000294 	.word	0x20000294
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f005 f848 	bl	80074d6 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002bd 	.word	0x200002bd

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f005 fe0f 	bl	800809c <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f004 fe91 	bl	80071bc <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002bd 	.word	0x200002bd
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f004 ffb1 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f004 ffca 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f004 ffa9 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f004 ffc2 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f004 ffa1 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f004 ffba 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f004 ff99 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f004 ffb2 	bl	80074ba <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002c4 	.word	0x200002c4

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f005 fefb 	bl	80083bc <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002c4 	.word	0x200002c4

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f005 fee5 	bl	80083bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f005 ffd8 	bl	80085b8 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002c4 	.word	0x200002c4

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
#define WRITE_TIMEOUT   6

static uint32_t last_write;

void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f004 fc65 	bl	80071a4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f006 f96d 	bl	8008bf8 <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200002e8 	.word	0x200002e8

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f006 f855 	bl	8008a04 <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f004 fc21 	bl	80071a4 <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200002e8 	.word	0x200002e8
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:

void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f003 fb23 	bl	8006198 <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f003 fb1f 	bl	8006198 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f003 fb16 	bl	8006198 <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f003 fb12 	bl	8006198 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f003 fb09 	bl	8006198 <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f003 fb05 	bl	8006198 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f003 fafc 	bl	8006198 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f003 faf8 	bl	8006198 <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f003 faeb 	bl	8006198 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f003 fae7 	bl	8006198 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f003 fade 	bl	8006198 <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f003 fada 	bl	8006198 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f003 fad1 	bl	8006198 <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f003 facd 	bl	8006198 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f003 fac4 	bl	8006198 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f003 fac0 	bl	8006198 <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002c22:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002c26:	f7ff f967 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8002c2a:	238c      	movs	r3, #140	; 0x8c
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	23f0      	movs	r3, #240	; 0xf0
 8002c30:	4aab      	ldr	r2, [pc, #684]	; (8002ee0 <system_init+0x2c4>)
 8002c32:	2132      	movs	r1, #50	; 0x32
 8002c34:	201e      	movs	r0, #30
 8002c36:	f7ff f934 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002c3a:	48aa      	ldr	r0, [pc, #680]	; (8002ee4 <system_init+0x2c8>)
 8002c3c:	f7fe fd58 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 8002c40:	49a9      	ldr	r1, [pc, #676]	; (8002ee8 <system_init+0x2cc>)
 8002c42:	48aa      	ldr	r0, [pc, #680]	; (8002eec <system_init+0x2d0>)
 8002c44:	f00b fe76 	bl	800e934 <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002c48:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	220a      	movs	r2, #10
 8002c56:	213c      	movs	r1, #60	; 0x3c
 8002c58:	48a4      	ldr	r0, [pc, #656]	; (8002eec <system_init+0x2d0>)
 8002c5a:	f7fe ff63 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 8002c5e:	f004 faa1 	bl	80071a4 <HAL_GetTick>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4aa2      	ldr	r2, [pc, #648]	; (8002ef0 <system_init+0x2d4>)
 8002c66:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8002c68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2305      	movs	r3, #5
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2314      	movs	r3, #20
 8002c74:	2214      	movs	r2, #20
 8002c76:	21be      	movs	r1, #190	; 0xbe
 8002c78:	203c      	movs	r0, #60	; 0x3c
 8002c7a:	f7fe fc6b 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 8002c7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c82:	9301      	str	r3, [sp, #4]
 8002c84:	2305      	movs	r3, #5
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2314      	movs	r3, #20
 8002c8a:	2214      	movs	r2, #20
 8002c8c:	21be      	movs	r1, #190	; 0xbe
 8002c8e:	205a      	movs	r0, #90	; 0x5a
 8002c90:	f7fe fc60 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8002c94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	2214      	movs	r2, #20
 8002ca2:	21be      	movs	r1, #190	; 0xbe
 8002ca4:	2078      	movs	r0, #120	; 0x78
 8002ca6:	f7fe fc55 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8002caa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2314      	movs	r3, #20
 8002cb6:	2214      	movs	r2, #20
 8002cb8:	21be      	movs	r1, #190	; 0xbe
 8002cba:	2096      	movs	r0, #150	; 0x96
 8002cbc:	f7fe fc4a 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 8002cc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2314      	movs	r3, #20
 8002ccc:	2214      	movs	r2, #20
 8002cce:	21be      	movs	r1, #190	; 0xbe
 8002cd0:	20b4      	movs	r0, #180	; 0xb4
 8002cd2:	f7fe fc3f 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 8002cd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	2305      	movs	r3, #5
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	2314      	movs	r3, #20
 8002ce2:	2214      	movs	r2, #20
 8002ce4:	21be      	movs	r1, #190	; 0xbe
 8002ce6:	20d2      	movs	r0, #210	; 0xd2
 8002ce8:	f7fe fc34 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 8002cec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2314      	movs	r3, #20
 8002cf8:	2214      	movs	r2, #20
 8002cfa:	21be      	movs	r1, #190	; 0xbe
 8002cfc:	20f0      	movs	r0, #240	; 0xf0
 8002cfe:	f7fe fc29 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 8002d02:	f004 fa4f 	bl	80071a4 <HAL_GetTick>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a79      	ldr	r2, [pc, #484]	; (8002ef0 <system_init+0x2d4>)
 8002d0a:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 8002d0c:	4879      	ldr	r0, [pc, #484]	; (8002ef4 <system_init+0x2d8>)
 8002d0e:	f7fe fcef 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002d12:	20c8      	movs	r0, #200	; 0xc8
 8002d14:	f001 fb2e 	bl	8004374 <initWait>
	  	  LastTime = HAL_GetTick();
 8002d18:	f004 fa44 	bl	80071a4 <HAL_GetTick>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a74      	ldr	r2, [pc, #464]	; (8002ef0 <system_init+0x2d4>)
 8002d20:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 8002d22:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2305      	movs	r3, #5
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2314      	movs	r3, #20
 8002d2e:	2214      	movs	r2, #20
 8002d30:	21be      	movs	r1, #190	; 0xbe
 8002d32:	203c      	movs	r0, #60	; 0x3c
 8002d34:	f7fe fc8b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8002d38:	2201      	movs	r2, #1
 8002d3a:	496f      	ldr	r1, [pc, #444]	; (8002ef8 <system_init+0x2dc>)
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff fdd7 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 8002d42:	2025      	movs	r0, #37	; 0x25
 8002d44:	f003 fa28 	bl	8006198 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002d48:	486c      	ldr	r0, [pc, #432]	; (8002efc <system_init+0x2e0>)
 8002d4a:	f004 f83b 	bl	8006dc4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 8002d4e:	496c      	ldr	r1, [pc, #432]	; (8002f00 <system_init+0x2e4>)
 8002d50:	4866      	ldr	r0, [pc, #408]	; (8002eec <system_init+0x2d0>)
 8002d52:	f00b fdef 	bl	800e934 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002d56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2300      	movs	r3, #0
 8002d62:	22dc      	movs	r2, #220	; 0xdc
 8002d64:	2114      	movs	r1, #20
 8002d66:	4861      	ldr	r0, [pc, #388]	; (8002eec <system_init+0x2d0>)
 8002d68:	f7fe fedc 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002d6c:	20c8      	movs	r0, #200	; 0xc8
 8002d6e:	f001 fb01 	bl	8004374 <initWait>
	  	  	  LastTime = HAL_GetTick();
 8002d72:	f004 fa17 	bl	80071a4 <HAL_GetTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a5d      	ldr	r2, [pc, #372]	; (8002ef0 <system_init+0x2d4>)
 8002d7a:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8002d7c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2305      	movs	r3, #5
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2314      	movs	r3, #20
 8002d88:	2214      	movs	r2, #20
 8002d8a:	21be      	movs	r1, #190	; 0xbe
 8002d8c:	205a      	movs	r0, #90	; 0x5a
 8002d8e:	f7fe fc5e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 8002d92:	201b      	movs	r0, #27
 8002d94:	f003 fa00 	bl	8006198 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8002d98:	f7ff fed0 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002d9c:	4857      	ldr	r0, [pc, #348]	; (8002efc <system_init+0x2e0>)
 8002d9e:	f004 f811 	bl	8006dc4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 8002da2:	4958      	ldr	r1, [pc, #352]	; (8002f04 <system_init+0x2e8>)
 8002da4:	4851      	ldr	r0, [pc, #324]	; (8002eec <system_init+0x2d0>)
 8002da6:	f00b fdc5 	bl	800e934 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002daa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2301      	movs	r3, #1
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	22dc      	movs	r2, #220	; 0xdc
 8002db8:	2114      	movs	r1, #20
 8002dba:	484c      	ldr	r0, [pc, #304]	; (8002eec <system_init+0x2d0>)
 8002dbc:	f7fe feb2 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002dc0:	20c8      	movs	r0, #200	; 0xc8
 8002dc2:	f001 fad7 	bl	8004374 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 8002dc6:	f004 f9ed 	bl	80071a4 <HAL_GetTick>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <system_init+0x2d4>)
 8002dce:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 8002dd0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2314      	movs	r3, #20
 8002ddc:	2214      	movs	r2, #20
 8002dde:	21be      	movs	r1, #190	; 0xbe
 8002de0:	2078      	movs	r0, #120	; 0x78
 8002de2:	f7fe fc34 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 8002de6:	2004      	movs	r0, #4
 8002de8:	f003 f9d6 	bl	8006198 <SendComand>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002dec:	20c8      	movs	r0, #200	; 0xc8
 8002dee:	f001 fac1 	bl	8004374 <initWait>
			  LastTime = HAL_GetTick();
 8002df2:	f004 f9d7 	bl	80071a4 <HAL_GetTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <system_init+0x2d4>)
 8002dfa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 8002dfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2305      	movs	r3, #5
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2314      	movs	r3, #20
 8002e08:	2214      	movs	r2, #20
 8002e0a:	21be      	movs	r1, #190	; 0xbe
 8002e0c:	2096      	movs	r0, #150	; 0x96
 8002e0e:	f7fe fc1e 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 8002e12:	f7ff fecb 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002e16:	4839      	ldr	r0, [pc, #228]	; (8002efc <system_init+0x2e0>)
 8002e18:	f003 ffd4 	bl	8006dc4 <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 8002e1c:	493a      	ldr	r1, [pc, #232]	; (8002f08 <system_init+0x2ec>)
 8002e1e:	4833      	ldr	r0, [pc, #204]	; (8002eec <system_init+0x2d0>)
 8002e20:	f00b fd88 	bl	800e934 <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8002e24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	22dc      	movs	r2, #220	; 0xdc
 8002e32:	2114      	movs	r1, #20
 8002e34:	482d      	ldr	r0, [pc, #180]	; (8002eec <system_init+0x2d0>)
 8002e36:	f7fe fe75 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e3a:	20c8      	movs	r0, #200	; 0xc8
 8002e3c:	f001 fa9a 	bl	8004374 <initWait>
			  LastTime = HAL_GetTick();
 8002e40:	f004 f9b0 	bl	80071a4 <HAL_GetTick>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <system_init+0x2d4>)
 8002e48:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8002e4a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	2305      	movs	r3, #5
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2314      	movs	r3, #20
 8002e56:	2214      	movs	r2, #20
 8002e58:	21be      	movs	r1, #190	; 0xbe
 8002e5a:	20b4      	movs	r0, #180	; 0xb4
 8002e5c:	f7fe fbf7 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 8002e60:	2003      	movs	r0, #3
 8002e62:	f003 f999 	bl	8006198 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e66:	20c8      	movs	r0, #200	; 0xc8
 8002e68:	f001 fa84 	bl	8004374 <initWait>
			  LastTime = HAL_GetTick();
 8002e6c:	f004 f99a 	bl	80071a4 <HAL_GetTick>
 8002e70:	4603      	mov	r3, r0
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <system_init+0x2d4>)
 8002e74:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8002e76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	2314      	movs	r3, #20
 8002e82:	2214      	movs	r2, #20
 8002e84:	21be      	movs	r1, #190	; 0xbe
 8002e86:	20d2      	movs	r0, #210	; 0xd2
 8002e88:	f7fe fbe1 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8002e8c:	2015      	movs	r0, #21
 8002e8e:	f003 f983 	bl	8006198 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8002e92:	20c8      	movs	r0, #200	; 0xc8
 8002e94:	f001 fa6e 	bl	8004374 <initWait>
			  LastTime = HAL_GetTick();
 8002e98:	f004 f984 	bl	80071a4 <HAL_GetTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <system_init+0x2d4>)
 8002ea0:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 8002ea2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2305      	movs	r3, #5
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2314      	movs	r3, #20
 8002eae:	2214      	movs	r2, #20
 8002eb0:	21be      	movs	r1, #190	; 0xbe
 8002eb2:	20f0      	movs	r0, #240	; 0xf0
 8002eb4:	f7fe fbcb 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8002eb8:	2016      	movs	r0, #22
 8002eba:	f003 f96d 	bl	8006198 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <system_init+0x2e0>)
 8002ec0:	f003 ff80 	bl	8006dc4 <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 8002ec4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ec8:	f001 fa54 	bl	8004374 <initWait>
			  LastTime = HAL_GetTick();
 8002ecc:	f004 f96a 	bl	80071a4 <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <system_init+0x2d4>)
 8002ed4:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	080156f4 	.word	0x080156f4
 8002ee4:	08015678 	.word	0x08015678
 8002ee8:	08012580 	.word	0x08012580
 8002eec:	200002c8 	.word	0x200002c8
 8002ef0:	20000250 	.word	0x20000250
 8002ef4:	08013700 	.word	0x08013700
 8002ef8:	20000033 	.word	0x20000033
 8002efc:	20000450 	.word	0x20000450
 8002f00:	08012594 	.word	0x08012594
 8002f04:	080125b0 	.word	0x080125b0
 8002f08:	080125d0 	.word	0x080125d0

08002f0c <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f16:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f22:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8002f24:	f24c 6018 	movw	r0, #50712	; 0xc618
 8002f28:	f7fe ffe6 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f003 f933 	bl	8006198 <SendComand>
	  SendComand(UCMD_PRES_1);
 8002f32:	2004      	movs	r0, #4
 8002f34:	f003 f930 	bl	8006198 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8002f38:	201b      	movs	r0, #27
 8002f3a:	f003 f92d 	bl	8006198 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 8002f3e:	f7ff fc29 	bl	8002794 <DS3231_GetHour>
 8002f42:	4603      	mov	r3, r0
 8002f44:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8002f46:	f7ff fc31 	bl	80027ac <DS3231_GetMinute>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 8002f4e:	4881      	ldr	r0, [pc, #516]	; (8003154 <showCurrentParameters+0x248>)
 8002f50:	f7fe fbce 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8002f54:	4980      	ldr	r1, [pc, #512]	; (8003158 <showCurrentParameters+0x24c>)
 8002f56:	4881      	ldr	r0, [pc, #516]	; (800315c <showCurrentParameters+0x250>)
 8002f58:	f00b fcec 	bl	800e934 <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002f5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002f6a:	220a      	movs	r2, #10
 8002f6c:	212f      	movs	r1, #47	; 0x2f
 8002f6e:	487b      	ldr	r0, [pc, #492]	; (800315c <showCurrentParameters+0x250>)
 8002f70:	f7fe fdd8 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8002f74:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2329      	movs	r3, #41	; 0x29
 8002f7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f80:	2129      	movs	r1, #41	; 0x29
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fe f904 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8002f88:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	232b      	movs	r3, #43	; 0x2b
 8002f90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f94:	212b      	movs	r1, #43	; 0x2b
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f8fa 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d809      	bhi.n	8002fb6 <showCurrentParameters+0xaa>
 8002fa2:	7fbb      	ldrb	r3, [r7, #30]
 8002fa4:	2b09      	cmp	r3, #9
 8002fa6:	d806      	bhi.n	8002fb6 <showCurrentParameters+0xaa>
 8002fa8:	7ffa      	ldrb	r2, [r7, #31]
 8002faa:	7fbb      	ldrb	r3, [r7, #30]
 8002fac:	496c      	ldr	r1, [pc, #432]	; (8003160 <showCurrentParameters+0x254>)
 8002fae:	486b      	ldr	r0, [pc, #428]	; (800315c <showCurrentParameters+0x250>)
 8002fb0:	f00b fcc0 	bl	800e934 <siprintf>
 8002fb4:	e019      	b.n	8002fea <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d806      	bhi.n	8002fca <showCurrentParameters+0xbe>
 8002fbc:	7ffa      	ldrb	r2, [r7, #31]
 8002fbe:	7fbb      	ldrb	r3, [r7, #30]
 8002fc0:	4968      	ldr	r1, [pc, #416]	; (8003164 <showCurrentParameters+0x258>)
 8002fc2:	4866      	ldr	r0, [pc, #408]	; (800315c <showCurrentParameters+0x250>)
 8002fc4:	f00b fcb6 	bl	800e934 <siprintf>
 8002fc8:	e00f      	b.n	8002fea <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 8002fca:	7fbb      	ldrb	r3, [r7, #30]
 8002fcc:	2b09      	cmp	r3, #9
 8002fce:	d806      	bhi.n	8002fde <showCurrentParameters+0xd2>
 8002fd0:	7ffa      	ldrb	r2, [r7, #31]
 8002fd2:	7fbb      	ldrb	r3, [r7, #30]
 8002fd4:	4964      	ldr	r1, [pc, #400]	; (8003168 <showCurrentParameters+0x25c>)
 8002fd6:	4861      	ldr	r0, [pc, #388]	; (800315c <showCurrentParameters+0x250>)
 8002fd8:	f00b fcac 	bl	800e934 <siprintf>
 8002fdc:	e005      	b.n	8002fea <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 8002fde:	7ffa      	ldrb	r2, [r7, #31]
 8002fe0:	7fbb      	ldrb	r3, [r7, #30]
 8002fe2:	4962      	ldr	r1, [pc, #392]	; (800316c <showCurrentParameters+0x260>)
 8002fe4:	485d      	ldr	r0, [pc, #372]	; (800315c <showCurrentParameters+0x250>)
 8002fe6:	f00b fca5 	bl	800e934 <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8002fea:	f24c 6318 	movw	r3, #50712	; 0xc618
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2232      	movs	r2, #50	; 0x32
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	4858      	ldr	r0, [pc, #352]	; (800315c <showCurrentParameters+0x250>)
 8002ffc:	f7fe fd92 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 8003000:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <showCurrentParameters+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fab7 	bl	8000578 <__aeabi_f2d>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4959      	ldr	r1, [pc, #356]	; (8003174 <showCurrentParameters+0x268>)
 8003010:	4852      	ldr	r0, [pc, #328]	; (800315c <showCurrentParameters+0x250>)
 8003012:	f00b fc8f 	bl	800e934 <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003016:	f24c 6318 	movw	r3, #50712	; 0xc618
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	2301      	movs	r3, #1
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	2300      	movs	r3, #0
 8003022:	2250      	movs	r2, #80	; 0x50
 8003024:	2114      	movs	r1, #20
 8003026:	484d      	ldr	r0, [pc, #308]	; (800315c <showCurrentParameters+0x250>)
 8003028:	f7fe fd7c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 800302c:	4b52      	ldr	r3, [pc, #328]	; (8003178 <showCurrentParameters+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd faa1 	bl	8000578 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4950      	ldr	r1, [pc, #320]	; (800317c <showCurrentParameters+0x270>)
 800303c:	4847      	ldr	r0, [pc, #284]	; (800315c <showCurrentParameters+0x250>)
 800303e:	f00b fc79 	bl	800e934 <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003042:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	226e      	movs	r2, #110	; 0x6e
 8003050:	2114      	movs	r1, #20
 8003052:	4842      	ldr	r0, [pc, #264]	; (800315c <showCurrentParameters+0x250>)
 8003054:	f7fe fd66 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: %d", CWaterLvl);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <showCurrentParameters+0x274>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4949      	ldr	r1, [pc, #292]	; (8003184 <showCurrentParameters+0x278>)
 8003060:	483e      	ldr	r0, [pc, #248]	; (800315c <showCurrentParameters+0x250>)
 8003062:	f00b fc67 	bl	800e934 <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003066:	f24c 6318 	movw	r3, #50712	; 0xc618
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2300      	movs	r3, #0
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	228c      	movs	r2, #140	; 0x8c
 8003074:	2114      	movs	r1, #20
 8003076:	4839      	ldr	r0, [pc, #228]	; (800315c <showCurrentParameters+0x250>)
 8003078:	f7fe fd54 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 800307c:	4b42      	ldr	r3, [pc, #264]	; (8003188 <showCurrentParameters+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa79 	bl	8000578 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <showCurrentParameters+0x280>)
 800308c:	4833      	ldr	r0, [pc, #204]	; (800315c <showCurrentParameters+0x250>)
 800308e:	f00b fc51 	bl	800e934 <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003092:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2300      	movs	r3, #0
 800309e:	22aa      	movs	r2, #170	; 0xaa
 80030a0:	2114      	movs	r1, #20
 80030a2:	482e      	ldr	r0, [pc, #184]	; (800315c <showCurrentParameters+0x250>)
 80030a4:	f7fe fd3e 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 80030a8:	4839      	ldr	r0, [pc, #228]	; (8003190 <showCurrentParameters+0x284>)
 80030aa:	f7fe fb21 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80030ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2305      	movs	r3, #5
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2314      	movs	r3, #20
 80030ba:	225f      	movs	r2, #95	; 0x5f
 80030bc:	21d8      	movs	r1, #216	; 0xd8
 80030be:	20dc      	movs	r0, #220	; 0xdc
 80030c0:	f7fe fac5 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80030c4:	4933      	ldr	r1, [pc, #204]	; (8003194 <showCurrentParameters+0x288>)
 80030c6:	4825      	ldr	r0, [pc, #148]	; (800315c <showCurrentParameters+0x250>)
 80030c8:	f00b fc34 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80030cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	22da      	movs	r2, #218	; 0xda
 80030da:	21df      	movs	r1, #223	; 0xdf
 80030dc:	481f      	ldr	r0, [pc, #124]	; (800315c <showCurrentParameters+0x250>)
 80030de:	f7fe fd21 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80030e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2305      	movs	r3, #5
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2314      	movs	r3, #20
 80030ee:	2264      	movs	r2, #100	; 0x64
 80030f0:	21d8      	movs	r1, #216	; 0xd8
 80030f2:	200a      	movs	r0, #10
 80030f4:	f7fe faab 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80030f8:	4927      	ldr	r1, [pc, #156]	; (8003198 <showCurrentParameters+0x28c>)
 80030fa:	4818      	ldr	r0, [pc, #96]	; (800315c <showCurrentParameters+0x250>)
 80030fc:	f00b fc1a 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003100:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	22da      	movs	r2, #218	; 0xda
 800310e:	2114      	movs	r1, #20
 8003110:	4812      	ldr	r0, [pc, #72]	; (800315c <showCurrentParameters+0x250>)
 8003112:	f7fe fd07 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003116:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2305      	movs	r3, #5
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2314      	movs	r3, #20
 8003122:	225a      	movs	r2, #90	; 0x5a
 8003124:	21d8      	movs	r1, #216	; 0xd8
 8003126:	2078      	movs	r0, #120	; 0x78
 8003128:	f7fe fa91 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 800312c:	491b      	ldr	r1, [pc, #108]	; (800319c <showCurrentParameters+0x290>)
 800312e:	480b      	ldr	r0, [pc, #44]	; (800315c <showCurrentParameters+0x250>)
 8003130:	f00b fc00 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003134:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	22da      	movs	r2, #218	; 0xda
 8003142:	2184      	movs	r1, #132	; 0x84
 8003144:	4805      	ldr	r0, [pc, #20]	; (800315c <showCurrentParameters+0x250>)
 8003146:	f7fe fced 	bl	8001b24 <EF_PutString>
}
 800314a:	bf00      	nop
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	08015678 	.word	0x08015678
 8003158:	080125f0 	.word	0x080125f0
 800315c:	200002c8 	.word	0x200002c8
 8003160:	08012600 	.word	0x08012600
 8003164:	08012610 	.word	0x08012610
 8003168:	08012620 	.word	0x08012620
 800316c:	08012630 	.word	0x08012630
 8003170:	20000260 	.word	0x20000260
 8003174:	08012640 	.word	0x08012640
 8003178:	2000026c 	.word	0x2000026c
 800317c:	08012654 	.word	0x08012654
 8003180:	20000270 	.word	0x20000270
 8003184:	08012668 	.word	0x08012668
 8003188:	20000268 	.word	0x20000268
 800318c:	08012678 	.word	0x08012678
 8003190:	08013700 	.word	0x08013700
 8003194:	08012690 	.word	0x08012690
 8003198:	0801269c 	.word	0x0801269c
 800319c:	080126a8 	.word	0x080126a8

080031a0 <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 80031a6:	2015      	movs	r0, #21
 80031a8:	f002 fff6 	bl	8006198 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80031ac:	f24c 6018 	movw	r0, #50712	; 0xc618
 80031b0:	f7fe fea2 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80031b4:	485c      	ldr	r0, [pc, #368]	; (8003328 <showControlPanel+0x188>)
 80031b6:	f7fe fa9b 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 80031ba:	495c      	ldr	r1, [pc, #368]	; (800332c <showControlPanel+0x18c>)
 80031bc:	485c      	ldr	r0, [pc, #368]	; (8003330 <showControlPanel+0x190>)
 80031be:	f00b fbb9 	bl	800e934 <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80031c2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2300      	movs	r3, #0
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	231f      	movs	r3, #31
 80031ce:	220a      	movs	r2, #10
 80031d0:	2123      	movs	r1, #35	; 0x23
 80031d2:	4857      	ldr	r0, [pc, #348]	; (8003330 <showControlPanel+0x190>)
 80031d4:	f7fe fca6 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80031d8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	2329      	movs	r3, #41	; 0x29
 80031e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031e4:	2129      	movs	r1, #41	; 0x29
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fd ffd2 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80031ec:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	232b      	movs	r3, #43	; 0x2b
 80031f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031f8:	212b      	movs	r1, #43	; 0x2b
 80031fa:	2000      	movs	r0, #0
 80031fc:	f7fd ffc8 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 8003200:	494c      	ldr	r1, [pc, #304]	; (8003334 <showControlPanel+0x194>)
 8003202:	484b      	ldr	r0, [pc, #300]	; (8003330 <showControlPanel+0x190>)
 8003204:	f00b fb96 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003208:	f24c 6318 	movw	r3, #50712	; 0xc618
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2300      	movs	r3, #0
 8003214:	223c      	movs	r2, #60	; 0x3c
 8003216:	2114      	movs	r1, #20
 8003218:	4845      	ldr	r0, [pc, #276]	; (8003330 <showControlPanel+0x190>)
 800321a:	f7fe fc83 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 800321e:	4946      	ldr	r1, [pc, #280]	; (8003338 <showControlPanel+0x198>)
 8003220:	4843      	ldr	r0, [pc, #268]	; (8003330 <showControlPanel+0x190>)
 8003222:	f00b fb87 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003226:	f24c 6318 	movw	r3, #50712	; 0xc618
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	2301      	movs	r3, #1
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	225a      	movs	r2, #90	; 0x5a
 8003234:	2114      	movs	r1, #20
 8003236:	483e      	ldr	r0, [pc, #248]	; (8003330 <showControlPanel+0x190>)
 8003238:	f7fe fc74 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 800323c:	493f      	ldr	r1, [pc, #252]	; (800333c <showControlPanel+0x19c>)
 800323e:	483c      	ldr	r0, [pc, #240]	; (8003330 <showControlPanel+0x190>)
 8003240:	f00b fb78 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003244:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	2278      	movs	r2, #120	; 0x78
 8003252:	2114      	movs	r1, #20
 8003254:	4836      	ldr	r0, [pc, #216]	; (8003330 <showControlPanel+0x190>)
 8003256:	f7fe fc65 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 800325a:	4939      	ldr	r1, [pc, #228]	; (8003340 <showControlPanel+0x1a0>)
 800325c:	4834      	ldr	r0, [pc, #208]	; (8003330 <showControlPanel+0x190>)
 800325e:	f00b fb69 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003262:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2300      	movs	r3, #0
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2300      	movs	r3, #0
 800326e:	2296      	movs	r2, #150	; 0x96
 8003270:	2114      	movs	r1, #20
 8003272:	482f      	ldr	r0, [pc, #188]	; (8003330 <showControlPanel+0x190>)
 8003274:	f7fe fc56 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003278:	4832      	ldr	r0, [pc, #200]	; (8003344 <showControlPanel+0x1a4>)
 800327a:	f7fe fa39 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800327e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2305      	movs	r3, #5
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	2314      	movs	r3, #20
 800328a:	225f      	movs	r2, #95	; 0x5f
 800328c:	21d8      	movs	r1, #216	; 0xd8
 800328e:	20dc      	movs	r0, #220	; 0xdc
 8003290:	f7fe f9dd 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003294:	492c      	ldr	r1, [pc, #176]	; (8003348 <showControlPanel+0x1a8>)
 8003296:	4826      	ldr	r0, [pc, #152]	; (8003330 <showControlPanel+0x190>)
 8003298:	f00b fb4c 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800329c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	22da      	movs	r2, #218	; 0xda
 80032aa:	21df      	movs	r1, #223	; 0xdf
 80032ac:	4820      	ldr	r0, [pc, #128]	; (8003330 <showControlPanel+0x190>)
 80032ae:	f7fe fc39 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80032b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2305      	movs	r3, #5
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2314      	movs	r3, #20
 80032be:	2264      	movs	r2, #100	; 0x64
 80032c0:	21d8      	movs	r1, #216	; 0xd8
 80032c2:	200a      	movs	r0, #10
 80032c4:	f7fe f9c3 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80032c8:	4920      	ldr	r1, [pc, #128]	; (800334c <showControlPanel+0x1ac>)
 80032ca:	4819      	ldr	r0, [pc, #100]	; (8003330 <showControlPanel+0x190>)
 80032cc:	f00b fb32 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80032d0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	2300      	movs	r3, #0
 80032dc:	22da      	movs	r2, #218	; 0xda
 80032de:	2114      	movs	r1, #20
 80032e0:	4813      	ldr	r0, [pc, #76]	; (8003330 <showControlPanel+0x190>)
 80032e2:	f7fe fc1f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80032e6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	2305      	movs	r3, #5
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2314      	movs	r3, #20
 80032f2:	225a      	movs	r2, #90	; 0x5a
 80032f4:	21d8      	movs	r1, #216	; 0xd8
 80032f6:	2078      	movs	r0, #120	; 0x78
 80032f8:	f7fe f9a9 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80032fc:	4914      	ldr	r1, [pc, #80]	; (8003350 <showControlPanel+0x1b0>)
 80032fe:	480c      	ldr	r0, [pc, #48]	; (8003330 <showControlPanel+0x190>)
 8003300:	f00b fb18 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003304:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	22da      	movs	r2, #218	; 0xda
 8003312:	217e      	movs	r1, #126	; 0x7e
 8003314:	4806      	ldr	r0, [pc, #24]	; (8003330 <showControlPanel+0x190>)
 8003316:	f7fe fc05 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 800331a:	4803      	ldr	r0, [pc, #12]	; (8003328 <showControlPanel+0x188>)
 800331c:	f7fe f9e8 	bl	80016f0 <EF_SetFont>


}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08015678 	.word	0x08015678
 800332c:	080126b0 	.word	0x080126b0
 8003330:	200002c8 	.word	0x200002c8
 8003334:	080126c4 	.word	0x080126c4
 8003338:	080126d8 	.word	0x080126d8
 800333c:	080126ec 	.word	0x080126ec
 8003340:	08012700 	.word	0x08012700
 8003344:	08013700 	.word	0x08013700
 8003348:	08012714 	.word	0x08012714
 800334c:	08012720 	.word	0x08012720
 8003350:	08012728 	.word	0x08012728

08003354 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 800335a:	2016      	movs	r0, #22
 800335c:	f002 ff1c 	bl	8006198 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003360:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003364:	f7fe fdc8 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003368:	485b      	ldr	r0, [pc, #364]	; (80034d8 <showLightsControlPanel+0x184>)
 800336a:	f7fe f9c1 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800336e:	495b      	ldr	r1, [pc, #364]	; (80034dc <showLightsControlPanel+0x188>)
 8003370:	485b      	ldr	r0, [pc, #364]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003372:	f00b fadf 	bl	800e934 <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003376:	f24c 6318 	movw	r3, #50712	; 0xc618
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2300      	movs	r3, #0
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003384:	220a      	movs	r2, #10
 8003386:	2146      	movs	r1, #70	; 0x46
 8003388:	4855      	ldr	r0, [pc, #340]	; (80034e0 <showLightsControlPanel+0x18c>)
 800338a:	f7fe fbcb 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800338e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2329      	movs	r3, #41	; 0x29
 8003396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800339a:	2129      	movs	r1, #41	; 0x29
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fef7 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80033a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	232b      	movs	r3, #43	; 0x2b
 80033aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80033ae:	212b      	movs	r1, #43	; 0x2b
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fd feed 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 80033b6:	494b      	ldr	r1, [pc, #300]	; (80034e4 <showLightsControlPanel+0x190>)
 80033b8:	4849      	ldr	r0, [pc, #292]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033ba:	f00b fabb 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2300      	movs	r3, #0
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	223c      	movs	r2, #60	; 0x3c
 80033cc:	2114      	movs	r1, #20
 80033ce:	4844      	ldr	r0, [pc, #272]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033d0:	f7fe fba8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80033d4:	4944      	ldr	r1, [pc, #272]	; (80034e8 <showLightsControlPanel+0x194>)
 80033d6:	4842      	ldr	r0, [pc, #264]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033d8:	f00b faac 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80033dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033e0:	9301      	str	r3, [sp, #4]
 80033e2:	2301      	movs	r3, #1
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	2114      	movs	r1, #20
 80033ec:	483c      	ldr	r0, [pc, #240]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033ee:	f7fe fb99 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80033f2:	493e      	ldr	r1, [pc, #248]	; (80034ec <showLightsControlPanel+0x198>)
 80033f4:	483a      	ldr	r0, [pc, #232]	; (80034e0 <showLightsControlPanel+0x18c>)
 80033f6:	f00b fa9d 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80033fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	2278      	movs	r2, #120	; 0x78
 8003408:	2114      	movs	r1, #20
 800340a:	4835      	ldr	r0, [pc, #212]	; (80034e0 <showLightsControlPanel+0x18c>)
 800340c:	f7fe fb8a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 8003410:	4937      	ldr	r1, [pc, #220]	; (80034f0 <showLightsControlPanel+0x19c>)
 8003412:	4833      	ldr	r0, [pc, #204]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003414:	f00b fa8e 	bl	800e934 <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003418:	f24c 6318 	movw	r3, #50712	; 0xc618
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	2296      	movs	r2, #150	; 0x96
 8003426:	2114      	movs	r1, #20
 8003428:	482d      	ldr	r0, [pc, #180]	; (80034e0 <showLightsControlPanel+0x18c>)
 800342a:	f7fe fb7b 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800342e:	4831      	ldr	r0, [pc, #196]	; (80034f4 <showLightsControlPanel+0x1a0>)
 8003430:	f7fe f95e 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003434:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	2305      	movs	r3, #5
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	2314      	movs	r3, #20
 8003440:	225f      	movs	r2, #95	; 0x5f
 8003442:	21d8      	movs	r1, #216	; 0xd8
 8003444:	20dc      	movs	r0, #220	; 0xdc
 8003446:	f7fe f902 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 800344a:	492b      	ldr	r1, [pc, #172]	; (80034f8 <showLightsControlPanel+0x1a4>)
 800344c:	4824      	ldr	r0, [pc, #144]	; (80034e0 <showLightsControlPanel+0x18c>)
 800344e:	f00b fa71 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003452:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	22da      	movs	r2, #218	; 0xda
 8003460:	21e6      	movs	r1, #230	; 0xe6
 8003462:	481f      	ldr	r0, [pc, #124]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003464:	f7fe fb5e 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003468:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2305      	movs	r3, #5
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2314      	movs	r3, #20
 8003474:	225a      	movs	r2, #90	; 0x5a
 8003476:	21d8      	movs	r1, #216	; 0xd8
 8003478:	2078      	movs	r0, #120	; 0x78
 800347a:	f7fe f8e8 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 800347e:	491f      	ldr	r1, [pc, #124]	; (80034fc <showLightsControlPanel+0x1a8>)
 8003480:	4817      	ldr	r0, [pc, #92]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003482:	f00b fa57 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003486:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	22da      	movs	r2, #218	; 0xda
 8003494:	217e      	movs	r1, #126	; 0x7e
 8003496:	4812      	ldr	r0, [pc, #72]	; (80034e0 <showLightsControlPanel+0x18c>)
 8003498:	f7fe fb44 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800349c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2305      	movs	r3, #5
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2314      	movs	r3, #20
 80034a8:	2264      	movs	r2, #100	; 0x64
 80034aa:	21d8      	movs	r1, #216	; 0xd8
 80034ac:	200a      	movs	r0, #10
 80034ae:	f7fe f8ce 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 80034b2:	4913      	ldr	r1, [pc, #76]	; (8003500 <showLightsControlPanel+0x1ac>)
 80034b4:	480a      	ldr	r0, [pc, #40]	; (80034e0 <showLightsControlPanel+0x18c>)
 80034b6:	f00b fa3d 	bl	800e934 <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80034ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	22da      	movs	r2, #218	; 0xda
 80034c8:	210d      	movs	r1, #13
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <showLightsControlPanel+0x18c>)
 80034cc:	f7fe fb2a 	bl	8001b24 <EF_PutString>


}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	08015678 	.word	0x08015678
 80034dc:	08012734 	.word	0x08012734
 80034e0:	200002c8 	.word	0x200002c8
 80034e4:	08012744 	.word	0x08012744
 80034e8:	08012754 	.word	0x08012754
 80034ec:	08012764 	.word	0x08012764
 80034f0:	08012774 	.word	0x08012774
 80034f4:	08013700 	.word	0x08013700
 80034f8:	08012784 	.word	0x08012784
 80034fc:	0801278c 	.word	0x0801278c
 8003500:	08012798 	.word	0x08012798

08003504 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800350a:	f24c 6018 	movw	r0, #50712	; 0xc618
 800350e:	f7fe fcf3 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003512:	48a2      	ldr	r0, [pc, #648]	; (800379c <showClockSetPanel+0x298>)
 8003514:	f7fe f8ec 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 8003518:	f7ff f93c 	bl	8002794 <DS3231_GetHour>
 800351c:	4603      	mov	r3, r0
 800351e:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 8003520:	f7ff f944 	bl	80027ac <DS3231_GetMinute>
 8003524:	4603      	mov	r3, r0
 8003526:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003528:	f7ff f928 	bl	800277c <DS3231_GetDayOfWeek>
 800352c:	4603      	mov	r3, r0
 800352e:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003530:	499b      	ldr	r1, [pc, #620]	; (80037a0 <showClockSetPanel+0x29c>)
 8003532:	489c      	ldr	r0, [pc, #624]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003534:	f00b f9fe 	bl	800e934 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003538:	f24c 6318 	movw	r3, #50712	; 0xc618
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003546:	220a      	movs	r2, #10
 8003548:	212f      	movs	r1, #47	; 0x2f
 800354a:	4896      	ldr	r0, [pc, #600]	; (80037a4 <showClockSetPanel+0x2a0>)
 800354c:	f7fe faea 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003550:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2329      	movs	r3, #41	; 0x29
 8003558:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800355c:	2129      	movs	r1, #41	; 0x29
 800355e:	2000      	movs	r0, #0
 8003560:	f7fd fe16 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003564:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	232b      	movs	r3, #43	; 0x2b
 800356c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003570:	212b      	movs	r1, #43	; 0x2b
 8003572:	2000      	movs	r0, #0
 8003574:	f7fd fe0c 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	461a      	mov	r2, r3
 800357c:	498a      	ldr	r1, [pc, #552]	; (80037a8 <showClockSetPanel+0x2a4>)
 800357e:	4889      	ldr	r0, [pc, #548]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003580:	f00b f9d8 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003584:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2300      	movs	r3, #0
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	2246      	movs	r2, #70	; 0x46
 8003592:	2114      	movs	r1, #20
 8003594:	4883      	ldr	r0, [pc, #524]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003596:	f7fe fac5 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 800359a:	79bb      	ldrb	r3, [r7, #6]
 800359c:	461a      	mov	r2, r3
 800359e:	4983      	ldr	r1, [pc, #524]	; (80037ac <showClockSetPanel+0x2a8>)
 80035a0:	4880      	ldr	r0, [pc, #512]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035a2:	f00b f9c7 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035a6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	226e      	movs	r2, #110	; 0x6e
 80035b4:	2114      	movs	r1, #20
 80035b6:	487b      	ldr	r0, [pc, #492]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035b8:	f7fe fab4 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:   %d", CDayOfWeek);
 80035bc:	797b      	ldrb	r3, [r7, #5]
 80035be:	461a      	mov	r2, r3
 80035c0:	497b      	ldr	r1, [pc, #492]	; (80037b0 <showClockSetPanel+0x2ac>)
 80035c2:	4878      	ldr	r0, [pc, #480]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035c4:	f00b f9b6 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80035c8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2301      	movs	r3, #1
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2296      	movs	r2, #150	; 0x96
 80035d6:	2114      	movs	r1, #20
 80035d8:	4872      	ldr	r0, [pc, #456]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035da:	f7fe faa3 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 80035de:	4875      	ldr	r0, [pc, #468]	; (80037b4 <showClockSetPanel+0x2b0>)
 80035e0:	f7fe f886 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80035e4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2305      	movs	r3, #5
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2315      	movs	r3, #21
 80035f0:	221e      	movs	r2, #30
 80035f2:	214b      	movs	r1, #75	; 0x4b
 80035f4:	20f0      	movs	r0, #240	; 0xf0
 80035f6:	f7fe f82a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 80035fa:	496f      	ldr	r1, [pc, #444]	; (80037b8 <showClockSetPanel+0x2b4>)
 80035fc:	4869      	ldr	r0, [pc, #420]	; (80037a4 <showClockSetPanel+0x2a0>)
 80035fe:	f00b f999 	bl	800e934 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003602:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	224d      	movs	r2, #77	; 0x4d
 8003610:	21f3      	movs	r1, #243	; 0xf3
 8003612:	4864      	ldr	r0, [pc, #400]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003614:	f7fe fa86 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003618:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2305      	movs	r3, #5
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2315      	movs	r3, #21
 8003624:	221e      	movs	r2, #30
 8003626:	214b      	movs	r1, #75	; 0x4b
 8003628:	f44f 708c 	mov.w	r0, #280	; 0x118
 800362c:	f7fe f80f 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003630:	4962      	ldr	r1, [pc, #392]	; (80037bc <showClockSetPanel+0x2b8>)
 8003632:	485c      	ldr	r0, [pc, #368]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003634:	f00b f97e 	bl	800e934 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003638:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2300      	movs	r3, #0
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	224d      	movs	r2, #77	; 0x4d
 8003646:	f240 111d 	movw	r1, #285	; 0x11d
 800364a:	4856      	ldr	r0, [pc, #344]	; (80037a4 <showClockSetPanel+0x2a0>)
 800364c:	f7fe fa6a 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003650:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	2305      	movs	r3, #5
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	2315      	movs	r3, #21
 800365c:	221e      	movs	r2, #30
 800365e:	2173      	movs	r1, #115	; 0x73
 8003660:	20f0      	movs	r0, #240	; 0xf0
 8003662:	f7fd fff4 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003666:	4954      	ldr	r1, [pc, #336]	; (80037b8 <showClockSetPanel+0x2b4>)
 8003668:	484e      	ldr	r0, [pc, #312]	; (80037a4 <showClockSetPanel+0x2a0>)
 800366a:	f00b f963 	bl	800e934 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 800366e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	2300      	movs	r3, #0
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2300      	movs	r3, #0
 800367a:	2275      	movs	r2, #117	; 0x75
 800367c:	21f5      	movs	r1, #245	; 0xf5
 800367e:	4849      	ldr	r0, [pc, #292]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003680:	f7fe fa50 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003684:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2305      	movs	r3, #5
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2315      	movs	r3, #21
 8003690:	221e      	movs	r2, #30
 8003692:	2173      	movs	r1, #115	; 0x73
 8003694:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003698:	f7fd ffd9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 800369c:	4948      	ldr	r1, [pc, #288]	; (80037c0 <showClockSetPanel+0x2bc>)
 800369e:	4841      	ldr	r0, [pc, #260]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036a0:	f00b f948 	bl	800e934 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036a4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2300      	movs	r3, #0
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2275      	movs	r2, #117	; 0x75
 80036b2:	f240 111b 	movw	r1, #283	; 0x11b
 80036b6:	483b      	ldr	r0, [pc, #236]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036b8:	f7fe fa34 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 80036bc:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2305      	movs	r3, #5
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2315      	movs	r3, #21
 80036c8:	221e      	movs	r2, #30
 80036ca:	219b      	movs	r1, #155	; 0x9b
 80036cc:	20f0      	movs	r0, #240	; 0xf0
 80036ce:	f7fd ffbe 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 80036d2:	493c      	ldr	r1, [pc, #240]	; (80037c4 <showClockSetPanel+0x2c0>)
 80036d4:	4833      	ldr	r0, [pc, #204]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036d6:	f00b f92d 	bl	800e934 <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 80036da:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	2300      	movs	r3, #0
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	229d      	movs	r2, #157	; 0x9d
 80036e8:	21f3      	movs	r1, #243	; 0xf3
 80036ea:	482e      	ldr	r0, [pc, #184]	; (80037a4 <showClockSetPanel+0x2a0>)
 80036ec:	f7fe fa1a 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80036f0:	4830      	ldr	r0, [pc, #192]	; (80037b4 <showClockSetPanel+0x2b0>)
 80036f2:	f7fd fffd 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80036f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2305      	movs	r3, #5
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2314      	movs	r3, #20
 8003702:	225f      	movs	r2, #95	; 0x5f
 8003704:	21d8      	movs	r1, #216	; 0xd8
 8003706:	20dc      	movs	r0, #220	; 0xdc
 8003708:	f7fd ffa1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 800370c:	492e      	ldr	r1, [pc, #184]	; (80037c8 <showClockSetPanel+0x2c4>)
 800370e:	4825      	ldr	r0, [pc, #148]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003710:	f00b f910 	bl	800e934 <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003714:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22da      	movs	r2, #218	; 0xda
 8003722:	21e6      	movs	r1, #230	; 0xe6
 8003724:	481f      	ldr	r0, [pc, #124]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003726:	f7fe f9fd 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 800372a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2305      	movs	r3, #5
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2316      	movs	r3, #22
 8003736:	226e      	movs	r2, #110	; 0x6e
 8003738:	21be      	movs	r1, #190	; 0xbe
 800373a:	206e      	movs	r0, #110	; 0x6e
 800373c:	f7fd ff87 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003740:	4922      	ldr	r1, [pc, #136]	; (80037cc <showClockSetPanel+0x2c8>)
 8003742:	4818      	ldr	r0, [pc, #96]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003744:	f00b f8f6 	bl	800e934 <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X + 6), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003748:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22c1      	movs	r2, #193	; 0xc1
 8003756:	2174      	movs	r1, #116	; 0x74
 8003758:	4812      	ldr	r0, [pc, #72]	; (80037a4 <showClockSetPanel+0x2a0>)
 800375a:	f7fe f9e3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800375e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2305      	movs	r3, #5
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2314      	movs	r3, #20
 800376a:	2264      	movs	r2, #100	; 0x64
 800376c:	21d8      	movs	r1, #216	; 0xd8
 800376e:	200a      	movs	r0, #10
 8003770:	f7fd ff6d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003774:	4916      	ldr	r1, [pc, #88]	; (80037d0 <showClockSetPanel+0x2cc>)
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <showClockSetPanel+0x2a0>)
 8003778:	f00b f8dc 	bl	800e934 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800377c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	2300      	movs	r3, #0
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	22da      	movs	r2, #218	; 0xda
 800378a:	210d      	movs	r1, #13
 800378c:	4805      	ldr	r0, [pc, #20]	; (80037a4 <showClockSetPanel+0x2a0>)
 800378e:	f7fe f9c9 	bl	8001b24 <EF_PutString>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	08015678 	.word	0x08015678
 80037a0:	080127a4 	.word	0x080127a4
 80037a4:	200002c8 	.word	0x200002c8
 80037a8:	080127b4 	.word	0x080127b4
 80037ac:	080127c0 	.word	0x080127c0
 80037b0:	080127d0 	.word	0x080127d0
 80037b4:	08013700 	.word	0x08013700
 80037b8:	080127e4 	.word	0x080127e4
 80037bc:	080127e8 	.word	0x080127e8
 80037c0:	080127ec 	.word	0x080127ec
 80037c4:	080127f0 	.word	0x080127f0
 80037c8:	080127f4 	.word	0x080127f4
 80037cc:	080127fc 	.word	0x080127fc
 80037d0:	0801280c 	.word	0x0801280c

080037d4 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80037da:	f24c 6018 	movw	r0, #50712	; 0xc618
 80037de:	f7fe fb8b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80037e2:	487a      	ldr	r0, [pc, #488]	; (80039cc <showPreparedActivitiesPanel+0x1f8>)
 80037e4:	f7fd ff84 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 80037e8:	4979      	ldr	r1, [pc, #484]	; (80039d0 <showPreparedActivitiesPanel+0x1fc>)
 80037ea:	487a      	ldr	r0, [pc, #488]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80037ec:	f00b f8a2 	bl	800e934 <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80037f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	2300      	movs	r3, #0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	231f      	movs	r3, #31
 80037fc:	220a      	movs	r2, #10
 80037fe:	212f      	movs	r1, #47	; 0x2f
 8003800:	4874      	ldr	r0, [pc, #464]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003802:	f7fe f98f 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003806:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2329      	movs	r3, #41	; 0x29
 800380e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003812:	2129      	movs	r1, #41	; 0x29
 8003814:	2000      	movs	r0, #0
 8003816:	f7fd fcbb 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800381a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	232b      	movs	r3, #43	; 0x2b
 8003822:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003826:	212b      	movs	r1, #43	; 0x2b
 8003828:	2000      	movs	r0, #0
 800382a:	f7fd fcb1 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 800382e:	486a      	ldr	r0, [pc, #424]	; (80039d8 <showPreparedActivitiesPanel+0x204>)
 8003830:	f7fd ff5e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003834:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	2305      	movs	r3, #5
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2314      	movs	r3, #20
 8003840:	2264      	movs	r2, #100	; 0x64
 8003842:	21d8      	movs	r1, #216	; 0xd8
 8003844:	200a      	movs	r0, #10
 8003846:	f7fd ff02 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 800384a:	4964      	ldr	r1, [pc, #400]	; (80039dc <showPreparedActivitiesPanel+0x208>)
 800384c:	4861      	ldr	r0, [pc, #388]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800384e:	f00b f871 	bl	800e934 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003852:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	22da      	movs	r2, #218	; 0xda
 8003860:	210d      	movs	r1, #13
 8003862:	485c      	ldr	r0, [pc, #368]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003864:	f7fe f95e 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003868:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <showPreparedActivitiesPanel+0x20c>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d029      	beq.n	80038c4 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003870:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	230a      	movs	r3, #10
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2328      	movs	r3, #40	; 0x28
 800387c:	2278      	movs	r2, #120	; 0x78
 800387e:	213c      	movs	r1, #60	; 0x3c
 8003880:	2064      	movs	r0, #100	; 0x64
 8003882:	f7fd fee4 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003886:	4957      	ldr	r1, [pc, #348]	; (80039e4 <showPreparedActivitiesPanel+0x210>)
 8003888:	4852      	ldr	r0, [pc, #328]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800388a:	f00b f853 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800388e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	223e      	movs	r2, #62	; 0x3e
 800389c:	2177      	movs	r1, #119	; 0x77
 800389e:	484d      	ldr	r0, [pc, #308]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038a0:	f7fe f940 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 80038a4:	4950      	ldr	r1, [pc, #320]	; (80039e8 <showPreparedActivitiesPanel+0x214>)
 80038a6:	484b      	ldr	r0, [pc, #300]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038a8:	f00b f844 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80038ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	2300      	movs	r3, #0
 80038b8:	2250      	movs	r2, #80	; 0x50
 80038ba:	2193      	movs	r1, #147	; 0x93
 80038bc:	4845      	ldr	r0, [pc, #276]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038be:	f7fe f931 	bl	8001b24 <EF_PutString>
 80038c2:	e028      	b.n	8003916 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80038c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	230a      	movs	r3, #10
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	2328      	movs	r3, #40	; 0x28
 80038d0:	2278      	movs	r2, #120	; 0x78
 80038d2:	213c      	movs	r1, #60	; 0x3c
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	f7fd feba 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 80038da:	4942      	ldr	r1, [pc, #264]	; (80039e4 <showPreparedActivitiesPanel+0x210>)
 80038dc:	483d      	ldr	r0, [pc, #244]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038de:	f00b f829 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80038e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2300      	movs	r3, #0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	223e      	movs	r2, #62	; 0x3e
 80038f0:	2177      	movs	r1, #119	; 0x77
 80038f2:	4838      	ldr	r0, [pc, #224]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038f4:	f7fe f916 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80038f8:	493c      	ldr	r1, [pc, #240]	; (80039ec <showPreparedActivitiesPanel+0x218>)
 80038fa:	4836      	ldr	r0, [pc, #216]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80038fc:	f00b f81a 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003900:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	2300      	movs	r3, #0
 800390c:	2250      	movs	r2, #80	; 0x50
 800390e:	2193      	movs	r1, #147	; 0x93
 8003910:	4830      	ldr	r0, [pc, #192]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003912:	f7fe f907 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003916:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <showPreparedActivitiesPanel+0x20c>)
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d029      	beq.n	8003972 <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800391e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	230a      	movs	r3, #10
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2328      	movs	r3, #40	; 0x28
 800392a:	2278      	movs	r2, #120	; 0x78
 800392c:	2178      	movs	r1, #120	; 0x78
 800392e:	2064      	movs	r0, #100	; 0x64
 8003930:	f7fd fe8d 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003934:	492e      	ldr	r1, [pc, #184]	; (80039f0 <showPreparedActivitiesPanel+0x21c>)
 8003936:	4827      	ldr	r0, [pc, #156]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003938:	f00a fffc 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800393c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	227a      	movs	r2, #122	; 0x7a
 800394a:	2169      	movs	r1, #105	; 0x69
 800394c:	4821      	ldr	r0, [pc, #132]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800394e:	f7fe f8e9 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <showPreparedActivitiesPanel+0x214>)
 8003954:	481f      	ldr	r0, [pc, #124]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 8003956:	f00a ffed 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 800395a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	228c      	movs	r2, #140	; 0x8c
 8003968:	2193      	movs	r1, #147	; 0x93
 800396a:	481a      	ldr	r0, [pc, #104]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800396c:	f7fe f8da 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003970:	e028      	b.n	80039c4 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003972:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	230a      	movs	r3, #10
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2328      	movs	r3, #40	; 0x28
 800397e:	2278      	movs	r2, #120	; 0x78
 8003980:	2178      	movs	r1, #120	; 0x78
 8003982:	2064      	movs	r0, #100	; 0x64
 8003984:	f7fd fe63 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003988:	4919      	ldr	r1, [pc, #100]	; (80039f0 <showPreparedActivitiesPanel+0x21c>)
 800398a:	4812      	ldr	r0, [pc, #72]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 800398c:	f00a ffd2 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	227a      	movs	r2, #122	; 0x7a
 800399e:	2169      	movs	r1, #105	; 0x69
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039a2:	f7fe f8bf 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 80039a6:	4911      	ldr	r1, [pc, #68]	; (80039ec <showPreparedActivitiesPanel+0x218>)
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039aa:	f00a ffc3 	bl	800e934 <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80039ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	2300      	movs	r3, #0
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2300      	movs	r3, #0
 80039ba:	228c      	movs	r2, #140	; 0x8c
 80039bc:	2193      	movs	r1, #147	; 0x93
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <showPreparedActivitiesPanel+0x200>)
 80039c0:	f7fe f8b0 	bl	8001b24 <EF_PutString>
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	08015678 	.word	0x08015678
 80039d0:	08012814 	.word	0x08012814
 80039d4:	200002c8 	.word	0x200002c8
 80039d8:	08013700 	.word	0x08013700
 80039dc:	0801280c 	.word	0x0801280c
 80039e0:	2000027c 	.word	0x2000027c
 80039e4:	08012824 	.word	0x08012824
 80039e8:	08012830 	.word	0x08012830
 80039ec:	08012834 	.word	0x08012834
 80039f0:	08012838 	.word	0x08012838

080039f4 <showWSLedPanel>:
//
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showWSLedPanel()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039fa:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039fe:	f7fe fa7b 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003a02:	48c7      	ldr	r0, [pc, #796]	; (8003d20 <showWSLedPanel+0x32c>)
 8003a04:	f7fd fe74 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003a08:	49c6      	ldr	r1, [pc, #792]	; (8003d24 <showWSLedPanel+0x330>)
 8003a0a:	48c7      	ldr	r0, [pc, #796]	; (8003d28 <showWSLedPanel+0x334>)
 8003a0c:	f00a ff92 	bl	800e934 <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a10:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	231f      	movs	r3, #31
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	2146      	movs	r1, #70	; 0x46
 8003a20:	48c1      	ldr	r0, [pc, #772]	; (8003d28 <showWSLedPanel+0x334>)
 8003a22:	f7fe f87f 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a26:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2329      	movs	r3, #41	; 0x29
 8003a2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a32:	2129      	movs	r1, #41	; 0x29
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fd fbab 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a3a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	232b      	movs	r3, #43	; 0x2b
 8003a42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a46:	212b      	movs	r1, #43	; 0x2b
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fd fba1 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003a4e:	4bb7      	ldr	r3, [pc, #732]	; (8003d2c <showWSLedPanel+0x338>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	49b6      	ldr	r1, [pc, #728]	; (8003d30 <showWSLedPanel+0x33c>)
 8003a56:	48b4      	ldr	r0, [pc, #720]	; (8003d28 <showWSLedPanel+0x334>)
 8003a58:	f00a ff6c 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a5c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	223c      	movs	r2, #60	; 0x3c
 8003a6a:	2114      	movs	r1, #20
 8003a6c:	48ae      	ldr	r0, [pc, #696]	; (8003d28 <showWSLedPanel+0x334>)
 8003a6e:	f7fe f859 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003a72:	49b0      	ldr	r1, [pc, #704]	; (8003d34 <showWSLedPanel+0x340>)
 8003a74:	48ac      	ldr	r0, [pc, #688]	; (8003d28 <showWSLedPanel+0x334>)
 8003a76:	f00a ff5d 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a7a:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2300      	movs	r3, #0
 8003a86:	225a      	movs	r2, #90	; 0x5a
 8003a88:	2114      	movs	r1, #20
 8003a8a:	48a7      	ldr	r0, [pc, #668]	; (8003d28 <showWSLedPanel+0x334>)
 8003a8c:	f7fe f84a 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003a90:	49a9      	ldr	r1, [pc, #676]	; (8003d38 <showWSLedPanel+0x344>)
 8003a92:	48a5      	ldr	r0, [pc, #660]	; (8003d28 <showWSLedPanel+0x334>)
 8003a94:	f00a ff4e 	bl	800e934 <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a98:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2278      	movs	r2, #120	; 0x78
 8003aa6:	2114      	movs	r1, #20
 8003aa8:	489f      	ldr	r0, [pc, #636]	; (8003d28 <showWSLedPanel+0x334>)
 8003aaa:	f7fe f83b 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003aae:	48a3      	ldr	r0, [pc, #652]	; (8003d3c <showWSLedPanel+0x348>)
 8003ab0:	f7fd fe1e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ab4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	2305      	movs	r3, #5
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2315      	movs	r3, #21
 8003ac0:	221e      	movs	r2, #30
 8003ac2:	2141      	movs	r1, #65	; 0x41
 8003ac4:	20d9      	movs	r0, #217	; 0xd9
 8003ac6:	f7fd fdc2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003aca:	499d      	ldr	r1, [pc, #628]	; (8003d40 <showWSLedPanel+0x34c>)
 8003acc:	4896      	ldr	r0, [pc, #600]	; (8003d28 <showWSLedPanel+0x334>)
 8003ace:	f00a ff31 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ad2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	2243      	movs	r2, #67	; 0x43
 8003ae0:	21df      	movs	r1, #223	; 0xdf
 8003ae2:	4891      	ldr	r0, [pc, #580]	; (8003d28 <showWSLedPanel+0x334>)
 8003ae4:	f7fe f81e 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ae8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	2305      	movs	r3, #5
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2315      	movs	r3, #21
 8003af4:	221e      	movs	r2, #30
 8003af6:	2141      	movs	r1, #65	; 0x41
 8003af8:	20fc      	movs	r0, #252	; 0xfc
 8003afa:	f7fd fda8 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003afe:	4991      	ldr	r1, [pc, #580]	; (8003d44 <showWSLedPanel+0x350>)
 8003b00:	4889      	ldr	r0, [pc, #548]	; (8003d28 <showWSLedPanel+0x334>)
 8003b02:	f00a ff17 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	2243      	movs	r2, #67	; 0x43
 8003b14:	f240 1101 	movw	r1, #257	; 0x101
 8003b18:	4883      	ldr	r0, [pc, #524]	; (8003d28 <showWSLedPanel+0x334>)
 8003b1a:	f7fe f803 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003b1e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2305      	movs	r3, #5
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2315      	movs	r3, #21
 8003b2a:	221e      	movs	r2, #30
 8003b2c:	2141      	movs	r1, #65	; 0x41
 8003b2e:	f240 101f 	movw	r0, #287	; 0x11f
 8003b32:	f7fd fd8c 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8003b36:	4984      	ldr	r1, [pc, #528]	; (8003d48 <showWSLedPanel+0x354>)
 8003b38:	487b      	ldr	r0, [pc, #492]	; (8003d28 <showWSLedPanel+0x334>)
 8003b3a:	f00a fefb 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003b3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2243      	movs	r2, #67	; 0x43
 8003b4c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003b50:	4875      	ldr	r0, [pc, #468]	; (8003d28 <showWSLedPanel+0x334>)
 8003b52:	f7fd ffe7 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	2315      	movs	r3, #21
 8003b62:	2228      	movs	r2, #40	; 0x28
 8003b64:	215f      	movs	r1, #95	; 0x5f
 8003b66:	2096      	movs	r0, #150	; 0x96
 8003b68:	f7fd fd71 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003b6c:	4977      	ldr	r1, [pc, #476]	; (8003d4c <showWSLedPanel+0x358>)
 8003b6e:	486e      	ldr	r0, [pc, #440]	; (8003d28 <showWSLedPanel+0x334>)
 8003b70:	f00a fee0 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	2261      	movs	r2, #97	; 0x61
 8003b82:	219b      	movs	r1, #155	; 0x9b
 8003b84:	4868      	ldr	r0, [pc, #416]	; (8003d28 <showWSLedPanel+0x334>)
 8003b86:	f7fd ffcd 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2305      	movs	r3, #5
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2315      	movs	r3, #21
 8003b96:	2228      	movs	r2, #40	; 0x28
 8003b98:	215f      	movs	r1, #95	; 0x5f
 8003b9a:	20ca      	movs	r0, #202	; 0xca
 8003b9c:	f7fd fd57 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003ba0:	496b      	ldr	r1, [pc, #428]	; (8003d50 <showWSLedPanel+0x35c>)
 8003ba2:	4861      	ldr	r0, [pc, #388]	; (8003d28 <showWSLedPanel+0x334>)
 8003ba4:	f00a fec6 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2261      	movs	r2, #97	; 0x61
 8003bb6:	21d2      	movs	r1, #210	; 0xd2
 8003bb8:	485b      	ldr	r0, [pc, #364]	; (8003d28 <showWSLedPanel+0x334>)
 8003bba:	f7fd ffb3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8003bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2305      	movs	r3, #5
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2315      	movs	r3, #21
 8003bca:	2228      	movs	r2, #40	; 0x28
 8003bcc:	215f      	movs	r1, #95	; 0x5f
 8003bce:	20fe      	movs	r0, #254	; 0xfe
 8003bd0:	f7fd fd3d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003bd4:	495f      	ldr	r1, [pc, #380]	; (8003d54 <showWSLedPanel+0x360>)
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <showWSLedPanel+0x334>)
 8003bd8:	f00a feac 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8003bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2261      	movs	r2, #97	; 0x61
 8003bea:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003bee:	484e      	ldr	r0, [pc, #312]	; (8003d28 <showWSLedPanel+0x334>)
 8003bf0:	f7fd ff98 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003bf4:	231f      	movs	r3, #31
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2315      	movs	r3, #21
 8003bfe:	2228      	movs	r2, #40	; 0x28
 8003c00:	217d      	movs	r1, #125	; 0x7d
 8003c02:	2096      	movs	r0, #150	; 0x96
 8003c04:	f7fd fd23 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8003c08:	4950      	ldr	r1, [pc, #320]	; (8003d4c <showWSLedPanel+0x358>)
 8003c0a:	4847      	ldr	r0, [pc, #284]	; (8003d28 <showWSLedPanel+0x334>)
 8003c0c:	f00a fe92 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c10:	231f      	movs	r3, #31
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	227f      	movs	r2, #127	; 0x7f
 8003c1c:	219b      	movs	r1, #155	; 0x9b
 8003c1e:	4842      	ldr	r0, [pc, #264]	; (8003d28 <showWSLedPanel+0x334>)
 8003c20:	f7fd ff80 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003c24:	231f      	movs	r3, #31
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2305      	movs	r3, #5
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2315      	movs	r3, #21
 8003c2e:	2228      	movs	r2, #40	; 0x28
 8003c30:	217d      	movs	r1, #125	; 0x7d
 8003c32:	20ca      	movs	r0, #202	; 0xca
 8003c34:	f7fd fd0b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8003c38:	4945      	ldr	r1, [pc, #276]	; (8003d50 <showWSLedPanel+0x35c>)
 8003c3a:	483b      	ldr	r0, [pc, #236]	; (8003d28 <showWSLedPanel+0x334>)
 8003c3c:	f00a fe7a 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c40:	231f      	movs	r3, #31
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	2300      	movs	r3, #0
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	227f      	movs	r2, #127	; 0x7f
 8003c4c:	21d2      	movs	r1, #210	; 0xd2
 8003c4e:	4836      	ldr	r0, [pc, #216]	; (8003d28 <showWSLedPanel+0x334>)
 8003c50:	f7fd ff68 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8003c54:	231f      	movs	r3, #31
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	2305      	movs	r3, #5
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2315      	movs	r3, #21
 8003c5e:	2228      	movs	r2, #40	; 0x28
 8003c60:	217d      	movs	r1, #125	; 0x7d
 8003c62:	20fe      	movs	r0, #254	; 0xfe
 8003c64:	f7fd fcf3 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8003c68:	493a      	ldr	r1, [pc, #232]	; (8003d54 <showWSLedPanel+0x360>)
 8003c6a:	482f      	ldr	r0, [pc, #188]	; (8003d28 <showWSLedPanel+0x334>)
 8003c6c:	f00a fe62 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 8003c70:	231f      	movs	r3, #31
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	227f      	movs	r2, #127	; 0x7f
 8003c7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003c80:	4829      	ldr	r0, [pc, #164]	; (8003d28 <showWSLedPanel+0x334>)
 8003c82:	f7fd ff4f 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8003c86:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	2305      	movs	r3, #5
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	2315      	movs	r3, #21
 8003c92:	2250      	movs	r2, #80	; 0x50
 8003c94:	219c      	movs	r1, #156	; 0x9c
 8003c96:	2014      	movs	r0, #20
 8003c98:	f7fd fcd9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8003c9c:	492e      	ldr	r1, [pc, #184]	; (8003d58 <showWSLedPanel+0x364>)
 8003c9e:	4822      	ldr	r0, [pc, #136]	; (8003d28 <showWSLedPanel+0x334>)
 8003ca0:	f00a fe48 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8003ca4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	229e      	movs	r2, #158	; 0x9e
 8003cb2:	211c      	movs	r1, #28
 8003cb4:	481c      	ldr	r0, [pc, #112]	; (8003d28 <showWSLedPanel+0x334>)
 8003cb6:	f7fd ff35 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003cba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	2305      	movs	r3, #5
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	2315      	movs	r3, #21
 8003cc6:	2250      	movs	r2, #80	; 0x50
 8003cc8:	219c      	movs	r1, #156	; 0x9c
 8003cca:	2078      	movs	r0, #120	; 0x78
 8003ccc:	f7fd fcbf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 8003cd0:	4922      	ldr	r1, [pc, #136]	; (8003d5c <showWSLedPanel+0x368>)
 8003cd2:	4815      	ldr	r0, [pc, #84]	; (8003d28 <showWSLedPanel+0x334>)
 8003cd4:	f00a fe2e 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003cd8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	229e      	movs	r2, #158	; 0x9e
 8003ce6:	2187      	movs	r1, #135	; 0x87
 8003ce8:	480f      	ldr	r0, [pc, #60]	; (8003d28 <showWSLedPanel+0x334>)
 8003cea:	f7fd ff1b 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 8003cee:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	2305      	movs	r3, #5
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2315      	movs	r3, #21
 8003cfa:	2250      	movs	r2, #80	; 0x50
 8003cfc:	219c      	movs	r1, #156	; 0x9c
 8003cfe:	20dc      	movs	r0, #220	; 0xdc
 8003d00:	f7fd fca5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 8003d04:	4916      	ldr	r1, [pc, #88]	; (8003d60 <showWSLedPanel+0x36c>)
 8003d06:	4808      	ldr	r0, [pc, #32]	; (8003d28 <showWSLedPanel+0x334>)
 8003d08:	f00a fe14 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 8003d0c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	229e      	movs	r2, #158	; 0x9e
 8003d1a:	21e9      	movs	r1, #233	; 0xe9
 8003d1c:	e022      	b.n	8003d64 <showWSLedPanel+0x370>
 8003d1e:	bf00      	nop
 8003d20:	08015678 	.word	0x08015678
 8003d24:	08012844 	.word	0x08012844
 8003d28:	200002c8 	.word	0x200002c8
 8003d2c:	20000033 	.word	0x20000033
 8003d30:	08012850 	.word	0x08012850
 8003d34:	08012860 	.word	0x08012860
 8003d38:	08012868 	.word	0x08012868
 8003d3c:	08013700 	.word	0x08013700
 8003d40:	080127e4 	.word	0x080127e4
 8003d44:	080127ec 	.word	0x080127ec
 8003d48:	08012870 	.word	0x08012870
 8003d4c:	08012874 	.word	0x08012874
 8003d50:	08012878 	.word	0x08012878
 8003d54:	0801287c 	.word	0x0801287c
 8003d58:	08012880 	.word	0x08012880
 8003d5c:	08012834 	.word	0x08012834
 8003d60:	08012888 	.word	0x08012888
 8003d64:	482b      	ldr	r0, [pc, #172]	; (8003e14 <showWSLedPanel+0x420>)
 8003d66:	f7fd fedd 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003d6a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2305      	movs	r3, #5
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2315      	movs	r3, #21
 8003d76:	2250      	movs	r2, #80	; 0x50
 8003d78:	21bb      	movs	r1, #187	; 0xbb
 8003d7a:	2046      	movs	r0, #70	; 0x46
 8003d7c:	f7fd fc67 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <showWSLedPanel+0x424>)
 8003d82:	4824      	ldr	r0, [pc, #144]	; (8003e14 <showWSLedPanel+0x420>)
 8003d84:	f00a fdd6 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003d88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	22bd      	movs	r2, #189	; 0xbd
 8003d96:	214e      	movs	r1, #78	; 0x4e
 8003d98:	481e      	ldr	r0, [pc, #120]	; (8003e14 <showWSLedPanel+0x420>)
 8003d9a:	f7fd fec3 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8003d9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2305      	movs	r3, #5
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2315      	movs	r3, #21
 8003daa:	2250      	movs	r2, #80	; 0x50
 8003dac:	21bb      	movs	r1, #187	; 0xbb
 8003dae:	20aa      	movs	r0, #170	; 0xaa
 8003db0:	f7fd fc4d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8003db4:	4919      	ldr	r1, [pc, #100]	; (8003e1c <showWSLedPanel+0x428>)
 8003db6:	4817      	ldr	r0, [pc, #92]	; (8003e14 <showWSLedPanel+0x420>)
 8003db8:	f00a fdbc 	bl	800e934 <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8003dbc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	22bd      	movs	r2, #189	; 0xbd
 8003dca:	21b5      	movs	r1, #181	; 0xb5
 8003dcc:	4811      	ldr	r0, [pc, #68]	; (8003e14 <showWSLedPanel+0x420>)
 8003dce:	f7fd fea9 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003dd2:	4813      	ldr	r0, [pc, #76]	; (8003e20 <showWSLedPanel+0x42c>)
 8003dd4:	f7fd fc8c 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2305      	movs	r3, #5
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2314      	movs	r3, #20
 8003de4:	2264      	movs	r2, #100	; 0x64
 8003de6:	21d8      	movs	r1, #216	; 0xd8
 8003de8:	200a      	movs	r0, #10
 8003dea:	f7fd fc30 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <showWSLedPanel+0x430>)
 8003df0:	4808      	ldr	r0, [pc, #32]	; (8003e14 <showWSLedPanel+0x420>)
 8003df2:	f00a fd9f 	bl	800e934 <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003df6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	22da      	movs	r2, #218	; 0xda
 8003e04:	210d      	movs	r1, #13
 8003e06:	4803      	ldr	r0, [pc, #12]	; (8003e14 <showWSLedPanel+0x420>)
 8003e08:	f7fd fe8c 	bl	8001b24 <EF_PutString>


}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200002c8 	.word	0x200002c8
 8003e18:	08012890 	.word	0x08012890
 8003e1c:	08012898 	.word	0x08012898
 8003e20:	08013700 	.word	0x08013700
 8003e24:	0801280c 	.word	0x0801280c

08003e28 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8003e2e:	f7fe fcb1 	bl	8002794 <DS3231_GetHour>
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8003e36:	f7fe fcb9 	bl	80027ac <DS3231_GetMinute>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003e3e:	482a      	ldr	r0, [pc, #168]	; (8003ee8 <ChangeHourOnScreen+0xc0>)
 8003e40:	f7fd fc56 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <ChangeHourOnScreen+0xc4>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	79fa      	ldrb	r2, [r7, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d021      	beq.n	8003e92 <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <ChangeHourOnScreen+0xc8>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d11d      	bne.n	8003e92 <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d806      	bhi.n	8003e6a <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <ChangeHourOnScreen+0xcc>)
 8003e62:	4825      	ldr	r0, [pc, #148]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003e64:	f00a fd66 	bl	800e934 <siprintf>
 8003e68:	e005      	b.n	8003e76 <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4923      	ldr	r1, [pc, #140]	; (8003efc <ChangeHourOnScreen+0xd4>)
 8003e70:	4821      	ldr	r0, [pc, #132]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003e72:	f00a fd5f 	bl	800e934 <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003e76:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2232      	movs	r2, #50	; 0x32
 8003e84:	2161      	movs	r1, #97	; 0x61
 8003e86:	481c      	ldr	r0, [pc, #112]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003e88:	f7fd fe4c 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <ChangeHourOnScreen+0xc4>)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8003e92:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <ChangeHourOnScreen+0xd8>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	79ba      	ldrb	r2, [r7, #6]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d021      	beq.n	8003ee0 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <ChangeHourOnScreen+0xc8>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11d      	bne.n	8003ee0 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8003ea4:	79bb      	ldrb	r3, [r7, #6]
 8003ea6:	2b09      	cmp	r3, #9
 8003ea8:	d806      	bhi.n	8003eb8 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8003eaa:	79bb      	ldrb	r3, [r7, #6]
 8003eac:	461a      	mov	r2, r3
 8003eae:	4915      	ldr	r1, [pc, #84]	; (8003f04 <ChangeHourOnScreen+0xdc>)
 8003eb0:	4811      	ldr	r0, [pc, #68]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003eb2:	f00a fd3f 	bl	800e934 <siprintf>
 8003eb6:	e005      	b.n	8003ec4 <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8003eb8:	79bb      	ldrb	r3, [r7, #6]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4912      	ldr	r1, [pc, #72]	; (8003f08 <ChangeHourOnScreen+0xe0>)
 8003ebe:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003ec0:	f00a fd38 	bl	800e934 <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003ec4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2232      	movs	r2, #50	; 0x32
 8003ed2:	2196      	movs	r1, #150	; 0x96
 8003ed4:	4808      	ldr	r0, [pc, #32]	; (8003ef8 <ChangeHourOnScreen+0xd0>)
 8003ed6:	f7fd fe25 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <ChangeHourOnScreen+0xd8>)
 8003edc:	79bb      	ldrb	r3, [r7, #6]
 8003ede:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08015678 	.word	0x08015678
 8003eec:	2000024c 	.word	0x2000024c
 8003ef0:	2000025c 	.word	0x2000025c
 8003ef4:	080128a0 	.word	0x080128a0
 8003ef8:	200002c8 	.word	0x200002c8
 8003efc:	080128a8 	.word	0x080128a8
 8003f00:	2000024d 	.word	0x2000024d
 8003f04:	080128ac 	.word	0x080128ac
 8003f08:	080128b4 	.word	0x080128b4

08003f0c <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8003f20:	f7fe fe0c 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8003f24:	f7fe fe42 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8003f28:	e005      	b.n	8003f36 <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003f2a:	2018      	movs	r0, #24
 8003f2c:	f002 f934 	bl	8006198 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8003f30:	2019      	movs	r0, #25
 8003f32:	f002 f931 	bl	8006198 <SendComand>
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <predefinedActivityKarmienie+0x1a>
	{
		EEPROM_RelayStateRestore();
 8003f54:	f7fe fdf2 	bl	8002b3c <EEPROM_RelayStateRestore>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8003f58:	e005      	b.n	8003f66 <predefinedActivityKarmienie+0x26>
		SendComand(UCMD_RELAY_ALL_OFF);
 8003f5a:	2018      	movs	r0, #24
 8003f5c:	f002 f91c 	bl	8006198 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8003f60:	4803      	ldr	r0, [pc, #12]	; (8003f70 <predefinedActivityKarmienie+0x30>)
 8003f62:	f008 fa97 	bl	800c494 <HAL_TIM_Base_Start_IT>
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000714 	.word	0x20000714

08003f74 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8003f7a:	487d      	ldr	r0, [pc, #500]	; (8004170 <drawCurrentStateOfSwitches+0x1fc>)
 8003f7c:	f7fd fbb8 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8003f80:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <drawCurrentStateOfSwitches+0x200>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01c      	beq.n	8003fc2 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8003f88:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	2305      	movs	r3, #5
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2315      	movs	r3, #21
 8003f94:	2221      	movs	r2, #33	; 0x21
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003f9c:	f7fd fb57 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8003fa0:	4975      	ldr	r1, [pc, #468]	; (8004178 <drawCurrentStateOfSwitches+0x204>)
 8003fa2:	4876      	ldr	r0, [pc, #472]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8003fa4:	f00a fcc6 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8003fa8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2243      	movs	r2, #67	; 0x43
 8003fb6:	f240 1111 	movw	r1, #273	; 0x111
 8003fba:	4870      	ldr	r0, [pc, #448]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8003fbc:	f7fd fdb2 	bl	8001b24 <EF_PutString>
 8003fc0:	e01b      	b.n	8003ffa <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003fc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	2305      	movs	r3, #5
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2315      	movs	r3, #21
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	2141      	movs	r1, #65	; 0x41
 8003fd2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8003fd6:	f7fd fb3a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8003fda:	4969      	ldr	r1, [pc, #420]	; (8004180 <drawCurrentStateOfSwitches+0x20c>)
 8003fdc:	4867      	ldr	r0, [pc, #412]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8003fde:	f00a fca9 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003fe2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	2243      	movs	r2, #67	; 0x43
 8003ff0:	f240 1111 	movw	r1, #273	; 0x111
 8003ff4:	4861      	ldr	r0, [pc, #388]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8003ff6:	f7fd fd95 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8003ffa:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <drawCurrentStateOfSwitches+0x200>)
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01c      	beq.n	800403c <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004002:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	2305      	movs	r3, #5
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2315      	movs	r3, #21
 800400e:	2221      	movs	r2, #33	; 0x21
 8004010:	215f      	movs	r1, #95	; 0x5f
 8004012:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004016:	f7fd fb1a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800401a:	4957      	ldr	r1, [pc, #348]	; (8004178 <drawCurrentStateOfSwitches+0x204>)
 800401c:	4857      	ldr	r0, [pc, #348]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 800401e:	f00a fc89 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004022:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	2261      	movs	r2, #97	; 0x61
 8004030:	f240 1111 	movw	r1, #273	; 0x111
 8004034:	4851      	ldr	r0, [pc, #324]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004036:	f7fd fd75 	bl	8001b24 <EF_PutString>
 800403a:	e01b      	b.n	8004074 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800403c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	2305      	movs	r3, #5
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	2315      	movs	r3, #21
 8004048:	2221      	movs	r2, #33	; 0x21
 800404a:	215f      	movs	r1, #95	; 0x5f
 800404c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004050:	f7fd fafd 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004054:	494a      	ldr	r1, [pc, #296]	; (8004180 <drawCurrentStateOfSwitches+0x20c>)
 8004056:	4849      	ldr	r0, [pc, #292]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004058:	f00a fc6c 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800405c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2300      	movs	r3, #0
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	2261      	movs	r2, #97	; 0x61
 800406a:	f240 1111 	movw	r1, #273	; 0x111
 800406e:	4843      	ldr	r0, [pc, #268]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004070:	f7fd fd58 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004074:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <drawCurrentStateOfSwitches+0x200>)
 8004076:	789b      	ldrb	r3, [r3, #2]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01c      	beq.n	80040b6 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800407c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	2305      	movs	r3, #5
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	2315      	movs	r3, #21
 8004088:	2221      	movs	r2, #33	; 0x21
 800408a:	217d      	movs	r1, #125	; 0x7d
 800408c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004090:	f7fd fadd 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004094:	4938      	ldr	r1, [pc, #224]	; (8004178 <drawCurrentStateOfSwitches+0x204>)
 8004096:	4839      	ldr	r0, [pc, #228]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004098:	f00a fc4c 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 800409c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	2300      	movs	r3, #0
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	2300      	movs	r3, #0
 80040a8:	227f      	movs	r2, #127	; 0x7f
 80040aa:	f240 1111 	movw	r1, #273	; 0x111
 80040ae:	4833      	ldr	r0, [pc, #204]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 80040b0:	f7fd fd38 	bl	8001b24 <EF_PutString>
 80040b4:	e01b      	b.n	80040ee <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80040b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040ba:	9301      	str	r3, [sp, #4]
 80040bc:	2305      	movs	r3, #5
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2315      	movs	r3, #21
 80040c2:	2221      	movs	r2, #33	; 0x21
 80040c4:	217d      	movs	r1, #125	; 0x7d
 80040c6:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80040ca:	f7fd fac0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80040ce:	492c      	ldr	r1, [pc, #176]	; (8004180 <drawCurrentStateOfSwitches+0x20c>)
 80040d0:	482a      	ldr	r0, [pc, #168]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 80040d2:	f00a fc2f 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80040d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80040da:	9301      	str	r3, [sp, #4]
 80040dc:	2300      	movs	r3, #0
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	227f      	movs	r2, #127	; 0x7f
 80040e4:	f240 1111 	movw	r1, #273	; 0x111
 80040e8:	4824      	ldr	r0, [pc, #144]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 80040ea:	f7fd fd1b 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 80040ee:	4b21      	ldr	r3, [pc, #132]	; (8004174 <drawCurrentStateOfSwitches+0x200>)
 80040f0:	78db      	ldrb	r3, [r3, #3]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01c      	beq.n	8004130 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80040f6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2305      	movs	r3, #5
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2315      	movs	r3, #21
 8004102:	2221      	movs	r2, #33	; 0x21
 8004104:	219b      	movs	r1, #155	; 0x9b
 8004106:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800410a:	f7fd faa0 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800410e:	491a      	ldr	r1, [pc, #104]	; (8004178 <drawCurrentStateOfSwitches+0x204>)
 8004110:	481a      	ldr	r0, [pc, #104]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004112:	f00a fc0f 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004116:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800411a:	9301      	str	r3, [sp, #4]
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	229d      	movs	r2, #157	; 0x9d
 8004124:	f240 1111 	movw	r1, #273	; 0x111
 8004128:	4814      	ldr	r0, [pc, #80]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 800412a:	f7fd fcfb 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 800412e:	e01b      	b.n	8004168 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004130:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2305      	movs	r3, #5
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2315      	movs	r3, #21
 800413c:	2221      	movs	r2, #33	; 0x21
 800413e:	219b      	movs	r1, #155	; 0x9b
 8004140:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004144:	f7fd fa83 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004148:	490d      	ldr	r1, [pc, #52]	; (8004180 <drawCurrentStateOfSwitches+0x20c>)
 800414a:	480c      	ldr	r0, [pc, #48]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 800414c:	f00a fbf2 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004150:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	2300      	movs	r3, #0
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	229d      	movs	r2, #157	; 0x9d
 800415e:	f240 1111 	movw	r1, #273	; 0x111
 8004162:	4806      	ldr	r0, [pc, #24]	; (800417c <drawCurrentStateOfSwitches+0x208>)
 8004164:	f7fd fcde 	bl	8001b24 <EF_PutString>
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	08013700 	.word	0x08013700
 8004174:	20000274 	.word	0x20000274
 8004178:	08012830 	.word	0x08012830
 800417c:	200002c8 	.word	0x200002c8
 8004180:	08012834 	.word	0x08012834

08004184 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 800418a:	4875      	ldr	r0, [pc, #468]	; (8004360 <drawCurrentStateOfLights+0x1dc>)
 800418c:	f7fd fab0 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004190:	4b74      	ldr	r3, [pc, #464]	; (8004364 <drawCurrentStateOfLights+0x1e0>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01a      	beq.n	80041ce <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004198:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	2305      	movs	r3, #5
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2315      	movs	r3, #21
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	2141      	movs	r1, #65	; 0x41
 80041a8:	20c8      	movs	r0, #200	; 0xc8
 80041aa:	f7fd fa50 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80041ae:	496e      	ldr	r1, [pc, #440]	; (8004368 <drawCurrentStateOfLights+0x1e4>)
 80041b0:	486e      	ldr	r0, [pc, #440]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80041b2:	f00a fbbf 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	2243      	movs	r2, #67	; 0x43
 80041c4:	21cb      	movs	r1, #203	; 0xcb
 80041c6:	4869      	ldr	r0, [pc, #420]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80041c8:	f7fd fcac 	bl	8001b24 <EF_PutString>
 80041cc:	e019      	b.n	8004202 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80041ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2305      	movs	r3, #5
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2315      	movs	r3, #21
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	2141      	movs	r1, #65	; 0x41
 80041de:	20c8      	movs	r0, #200	; 0xc8
 80041e0:	f7fd fa35 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80041e4:	4962      	ldr	r1, [pc, #392]	; (8004370 <drawCurrentStateOfLights+0x1ec>)
 80041e6:	4861      	ldr	r0, [pc, #388]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80041e8:	f00a fba4 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	2300      	movs	r3, #0
 80041f8:	2243      	movs	r2, #67	; 0x43
 80041fa:	21cb      	movs	r1, #203	; 0xcb
 80041fc:	485b      	ldr	r0, [pc, #364]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80041fe:	f7fd fc91 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8004202:	4b58      	ldr	r3, [pc, #352]	; (8004364 <drawCurrentStateOfLights+0x1e0>)
 8004204:	785b      	ldrb	r3, [r3, #1]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800420a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2305      	movs	r3, #5
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2315      	movs	r3, #21
 8004216:	2221      	movs	r2, #33	; 0x21
 8004218:	215f      	movs	r1, #95	; 0x5f
 800421a:	20c8      	movs	r0, #200	; 0xc8
 800421c:	f7fd fa17 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004220:	4951      	ldr	r1, [pc, #324]	; (8004368 <drawCurrentStateOfLights+0x1e4>)
 8004222:	4852      	ldr	r0, [pc, #328]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 8004224:	f00a fb86 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	2261      	movs	r2, #97	; 0x61
 8004236:	21cb      	movs	r1, #203	; 0xcb
 8004238:	484c      	ldr	r0, [pc, #304]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 800423a:	f7fd fc73 	bl	8001b24 <EF_PutString>
 800423e:	e019      	b.n	8004274 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004240:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	2305      	movs	r3, #5
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2315      	movs	r3, #21
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	215f      	movs	r1, #95	; 0x5f
 8004250:	20c8      	movs	r0, #200	; 0xc8
 8004252:	f7fd f9fc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004256:	4946      	ldr	r1, [pc, #280]	; (8004370 <drawCurrentStateOfLights+0x1ec>)
 8004258:	4844      	ldr	r0, [pc, #272]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 800425a:	f00a fb6b 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800425e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	2300      	movs	r3, #0
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2300      	movs	r3, #0
 800426a:	2261      	movs	r2, #97	; 0x61
 800426c:	21cb      	movs	r1, #203	; 0xcb
 800426e:	483f      	ldr	r0, [pc, #252]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 8004270:	f7fd fc58 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <drawCurrentStateOfLights+0x1e0>)
 8004276:	789b      	ldrb	r3, [r3, #2]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800427c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	2305      	movs	r3, #5
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2315      	movs	r3, #21
 8004288:	2221      	movs	r2, #33	; 0x21
 800428a:	217d      	movs	r1, #125	; 0x7d
 800428c:	20c8      	movs	r0, #200	; 0xc8
 800428e:	f7fd f9de 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004292:	4935      	ldr	r1, [pc, #212]	; (8004368 <drawCurrentStateOfLights+0x1e4>)
 8004294:	4835      	ldr	r0, [pc, #212]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 8004296:	f00a fb4d 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800429a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	2300      	movs	r3, #0
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	227f      	movs	r2, #127	; 0x7f
 80042a8:	21cb      	movs	r1, #203	; 0xcb
 80042aa:	4830      	ldr	r0, [pc, #192]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80042ac:	f7fd fc3a 	bl	8001b24 <EF_PutString>
 80042b0:	e019      	b.n	80042e6 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80042b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2305      	movs	r3, #5
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2315      	movs	r3, #21
 80042be:	2221      	movs	r2, #33	; 0x21
 80042c0:	217d      	movs	r1, #125	; 0x7d
 80042c2:	20c8      	movs	r0, #200	; 0xc8
 80042c4:	f7fd f9c3 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80042c8:	4929      	ldr	r1, [pc, #164]	; (8004370 <drawCurrentStateOfLights+0x1ec>)
 80042ca:	4828      	ldr	r0, [pc, #160]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80042cc:	f00a fb32 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80042d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2300      	movs	r3, #0
 80042dc:	227f      	movs	r2, #127	; 0x7f
 80042de:	21cb      	movs	r1, #203	; 0xcb
 80042e0:	4822      	ldr	r0, [pc, #136]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 80042e2:	f7fd fc1f 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <drawCurrentStateOfLights+0x1e0>)
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01a      	beq.n	8004324 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80042ee:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	2305      	movs	r3, #5
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2315      	movs	r3, #21
 80042fa:	2221      	movs	r2, #33	; 0x21
 80042fc:	219b      	movs	r1, #155	; 0x9b
 80042fe:	20c8      	movs	r0, #200	; 0xc8
 8004300:	f7fd f9a5 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004304:	4918      	ldr	r1, [pc, #96]	; (8004368 <drawCurrentStateOfLights+0x1e4>)
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 8004308:	f00a fb14 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800430c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	2300      	movs	r3, #0
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	229d      	movs	r2, #157	; 0x9d
 800431a:	21cb      	movs	r1, #203	; 0xcb
 800431c:	4813      	ldr	r0, [pc, #76]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 800431e:	f7fd fc01 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004322:	e019      	b.n	8004358 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004324:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2305      	movs	r3, #5
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2315      	movs	r3, #21
 8004330:	2221      	movs	r2, #33	; 0x21
 8004332:	219b      	movs	r1, #155	; 0x9b
 8004334:	20c8      	movs	r0, #200	; 0xc8
 8004336:	f7fd f98a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800433a:	490d      	ldr	r1, [pc, #52]	; (8004370 <drawCurrentStateOfLights+0x1ec>)
 800433c:	480b      	ldr	r0, [pc, #44]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 800433e:	f00a faf9 	bl	800e934 <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004342:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2300      	movs	r3, #0
 800434e:	229d      	movs	r2, #157	; 0x9d
 8004350:	21cb      	movs	r1, #203	; 0xcb
 8004352:	4806      	ldr	r0, [pc, #24]	; (800436c <drawCurrentStateOfLights+0x1e8>)
 8004354:	f7fd fbe6 	bl	8001b24 <EF_PutString>
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	08013700 	.word	0x08013700
 8004364:	20000278 	.word	0x20000278
 8004368:	08012830 	.word	0x08012830
 800436c:	200002c8 	.word	0x200002c8
 8004370:	08012834 	.word	0x08012834

08004374 <initWait>:

//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 800437c:	bf00      	nop
 800437e:	f002 ff11 	bl	80071a4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <initWait+0x28>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d2f6      	bcs.n	800437e <initWait+0xa>
    {
    }
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000250 	.word	0x20000250

080043a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a6:	f107 0314 	add.w	r3, r7, #20
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a37      	ldr	r2, [pc, #220]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <MX_GPIO_Init+0x118>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6313      	str	r3, [r2, #48]	; 0x30
 80043fe:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <MX_GPIO_Init+0x118>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <MX_GPIO_Init+0x118>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <MX_GPIO_Init+0x118>)
 8004414:	f043 0302 	orr.w	r3, r3, #2
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <MX_GPIO_Init+0x118>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8004426:	2200      	movs	r2, #0
 8004428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800442c:	4823      	ldr	r0, [pc, #140]	; (80044bc <MX_GPIO_Init+0x11c>)
 800442e:	f003 fe35 	bl	800809c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8004432:	2200      	movs	r2, #0
 8004434:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004438:	4821      	ldr	r0, [pc, #132]	; (80044c0 <MX_GPIO_Init+0x120>)
 800443a:	f003 fe2f 	bl	800809c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800443e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004444:	2301      	movs	r3, #1
 8004446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	2300      	movs	r3, #0
 800444e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	4619      	mov	r1, r3
 8004456:	4819      	ldr	r0, [pc, #100]	; (80044bc <MX_GPIO_Init+0x11c>)
 8004458:	f003 fc84 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 800445c:	2310      	movs	r3, #16
 800445e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004460:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 800446a:	f107 0314 	add.w	r3, r7, #20
 800446e:	4619      	mov	r1, r3
 8004470:	4814      	ldr	r0, [pc, #80]	; (80044c4 <MX_GPIO_Init+0x124>)
 8004472:	f003 fc77 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8004476:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800447a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800447c:	2301      	movs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	480c      	ldr	r0, [pc, #48]	; (80044c0 <MX_GPIO_Init+0x120>)
 8004490:	f003 fc68 	bl	8007d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8004494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800449a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800449e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80044a4:	f107 0314 	add.w	r3, r7, #20
 80044a8:	4619      	mov	r1, r3
 80044aa:	4806      	ldr	r0, [pc, #24]	; (80044c4 <MX_GPIO_Init+0x124>)
 80044ac:	f003 fc5a 	bl	8007d64 <HAL_GPIO_Init>

}
 80044b0:	bf00      	nop
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40020800 	.word	0x40020800
 80044c0:	40020400 	.word	0x40020400
 80044c4:	40020000 	.word	0x40020000

080044c8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80044cc:	4b12      	ldr	r3, [pc, #72]	; (8004518 <MX_I2C1_Init+0x50>)
 80044ce:	4a13      	ldr	r2, [pc, #76]	; (800451c <MX_I2C1_Init+0x54>)
 80044d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <MX_I2C1_Init+0x50>)
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <MX_I2C1_Init+0x58>)
 80044d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044d8:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <MX_I2C1_Init+0x50>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <MX_I2C1_Init+0x50>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <MX_I2C1_Init+0x50>)
 80044e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <MX_I2C1_Init+0x50>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <MX_I2C1_Init+0x50>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044f8:	4b07      	ldr	r3, [pc, #28]	; (8004518 <MX_I2C1_Init+0x50>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <MX_I2C1_Init+0x50>)
 8004500:	2200      	movs	r2, #0
 8004502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004504:	4804      	ldr	r0, [pc, #16]	; (8004518 <MX_I2C1_Init+0x50>)
 8004506:	f003 fe15 	bl	8008134 <HAL_I2C_Init>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004510:	f000 fa7c 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}
 8004518:	2000039c 	.word	0x2000039c
 800451c:	40005400 	.word	0x40005400
 8004520:	00061a80 	.word	0x00061a80

08004524 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <MX_I2C3_Init+0x50>)
 800452a:	4a13      	ldr	r2, [pc, #76]	; (8004578 <MX_I2C3_Init+0x54>)
 800452c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <MX_I2C3_Init+0x50>)
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <MX_I2C3_Init+0x58>)
 8004532:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <MX_I2C3_Init+0x50>)
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <MX_I2C3_Init+0x50>)
 800453c:	2200      	movs	r2, #0
 800453e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <MX_I2C3_Init+0x50>)
 8004542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004546:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <MX_I2C3_Init+0x50>)
 800454a:	2200      	movs	r2, #0
 800454c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <MX_I2C3_Init+0x50>)
 8004550:	2200      	movs	r2, #0
 8004552:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <MX_I2C3_Init+0x50>)
 8004556:	2200      	movs	r2, #0
 8004558:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <MX_I2C3_Init+0x50>)
 800455c:	2200      	movs	r2, #0
 800455e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <MX_I2C3_Init+0x50>)
 8004562:	f003 fde7 	bl	8008134 <HAL_I2C_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800456c:	f000 fa4e 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200002e8 	.word	0x200002e8
 8004578:	40005c00 	.word	0x40005c00
 800457c:	000186a0 	.word	0x000186a0

08004580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004588:	f107 031c 	add.w	r3, r7, #28
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a74      	ldr	r2, [pc, #464]	; (8004770 <HAL_I2C_MspInit+0x1f0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f040 8090 	bne.w	80046c4 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4a71      	ldr	r2, [pc, #452]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045ae:	f043 0302 	orr.w	r3, r3, #2
 80045b2:	6313      	str	r3, [r2, #48]	; 0x30
 80045b4:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045c0:	23c0      	movs	r3, #192	; 0xc0
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045c4:	2312      	movs	r3, #18
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045cc:	2303      	movs	r3, #3
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045d0:	2304      	movs	r3, #4
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d4:	f107 031c 	add.w	r3, r7, #28
 80045d8:	4619      	mov	r1, r3
 80045da:	4867      	ldr	r0, [pc, #412]	; (8004778 <HAL_I2C_MspInit+0x1f8>)
 80045dc:	f003 fbc2 	bl	8007d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	4a62      	ldr	r2, [pc, #392]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045ee:	6413      	str	r3, [r2, #64]	; 0x40
 80045f0:	4b60      	ldr	r3, [pc, #384]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80045fc:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 80045fe:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_I2C_MspInit+0x200>)
 8004600:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004602:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004604:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004608:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800460a:	4b5c      	ldr	r3, [pc, #368]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004610:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004616:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800461c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800461e:	4b57      	ldr	r3, [pc, #348]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004620:	2200      	movs	r2, #0
 8004622:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004624:	4b55      	ldr	r3, [pc, #340]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004626:	2200      	movs	r2, #0
 8004628:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 800462c:	2200      	movs	r2, #0
 800462e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004630:	4b52      	ldr	r3, [pc, #328]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004632:	2200      	movs	r2, #0
 8004634:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004638:	2200      	movs	r2, #0
 800463a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800463c:	484f      	ldr	r0, [pc, #316]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 800463e:	f002 ff81 	bl	8007544 <HAL_DMA_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8004648:	f000 f9e0 	bl	8004a0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a4b      	ldr	r2, [pc, #300]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004650:	639a      	str	r2, [r3, #56]	; 0x38
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <HAL_I2C_MspInit+0x1fc>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8004658:	4b4a      	ldr	r3, [pc, #296]	; (8004784 <HAL_I2C_MspInit+0x204>)
 800465a:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_I2C_MspInit+0x208>)
 800465c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800465e:	4b49      	ldr	r3, [pc, #292]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800466a:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_I2C_MspInit+0x204>)
 800466c:	2200      	movs	r2, #0
 800466e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004670:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004676:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <HAL_I2C_MspInit+0x204>)
 800467a:	2200      	movs	r2, #0
 800467c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004680:	2200      	movs	r2, #0
 8004682:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004684:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <HAL_I2C_MspInit+0x204>)
 800468c:	2200      	movs	r2, #0
 800468e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004690:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004692:	2200      	movs	r2, #0
 8004694:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004696:	483b      	ldr	r0, [pc, #236]	; (8004784 <HAL_I2C_MspInit+0x204>)
 8004698:	f002 ff54 	bl	8007544 <HAL_DMA_Init>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80046a2:	f000 f9b3 	bl	8004a0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a36      	ldr	r2, [pc, #216]	; (8004784 <HAL_I2C_MspInit+0x204>)
 80046aa:	635a      	str	r2, [r3, #52]	; 0x34
 80046ac:	4a35      	ldr	r2, [pc, #212]	; (8004784 <HAL_I2C_MspInit+0x204>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	2100      	movs	r1, #0
 80046b6:	2020      	movs	r0, #32
 80046b8:	f002 fee3 	bl	8007482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80046bc:	2020      	movs	r0, #32
 80046be:	f002 fefc 	bl	80074ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80046c2:	e050      	b.n	8004766 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_I2C_MspInit+0x20c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d14b      	bne.n	8004766 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a27      	ldr	r2, [pc, #156]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	613b      	str	r3, [r7, #16]
 80046e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	4b21      	ldr	r3, [pc, #132]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4a20      	ldr	r2, [pc, #128]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046f4:	f043 0302 	orr.w	r3, r3, #2
 80046f8:	6313      	str	r3, [r2, #48]	; 0x30
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800470a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800470c:	2312      	movs	r3, #18
 800470e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004714:	2303      	movs	r3, #3
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004718:	2304      	movs	r3, #4
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800471c:	f107 031c 	add.w	r3, r7, #28
 8004720:	4619      	mov	r1, r3
 8004722:	481b      	ldr	r0, [pc, #108]	; (8004790 <HAL_I2C_MspInit+0x210>)
 8004724:	f003 fb1e 	bl	8007d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800472c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800472e:	2312      	movs	r3, #18
 8004730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004736:	2303      	movs	r3, #3
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800473a:	2309      	movs	r3, #9
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473e:	f107 031c 	add.w	r3, r7, #28
 8004742:	4619      	mov	r1, r3
 8004744:	480c      	ldr	r0, [pc, #48]	; (8004778 <HAL_I2C_MspInit+0x1f8>)
 8004746:	f003 fb0d 	bl	8007d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a08      	ldr	r2, [pc, #32]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 8004754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_I2C_MspInit+0x1f4>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
}
 8004766:	bf00      	nop
 8004768:	3730      	adds	r7, #48	; 0x30
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40005400 	.word	0x40005400
 8004774:	40023800 	.word	0x40023800
 8004778:	40020400 	.word	0x40020400
 800477c:	200003f0 	.word	0x200003f0
 8004780:	40026010 	.word	0x40026010
 8004784:	2000033c 	.word	0x2000033c
 8004788:	40026028 	.word	0x40026028
 800478c:	40005c00 	.word	0x40005c00
 8004790:	40020000 	.word	0x40020000

08004794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800479a:	f002 fc9d 	bl	80070d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800479e:	f000 f857 	bl	8004850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80047a2:	f7ff fdfd 	bl	80043a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80047a6:	f001 fed9 	bl	800655c <MX_SPI1_Init>
  MX_DMA_Init();
 80047aa:	f7fd fea3 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80047ae:	f002 fb93 	bl	8006ed8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80047b2:	f001 ff09 	bl	80065c8 <MX_SPI3_Init>
  MX_I2C1_Init();
 80047b6:	f7ff fe87 	bl	80044c8 <MX_I2C1_Init>
  MX_TIM11_Init();
 80047ba:	f002 f97f 	bl	8006abc <MX_TIM11_Init>
  MX_TIM10_Init();
 80047be:	f002 f959 	bl	8006a74 <MX_TIM10_Init>
  MX_I2C3_Init();
 80047c2:	f7ff feaf 	bl	8004524 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80047c6:	f000 f8ab 	bl	8004920 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 80047ca:	481b      	ldr	r0, [pc, #108]	; (8004838 <main+0xa4>)
 80047cc:	f007 fe62 	bl	800c494 <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 80047d0:	481a      	ldr	r0, [pc, #104]	; (800483c <main+0xa8>)
 80047d2:	f7fd fbef 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 80047d6:	491a      	ldr	r1, [pc, #104]	; (8004840 <main+0xac>)
 80047d8:	481a      	ldr	r0, [pc, #104]	; (8004844 <main+0xb0>)
 80047da:	f002 fb2e 	bl	8006e3a <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 80047de:	2117      	movs	r1, #23
 80047e0:	4819      	ldr	r0, [pc, #100]	; (8004848 <main+0xb4>)
 80047e2:	f7fd fe37 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <main+0xb8>)
 80047e8:	f7fd febc 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80047ec:	2001      	movs	r0, #1
 80047ee:	f7fd ff13 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7fd ff30 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 80047fc:	e001      	b.n	8004802 <main+0x6e>
  Error_Handler();
 80047fe:	f000 f905 	bl	8004a0c <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8004802:	1dfb      	adds	r3, r7, #7
 8004804:	2201      	movs	r2, #1
 8004806:	4619      	mov	r1, r3
 8004808:	2001      	movs	r0, #1
 800480a:	f7fe f871 	bl	80028f0 <eeprom_read>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f4      	bne.n	80047fe <main+0x6a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004814:	480b      	ldr	r0, [pc, #44]	; (8004844 <main+0xb0>)
 8004816:	f002 fac3 	bl	8006da0 <UARTDMA_IsDataReceivedReady>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8004820:	4808      	ldr	r0, [pc, #32]	; (8004844 <main+0xb0>)
 8004822:	f001 fa25 	bl	8005c70 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8004826:	4807      	ldr	r0, [pc, #28]	; (8004844 <main+0xb0>)
 8004828:	f002 facc 	bl	8006dc4 <UARTDMA_TransmitEvent>

	  //
	  // TOUCH
	  //
	  XPT2046_Task();
 800482c:	f7fd fd40 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  MenuTFT();
 8004830:	f000 f8f2 	bl	8004a18 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8004834:	e7ee      	b.n	8004814 <main+0x80>
 8004836:	bf00      	nop
 8004838:	2000075c 	.word	0x2000075c
 800483c:	200006bc 	.word	0x200006bc
 8004840:	20000864 	.word	0x20000864
 8004844:	20000450 	.word	0x20000450
 8004848:	20000664 	.word	0x20000664
 800484c:	2000039c 	.word	0x2000039c

08004850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b094      	sub	sp, #80	; 0x50
 8004854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004856:	f107 0320 	add.w	r3, r7, #32
 800485a:	2230      	movs	r2, #48	; 0x30
 800485c:	2100      	movs	r1, #0
 800485e:	4618      	mov	r0, r3
 8004860:	f009 f9e0 	bl	800dc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	4b27      	ldr	r3, [pc, #156]	; (8004918 <SystemClock_Config+0xc8>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <SystemClock_Config+0xc8>)
 800487e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004882:	6413      	str	r3, [r2, #64]	; 0x40
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <SystemClock_Config+0xc8>)
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004890:	2300      	movs	r3, #0
 8004892:	607b      	str	r3, [r7, #4]
 8004894:	4b21      	ldr	r3, [pc, #132]	; (800491c <SystemClock_Config+0xcc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <SystemClock_Config+0xcc>)
 800489a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <SystemClock_Config+0xcc>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048b6:	2302      	movs	r3, #2
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80048c0:	230c      	movs	r3, #12
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80048c4:	2360      	movs	r3, #96	; 0x60
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048c8:	2302      	movs	r3, #2
 80048ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048cc:	2304      	movs	r3, #4
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048d0:	f107 0320 	add.w	r3, r7, #32
 80048d4:	4618      	mov	r0, r3
 80048d6:	f006 fd31 	bl	800b33c <HAL_RCC_OscConfig>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80048e0:	f000 f894 	bl	8004a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048e4:	230f      	movs	r3, #15
 80048e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048e8:	2302      	movs	r3, #2
 80048ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	2103      	movs	r1, #3
 8004900:	4618      	mov	r0, r3
 8004902:	f006 ff93 	bl	800b82c <HAL_RCC_ClockConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800490c:	f000 f87e 	bl	8004a0c <Error_Handler>
  }
}
 8004910:	bf00      	nop
 8004912:	3750      	adds	r7, #80	; 0x50
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	40007000 	.word	0x40007000

08004920 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004924:	2200      	movs	r2, #0
 8004926:	2100      	movs	r1, #0
 8004928:	200a      	movs	r0, #10
 800492a:	f002 fdaa 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800492e:	200a      	movs	r0, #10
 8004930:	f002 fdc3 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004934:	2200      	movs	r2, #0
 8004936:	2100      	movs	r1, #0
 8004938:	2017      	movs	r0, #23
 800493a:	f002 fda2 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800493e:	2017      	movs	r0, #23
 8004940:	f002 fdbb 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004944:	2200      	movs	r2, #0
 8004946:	2100      	movs	r1, #0
 8004948:	201f      	movs	r0, #31
 800494a:	f002 fd9a 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800494e:	201f      	movs	r0, #31
 8004950:	f002 fdb3 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	2026      	movs	r0, #38	; 0x26
 800495a:	f002 fd92 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800495e:	2026      	movs	r0, #38	; 0x26
 8004960:	f002 fdab 	bl	80074ba <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004964:	2200      	movs	r2, #0
 8004966:	2100      	movs	r1, #0
 8004968:	2033      	movs	r0, #51	; 0x33
 800496a:	f002 fd8a 	bl	8007482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800496e:	2033      	movs	r0, #51	; 0x33
 8004970:	f002 fda3 	bl	80074ba <HAL_NVIC_EnableIRQ>
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d101      	bne.n	800498e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen();
 800498a:	f7ff fa4d 	bl	8003e28 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d117      	bne.n	80049c8 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S)
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d90d      	bls.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80049a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80049a6:	f003 fb92 	bl	80080ce <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80049aa:	2000      	movs	r0, #0
 80049ac:	f7ff fac8 	bl	8003f40 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80049b6:	480a      	ldr	r0, [pc, #40]	; (80049e0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80049b8:	f007 fdce 	bl	800c558 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80049c6:	701a      	strb	r2, [r3, #0]
	}
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40014800 	.word	0x40014800
 80049d4:	40014400 	.word	0x40014400
 80049d8:	20000254 	.word	0x20000254
 80049dc:	40020800 	.word	0x40020800
 80049e0:	20000714 	.word	0x20000714

080049e4 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f4:	d101      	bne.n	80049fa <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 80049f6:	f7fd fd21 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d101      	bne.n	8004a04 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8004a00:	f7fd fe6e 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a10:	b672      	cpsid	i
}
 8004a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <Error_Handler+0x8>
	...

08004a18 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	switch(State)
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <MenuTFT+0x114>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b07      	cmp	r3, #7
 8004a22:	f200 8080 	bhi.w	8004b26 <MenuTFT+0x10e>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <MenuTFT+0x14>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004a5f 	.word	0x08004a5f
 8004a34:	08004a93 	.word	0x08004a93
 8004a38:	08004ac3 	.word	0x08004ac3
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004aab 	.word	0x08004aab
 8004a44:	08004af9 	.word	0x08004af9
 8004a48:	08004b17 	.word	0x08004b17
	{
	case MENUTFT_INIT:
		system_init();
 8004a4c:	f7fe f8e6 	bl	8002c1c <system_init>
		State = MENUTFT_PARAMETERS;
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <MenuTFT+0x114>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <MenuTFT+0x118>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
		break;
 8004a5c:	e063      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <MenuTFT+0x118>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d112      	bne.n	8004a8c <MenuTFT+0x74>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <MenuTFT+0x11c>)
 8004a68:	edd3 7a00 	vldr	s15, [r3]
 8004a6c:	4b32      	ldr	r3, [pc, #200]	; (8004b38 <MenuTFT+0x120>)
 8004a6e:	ed93 7a00 	vldr	s14, [r3]
 8004a72:	eeb0 1a47 	vmov.f32	s2, s14
 8004a76:	2100      	movs	r1, #0
 8004a78:	2000      	movs	r0, #0
 8004a7a:	eddf 0a30 	vldr	s1, [pc, #192]	; 8004b3c <MenuTFT+0x124>
 8004a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a82:	f7fe fa43 	bl	8002f0c <showCurrentParameters>
			StateChangeFlag = 0;
 8004a86:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <MenuTFT+0x118>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8004a8c:	f000 f85c 	bl	8004b48 <TouchParametersActivity>
		break;
 8004a90:	e049      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8004a92:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <MenuTFT+0x118>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d104      	bne.n	8004aa4 <MenuTFT+0x8c>
		{
			showControlPanel();
 8004a9a:	f7fe fb81 	bl	80031a0 <showControlPanel>
			StateChangeFlag = 0;
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <MenuTFT+0x118>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8004aa4:	f000 f8b0 	bl	8004c08 <TouchSwitchActivity>
		break;
 8004aa8:	e03d      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <MenuTFT+0x118>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d104      	bne.n	8004abc <MenuTFT+0xa4>
		{
			showLightsControlPanel();
 8004ab2:	f7fe fc4f 	bl	8003354 <showLightsControlPanel>
			StateChangeFlag = 0;
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <MenuTFT+0x118>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8004abc:	f000 fa8c 	bl	8004fd8 <TouchLightsActivity>
		break;
 8004ac0:	e031      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <MenuTFT+0x118>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d107      	bne.n	8004ada <MenuTFT+0xc2>
		{
			showClockSetPanel();
 8004aca:	f7fe fd1b 	bl	8003504 <showClockSetPanel>
			ClockChangeFlag = 1;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <MenuTFT+0x128>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <MenuTFT+0x118>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8004ada:	f000 fc53 	bl	8005384 <TouchClockActivity>
		break;
 8004ade:	e022      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8004ae0:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <MenuTFT+0x118>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d104      	bne.n	8004af2 <MenuTFT+0xda>
		{
			showPreparedActivitiesPanel();
 8004ae8:	f7fe fe74 	bl	80037d4 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8004aec:	4b10      	ldr	r3, [pc, #64]	; (8004b30 <MenuTFT+0x118>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8004af2:	f000 fde9 	bl	80056c8 <TouchPredefinedActivityActivity>
		break;
 8004af6:	e016      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <MenuTFT+0x118>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <MenuTFT+0xf8>
		{
			showWSLedPanel();
 8004b00:	f7fe ff78 	bl	80039f4 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <MenuTFT+0x12c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <MenuTFT+0x118>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8004b10:	f000 ff02 	bl	8005918 <TouchWSLedActivity>
		break;
 8004b14:	e007      	b.n	8004b26 <MenuTFT+0x10e>
	case MENUTFT_SHEDULE:
		if(StateChangeFlag == 1) // make only one time
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <MenuTFT+0x118>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <MenuTFT+0x10c>
		{
			StateChangeFlag = 0;
 8004b1e:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <MenuTFT+0x118>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
		}

		break;
 8004b24:	bf00      	nop
	}
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000025c 	.word	0x2000025c
 8004b30:	20000255 	.word	0x20000255
 8004b34:	20000260 	.word	0x20000260
 8004b38:	20000268 	.word	0x20000268
 8004b3c:	00000000 	.word	0x00000000
 8004b40:	20000256 	.word	0x20000256
 8004b44:	20000257 	.word	0x20000257

08004b48 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004b4e:	f7fd fb9d 	bl	800228c <XPT2046_IsTouched>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d04c      	beq.n	8004bf2 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004b58:	f002 fb24 	bl	80071a4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <TouchParametersActivity+0xb4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b68:	d343      	bcc.n	8004bf2 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004b6a:	1d3a      	adds	r2, r7, #4
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fb4d 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	2b09      	cmp	r3, #9
 8004b7a:	d90f      	bls.n	8004b9c <TouchParametersActivity+0x54>
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	2b6e      	cmp	r3, #110	; 0x6e
 8004b80:	d80c      	bhi.n	8004b9c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004b82:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004b84:	2bd7      	cmp	r3, #215	; 0xd7
 8004b86:	d909      	bls.n	8004b9c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004b88:	88bb      	ldrh	r3, [r7, #4]
 8004b8a:	2bec      	cmp	r3, #236	; 0xec
 8004b8c:	d806      	bhi.n	8004b9c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <TouchParametersActivity+0xb8>)
 8004b90:	2205      	movs	r2, #5
 8004b92:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004b94:	4b1b      	ldr	r3, [pc, #108]	; (8004c04 <TouchParametersActivity+0xbc>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e025      	b.n	8004be8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2bdb      	cmp	r3, #219	; 0xdb
 8004ba0:	d910      	bls.n	8004bc4 <TouchParametersActivity+0x7c>
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004ba8:	d20c      	bcs.n	8004bc4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004baa:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004bac:	2bd7      	cmp	r3, #215	; 0xd7
 8004bae:	d909      	bls.n	8004bc4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004bb0:	88bb      	ldrh	r3, [r7, #4]
 8004bb2:	2bec      	cmp	r3, #236	; 0xec
 8004bb4:	d806      	bhi.n	8004bc4 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <TouchParametersActivity+0xb8>)
 8004bb8:	2202      	movs	r2, #2
 8004bba:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <TouchParametersActivity+0xbc>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e011      	b.n	8004be8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	2b77      	cmp	r3, #119	; 0x77
 8004bc8:	d90e      	bls.n	8004be8 <TouchParametersActivity+0xa0>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2bd2      	cmp	r3, #210	; 0xd2
 8004bce:	d80b      	bhi.n	8004be8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004bd0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004bd2:	2bd7      	cmp	r3, #215	; 0xd7
 8004bd4:	d908      	bls.n	8004be8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004bd6:	88bb      	ldrh	r3, [r7, #4]
 8004bd8:	2bec      	cmp	r3, #236	; 0xec
 8004bda:	d805      	bhi.n	8004be8 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <TouchParametersActivity+0xb8>)
 8004bde:	2203      	movs	r2, #3
 8004be0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <TouchParametersActivity+0xbc>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8004be8:	f002 fadc 	bl	80071a4 <HAL_GetTick>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <TouchParametersActivity+0xb4>)
 8004bf0:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000258 	.word	0x20000258
 8004c00:	2000025c 	.word	0x2000025c
 8004c04:	20000255 	.word	0x20000255

08004c08 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004c0e:	f7fd fb3d 	bl	800228c <XPT2046_IsTouched>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 81ce 	beq.w	8004fb6 <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004c1a:	f002 fac3 	bl	80071a4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4bad      	ldr	r3, [pc, #692]	; (8004ed8 <TouchSwitchActivity+0x2d0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2a:	f0c0 81c4 	bcc.w	8004fb6 <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004c2e:	1d3a      	adds	r2, r7, #4
 8004c30:	1dbb      	adds	r3, r7, #6
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd faeb 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	2b09      	cmp	r3, #9
 8004c3e:	d90f      	bls.n	8004c60 <TouchSwitchActivity+0x58>
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	2b6e      	cmp	r3, #110	; 0x6e
 8004c44:	d80c      	bhi.n	8004c60 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004c46:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8004c48:	2bd7      	cmp	r3, #215	; 0xd7
 8004c4a:	d909      	bls.n	8004c60 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8004c4c:	88bb      	ldrh	r3, [r7, #4]
 8004c4e:	2bec      	cmp	r3, #236	; 0xec
 8004c50:	d806      	bhi.n	8004c60 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 8004c52:	4ba2      	ldr	r3, [pc, #648]	; (8004edc <TouchSwitchActivity+0x2d4>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004c58:	4ba1      	ldr	r3, [pc, #644]	; (8004ee0 <TouchSwitchActivity+0x2d8>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e1a5      	b.n	8004fac <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	2bdb      	cmp	r3, #219	; 0xdb
 8004c64:	d910      	bls.n	8004c88 <TouchSwitchActivity+0x80>
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004c6c:	d20c      	bcs.n	8004c88 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004c6e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8004c70:	2bd7      	cmp	r3, #215	; 0xd7
 8004c72:	d909      	bls.n	8004c88 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8004c74:	88bb      	ldrh	r3, [r7, #4]
 8004c76:	2bec      	cmp	r3, #236	; 0xec
 8004c78:	d806      	bhi.n	8004c88 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8004c7a:	4b98      	ldr	r3, [pc, #608]	; (8004edc <TouchSwitchActivity+0x2d4>)
 8004c7c:	2205      	movs	r2, #5
 8004c7e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004c80:	4b97      	ldr	r3, [pc, #604]	; (8004ee0 <TouchSwitchActivity+0x2d8>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e191      	b.n	8004fac <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	2b77      	cmp	r3, #119	; 0x77
 8004c8c:	d90f      	bls.n	8004cae <TouchSwitchActivity+0xa6>
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	2bd2      	cmp	r3, #210	; 0xd2
 8004c92:	d80c      	bhi.n	8004cae <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004c94:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8004c96:	2bd7      	cmp	r3, #215	; 0xd7
 8004c98:	d909      	bls.n	8004cae <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	2bec      	cmp	r3, #236	; 0xec
 8004c9e:	d806      	bhi.n	8004cae <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8004ca0:	4b8e      	ldr	r3, [pc, #568]	; (8004edc <TouchSwitchActivity+0x2d4>)
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8004ca6:	4b8e      	ldr	r3, [pc, #568]	; (8004ee0 <TouchSwitchActivity+0x2d8>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e17e      	b.n	8004fac <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004cb4:	f0c0 817a 	bcc.w	8004fac <TouchSwitchActivity+0x3a4>
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8004cbe:	f080 8175 	bcs.w	8004fac <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8004cc2:	4888      	ldr	r0, [pc, #544]	; (8004ee4 <TouchSwitchActivity+0x2dc>)
 8004cc4:	f7fc fd14 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8004cc8:	88bb      	ldrh	r3, [r7, #4]
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d954      	bls.n	8004d78 <TouchSwitchActivity+0x170>
 8004cce:	88bb      	ldrh	r3, [r7, #4]
 8004cd0:	2b56      	cmp	r3, #86	; 0x56
 8004cd2:	d851      	bhi.n	8004d78 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004cd4:	4b84      	ldr	r3, [pc, #528]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d026      	beq.n	8004d2a <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8004cdc:	2006      	movs	r0, #6
 8004cde:	f001 fa5b 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004ce2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	2305      	movs	r3, #5
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2315      	movs	r3, #21
 8004cee:	2221      	movs	r2, #33	; 0x21
 8004cf0:	2141      	movs	r1, #65	; 0x41
 8004cf2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004cf6:	f7fc fcaa 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004cfa:	497c      	ldr	r1, [pc, #496]	; (8004eec <TouchSwitchActivity+0x2e4>)
 8004cfc:	487c      	ldr	r0, [pc, #496]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004cfe:	f009 fe19 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	2243      	movs	r2, #67	; 0x43
 8004d10:	f240 1111 	movw	r1, #273	; 0x111
 8004d14:	4876      	ldr	r0, [pc, #472]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004d16:	f7fc ff05 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8004d1a:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 8004d20:	2100      	movs	r1, #0
 8004d22:	2001      	movs	r0, #1
 8004d24:	f7fd fe2a 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004d28:	e13d      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8004d2a:	2005      	movs	r0, #5
 8004d2c:	f001 fa34 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004d30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	2305      	movs	r3, #5
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2315      	movs	r3, #21
 8004d3c:	2221      	movs	r2, #33	; 0x21
 8004d3e:	2141      	movs	r1, #65	; 0x41
 8004d40:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004d44:	f7fc fc83 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004d48:	496a      	ldr	r1, [pc, #424]	; (8004ef4 <TouchSwitchActivity+0x2ec>)
 8004d4a:	4869      	ldr	r0, [pc, #420]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004d4c:	f009 fdf2 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004d50:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	2300      	movs	r3, #0
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2243      	movs	r2, #67	; 0x43
 8004d5e:	f240 1111 	movw	r1, #273	; 0x111
 8004d62:	4863      	ldr	r0, [pc, #396]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004d64:	f7fc fede 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8004d68:	4b5f      	ldr	r3, [pc, #380]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 8004d6e:	2101      	movs	r1, #1
 8004d70:	2001      	movs	r0, #1
 8004d72:	f7fd fe03 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8004d76:	e116      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8004d78:	88bb      	ldrh	r3, [r7, #4]
 8004d7a:	2b5e      	cmp	r3, #94	; 0x5e
 8004d7c:	d954      	bls.n	8004e28 <TouchSwitchActivity+0x220>
 8004d7e:	88bb      	ldrh	r3, [r7, #4]
 8004d80:	2b74      	cmp	r3, #116	; 0x74
 8004d82:	d851      	bhi.n	8004e28 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004d84:	4b58      	ldr	r3, [pc, #352]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004d86:	785b      	ldrb	r3, [r3, #1]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d026      	beq.n	8004dda <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8004d8c:	2008      	movs	r0, #8
 8004d8e:	f001 fa03 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	2305      	movs	r3, #5
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2315      	movs	r3, #21
 8004d9e:	2221      	movs	r2, #33	; 0x21
 8004da0:	215f      	movs	r1, #95	; 0x5f
 8004da2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004da6:	f7fc fc52 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004daa:	4950      	ldr	r1, [pc, #320]	; (8004eec <TouchSwitchActivity+0x2e4>)
 8004dac:	4850      	ldr	r0, [pc, #320]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004dae:	f009 fdc1 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004db2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	2300      	movs	r3, #0
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2261      	movs	r2, #97	; 0x61
 8004dc0:	f240 1111 	movw	r1, #273	; 0x111
 8004dc4:	484a      	ldr	r0, [pc, #296]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004dc6:	f7fc fead 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f7fd fdd2 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004dd8:	e0e5      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8004dda:	2007      	movs	r0, #7
 8004ddc:	f001 f9dc 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004de0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	2305      	movs	r3, #5
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2315      	movs	r3, #21
 8004dec:	2221      	movs	r2, #33	; 0x21
 8004dee:	215f      	movs	r1, #95	; 0x5f
 8004df0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004df4:	f7fc fc2b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004df8:	493e      	ldr	r1, [pc, #248]	; (8004ef4 <TouchSwitchActivity+0x2ec>)
 8004dfa:	483d      	ldr	r0, [pc, #244]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004dfc:	f009 fd9a 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e00:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e04:	9301      	str	r3, [sp, #4]
 8004e06:	2300      	movs	r3, #0
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2261      	movs	r2, #97	; 0x61
 8004e0e:	f240 1111 	movw	r1, #273	; 0x111
 8004e12:	4837      	ldr	r0, [pc, #220]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004e14:	f7fc fe86 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8004e1e:	2101      	movs	r1, #1
 8004e20:	2002      	movs	r0, #2
 8004e22:	f7fd fdab 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8004e26:	e0be      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8004e28:	88bb      	ldrh	r3, [r7, #4]
 8004e2a:	2b7c      	cmp	r3, #124	; 0x7c
 8004e2c:	d964      	bls.n	8004ef8 <TouchSwitchActivity+0x2f0>
 8004e2e:	88bb      	ldrh	r3, [r7, #4]
 8004e30:	2b92      	cmp	r3, #146	; 0x92
 8004e32:	d861      	bhi.n	8004ef8 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004e34:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d026      	beq.n	8004e8a <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8004e3c:	200a      	movs	r0, #10
 8004e3e:	f001 f9ab 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	2305      	movs	r3, #5
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2315      	movs	r3, #21
 8004e4e:	2221      	movs	r2, #33	; 0x21
 8004e50:	217d      	movs	r1, #125	; 0x7d
 8004e52:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e56:	f7fc fbfa 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004e5a:	4924      	ldr	r1, [pc, #144]	; (8004eec <TouchSwitchActivity+0x2e4>)
 8004e5c:	4824      	ldr	r0, [pc, #144]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004e5e:	f009 fd69 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	227f      	movs	r2, #127	; 0x7f
 8004e70:	f240 1111 	movw	r1, #273	; 0x111
 8004e74:	481e      	ldr	r0, [pc, #120]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004e76:	f7fc fe55 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8004e80:	2100      	movs	r1, #0
 8004e82:	2003      	movs	r0, #3
 8004e84:	f7fd fd7a 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004e88:	e08d      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8004e8a:	2009      	movs	r0, #9
 8004e8c:	f001 f984 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e90:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	2305      	movs	r3, #5
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2315      	movs	r3, #21
 8004e9c:	2221      	movs	r2, #33	; 0x21
 8004e9e:	217d      	movs	r1, #125	; 0x7d
 8004ea0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ea4:	f7fc fbd3 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004ea8:	4912      	ldr	r1, [pc, #72]	; (8004ef4 <TouchSwitchActivity+0x2ec>)
 8004eaa:	4811      	ldr	r0, [pc, #68]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004eac:	f009 fd42 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004eb0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	227f      	movs	r2, #127	; 0x7f
 8004ebe:	f240 1111 	movw	r1, #273	; 0x111
 8004ec2:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <TouchSwitchActivity+0x2e8>)
 8004ec4:	f7fc fe2e 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <TouchSwitchActivity+0x2e0>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8004ece:	2101      	movs	r1, #1
 8004ed0:	2003      	movs	r0, #3
 8004ed2:	f7fd fd53 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8004ed6:	e066      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
 8004ed8:	20000258 	.word	0x20000258
 8004edc:	2000025c 	.word	0x2000025c
 8004ee0:	20000255 	.word	0x20000255
 8004ee4:	08013700 	.word	0x08013700
 8004ee8:	20000274 	.word	0x20000274
 8004eec:	080128bc 	.word	0x080128bc
 8004ef0:	200002c8 	.word	0x200002c8
 8004ef4:	080128c0 	.word	0x080128c0
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8004ef8:	88bb      	ldrh	r3, [r7, #4]
 8004efa:	2b9a      	cmp	r3, #154	; 0x9a
 8004efc:	d953      	bls.n	8004fa6 <TouchSwitchActivity+0x39e>
 8004efe:	88bb      	ldrh	r3, [r7, #4]
 8004f00:	2bb0      	cmp	r3, #176	; 0xb0
 8004f02:	d850      	bhi.n	8004fa6 <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <TouchSwitchActivity+0x3b8>)
 8004f06:	78db      	ldrb	r3, [r3, #3]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d026      	beq.n	8004f5a <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8004f0c:	200c      	movs	r0, #12
 8004f0e:	f001 f943 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f12:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	2305      	movs	r3, #5
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2315      	movs	r3, #21
 8004f1e:	2221      	movs	r2, #33	; 0x21
 8004f20:	219b      	movs	r1, #155	; 0x9b
 8004f22:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f26:	f7fc fb92 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8004f2a:	4926      	ldr	r1, [pc, #152]	; (8004fc4 <TouchSwitchActivity+0x3bc>)
 8004f2c:	4826      	ldr	r0, [pc, #152]	; (8004fc8 <TouchSwitchActivity+0x3c0>)
 8004f2e:	f009 fd01 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	229d      	movs	r2, #157	; 0x9d
 8004f40:	f240 1111 	movw	r1, #273	; 0x111
 8004f44:	4820      	ldr	r0, [pc, #128]	; (8004fc8 <TouchSwitchActivity+0x3c0>)
 8004f46:	f7fc fded 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 8004f4a:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <TouchSwitchActivity+0x3b8>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8004f50:	2100      	movs	r1, #0
 8004f52:	2004      	movs	r0, #4
 8004f54:	f7fd fd12 	bl	800297c <EEPROM_RelayStateUpdate>
 8004f58:	e025      	b.n	8004fa6 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 8004f5a:	200b      	movs	r0, #11
 8004f5c:	f001 f91c 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f60:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f64:	9301      	str	r3, [sp, #4]
 8004f66:	2305      	movs	r3, #5
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2315      	movs	r3, #21
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	219b      	movs	r1, #155	; 0x9b
 8004f70:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f74:	f7fc fb6b 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8004f78:	4914      	ldr	r1, [pc, #80]	; (8004fcc <TouchSwitchActivity+0x3c4>)
 8004f7a:	4813      	ldr	r0, [pc, #76]	; (8004fc8 <TouchSwitchActivity+0x3c0>)
 8004f7c:	f009 fcda 	bl	800e934 <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f80:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	2300      	movs	r3, #0
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	229d      	movs	r2, #157	; 0x9d
 8004f8e:	f240 1111 	movw	r1, #273	; 0x111
 8004f92:	480d      	ldr	r0, [pc, #52]	; (8004fc8 <TouchSwitchActivity+0x3c0>)
 8004f94:	f7fc fdc6 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <TouchSwitchActivity+0x3b8>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	2004      	movs	r0, #4
 8004fa2:	f7fd fceb 	bl	800297c <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8004fa6:	480a      	ldr	r0, [pc, #40]	; (8004fd0 <TouchSwitchActivity+0x3c8>)
 8004fa8:	f7fc fba2 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 8004fac:	f002 f8fa 	bl	80071a4 <HAL_GetTick>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <TouchSwitchActivity+0x3cc>)
 8004fb4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000274 	.word	0x20000274
 8004fc4:	080128bc 	.word	0x080128bc
 8004fc8:	200002c8 	.word	0x200002c8
 8004fcc:	080128c0 	.word	0x080128c0
 8004fd0:	08015678 	.word	0x08015678
 8004fd4:	20000258 	.word	0x20000258

08004fd8 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8004fde:	f7fd f955 	bl	800228c <XPT2046_IsTouched>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 81bc 	beq.w	8005362 <TouchLightsActivity+0x38a>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8004fea:	f002 f8db 	bl	80071a4 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4ba6      	ldr	r3, [pc, #664]	; (800528c <TouchLightsActivity+0x2b4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ffa:	f0c0 81b2 	bcc.w	8005362 <TouchLightsActivity+0x38a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8004ffe:	1d3a      	adds	r2, r7, #4
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd f903 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b09      	cmp	r3, #9
 800500e:	d90f      	bls.n	8005030 <TouchLightsActivity+0x58>
 8005010:	88fb      	ldrh	r3, [r7, #6]
 8005012:	2b6e      	cmp	r3, #110	; 0x6e
 8005014:	d80c      	bhi.n	8005030 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005016:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005018:	2bd7      	cmp	r3, #215	; 0xd7
 800501a:	d909      	bls.n	8005030 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800501c:	88bb      	ldrh	r3, [r7, #4]
 800501e:	2bec      	cmp	r3, #236	; 0xec
 8005020:	d806      	bhi.n	8005030 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8005022:	4b9b      	ldr	r3, [pc, #620]	; (8005290 <TouchLightsActivity+0x2b8>)
 8005024:	2202      	movs	r2, #2
 8005026:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005028:	4b9a      	ldr	r3, [pc, #616]	; (8005294 <TouchLightsActivity+0x2bc>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e193      	b.n	8005358 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	2bdb      	cmp	r3, #219	; 0xdb
 8005034:	d910      	bls.n	8005058 <TouchLightsActivity+0x80>
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800503c:	d20c      	bcs.n	8005058 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800503e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005040:	2bd7      	cmp	r3, #215	; 0xd7
 8005042:	d909      	bls.n	8005058 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005044:	88bb      	ldrh	r3, [r7, #4]
 8005046:	2bec      	cmp	r3, #236	; 0xec
 8005048:	d806      	bhi.n	8005058 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 800504a:	4b91      	ldr	r3, [pc, #580]	; (8005290 <TouchLightsActivity+0x2b8>)
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005050:	4b90      	ldr	r3, [pc, #576]	; (8005294 <TouchLightsActivity+0x2bc>)
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
 8005056:	e17f      	b.n	8005358 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	2b77      	cmp	r3, #119	; 0x77
 800505c:	d90f      	bls.n	800507e <TouchLightsActivity+0xa6>
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	2bd2      	cmp	r3, #210	; 0xd2
 8005062:	d80c      	bhi.n	800507e <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005064:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005066:	2bd7      	cmp	r3, #215	; 0xd7
 8005068:	d909      	bls.n	800507e <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800506a:	88bb      	ldrh	r3, [r7, #4]
 800506c:	2bec      	cmp	r3, #236	; 0xec
 800506e:	d806      	bhi.n	800507e <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8005070:	4b87      	ldr	r3, [pc, #540]	; (8005290 <TouchLightsActivity+0x2b8>)
 8005072:	2206      	movs	r2, #6
 8005074:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005076:	4b87      	ldr	r3, [pc, #540]	; (8005294 <TouchLightsActivity+0x2bc>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	e16c      	b.n	8005358 <TouchLightsActivity+0x380>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2bc7      	cmp	r3, #199	; 0xc7
 8005082:	f240 8169 	bls.w	8005358 <TouchLightsActivity+0x380>
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2be9      	cmp	r3, #233	; 0xe9
 800508a:	f200 8165 	bhi.w	8005358 <TouchLightsActivity+0x380>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800508e:	4882      	ldr	r0, [pc, #520]	; (8005298 <TouchLightsActivity+0x2c0>)
 8005090:	f7fc fb2e 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8005094:	88bb      	ldrh	r3, [r7, #4]
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d950      	bls.n	800513c <TouchLightsActivity+0x164>
 800509a:	88bb      	ldrh	r3, [r7, #4]
 800509c:	2b56      	cmp	r3, #86	; 0x56
 800509e:	d84d      	bhi.n	800513c <TouchLightsActivity+0x164>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 80050a0:	4b7e      	ldr	r3, [pc, #504]	; (800529c <TouchLightsActivity+0x2c4>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d024      	beq.n	80050f2 <TouchLightsActivity+0x11a>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 80050a8:	200e      	movs	r0, #14
 80050aa:	f001 f875 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2305      	movs	r3, #5
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2315      	movs	r3, #21
 80050ba:	2221      	movs	r2, #33	; 0x21
 80050bc:	2141      	movs	r1, #65	; 0x41
 80050be:	20c8      	movs	r0, #200	; 0xc8
 80050c0:	f7fc fac5 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80050c4:	4976      	ldr	r1, [pc, #472]	; (80052a0 <TouchLightsActivity+0x2c8>)
 80050c6:	4877      	ldr	r0, [pc, #476]	; (80052a4 <TouchLightsActivity+0x2cc>)
 80050c8:	f009 fc34 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	2243      	movs	r2, #67	; 0x43
 80050da:	21cb      	movs	r1, #203	; 0xcb
 80050dc:	4871      	ldr	r0, [pc, #452]	; (80052a4 <TouchLightsActivity+0x2cc>)
 80050de:	f7fc fd21 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 80050e2:	4b6e      	ldr	r3, [pc, #440]	; (800529c <TouchLightsActivity+0x2c4>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 0);
 80050e8:	2100      	movs	r1, #0
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fd fc7f 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 80050f0:	e12f      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80050f2:	200d      	movs	r0, #13
 80050f4:	f001 f850 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050f8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	2305      	movs	r3, #5
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2315      	movs	r3, #21
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	2141      	movs	r1, #65	; 0x41
 8005108:	20c8      	movs	r0, #200	; 0xc8
 800510a:	f7fc faa0 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800510e:	4966      	ldr	r1, [pc, #408]	; (80052a8 <TouchLightsActivity+0x2d0>)
 8005110:	4864      	ldr	r0, [pc, #400]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005112:	f009 fc0f 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005116:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	2300      	movs	r3, #0
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	2243      	movs	r2, #67	; 0x43
 8005124:	21cb      	movs	r1, #203	; 0xcb
 8005126:	485f      	ldr	r0, [pc, #380]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005128:	f7fc fcfc 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 800512c:	4b5b      	ldr	r3, [pc, #364]	; (800529c <TouchLightsActivity+0x2c4>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 1);
 8005132:	2101      	movs	r1, #1
 8005134:	2001      	movs	r0, #1
 8005136:	f7fd fc5a 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 800513a:	e10a      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 800513c:	88bb      	ldrh	r3, [r7, #4]
 800513e:	2b5e      	cmp	r3, #94	; 0x5e
 8005140:	d950      	bls.n	80051e4 <TouchLightsActivity+0x20c>
 8005142:	88bb      	ldrh	r3, [r7, #4]
 8005144:	2b74      	cmp	r3, #116	; 0x74
 8005146:	d84d      	bhi.n	80051e4 <TouchLightsActivity+0x20c>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8005148:	4b54      	ldr	r3, [pc, #336]	; (800529c <TouchLightsActivity+0x2c4>)
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d024      	beq.n	800519a <TouchLightsActivity+0x1c2>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8005150:	2010      	movs	r0, #16
 8005152:	f001 f821 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005156:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	2305      	movs	r3, #5
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2315      	movs	r3, #21
 8005162:	2221      	movs	r2, #33	; 0x21
 8005164:	215f      	movs	r1, #95	; 0x5f
 8005166:	20c8      	movs	r0, #200	; 0xc8
 8005168:	f7fc fa71 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800516c:	494c      	ldr	r1, [pc, #304]	; (80052a0 <TouchLightsActivity+0x2c8>)
 800516e:	484d      	ldr	r0, [pc, #308]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005170:	f009 fbe0 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005174:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	2300      	movs	r3, #0
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	2261      	movs	r2, #97	; 0x61
 8005182:	21cb      	movs	r1, #203	; 0xcb
 8005184:	4847      	ldr	r0, [pc, #284]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005186:	f7fc fccd 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 800518a:	4b44      	ldr	r3, [pc, #272]	; (800529c <TouchLightsActivity+0x2c4>)
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 0);
 8005190:	2100      	movs	r1, #0
 8005192:	2002      	movs	r0, #2
 8005194:	f7fd fc2b 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 8005198:	e0db      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800519a:	200f      	movs	r0, #15
 800519c:	f000 fffc 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80051a0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2305      	movs	r3, #5
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2315      	movs	r3, #21
 80051ac:	2221      	movs	r2, #33	; 0x21
 80051ae:	215f      	movs	r1, #95	; 0x5f
 80051b0:	20c8      	movs	r0, #200	; 0xc8
 80051b2:	f7fc fa4c 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80051b6:	493c      	ldr	r1, [pc, #240]	; (80052a8 <TouchLightsActivity+0x2d0>)
 80051b8:	483a      	ldr	r0, [pc, #232]	; (80052a4 <TouchLightsActivity+0x2cc>)
 80051ba:	f009 fbbb 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	2300      	movs	r3, #0
 80051ca:	2261      	movs	r2, #97	; 0x61
 80051cc:	21cb      	movs	r1, #203	; 0xcb
 80051ce:	4835      	ldr	r0, [pc, #212]	; (80052a4 <TouchLightsActivity+0x2cc>)
 80051d0:	f7fc fca8 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 80051d4:	4b31      	ldr	r3, [pc, #196]	; (800529c <TouchLightsActivity+0x2c4>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 1);
 80051da:	2101      	movs	r1, #1
 80051dc:	2002      	movs	r0, #2
 80051de:	f7fd fc06 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 80051e2:	e0b6      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	2b7c      	cmp	r3, #124	; 0x7c
 80051e8:	d960      	bls.n	80052ac <TouchLightsActivity+0x2d4>
 80051ea:	88bb      	ldrh	r3, [r7, #4]
 80051ec:	2b92      	cmp	r3, #146	; 0x92
 80051ee:	d85d      	bhi.n	80052ac <TouchLightsActivity+0x2d4>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 80051f0:	4b2a      	ldr	r3, [pc, #168]	; (800529c <TouchLightsActivity+0x2c4>)
 80051f2:	789b      	ldrb	r3, [r3, #2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d024      	beq.n	8005242 <TouchLightsActivity+0x26a>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 80051f8:	2012      	movs	r0, #18
 80051fa:	f000 ffcd 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80051fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005202:	9301      	str	r3, [sp, #4]
 8005204:	2305      	movs	r3, #5
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2315      	movs	r3, #21
 800520a:	2221      	movs	r2, #33	; 0x21
 800520c:	217d      	movs	r1, #125	; 0x7d
 800520e:	20c8      	movs	r0, #200	; 0xc8
 8005210:	f7fc fa1d 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005214:	4922      	ldr	r1, [pc, #136]	; (80052a0 <TouchLightsActivity+0x2c8>)
 8005216:	4823      	ldr	r0, [pc, #140]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005218:	f009 fb8c 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800521c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	2300      	movs	r3, #0
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	227f      	movs	r2, #127	; 0x7f
 800522a:	21cb      	movs	r1, #203	; 0xcb
 800522c:	481d      	ldr	r0, [pc, #116]	; (80052a4 <TouchLightsActivity+0x2cc>)
 800522e:	f7fc fc79 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <TouchLightsActivity+0x2c4>)
 8005234:	2200      	movs	r2, #0
 8005236:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 0);
 8005238:	2100      	movs	r1, #0
 800523a:	2003      	movs	r0, #3
 800523c:	f7fd fbd7 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 8005240:	e087      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8005242:	2011      	movs	r0, #17
 8005244:	f000 ffa8 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005248:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	2305      	movs	r3, #5
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2315      	movs	r3, #21
 8005254:	2221      	movs	r2, #33	; 0x21
 8005256:	217d      	movs	r1, #125	; 0x7d
 8005258:	20c8      	movs	r0, #200	; 0xc8
 800525a:	f7fc f9f8 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800525e:	4912      	ldr	r1, [pc, #72]	; (80052a8 <TouchLightsActivity+0x2d0>)
 8005260:	4810      	ldr	r0, [pc, #64]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005262:	f009 fb67 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005266:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	2300      	movs	r3, #0
 8005272:	227f      	movs	r2, #127	; 0x7f
 8005274:	21cb      	movs	r1, #203	; 0xcb
 8005276:	480b      	ldr	r0, [pc, #44]	; (80052a4 <TouchLightsActivity+0x2cc>)
 8005278:	f7fc fc54 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <TouchLightsActivity+0x2c4>)
 800527e:	2201      	movs	r2, #1
 8005280:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 1);
 8005282:	2101      	movs	r1, #1
 8005284:	2003      	movs	r0, #3
 8005286:	f7fd fbb2 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 800528a:	e062      	b.n	8005352 <TouchLightsActivity+0x37a>
 800528c:	20000258 	.word	0x20000258
 8005290:	2000025c 	.word	0x2000025c
 8005294:	20000255 	.word	0x20000255
 8005298:	08013700 	.word	0x08013700
 800529c:	20000278 	.word	0x20000278
 80052a0:	080128bc 	.word	0x080128bc
 80052a4:	200002c8 	.word	0x200002c8
 80052a8:	080128c0 	.word	0x080128c0
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 80052ac:	88bb      	ldrh	r3, [r7, #4]
 80052ae:	2b9a      	cmp	r3, #154	; 0x9a
 80052b0:	d94f      	bls.n	8005352 <TouchLightsActivity+0x37a>
 80052b2:	88bb      	ldrh	r3, [r7, #4]
 80052b4:	2bb0      	cmp	r3, #176	; 0xb0
 80052b6:	d84c      	bhi.n	8005352 <TouchLightsActivity+0x37a>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <TouchLightsActivity+0x394>)
 80052ba:	78db      	ldrb	r3, [r3, #3]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d024      	beq.n	800530a <TouchLightsActivity+0x332>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80052c0:	2014      	movs	r0, #20
 80052c2:	f000 ff69 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80052c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	2305      	movs	r3, #5
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2315      	movs	r3, #21
 80052d2:	2221      	movs	r2, #33	; 0x21
 80052d4:	219b      	movs	r1, #155	; 0x9b
 80052d6:	20c8      	movs	r0, #200	; 0xc8
 80052d8:	f7fc f9b9 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80052dc:	4924      	ldr	r1, [pc, #144]	; (8005370 <TouchLightsActivity+0x398>)
 80052de:	4825      	ldr	r0, [pc, #148]	; (8005374 <TouchLightsActivity+0x39c>)
 80052e0:	f009 fb28 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80052e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052e8:	9301      	str	r3, [sp, #4]
 80052ea:	2300      	movs	r3, #0
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	229d      	movs	r2, #157	; 0x9d
 80052f2:	21cb      	movs	r1, #203	; 0xcb
 80052f4:	481f      	ldr	r0, [pc, #124]	; (8005374 <TouchLightsActivity+0x39c>)
 80052f6:	f7fc fc15 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 80052fa:	4b1c      	ldr	r3, [pc, #112]	; (800536c <TouchLightsActivity+0x394>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 0);
 8005300:	2100      	movs	r1, #0
 8005302:	2004      	movs	r0, #4
 8005304:	f7fd fb73 	bl	80029ee <EEPROM_LightStateUpdate>
 8005308:	e023      	b.n	8005352 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 800530a:	2013      	movs	r0, #19
 800530c:	f000 ff44 	bl	8006198 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005310:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	2305      	movs	r3, #5
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2315      	movs	r3, #21
 800531c:	2221      	movs	r2, #33	; 0x21
 800531e:	219b      	movs	r1, #155	; 0x9b
 8005320:	20c8      	movs	r0, #200	; 0xc8
 8005322:	f7fc f994 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005326:	4914      	ldr	r1, [pc, #80]	; (8005378 <TouchLightsActivity+0x3a0>)
 8005328:	4812      	ldr	r0, [pc, #72]	; (8005374 <TouchLightsActivity+0x39c>)
 800532a:	f009 fb03 	bl	800e934 <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800532e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	2300      	movs	r3, #0
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	2300      	movs	r3, #0
 800533a:	229d      	movs	r2, #157	; 0x9d
 800533c:	21cb      	movs	r1, #203	; 0xcb
 800533e:	480d      	ldr	r0, [pc, #52]	; (8005374 <TouchLightsActivity+0x39c>)
 8005340:	f7fc fbf0 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <TouchLightsActivity+0x394>)
 8005346:	2201      	movs	r2, #1
 8005348:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 1);
 800534a:	2101      	movs	r1, #1
 800534c:	2004      	movs	r0, #4
 800534e:	f7fd fb4e 	bl	80029ee <EEPROM_LightStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8005352:	480a      	ldr	r0, [pc, #40]	; (800537c <TouchLightsActivity+0x3a4>)
 8005354:	f7fc f9cc 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8005358:	f001 ff24 	bl	80071a4 <HAL_GetTick>
 800535c:	4603      	mov	r3, r0
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <TouchLightsActivity+0x3a8>)
 8005360:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000278 	.word	0x20000278
 8005370:	080128bc 	.word	0x080128bc
 8005374:	200002c8 	.word	0x200002c8
 8005378:	080128c0 	.word	0x080128c0
 800537c:	08015678 	.word	0x08015678
 8005380:	20000258 	.word	0x20000258

08005384 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800538a:	f7fc ff7f 	bl	800228c <XPT2046_IsTouched>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8188 	beq.w	80056a6 <TouchClockActivity+0x322>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005396:	48a0      	ldr	r0, [pc, #640]	; (8005618 <TouchClockActivity+0x294>)
 8005398:	f7fc f9aa 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800539c:	f001 ff02 	bl	80071a4 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	4b9e      	ldr	r3, [pc, #632]	; (800561c <TouchClockActivity+0x298>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ac:	f0c0 817b 	bcc.w	80056a6 <TouchClockActivity+0x322>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80053b0:	1d3a      	adds	r2, r7, #4
 80053b2:	1dbb      	adds	r3, r7, #6
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fc ff2a 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 80053bc:	4b98      	ldr	r3, [pc, #608]	; (8005620 <TouchClockActivity+0x29c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d114      	bne.n	80053ee <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 80053c4:	f7fd f9e6 	bl	8002794 <DS3231_GetHour>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	4b95      	ldr	r3, [pc, #596]	; (8005624 <TouchClockActivity+0x2a0>)
 80053ce:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 80053d0:	f7fd f9ec 	bl	80027ac <DS3231_GetMinute>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	4b93      	ldr	r3, [pc, #588]	; (8005628 <TouchClockActivity+0x2a4>)
 80053da:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 80053dc:	f7fd f9ce 	bl	800277c <DS3231_GetDayOfWeek>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	4b91      	ldr	r3, [pc, #580]	; (800562c <TouchClockActivity+0x2a8>)
 80053e6:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80053e8:	4b8d      	ldr	r3, [pc, #564]	; (8005620 <TouchClockActivity+0x29c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	d90f      	bls.n	8005414 <TouchClockActivity+0x90>
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	2b6e      	cmp	r3, #110	; 0x6e
 80053f8:	d80c      	bhi.n	8005414 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80053fa:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80053fc:	2bd7      	cmp	r3, #215	; 0xd7
 80053fe:	d909      	bls.n	8005414 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005400:	88bb      	ldrh	r3, [r7, #4]
 8005402:	2bec      	cmp	r3, #236	; 0xec
 8005404:	d806      	bhi.n	8005414 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 8005406:	4b8a      	ldr	r3, [pc, #552]	; (8005630 <TouchClockActivity+0x2ac>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800540c:	4b89      	ldr	r3, [pc, #548]	; (8005634 <TouchClockActivity+0x2b0>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	e143      	b.n	800569c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2bdb      	cmp	r3, #219	; 0xdb
 8005418:	d92c      	bls.n	8005474 <TouchClockActivity+0xf0>
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005420:	d228      	bcs.n	8005474 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005422:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005424:	2bd7      	cmp	r3, #215	; 0xd7
 8005426:	d925      	bls.n	8005474 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005428:	88bb      	ldrh	r3, [r7, #4]
 800542a:	2bec      	cmp	r3, #236	; 0xec
 800542c:	d822      	bhi.n	8005474 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 800542e:	4b7f      	ldr	r3, [pc, #508]	; (800562c <TouchClockActivity+0x2a8>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fd f9c6 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8005438:	4b7a      	ldr	r3, [pc, #488]	; (8005624 <TouchClockActivity+0x2a0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd f9d3 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8005442:	4b79      	ldr	r3, [pc, #484]	; (8005628 <TouchClockActivity+0x2a4>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd f9e3 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800544c:	2032      	movs	r0, #50	; 0x32
 800544e:	f7fd f9f2 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8005452:	4979      	ldr	r1, [pc, #484]	; (8005638 <TouchClockActivity+0x2b4>)
 8005454:	4879      	ldr	r0, [pc, #484]	; (800563c <TouchClockActivity+0x2b8>)
 8005456:	f009 fa6d 	bl	800e934 <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800545a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	2301      	movs	r3, #1
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005468:	220a      	movs	r2, #10
 800546a:	212f      	movs	r1, #47	; 0x2f
 800546c:	4873      	ldr	r0, [pc, #460]	; (800563c <TouchClockActivity+0x2b8>)
 800546e:	f7fc fb59 	bl	8001b24 <EF_PutString>
 8005472:	e113      	b.n	800569c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	2b6d      	cmp	r3, #109	; 0x6d
 8005478:	d90f      	bls.n	800549a <TouchClockActivity+0x116>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2bdc      	cmp	r3, #220	; 0xdc
 800547e:	d80c      	bhi.n	800549a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005480:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8005482:	2bbd      	cmp	r3, #189	; 0xbd
 8005484:	d909      	bls.n	800549a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8005486:	88bb      	ldrh	r3, [r7, #4]
 8005488:	2bd4      	cmp	r3, #212	; 0xd4
 800548a:	d806      	bhi.n	800549a <TouchClockActivity+0x116>
				{
					State = MENUTFT_SHEDULE;
 800548c:	4b68      	ldr	r3, [pc, #416]	; (8005630 <TouchClockActivity+0x2ac>)
 800548e:	2207      	movs	r2, #7
 8005490:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8005492:	4b68      	ldr	r3, [pc, #416]	; (8005634 <TouchClockActivity+0x2b0>)
 8005494:	2201      	movs	r2, #1
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e100      	b.n	800569c <TouchClockActivity+0x318>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	2bef      	cmp	r3, #239	; 0xef
 800549e:	d97b      	bls.n	8005598 <TouchClockActivity+0x214>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80054a6:	d877      	bhi.n	8005598 <TouchClockActivity+0x214>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 80054a8:	88bb      	ldrh	r3, [r7, #4]
 80054aa:	2b4a      	cmp	r3, #74	; 0x4a
 80054ac:	d923      	bls.n	80054f6 <TouchClockActivity+0x172>
 80054ae:	88bb      	ldrh	r3, [r7, #4]
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d820      	bhi.n	80054f6 <TouchClockActivity+0x172>
					{
						if(Hours < 24)
 80054b4:	4b5b      	ldr	r3, [pc, #364]	; (8005624 <TouchClockActivity+0x2a0>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b17      	cmp	r3, #23
 80054ba:	d806      	bhi.n	80054ca <TouchClockActivity+0x146>
						{
							Hours++;
 80054bc:	4b59      	ldr	r3, [pc, #356]	; (8005624 <TouchClockActivity+0x2a0>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b57      	ldr	r3, [pc, #348]	; (8005624 <TouchClockActivity+0x2a0>)
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	e002      	b.n	80054d0 <TouchClockActivity+0x14c>
						}
						else
						{
							Hours = 1;
 80054ca:	4b56      	ldr	r3, [pc, #344]	; (8005624 <TouchClockActivity+0x2a0>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80054d0:	4b54      	ldr	r3, [pc, #336]	; (8005624 <TouchClockActivity+0x2a0>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	495a      	ldr	r1, [pc, #360]	; (8005640 <TouchClockActivity+0x2bc>)
 80054d8:	4858      	ldr	r0, [pc, #352]	; (800563c <TouchClockActivity+0x2b8>)
 80054da:	f009 fa2b 	bl	800e934 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80054de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	2301      	movs	r3, #1
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	2246      	movs	r2, #70	; 0x46
 80054ec:	21a0      	movs	r1, #160	; 0xa0
 80054ee:	4853      	ldr	r0, [pc, #332]	; (800563c <TouchClockActivity+0x2b8>)
 80054f0:	f7fc fb18 	bl	8001b24 <EF_PutString>
 80054f4:	e04f      	b.n	8005596 <TouchClockActivity+0x212>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 80054f6:	88bb      	ldrh	r3, [r7, #4]
 80054f8:	2b72      	cmp	r3, #114	; 0x72
 80054fa:	d923      	bls.n	8005544 <TouchClockActivity+0x1c0>
 80054fc:	88bb      	ldrh	r3, [r7, #4]
 80054fe:	2b88      	cmp	r3, #136	; 0x88
 8005500:	d820      	bhi.n	8005544 <TouchClockActivity+0x1c0>
					{
						if(Minutes < 59)
 8005502:	4b49      	ldr	r3, [pc, #292]	; (8005628 <TouchClockActivity+0x2a4>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b3a      	cmp	r3, #58	; 0x3a
 8005508:	d806      	bhi.n	8005518 <TouchClockActivity+0x194>
						{
							Minutes++;
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <TouchClockActivity+0x2a4>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b45      	ldr	r3, [pc, #276]	; (8005628 <TouchClockActivity+0x2a4>)
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e002      	b.n	800551e <TouchClockActivity+0x19a>
						}
						else
						{
							Minutes = 0;
 8005518:	4b43      	ldr	r3, [pc, #268]	; (8005628 <TouchClockActivity+0x2a4>)
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800551e:	4b42      	ldr	r3, [pc, #264]	; (8005628 <TouchClockActivity+0x2a4>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	4946      	ldr	r1, [pc, #280]	; (8005640 <TouchClockActivity+0x2bc>)
 8005526:	4845      	ldr	r0, [pc, #276]	; (800563c <TouchClockActivity+0x2b8>)
 8005528:	f009 fa04 	bl	800e934 <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800552c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	2301      	movs	r3, #1
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	226e      	movs	r2, #110	; 0x6e
 800553a:	21a0      	movs	r1, #160	; 0xa0
 800553c:	483f      	ldr	r0, [pc, #252]	; (800563c <TouchClockActivity+0x2b8>)
 800553e:	f7fc faf1 	bl	8001b24 <EF_PutString>
 8005542:	e028      	b.n	8005596 <TouchClockActivity+0x212>
					}
					else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8005544:	88bb      	ldrh	r3, [r7, #4]
 8005546:	2b9a      	cmp	r3, #154	; 0x9a
 8005548:	f240 80a7 	bls.w	800569a <TouchClockActivity+0x316>
 800554c:	88bb      	ldrh	r3, [r7, #4]
 800554e:	2bb0      	cmp	r3, #176	; 0xb0
 8005550:	f200 80a3 	bhi.w	800569a <TouchClockActivity+0x316>
					{
						if(DayOfWeek < 7)
 8005554:	4b35      	ldr	r3, [pc, #212]	; (800562c <TouchClockActivity+0x2a8>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b06      	cmp	r3, #6
 800555a:	d806      	bhi.n	800556a <TouchClockActivity+0x1e6>
						{
							DayOfWeek++;
 800555c:	4b33      	ldr	r3, [pc, #204]	; (800562c <TouchClockActivity+0x2a8>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	4b31      	ldr	r3, [pc, #196]	; (800562c <TouchClockActivity+0x2a8>)
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e002      	b.n	8005570 <TouchClockActivity+0x1ec>
						}
						else
						{
							DayOfWeek = 1;
 800556a:	4b30      	ldr	r3, [pc, #192]	; (800562c <TouchClockActivity+0x2a8>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, "DZIEŃ TYG:   %d ", DayOfWeek);
 8005570:	4b2e      	ldr	r3, [pc, #184]	; (800562c <TouchClockActivity+0x2a8>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	4933      	ldr	r1, [pc, #204]	; (8005644 <TouchClockActivity+0x2c0>)
 8005578:	4830      	ldr	r0, [pc, #192]	; (800563c <TouchClockActivity+0x2b8>)
 800557a:	f009 f9db 	bl	800e934 <siprintf>
						EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800557e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	2301      	movs	r3, #1
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	2296      	movs	r2, #150	; 0x96
 800558c:	2114      	movs	r1, #20
 800558e:	482b      	ldr	r0, [pc, #172]	; (800563c <TouchClockActivity+0x2b8>)
 8005590:	f7fc fac8 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8005594:	e081      	b.n	800569a <TouchClockActivity+0x316>
 8005596:	e080      	b.n	800569a <TouchClockActivity+0x316>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800559e:	d37d      	bcc.n	800569c <TouchClockActivity+0x318>
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80055a6:	d879      	bhi.n	800569c <TouchClockActivity+0x318>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 80055a8:	88bb      	ldrh	r3, [r7, #4]
 80055aa:	2b4a      	cmp	r3, #74	; 0x4a
 80055ac:	d923      	bls.n	80055f6 <TouchClockActivity+0x272>
 80055ae:	88bb      	ldrh	r3, [r7, #4]
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d820      	bhi.n	80055f6 <TouchClockActivity+0x272>
					{

						if(Hours < 19)
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <TouchClockActivity+0x2a0>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b12      	cmp	r3, #18
 80055ba:	d806      	bhi.n	80055ca <TouchClockActivity+0x246>
						{
							Hours = Hours + 6;
 80055bc:	4b19      	ldr	r3, [pc, #100]	; (8005624 <TouchClockActivity+0x2a0>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	3306      	adds	r3, #6
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <TouchClockActivity+0x2a0>)
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e002      	b.n	80055d0 <TouchClockActivity+0x24c>
						}
						else
						{
							Hours = 1;
 80055ca:	4b16      	ldr	r3, [pc, #88]	; (8005624 <TouchClockActivity+0x2a0>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <TouchClockActivity+0x2a0>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	491a      	ldr	r1, [pc, #104]	; (8005640 <TouchClockActivity+0x2bc>)
 80055d8:	4818      	ldr	r0, [pc, #96]	; (800563c <TouchClockActivity+0x2b8>)
 80055da:	f009 f9ab 	bl	800e934 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80055de:	f24c 6318 	movw	r3, #50712	; 0xc618
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	2301      	movs	r3, #1
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	2300      	movs	r3, #0
 80055ea:	2246      	movs	r2, #70	; 0x46
 80055ec:	219d      	movs	r1, #157	; 0x9d
 80055ee:	4813      	ldr	r0, [pc, #76]	; (800563c <TouchClockActivity+0x2b8>)
 80055f0:	f7fc fa98 	bl	8001b24 <EF_PutString>
 80055f4:	e04d      	b.n	8005692 <TouchClockActivity+0x30e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80055f6:	88bb      	ldrh	r3, [r7, #4]
 80055f8:	2b72      	cmp	r3, #114	; 0x72
 80055fa:	d94a      	bls.n	8005692 <TouchClockActivity+0x30e>
 80055fc:	88bb      	ldrh	r3, [r7, #4]
 80055fe:	2b88      	cmp	r3, #136	; 0x88
 8005600:	d847      	bhi.n	8005692 <TouchClockActivity+0x30e>
					{
						if(Minutes < 49)
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <TouchClockActivity+0x2a4>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b30      	cmp	r3, #48	; 0x30
 8005608:	d81e      	bhi.n	8005648 <TouchClockActivity+0x2c4>
						{
							Minutes = Minutes +10;
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <TouchClockActivity+0x2a4>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	330a      	adds	r3, #10
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <TouchClockActivity+0x2a4>)
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e02a      	b.n	800566e <TouchClockActivity+0x2ea>
 8005618:	08015678 	.word	0x08015678
 800561c:	20000258 	.word	0x20000258
 8005620:	20000256 	.word	0x20000256
 8005624:	20000031 	.word	0x20000031
 8005628:	20000032 	.word	0x20000032
 800562c:	20000030 	.word	0x20000030
 8005630:	2000025c 	.word	0x2000025c
 8005634:	20000255 	.word	0x20000255
 8005638:	080128c4 	.word	0x080128c4
 800563c:	200002c8 	.word	0x200002c8
 8005640:	080128d4 	.word	0x080128d4
 8005644:	080128dc 	.word	0x080128dc
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 8005648:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <TouchClockActivity+0x32c>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f103 020a 	add.w	r2, r3, #10
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <TouchClockActivity+0x330>)
 8005652:	fb83 1302 	smull	r1, r3, r3, r2
 8005656:	4413      	add	r3, r2
 8005658:	1159      	asrs	r1, r3, #5
 800565a:	17d3      	asrs	r3, r2, #31
 800565c:	1ac9      	subs	r1, r1, r3
 800565e:	460b      	mov	r3, r1
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a5b      	subs	r3, r3, r1
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	1ad1      	subs	r1, r2, r3
 8005668:	b2ca      	uxtb	r2, r1
 800566a:	4b11      	ldr	r3, [pc, #68]	; (80056b0 <TouchClockActivity+0x32c>)
 800566c:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <TouchClockActivity+0x32c>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	4910      	ldr	r1, [pc, #64]	; (80056b8 <TouchClockActivity+0x334>)
 8005676:	4811      	ldr	r0, [pc, #68]	; (80056bc <TouchClockActivity+0x338>)
 8005678:	f009 f95c 	bl	800e934 <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800567c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2301      	movs	r3, #1
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	226e      	movs	r2, #110	; 0x6e
 800568a:	219c      	movs	r1, #156	; 0x9c
 800568c:	480b      	ldr	r0, [pc, #44]	; (80056bc <TouchClockActivity+0x338>)
 800568e:	f7fc fa49 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8005692:	480b      	ldr	r0, [pc, #44]	; (80056c0 <TouchClockActivity+0x33c>)
 8005694:	f7fc f82c 	bl	80016f0 <EF_SetFont>
 8005698:	e000      	b.n	800569c <TouchClockActivity+0x318>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800569a:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 800569c:	f001 fd82 	bl	80071a4 <HAL_GetTick>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <TouchClockActivity+0x340>)
 80056a4:	6013      	str	r3, [r2, #0]
			}
		}
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000032 	.word	0x20000032
 80056b4:	88888889 	.word	0x88888889
 80056b8:	080128d4 	.word	0x080128d4
 80056bc:	200002c8 	.word	0x200002c8
 80056c0:	08015678 	.word	0x08015678
 80056c4:	20000258 	.word	0x20000258

080056c8 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80056ce:	f7fc fddd 	bl	800228c <XPT2046_IsTouched>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 8106 	beq.w	80058e6 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80056da:	f001 fd63 	bl	80071a4 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b83      	ldr	r3, [pc, #524]	; (80058f0 <TouchPredefinedActivityActivity+0x228>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ea:	f0c0 80fc 	bcc.w	80058e6 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80056ee:	1d3a      	adds	r2, r7, #4
 80056f0:	1dbb      	adds	r3, r7, #6
 80056f2:	4611      	mov	r1, r2
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fc fd8b 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80056fa:	487e      	ldr	r0, [pc, #504]	; (80058f4 <TouchPredefinedActivityActivity+0x22c>)
 80056fc:	f7fb fff8 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b09      	cmp	r3, #9
 8005704:	d90f      	bls.n	8005726 <TouchPredefinedActivityActivity+0x5e>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b6e      	cmp	r3, #110	; 0x6e
 800570a:	d80c      	bhi.n	8005726 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800570c:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800570e:	2bd7      	cmp	r3, #215	; 0xd7
 8005710:	d909      	bls.n	8005726 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005712:	88bb      	ldrh	r3, [r7, #4]
 8005714:	2bec      	cmp	r3, #236	; 0xec
 8005716:	d806      	bhi.n	8005726 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 8005718:	4b77      	ldr	r3, [pc, #476]	; (80058f8 <TouchPredefinedActivityActivity+0x230>)
 800571a:	2202      	movs	r2, #2
 800571c:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800571e:	4b77      	ldr	r3, [pc, #476]	; (80058fc <TouchPredefinedActivityActivity+0x234>)
 8005720:	2201      	movs	r2, #1
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e0da      	b.n	80058dc <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b63      	cmp	r3, #99	; 0x63
 800572a:	f240 80d7 	bls.w	80058dc <TouchPredefinedActivityActivity+0x214>
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2bdc      	cmp	r3, #220	; 0xdc
 8005732:	f200 80d3 	bhi.w	80058dc <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8005736:	88bb      	ldrh	r3, [r7, #4]
 8005738:	2b3b      	cmp	r3, #59	; 0x3b
 800573a:	d966      	bls.n	800580a <TouchPredefinedActivityActivity+0x142>
 800573c:	88bb      	ldrh	r3, [r7, #4]
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d863      	bhi.n	800580a <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8005742:	4b6f      	ldr	r3, [pc, #444]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02f      	beq.n	80057aa <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005750:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	230a      	movs	r3, #10
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	2328      	movs	r3, #40	; 0x28
 800575c:	2278      	movs	r2, #120	; 0x78
 800575e:	213c      	movs	r1, #60	; 0x3c
 8005760:	2064      	movs	r0, #100	; 0x64
 8005762:	f7fb ff74 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8005766:	4967      	ldr	r1, [pc, #412]	; (8005904 <TouchPredefinedActivityActivity+0x23c>)
 8005768:	4867      	ldr	r0, [pc, #412]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 800576a:	f009 f8e3 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800576e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2300      	movs	r3, #0
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2300      	movs	r3, #0
 800577a:	223e      	movs	r2, #62	; 0x3e
 800577c:	2177      	movs	r1, #119	; 0x77
 800577e:	4862      	ldr	r0, [pc, #392]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 8005780:	f7fc f9d0 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005784:	4961      	ldr	r1, [pc, #388]	; (800590c <TouchPredefinedActivityActivity+0x244>)
 8005786:	4860      	ldr	r0, [pc, #384]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 8005788:	f009 f8d4 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800578c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	2300      	movs	r3, #0
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	2300      	movs	r3, #0
 8005798:	2250      	movs	r2, #80	; 0x50
 800579a:	2193      	movs	r1, #147	; 0x93
 800579c:	485a      	ldr	r0, [pc, #360]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 800579e:	f7fc f9c1 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 80057a2:	2000      	movs	r0, #0
 80057a4:	f7fe fbcc 	bl	8003f40 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80057a8:	e098      	b.n	80058dc <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 80057aa:	4b55      	ldr	r3, [pc, #340]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80057b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80057b4:	9301      	str	r3, [sp, #4]
 80057b6:	230a      	movs	r3, #10
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2328      	movs	r3, #40	; 0x28
 80057bc:	2278      	movs	r2, #120	; 0x78
 80057be:	213c      	movs	r1, #60	; 0x3c
 80057c0:	2064      	movs	r0, #100	; 0x64
 80057c2:	f7fb ff44 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 80057c6:	494f      	ldr	r1, [pc, #316]	; (8005904 <TouchPredefinedActivityActivity+0x23c>)
 80057c8:	484f      	ldr	r0, [pc, #316]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80057ca:	f009 f8b3 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80057ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	2300      	movs	r3, #0
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2300      	movs	r3, #0
 80057da:	223e      	movs	r2, #62	; 0x3e
 80057dc:	2177      	movs	r1, #119	; 0x77
 80057de:	484a      	ldr	r0, [pc, #296]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80057e0:	f7fc f9a0 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80057e4:	494a      	ldr	r1, [pc, #296]	; (8005910 <TouchPredefinedActivityActivity+0x248>)
 80057e6:	4848      	ldr	r0, [pc, #288]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80057e8:	f009 f8a4 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80057ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2300      	movs	r3, #0
 80057f8:	2250      	movs	r2, #80	; 0x50
 80057fa:	2193      	movs	r1, #147	; 0x93
 80057fc:	4842      	ldr	r0, [pc, #264]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80057fe:	f7fc f991 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 8005802:	2001      	movs	r0, #1
 8005804:	f7fe fb9c 	bl	8003f40 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8005808:	e068      	b.n	80058dc <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 800580a:	88bb      	ldrh	r3, [r7, #4]
 800580c:	2b77      	cmp	r3, #119	; 0x77
 800580e:	d965      	bls.n	80058dc <TouchPredefinedActivityActivity+0x214>
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	2ba0      	cmp	r3, #160	; 0xa0
 8005814:	d862      	bhi.n	80058dc <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 8005816:	4b3a      	ldr	r3, [pc, #232]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02f      	beq.n	800587e <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 8005820:	2200      	movs	r2, #0
 8005822:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005824:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	230a      	movs	r3, #10
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2328      	movs	r3, #40	; 0x28
 8005830:	2278      	movs	r2, #120	; 0x78
 8005832:	2178      	movs	r1, #120	; 0x78
 8005834:	2064      	movs	r0, #100	; 0x64
 8005836:	f7fb ff0a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800583a:	4936      	ldr	r1, [pc, #216]	; (8005914 <TouchPredefinedActivityActivity+0x24c>)
 800583c:	4832      	ldr	r0, [pc, #200]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 800583e:	f009 f879 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005842:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	2300      	movs	r3, #0
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	227a      	movs	r2, #122	; 0x7a
 8005850:	2169      	movs	r1, #105	; 0x69
 8005852:	482d      	ldr	r0, [pc, #180]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 8005854:	f7fc f966 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8005858:	492c      	ldr	r1, [pc, #176]	; (800590c <TouchPredefinedActivityActivity+0x244>)
 800585a:	482b      	ldr	r0, [pc, #172]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 800585c:	f009 f86a 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005860:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	228c      	movs	r2, #140	; 0x8c
 800586e:	2193      	movs	r1, #147	; 0x93
 8005870:	4825      	ldr	r0, [pc, #148]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 8005872:	f7fc f957 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8005876:	2000      	movs	r0, #0
 8005878:	f7fe fb48 	bl	8003f0c <predefinedActivityCzyszczenie>
 800587c:	e02e      	b.n	80058dc <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <TouchPredefinedActivityActivity+0x238>)
 8005880:	2201      	movs	r2, #1
 8005882:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8005884:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005888:	9301      	str	r3, [sp, #4]
 800588a:	230a      	movs	r3, #10
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2328      	movs	r3, #40	; 0x28
 8005890:	2278      	movs	r2, #120	; 0x78
 8005892:	2178      	movs	r1, #120	; 0x78
 8005894:	2064      	movs	r0, #100	; 0x64
 8005896:	f7fb feda 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800589a:	491e      	ldr	r1, [pc, #120]	; (8005914 <TouchPredefinedActivityActivity+0x24c>)
 800589c:	481a      	ldr	r0, [pc, #104]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 800589e:	f009 f849 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80058a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	2300      	movs	r3, #0
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	2300      	movs	r3, #0
 80058ae:	227a      	movs	r2, #122	; 0x7a
 80058b0:	2169      	movs	r1, #105	; 0x69
 80058b2:	4815      	ldr	r0, [pc, #84]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80058b4:	f7fc f936 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80058b8:	4915      	ldr	r1, [pc, #84]	; (8005910 <TouchPredefinedActivityActivity+0x248>)
 80058ba:	4813      	ldr	r0, [pc, #76]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80058bc:	f009 f83a 	bl	800e934 <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80058c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	2300      	movs	r3, #0
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	2300      	movs	r3, #0
 80058cc:	228c      	movs	r2, #140	; 0x8c
 80058ce:	2193      	movs	r1, #147	; 0x93
 80058d0:	480d      	ldr	r0, [pc, #52]	; (8005908 <TouchPredefinedActivityActivity+0x240>)
 80058d2:	f7fc f927 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fe fb18 	bl	8003f0c <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 80058dc:	f001 fc62 	bl	80071a4 <HAL_GetTick>
 80058e0:	4603      	mov	r3, r0
 80058e2:	4a03      	ldr	r2, [pc, #12]	; (80058f0 <TouchPredefinedActivityActivity+0x228>)
 80058e4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80058e6:	bf00      	nop
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000258 	.word	0x20000258
 80058f4:	08013700 	.word	0x08013700
 80058f8:	2000025c 	.word	0x2000025c
 80058fc:	20000255 	.word	0x20000255
 8005900:	2000027c 	.word	0x2000027c
 8005904:	080128f0 	.word	0x080128f0
 8005908:	200002c8 	.word	0x200002c8
 800590c:	080128bc 	.word	0x080128bc
 8005910:	080128c0 	.word	0x080128c0
 8005914:	080128fc 	.word	0x080128fc

08005918 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800591e:	f7fc fcb5 	bl	800228c <XPT2046_IsTouched>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 819d 	beq.w	8005c64 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 800592a:	48ae      	ldr	r0, [pc, #696]	; (8005be4 <TouchWSLedActivity+0x2cc>)
 800592c:	f7fb fee0 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005930:	f001 fc38 	bl	80071a4 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	4bac      	ldr	r3, [pc, #688]	; (8005be8 <TouchWSLedActivity+0x2d0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005940:	f0c0 8190 	bcc.w	8005c64 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005944:	1d3a      	adds	r2, r7, #4
 8005946:	1dbb      	adds	r3, r7, #6
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f7fc fc60 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8005950:	4ba6      	ldr	r3, [pc, #664]	; (8005bec <TouchWSLedActivity+0x2d4>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10b      	bne.n	8005970 <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8005958:	bf00      	nop
 800595a:	2201      	movs	r2, #1
 800595c:	49a4      	ldr	r1, [pc, #656]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 800595e:	2001      	movs	r0, #1
 8005960:	f7fc ffc6 	bl	80028f0 <eeprom_read>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f7      	bne.n	800595a <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 800596a:	4ba2      	ldr	r3, [pc, #648]	; (8005bf4 <TouchWSLedActivity+0x2dc>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	2b09      	cmp	r3, #9
 8005974:	d90f      	bls.n	8005996 <TouchWSLedActivity+0x7e>
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	2b6e      	cmp	r3, #110	; 0x6e
 800597a:	d80c      	bhi.n	8005996 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 800597c:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 800597e:	2bd7      	cmp	r3, #215	; 0xd7
 8005980:	d909      	bls.n	8005996 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005982:	88bb      	ldrh	r3, [r7, #4]
 8005984:	2bec      	cmp	r3, #236	; 0xec
 8005986:	d806      	bhi.n	8005996 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 8005988:	4b9b      	ldr	r3, [pc, #620]	; (8005bf8 <TouchWSLedActivity+0x2e0>)
 800598a:	2205      	movs	r2, #5
 800598c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 800598e:	4b9b      	ldr	r3, [pc, #620]	; (8005bfc <TouchWSLedActivity+0x2e4>)
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e161      	b.n	8005c5a <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8005996:	88bb      	ldrh	r3, [r7, #4]
 8005998:	2b40      	cmp	r3, #64	; 0x40
 800599a:	f240 80af 	bls.w	8005afc <TouchWSLedActivity+0x1e4>
 800599e:	88bb      	ldrh	r3, [r7, #4]
 80059a0:	2b56      	cmp	r3, #86	; 0x56
 80059a2:	f200 80ab 	bhi.w	8005afc <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2bd8      	cmp	r3, #216	; 0xd8
 80059aa:	d92f      	bls.n	8005a0c <TouchWSLedActivity+0xf4>
 80059ac:	88fb      	ldrh	r3, [r7, #6]
 80059ae:	2bf7      	cmp	r3, #247	; 0xf7
 80059b0:	d82c      	bhi.n	8005a0c <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 80059b2:	4b8f      	ldr	r3, [pc, #572]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b61      	cmp	r3, #97	; 0x61
 80059b8:	d806      	bhi.n	80059c8 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 80059ba:	4b8d      	ldr	r3, [pc, #564]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	4b8b      	ldr	r3, [pc, #556]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e002      	b.n	80059ce <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 80059c8:	4b89      	ldr	r3, [pc, #548]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 80059ce:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b09      	cmp	r3, #9
 80059d4:	d807      	bhi.n	80059e6 <TouchWSLedActivity+0xce>
 80059d6:	4b86      	ldr	r3, [pc, #536]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	4988      	ldr	r1, [pc, #544]	; (8005c00 <TouchWSLedActivity+0x2e8>)
 80059de:	4889      	ldr	r0, [pc, #548]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 80059e0:	f008 ffa8 	bl	800e934 <siprintf>
 80059e4:	e006      	b.n	80059f4 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 80059e6:	4b82      	ldr	r3, [pc, #520]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4986      	ldr	r1, [pc, #536]	; (8005c08 <TouchWSLedActivity+0x2f0>)
 80059ee:	4885      	ldr	r0, [pc, #532]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 80059f0:	f008 ffa0 	bl	800e934 <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80059f4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	2301      	movs	r3, #1
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	2300      	movs	r3, #0
 8005a00:	223c      	movs	r2, #60	; 0x3c
 8005a02:	21ac      	movs	r1, #172	; 0xac
 8005a04:	487f      	ldr	r0, [pc, #508]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005a06:	f7fc f88d 	bl	8001b24 <EF_PutString>
 8005a0a:	e076      	b.n	8005afa <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	2bfb      	cmp	r3, #251	; 0xfb
 8005a10:	d941      	bls.n	8005a96 <TouchWSLedActivity+0x17e>
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8005a18:	d83d      	bhi.n	8005a96 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 8005a1a:	4b75      	ldr	r3, [pc, #468]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b59      	cmp	r3, #89	; 0x59
 8005a20:	d806      	bhi.n	8005a30 <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 8005a22:	4b73      	ldr	r3, [pc, #460]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	330a      	adds	r3, #10
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b71      	ldr	r3, [pc, #452]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e013      	b.n	8005a58 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 8005a30:	4b6f      	ldr	r3, [pc, #444]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f103 020a 	add.w	r2, r3, #10
 8005a38:	4b74      	ldr	r3, [pc, #464]	; (8005c0c <TouchWSLedActivity+0x2f4>)
 8005a3a:	fb83 1302 	smull	r1, r3, r3, r2
 8005a3e:	4413      	add	r3, r2
 8005a40:	1199      	asrs	r1, r3, #6
 8005a42:	17d3      	asrs	r3, r2, #31
 8005a44:	1ac9      	subs	r1, r1, r3
 8005a46:	460b      	mov	r3, r1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	440b      	add	r3, r1
 8005a4c:	0159      	lsls	r1, r3, #5
 8005a4e:	440b      	add	r3, r1
 8005a50:	1ad1      	subs	r1, r2, r3
 8005a52:	b2ca      	uxtb	r2, r1
 8005a54:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a56:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8005a58:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d807      	bhi.n	8005a70 <TouchWSLedActivity+0x158>
 8005a60:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4966      	ldr	r1, [pc, #408]	; (8005c00 <TouchWSLedActivity+0x2e8>)
 8005a68:	4866      	ldr	r0, [pc, #408]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005a6a:	f008 ff63 	bl	800e934 <siprintf>
 8005a6e:	e006      	b.n	8005a7e <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 8005a70:	4b5f      	ldr	r3, [pc, #380]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4964      	ldr	r1, [pc, #400]	; (8005c08 <TouchWSLedActivity+0x2f0>)
 8005a78:	4862      	ldr	r0, [pc, #392]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005a7a:	f008 ff5b 	bl	800e934 <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005a7e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	2301      	movs	r3, #1
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	223c      	movs	r2, #60	; 0x3c
 8005a8c:	21ac      	movs	r1, #172	; 0xac
 8005a8e:	485d      	ldr	r0, [pc, #372]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005a90:	f7fc f848 	bl	8001b24 <EF_PutString>
 8005a94:	e031      	b.n	8005afa <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8005a9c:	f240 80d6 	bls.w	8005c4c <TouchWSLedActivity+0x334>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8005aa6:	f080 80d1 	bcs.w	8005c4c <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 8005aaa:	2025      	movs	r0, #37	; 0x25
 8005aac:	f000 fb74 	bl	8006198 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 8005ab0:	4857      	ldr	r0, [pc, #348]	; (8005c10 <TouchWSLedActivity+0x2f8>)
 8005ab2:	f7fb fe1d 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005ab6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	2305      	movs	r3, #5
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	2315      	movs	r3, #21
 8005ac2:	221e      	movs	r2, #30
 8005ac4:	2141      	movs	r1, #65	; 0x41
 8005ac6:	f240 101f 	movw	r0, #287	; 0x11f
 8005aca:	f7fb fdc0 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 8005ace:	4951      	ldr	r1, [pc, #324]	; (8005c14 <TouchWSLedActivity+0x2fc>)
 8005ad0:	484c      	ldr	r0, [pc, #304]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005ad2:	f008 ff2f 	bl	800e934 <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005ad6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	2300      	movs	r3, #0
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2243      	movs	r2, #67	; 0x43
 8005ae4:	f240 1123 	movw	r1, #291	; 0x123
 8005ae8:	4846      	ldr	r0, [pc, #280]	; (8005c04 <TouchWSLedActivity+0x2ec>)
 8005aea:	f7fc f81b 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 8005aee:	2201      	movs	r2, #1
 8005af0:	493f      	ldr	r1, [pc, #252]	; (8005bf0 <TouchWSLedActivity+0x2d8>)
 8005af2:	2001      	movs	r0, #1
 8005af4:	f7fc ff1a 	bl	800292c <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005af8:	e0a8      	b.n	8005c4c <TouchWSLedActivity+0x334>
 8005afa:	e0a7      	b.n	8005c4c <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8005afc:	88bb      	ldrh	r3, [r7, #4]
 8005afe:	2b5e      	cmp	r3, #94	; 0x5e
 8005b00:	d924      	bls.n	8005b4c <TouchWSLedActivity+0x234>
 8005b02:	88bb      	ldrh	r3, [r7, #4]
 8005b04:	2b74      	cmp	r3, #116	; 0x74
 8005b06:	d821      	bhi.n	8005b4c <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	2b95      	cmp	r3, #149	; 0x95
 8005b0c:	d906      	bls.n	8005b1c <TouchWSLedActivity+0x204>
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2bbe      	cmp	r3, #190	; 0xbe
 8005b12:	d803      	bhi.n	8005b1c <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 8005b14:	201d      	movs	r0, #29
 8005b16:	f000 fb3f 	bl	8006198 <SendComand>
 8005b1a:	e016      	b.n	8005b4a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2bc9      	cmp	r3, #201	; 0xc9
 8005b20:	d906      	bls.n	8005b30 <TouchWSLedActivity+0x218>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2bf2      	cmp	r3, #242	; 0xf2
 8005b26:	d803      	bhi.n	8005b30 <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 8005b28:	201e      	movs	r0, #30
 8005b2a:	f000 fb35 	bl	8006198 <SendComand>
 8005b2e:	e00c      	b.n	8005b4a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	2bfd      	cmp	r3, #253	; 0xfd
 8005b34:	f240 808c 	bls.w	8005c50 <TouchWSLedActivity+0x338>
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8005b3e:	f200 8087 	bhi.w	8005c50 <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 8005b42:	201f      	movs	r0, #31
 8005b44:	f000 fb28 	bl	8006198 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005b48:	e082      	b.n	8005c50 <TouchWSLedActivity+0x338>
 8005b4a:	e081      	b.n	8005c50 <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8005b4c:	88bb      	ldrh	r3, [r7, #4]
 8005b4e:	2b7c      	cmp	r3, #124	; 0x7c
 8005b50:	d922      	bls.n	8005b98 <TouchWSLedActivity+0x280>
 8005b52:	88bb      	ldrh	r3, [r7, #4]
 8005b54:	2b92      	cmp	r3, #146	; 0x92
 8005b56:	d81f      	bhi.n	8005b98 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b95      	cmp	r3, #149	; 0x95
 8005b5c:	d906      	bls.n	8005b6c <TouchWSLedActivity+0x254>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2bbe      	cmp	r3, #190	; 0xbe
 8005b62:	d803      	bhi.n	8005b6c <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 8005b64:	2020      	movs	r0, #32
 8005b66:	f000 fb17 	bl	8006198 <SendComand>
 8005b6a:	e014      	b.n	8005b96 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8005b6c:	88fb      	ldrh	r3, [r7, #6]
 8005b6e:	2bc9      	cmp	r3, #201	; 0xc9
 8005b70:	d906      	bls.n	8005b80 <TouchWSLedActivity+0x268>
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	2bf2      	cmp	r3, #242	; 0xf2
 8005b76:	d803      	bhi.n	8005b80 <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 8005b78:	2021      	movs	r0, #33	; 0x21
 8005b7a:	f000 fb0d 	bl	8006198 <SendComand>
 8005b7e:	e00a      	b.n	8005b96 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	2bfd      	cmp	r3, #253	; 0xfd
 8005b84:	d966      	bls.n	8005c54 <TouchWSLedActivity+0x33c>
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8005b8c:	d862      	bhi.n	8005c54 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 8005b8e:	2022      	movs	r0, #34	; 0x22
 8005b90:	f000 fb02 	bl	8006198 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005b94:	e05e      	b.n	8005c54 <TouchWSLedActivity+0x33c>
 8005b96:	e05d      	b.n	8005c54 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8005b98:	88bb      	ldrh	r3, [r7, #4]
 8005b9a:	2b9b      	cmp	r3, #155	; 0x9b
 8005b9c:	d93c      	bls.n	8005c18 <TouchWSLedActivity+0x300>
 8005b9e:	88bb      	ldrh	r3, [r7, #4]
 8005ba0:	2bb1      	cmp	r3, #177	; 0xb1
 8005ba2:	d839      	bhi.n	8005c18 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	2b13      	cmp	r3, #19
 8005ba8:	d906      	bls.n	8005bb8 <TouchWSLedActivity+0x2a0>
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b64      	cmp	r3, #100	; 0x64
 8005bae:	d803      	bhi.n	8005bb8 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 8005bb0:	2023      	movs	r0, #35	; 0x23
 8005bb2:	f000 faf1 	bl	8006198 <SendComand>
 8005bb6:	e014      	b.n	8005be2 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b77      	cmp	r3, #119	; 0x77
 8005bbc:	d906      	bls.n	8005bcc <TouchWSLedActivity+0x2b4>
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2bc8      	cmp	r3, #200	; 0xc8
 8005bc2:	d803      	bhi.n	8005bcc <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 8005bc4:	201c      	movs	r0, #28
 8005bc6:	f000 fae7 	bl	8006198 <SendComand>
 8005bca:	e00a      	b.n	8005be2 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	2bdb      	cmp	r3, #219	; 0xdb
 8005bd0:	d942      	bls.n	8005c58 <TouchWSLedActivity+0x340>
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005bd8:	d83e      	bhi.n	8005c58 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8005bda:	2024      	movs	r0, #36	; 0x24
 8005bdc:	f000 fadc 	bl	8006198 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005be0:	e03a      	b.n	8005c58 <TouchWSLedActivity+0x340>
 8005be2:	e039      	b.n	8005c58 <TouchWSLedActivity+0x340>
 8005be4:	08015678 	.word	0x08015678
 8005be8:	20000258 	.word	0x20000258
 8005bec:	20000256 	.word	0x20000256
 8005bf0:	20000033 	.word	0x20000033
 8005bf4:	20000257 	.word	0x20000257
 8005bf8:	2000025c 	.word	0x2000025c
 8005bfc:	20000255 	.word	0x20000255
 8005c00:	08012908 	.word	0x08012908
 8005c04:	200002c8 	.word	0x200002c8
 8005c08:	08012910 	.word	0x08012910
 8005c0c:	a57eb503 	.word	0xa57eb503
 8005c10:	08013700 	.word	0x08013700
 8005c14:	08012914 	.word	0x08012914
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8005c18:	88bb      	ldrh	r3, [r7, #4]
 8005c1a:	2bba      	cmp	r3, #186	; 0xba
 8005c1c:	d91d      	bls.n	8005c5a <TouchWSLedActivity+0x342>
 8005c1e:	88bb      	ldrh	r3, [r7, #4]
 8005c20:	2bd0      	cmp	r3, #208	; 0xd0
 8005c22:	d81a      	bhi.n	8005c5a <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	2b45      	cmp	r3, #69	; 0x45
 8005c28:	d906      	bls.n	8005c38 <TouchWSLedActivity+0x320>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b96      	cmp	r3, #150	; 0x96
 8005c2e:	d803      	bhi.n	8005c38 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8005c30:	2026      	movs	r0, #38	; 0x26
 8005c32:	f000 fab1 	bl	8006198 <SendComand>
 8005c36:	e010      	b.n	8005c5a <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2ba9      	cmp	r3, #169	; 0xa9
 8005c3c:	d90d      	bls.n	8005c5a <TouchWSLedActivity+0x342>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2bfa      	cmp	r3, #250	; 0xfa
 8005c42:	d80a      	bhi.n	8005c5a <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8005c44:	2027      	movs	r0, #39	; 0x27
 8005c46:	f000 faa7 	bl	8006198 <SendComand>
 8005c4a:	e006      	b.n	8005c5a <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8005c4c:	bf00      	nop
 8005c4e:	e004      	b.n	8005c5a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8005c58:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 8005c5a:	f001 faa3 	bl	80071a4 <HAL_GetTick>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4a02      	ldr	r2, [pc, #8]	; (8005c6c <TouchWSLedActivity+0x354>)
 8005c62:	6013      	str	r3, [r2, #0]
			}
		}
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000258 	.word	0x20000258

08005c70 <UART_ParseLine>:
 * 	22	=>	LIGHTSSTATUS=?\n	// Podaj stan wszytskich swiatel
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b094      	sub	sp, #80	; 0x50
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 f837 	bl	8006cf2 <UARTDMA_GetLineFromReceiveBuffer>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d155      	bne.n	8005d36 <UART_ParseLine+0xc6>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	492c      	ldr	r1, [pc, #176]	; (8005d40 <UART_ParseLine+0xd0>)
 8005c90:	4618      	mov	r0, r3
 8005c92:	f009 fca9 	bl	800f5e8 <strtok>
 8005c96:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8005c98:	492a      	ldr	r1, [pc, #168]	; (8005d44 <UART_ParseLine+0xd4>)
 8005c9a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005c9c:	f7fa faa0 	bl	80001e0 <strcmp>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 8005ca6:	f000 f85d 	bl	8005d64 <UART_ParseLED>
	  {
		  UART_ParseAnswLightsStateStatus();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 8005caa:	e044      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 8005cac:	4926      	ldr	r1, [pc, #152]	; (8005d48 <UART_ParseLine+0xd8>)
 8005cae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005cb0:	f7fa fa96 	bl	80001e0 <strcmp>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 8005cba:	f000 f8a1 	bl	8005e00 <UART_ParseAnswStatus>
}
 8005cbe:	e03a      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 8005cc0:	4922      	ldr	r1, [pc, #136]	; (8005d4c <UART_ParseLine+0xdc>)
 8005cc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005cc4:	f7fa fa8c 	bl	80001e0 <strcmp>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8005cce:	f000 f89f 	bl	8005e10 <UART_ParseAnswTemp>
}
 8005cd2:	e030      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 8005cd4:	491e      	ldr	r1, [pc, #120]	; (8005d50 <UART_ParseLine+0xe0>)
 8005cd6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005cd8:	f7fa fa82 	bl	80001e0 <strcmp>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 8005ce2:	f000 f939 	bl	8005f58 <UART_ParseAnswPres>
}
 8005ce6:	e026      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8005ce8:	491a      	ldr	r1, [pc, #104]	; (8005d54 <UART_ParseLine+0xe4>)
 8005cea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005cec:	f7fa fa78 	bl	80001e0 <strcmp>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 8005cf6:	f000 f975 	bl	8005fe4 <UART_ParseAnswChangeRelayState>
}
 8005cfa:	e01c      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8005cfc:	4916      	ldr	r1, [pc, #88]	; (8005d58 <UART_ParseLine+0xe8>)
 8005cfe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d00:	f7fa fa6e 	bl	80001e0 <strcmp>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8005d0a:	f000 f972 	bl	8005ff2 <UART_ParseAnswChangeLightState>
}
 8005d0e:	e012      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8005d10:	4912      	ldr	r1, [pc, #72]	; (8005d5c <UART_ParseLine+0xec>)
 8005d12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d14:	f7fa fa64 	bl	80001e0 <strcmp>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8005d1e:	f000 f96f 	bl	8006000 <UART_ParseAnswRelayStateStatus>
}
 8005d22:	e008      	b.n	8005d36 <UART_ParseLine+0xc6>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 8005d24:	490e      	ldr	r1, [pc, #56]	; (8005d60 <UART_ParseLine+0xf0>)
 8005d26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d28:	f7fa fa5a 	bl	80001e0 <strcmp>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <UART_ParseLine+0xc6>
		  UART_ParseAnswLightsStateStatus();
 8005d32:	f000 f9cb 	bl	80060cc <UART_ParseAnswLightsStateStatus>
}
 8005d36:	bf00      	nop
 8005d38:	3750      	adds	r7, #80	; 0x50
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08012918 	.word	0x08012918
 8005d44:	0801291c 	.word	0x0801291c
 8005d48:	08012920 	.word	0x08012920
 8005d4c:	08012928 	.word	0x08012928
 8005d50:	08012930 	.word	0x08012930
 8005d54:	08012938 	.word	0x08012938
 8005d58:	08012944 	.word	0x08012944
 8005d5c:	08012950 	.word	0x08012950
 8005d60:	0801295c 	.word	0x0801295c

08005d64 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005d6a:	491f      	ldr	r1, [pc, #124]	; (8005de8 <UART_ParseLED+0x84>)
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f009 fc3b 	bl	800f5e8 <strtok>
 8005d72:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d031      	beq.n	8005de0 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b2f      	cmp	r3, #47	; 0x2f
 8005d82:	d903      	bls.n	8005d8c <UART_ParseLED+0x28>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b39      	cmp	r3, #57	; 0x39
 8005d8a:	d904      	bls.n	8005d96 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 8005d8c:	4917      	ldr	r1, [pc, #92]	; (8005dec <UART_ParseLED+0x88>)
 8005d8e:	4818      	ldr	r0, [pc, #96]	; (8005df0 <UART_ParseLED+0x8c>)
 8005d90:	f000 ffe0 	bl	8006d54 <UARTDMA_Print>
			return;	// And exit parsing
 8005d94:	e024      	b.n	8005de0 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f007 ff15 	bl	800dbc6 <atoi>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d10a      	bne.n	8005dbc <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005da6:	2200      	movs	r2, #0
 8005da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dac:	4811      	ldr	r0, [pc, #68]	; (8005df4 <UART_ParseLED+0x90>)
 8005dae:	f002 f975 	bl	800809c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8005db2:	4911      	ldr	r1, [pc, #68]	; (8005df8 <UART_ParseLED+0x94>)
 8005db4:	480e      	ldr	r0, [pc, #56]	; (8005df0 <UART_ParseLED+0x8c>)
 8005db6:	f000 ffcd 	bl	8006d54 <UARTDMA_Print>
 8005dba:	e011      	b.n	8005de0 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc8:	480a      	ldr	r0, [pc, #40]	; (8005df4 <UART_ParseLED+0x90>)
 8005dca:	f002 f967 	bl	800809c <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 8005dce:	490b      	ldr	r1, [pc, #44]	; (8005dfc <UART_ParseLED+0x98>)
 8005dd0:	4807      	ldr	r0, [pc, #28]	; (8005df0 <UART_ParseLED+0x8c>)
 8005dd2:	f000 ffbf 	bl	8006d54 <UARTDMA_Print>
 8005dd6:	e003      	b.n	8005de0 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8005dd8:	4904      	ldr	r1, [pc, #16]	; (8005dec <UART_ParseLED+0x88>)
 8005dda:	4805      	ldr	r0, [pc, #20]	; (8005df0 <UART_ParseLED+0x8c>)
 8005ddc:	f000 ffba 	bl	8006d54 <UARTDMA_Print>
		}
	}
}
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	08012968 	.word	0x08012968
 8005dec:	0801296c 	.word	0x0801296c
 8005df0:	20000450 	.word	0x20000450
 8005df4:	40020800 	.word	0x40020800
 8005df8:	0801297c 	.word	0x0801297c
 8005dfc:	08012988 	.word	0x08012988

08005e00 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8005e04:	bf00      	nop
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 8005e1a:	4947      	ldr	r1, [pc, #284]	; (8005f38 <UART_ParseAnswTemp+0x128>)
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f009 fbe3 	bl	800f5e8 <strtok>
 8005e22:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8081 	beq.w	8005f30 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f007 fec9 	bl	800dbc6 <atoi>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8005e40:	493d      	ldr	r1, [pc, #244]	; (8005f38 <UART_ParseAnswTemp+0x128>)
 8005e42:	2000      	movs	r0, #0
 8005e44:	f009 fbd0 	bl	800f5e8 <strtok>
 8005e48:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f007 feb8 	bl	800dbc0 <atof>
 8005e50:	ec53 2b10 	vmov	r2, r3, d0
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	f7fa fede 	bl	8000c18 <__aeabi_d2f>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a37      	ldr	r2, [pc, #220]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005e60:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 8005e62:	4b37      	ldr	r3, [pc, #220]	; (8005f40 <UART_ParseAnswTemp+0x130>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d162      	bne.n	8005f30 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d119      	bne.n	8005ea4 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 8005e70:	4834      	ldr	r0, [pc, #208]	; (8005f44 <UART_ParseAnswTemp+0x134>)
 8005e72:	f7fb fc3d 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 8005e76:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fa fb7c 	bl	8000578 <__aeabi_f2d>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4930      	ldr	r1, [pc, #192]	; (8005f48 <UART_ParseAnswTemp+0x138>)
 8005e86:	4831      	ldr	r0, [pc, #196]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005e88:	f008 fd54 	bl	800e934 <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005e8c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	2301      	movs	r3, #1
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	2300      	movs	r3, #0
 8005e98:	2250      	movs	r2, #80	; 0x50
 8005e9a:	2114      	movs	r1, #20
 8005e9c:	482b      	ldr	r0, [pc, #172]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005e9e:	f7fb fe41 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 8005ea2:	e045      	b.n	8005f30 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d142      	bne.n	8005f30 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb8:	d11d      	bne.n	8005ef6 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 8005eba:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <UART_ParseAnswTemp+0x140>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005ec0:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005ec2:	4820      	ldr	r0, [pc, #128]	; (8005f44 <UART_ParseAnswTemp+0x134>)
 8005ec4:	f7fb fc14 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fa fb53 	bl	8000578 <__aeabi_f2d>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	491f      	ldr	r1, [pc, #124]	; (8005f54 <UART_ParseAnswTemp+0x144>)
 8005ed8:	481c      	ldr	r0, [pc, #112]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005eda:	f008 fd2b 	bl	800e934 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005ede:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	226e      	movs	r2, #110	; 0x6e
 8005eec:	2114      	movs	r1, #20
 8005eee:	4817      	ldr	r0, [pc, #92]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005ef0:	f7fb fe18 	bl	8001b24 <EF_PutString>
	}
 8005ef4:	e01c      	b.n	8005f30 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8005ef6:	4813      	ldr	r0, [pc, #76]	; (8005f44 <UART_ParseAnswTemp+0x134>)
 8005ef8:	f7fb fbfa 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fb39 	bl	8000578 <__aeabi_f2d>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4912      	ldr	r1, [pc, #72]	; (8005f54 <UART_ParseAnswTemp+0x144>)
 8005f0c:	480f      	ldr	r0, [pc, #60]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005f0e:	f008 fd11 	bl	800e934 <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005f12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	226e      	movs	r2, #110	; 0x6e
 8005f20:	2114      	movs	r1, #20
 8005f22:	480a      	ldr	r0, [pc, #40]	; (8005f4c <UART_ParseAnswTemp+0x13c>)
 8005f24:	f7fb fdfe 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <UART_ParseAnswTemp+0x12c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a08      	ldr	r2, [pc, #32]	; (8005f50 <UART_ParseAnswTemp+0x140>)
 8005f2e:	6013      	str	r3, [r2, #0]
	}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08012968 	.word	0x08012968
 8005f3c:	20000260 	.word	0x20000260
 8005f40:	2000025c 	.word	0x2000025c
 8005f44:	08015678 	.word	0x08015678
 8005f48:	08012994 	.word	0x08012994
 8005f4c:	200002c8 	.word	0x200002c8
 8005f50:	20000264 	.word	0x20000264
 8005f54:	080129a8 	.word	0x080129a8

08005f58 <UART_ParseAnswPres>:

//
// Parsing information about current presure
//"APRES=1014.200\n"
void UART_ParseAnswPres()
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 8005f5e:	491b      	ldr	r1, [pc, #108]	; (8005fcc <UART_ParseAnswPres+0x74>)
 8005f60:	2000      	movs	r0, #0
 8005f62:	f009 fb41 	bl	800f5e8 <strtok>
 8005f66:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d028      	beq.n	8005fc2 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f007 fe25 	bl	800dbc0 <atof>
 8005f76:	ec53 2b10 	vmov	r2, r3, d0
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7fa fe4b 	bl	8000c18 <__aeabi_d2f>
 8005f82:	4603      	mov	r3, r0
 8005f84:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <UART_ParseAnswPres+0x78>)
 8005f86:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <UART_ParseAnswPres+0x7c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d118      	bne.n	8005fc2 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8005f90:	4811      	ldr	r0, [pc, #68]	; (8005fd8 <UART_ParseAnswPres+0x80>)
 8005f92:	f7fb fbad 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8005f96:	4b0e      	ldr	r3, [pc, #56]	; (8005fd0 <UART_ParseAnswPres+0x78>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa faec 	bl	8000578 <__aeabi_f2d>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	490d      	ldr	r1, [pc, #52]	; (8005fdc <UART_ParseAnswPres+0x84>)
 8005fa6:	480e      	ldr	r0, [pc, #56]	; (8005fe0 <UART_ParseAnswPres+0x88>)
 8005fa8:	f008 fcc4 	bl	800e934 <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8005fac:	f24c 6318 	movw	r3, #50712	; 0xc618
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	22aa      	movs	r2, #170	; 0xaa
 8005fba:	2114      	movs	r1, #20
 8005fbc:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <UART_ParseAnswPres+0x88>)
 8005fbe:	f7fb fdb1 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8005fc2:	bf00      	nop
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08012968 	.word	0x08012968
 8005fd0:	20000268 	.word	0x20000268
 8005fd4:	2000025c 	.word	0x2000025c
 8005fd8:	08015678 	.word	0x08015678
 8005fdc:	080129bc 	.word	0x080129bc
 8005fe0:	200002c8 	.word	0x200002c8

08005fe4 <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
	//TODO!
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	af00      	add	r7, sp, #0
	//TODO!
}
 8005ff6:	bf00      	nop
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 8006006:	2300      	movs	r3, #0
 8006008:	71fb      	strb	r3, [r7, #7]
 800600a:	e04a      	b.n	80060a2 <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800600c:	4928      	ldr	r1, [pc, #160]	; (80060b0 <UART_ParseAnswRelayStateStatus+0xb0>)
 800600e:	2000      	movs	r0, #0
 8006010:	f009 faea 	bl	800f5e8 <strtok>
 8006014:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02f      	beq.n	800607e <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800601e:	2300      	movs	r3, #0
 8006020:	71bb      	strb	r3, [r7, #6]
 8006022:	e025      	b.n	8006070 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 8006024:	79bb      	ldrb	r3, [r7, #6]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b2f      	cmp	r3, #47	; 0x2f
 800602e:	d905      	bls.n	800603c <UART_ParseAnswRelayStateStatus+0x3c>
 8006030:	79bb      	ldrb	r3, [r7, #6]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4413      	add	r3, r2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b39      	cmp	r3, #57	; 0x39
 800603a:	d90e      	bls.n	800605a <UART_ParseAnswRelayStateStatus+0x5a>
 800603c:	79bb      	ldrb	r3, [r7, #6]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b2e      	cmp	r3, #46	; 0x2e
 8006046:	d008      	beq.n	800605a <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8006048:	491a      	ldr	r1, [pc, #104]	; (80060b4 <UART_ParseAnswRelayStateStatus+0xb4>)
 800604a:	481b      	ldr	r0, [pc, #108]	; (80060b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 800604c:	f008 fc72 	bl	800e934 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8006050:	4919      	ldr	r1, [pc, #100]	; (80060b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8006052:	481a      	ldr	r0, [pc, #104]	; (80060bc <UART_ParseAnswRelayStateStatus+0xbc>)
 8006054:	f000 fe7e 	bl	8006d54 <UARTDMA_Print>
					return;	// And exit parsing
 8006058:	e026      	b.n	80060a8 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 800605a:	6838      	ldr	r0, [r7, #0]
 800605c:	f007 fdb3 	bl	800dbc6 <atoi>
 8006060:	4602      	mov	r2, r0
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	b2d1      	uxtb	r1, r2
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <UART_ParseAnswRelayStateStatus+0xc0>)
 8006068:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 800606a:	79bb      	ldrb	r3, [r7, #6]
 800606c:	3301      	adds	r3, #1
 800606e:	71bb      	strb	r3, [r7, #6]
 8006070:	79bb      	ldrb	r3, [r7, #6]
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1d3      	bne.n	8006024 <UART_ParseAnswRelayStateStatus+0x24>
 800607c:	e008      	b.n	8006090 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800607e:	4911      	ldr	r1, [pc, #68]	; (80060c4 <UART_ParseAnswRelayStateStatus+0xc4>)
 8006080:	480d      	ldr	r0, [pc, #52]	; (80060b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8006082:	f008 fc57 	bl	800e934 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8006086:	490c      	ldr	r1, [pc, #48]	; (80060b8 <UART_ParseAnswRelayStateStatus+0xb8>)
 8006088:	480c      	ldr	r0, [pc, #48]	; (80060bc <UART_ParseAnswRelayStateStatus+0xbc>)
 800608a:	f000 fe63 	bl	8006d54 <UARTDMA_Print>
			return;	// And exit parsing
 800608e:	e00b      	b.n	80060a8 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8006090:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <UART_ParseAnswRelayStateStatus+0xc8>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d101      	bne.n	800609c <UART_ParseAnswRelayStateStatus+0x9c>
 8006098:	f7fd ff6c 	bl	8003f74 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	3301      	adds	r3, #1
 80060a0:	71fb      	strb	r3, [r7, #7]
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d9b1      	bls.n	800600c <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	08012968 	.word	0x08012968
 80060b4:	080129d4 	.word	0x080129d4
 80060b8:	20000620 	.word	0x20000620
 80060bc:	20000450 	.word	0x20000450
 80060c0:	20000274 	.word	0x20000274
 80060c4:	080129e8 	.word	0x080129e8
 80060c8:	2000025c 	.word	0x2000025c

080060cc <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80060d2:	2300      	movs	r3, #0
 80060d4:	71fb      	strb	r3, [r7, #7]
 80060d6:	e04a      	b.n	800616e <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80060d8:	4928      	ldr	r1, [pc, #160]	; (800617c <UART_ParseAnswLightsStateStatus+0xb0>)
 80060da:	2000      	movs	r0, #0
 80060dc:	f009 fa84 	bl	800f5e8 <strtok>
 80060e0:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d02f      	beq.n	800614a <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80060ea:	2300      	movs	r3, #0
 80060ec:	71bb      	strb	r3, [r7, #6]
 80060ee:	e025      	b.n	800613c <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80060f0:	79bb      	ldrb	r3, [r7, #6]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b2f      	cmp	r3, #47	; 0x2f
 80060fa:	d905      	bls.n	8006108 <UART_ParseAnswLightsStateStatus+0x3c>
 80060fc:	79bb      	ldrb	r3, [r7, #6]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4413      	add	r3, r2
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b39      	cmp	r3, #57	; 0x39
 8006106:	d90e      	bls.n	8006126 <UART_ParseAnswLightsStateStatus+0x5a>
 8006108:	79bb      	ldrb	r3, [r7, #6]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	4413      	add	r3, r2
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b2e      	cmp	r3, #46	; 0x2e
 8006112:	d008      	beq.n	8006126 <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8006114:	491a      	ldr	r1, [pc, #104]	; (8006180 <UART_ParseAnswLightsStateStatus+0xb4>)
 8006116:	481b      	ldr	r0, [pc, #108]	; (8006184 <UART_ParseAnswLightsStateStatus+0xb8>)
 8006118:	f008 fc0c 	bl	800e934 <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 800611c:	4919      	ldr	r1, [pc, #100]	; (8006184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800611e:	481a      	ldr	r0, [pc, #104]	; (8006188 <UART_ParseAnswLightsStateStatus+0xbc>)
 8006120:	f000 fe18 	bl	8006d54 <UARTDMA_Print>
					return;	// And exit parsing
 8006124:	e026      	b.n	8006174 <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8006126:	6838      	ldr	r0, [r7, #0]
 8006128:	f007 fd4d 	bl	800dbc6 <atoi>
 800612c:	4602      	mov	r2, r0
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	b2d1      	uxtb	r1, r2
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <UART_ParseAnswLightsStateStatus+0xc0>)
 8006134:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8006136:	79bb      	ldrb	r3, [r7, #6]
 8006138:	3301      	adds	r3, #1
 800613a:	71bb      	strb	r3, [r7, #6]
 800613c:	79bb      	ldrb	r3, [r7, #6]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	4413      	add	r3, r2
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1d3      	bne.n	80060f0 <UART_ParseAnswLightsStateStatus+0x24>
 8006148:	e008      	b.n	800615c <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 800614a:	4911      	ldr	r1, [pc, #68]	; (8006190 <UART_ParseAnswLightsStateStatus+0xc4>)
 800614c:	480d      	ldr	r0, [pc, #52]	; (8006184 <UART_ParseAnswLightsStateStatus+0xb8>)
 800614e:	f008 fbf1 	bl	800e934 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8006152:	490c      	ldr	r1, [pc, #48]	; (8006184 <UART_ParseAnswLightsStateStatus+0xb8>)
 8006154:	480c      	ldr	r0, [pc, #48]	; (8006188 <UART_ParseAnswLightsStateStatus+0xbc>)
 8006156:	f000 fdfd 	bl	8006d54 <UARTDMA_Print>
			return;	// And exit parsing
 800615a:	e00b      	b.n	8006174 <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <UART_ParseAnswLightsStateStatus+0xc8>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b05      	cmp	r3, #5
 8006162:	d101      	bne.n	8006168 <UART_ParseAnswLightsStateStatus+0x9c>
 8006164:	f7fe f80e 	bl	8004184 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	3301      	adds	r3, #1
 800616c:	71fb      	strb	r3, [r7, #7]
 800616e:	79fb      	ldrb	r3, [r7, #7]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d9b1      	bls.n	80060d8 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	08012968 	.word	0x08012968
 8006180:	080129d4 	.word	0x080129d4
 8006184:	20000620 	.word	0x20000620
 8006188:	20000450 	.word	0x20000450
 800618c:	20000278 	.word	0x20000278
 8006190:	080129e8 	.word	0x080129e8
 8006194:	2000025c 	.word	0x2000025c

08006198 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b27      	cmp	r3, #39	; 0x27
 80061aa:	f200 8129 	bhi.w	8006400 <SendComand+0x268>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <SendComand+0x1c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	08006255 	.word	0x08006255
 80061b8:	0800625f 	.word	0x0800625f
 80061bc:	08006269 	.word	0x08006269
 80061c0:	08006273 	.word	0x08006273
 80061c4:	08006287 	.word	0x08006287
 80061c8:	08006291 	.word	0x08006291
 80061cc:	0800629b 	.word	0x0800629b
 80061d0:	080062a5 	.word	0x080062a5
 80061d4:	080062af 	.word	0x080062af
 80061d8:	080062b9 	.word	0x080062b9
 80061dc:	080062c3 	.word	0x080062c3
 80061e0:	080062cd 	.word	0x080062cd
 80061e4:	080062d7 	.word	0x080062d7
 80061e8:	080062ff 	.word	0x080062ff
 80061ec:	08006309 	.word	0x08006309
 80061f0:	08006313 	.word	0x08006313
 80061f4:	0800631d 	.word	0x0800631d
 80061f8:	08006327 	.word	0x08006327
 80061fc:	08006331 	.word	0x08006331
 8006200:	0800633b 	.word	0x0800633b
 8006204:	08006345 	.word	0x08006345
 8006208:	080062f5 	.word	0x080062f5
 800620c:	08006363 	.word	0x08006363
 8006210:	080062e1 	.word	0x080062e1
 8006214:	080062eb 	.word	0x080062eb
 8006218:	0800634f 	.word	0x0800634f
 800621c:	08006359 	.word	0x08006359
 8006220:	0800627d 	.word	0x0800627d
 8006224:	0800636d 	.word	0x0800636d
 8006228:	08006377 	.word	0x08006377
 800622c:	08006381 	.word	0x08006381
 8006230:	0800638b 	.word	0x0800638b
 8006234:	08006395 	.word	0x08006395
 8006238:	0800639f 	.word	0x0800639f
 800623c:	080063a9 	.word	0x080063a9
 8006240:	080063b3 	.word	0x080063b3
 8006244:	080063bd 	.word	0x080063bd
 8006248:	080063c7 	.word	0x080063c7
 800624c:	080063ed 	.word	0x080063ed
 8006250:	080063f7 	.word	0x080063f7
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8006254:	496d      	ldr	r1, [pc, #436]	; (800640c <SendComand+0x274>)
 8006256:	486e      	ldr	r0, [pc, #440]	; (8006410 <SendComand+0x278>)
 8006258:	f000 fd7c 	bl	8006d54 <UARTDMA_Print>
			break;
 800625c:	e0d0      	b.n	8006400 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 800625e:	496d      	ldr	r1, [pc, #436]	; (8006414 <SendComand+0x27c>)
 8006260:	486b      	ldr	r0, [pc, #428]	; (8006410 <SendComand+0x278>)
 8006262:	f000 fd77 	bl	8006d54 <UARTDMA_Print>
			break;
 8006266:	e0cb      	b.n	8006400 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8006268:	496b      	ldr	r1, [pc, #428]	; (8006418 <SendComand+0x280>)
 800626a:	4869      	ldr	r0, [pc, #420]	; (8006410 <SendComand+0x278>)
 800626c:	f000 fd72 	bl	8006d54 <UARTDMA_Print>
			break;
 8006270:	e0c6      	b.n	8006400 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8006272:	496a      	ldr	r1, [pc, #424]	; (800641c <SendComand+0x284>)
 8006274:	4866      	ldr	r0, [pc, #408]	; (8006410 <SendComand+0x278>)
 8006276:	f000 fd6d 	bl	8006d54 <UARTDMA_Print>
			break;
 800627a:	e0c1      	b.n	8006400 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 800627c:	4968      	ldr	r1, [pc, #416]	; (8006420 <SendComand+0x288>)
 800627e:	4864      	ldr	r0, [pc, #400]	; (8006410 <SendComand+0x278>)
 8006280:	f000 fd68 	bl	8006d54 <UARTDMA_Print>
			break;
 8006284:	e0bc      	b.n	8006400 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8006286:	4967      	ldr	r1, [pc, #412]	; (8006424 <SendComand+0x28c>)
 8006288:	4861      	ldr	r0, [pc, #388]	; (8006410 <SendComand+0x278>)
 800628a:	f000 fd63 	bl	8006d54 <UARTDMA_Print>
			break;
 800628e:	e0b7      	b.n	8006400 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8006290:	4965      	ldr	r1, [pc, #404]	; (8006428 <SendComand+0x290>)
 8006292:	485f      	ldr	r0, [pc, #380]	; (8006410 <SendComand+0x278>)
 8006294:	f000 fd5e 	bl	8006d54 <UARTDMA_Print>
			break;
 8006298:	e0b2      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 800629a:	4964      	ldr	r1, [pc, #400]	; (800642c <SendComand+0x294>)
 800629c:	485c      	ldr	r0, [pc, #368]	; (8006410 <SendComand+0x278>)
 800629e:	f000 fd59 	bl	8006d54 <UARTDMA_Print>
			break;
 80062a2:	e0ad      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 80062a4:	4962      	ldr	r1, [pc, #392]	; (8006430 <SendComand+0x298>)
 80062a6:	485a      	ldr	r0, [pc, #360]	; (8006410 <SendComand+0x278>)
 80062a8:	f000 fd54 	bl	8006d54 <UARTDMA_Print>
			break;
 80062ac:	e0a8      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 80062ae:	4961      	ldr	r1, [pc, #388]	; (8006434 <SendComand+0x29c>)
 80062b0:	4857      	ldr	r0, [pc, #348]	; (8006410 <SendComand+0x278>)
 80062b2:	f000 fd4f 	bl	8006d54 <UARTDMA_Print>
			break;
 80062b6:	e0a3      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 80062b8:	495f      	ldr	r1, [pc, #380]	; (8006438 <SendComand+0x2a0>)
 80062ba:	4855      	ldr	r0, [pc, #340]	; (8006410 <SendComand+0x278>)
 80062bc:	f000 fd4a 	bl	8006d54 <UARTDMA_Print>
			break;
 80062c0:	e09e      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 80062c2:	495e      	ldr	r1, [pc, #376]	; (800643c <SendComand+0x2a4>)
 80062c4:	4852      	ldr	r0, [pc, #328]	; (8006410 <SendComand+0x278>)
 80062c6:	f000 fd45 	bl	8006d54 <UARTDMA_Print>
			break;
 80062ca:	e099      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 80062cc:	495c      	ldr	r1, [pc, #368]	; (8006440 <SendComand+0x2a8>)
 80062ce:	4850      	ldr	r0, [pc, #320]	; (8006410 <SendComand+0x278>)
 80062d0:	f000 fd40 	bl	8006d54 <UARTDMA_Print>
			break;
 80062d4:	e094      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 80062d6:	495b      	ldr	r1, [pc, #364]	; (8006444 <SendComand+0x2ac>)
 80062d8:	484d      	ldr	r0, [pc, #308]	; (8006410 <SendComand+0x278>)
 80062da:	f000 fd3b 	bl	8006d54 <UARTDMA_Print>
			break;
 80062de:	e08f      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 80062e0:	4959      	ldr	r1, [pc, #356]	; (8006448 <SendComand+0x2b0>)
 80062e2:	484b      	ldr	r0, [pc, #300]	; (8006410 <SendComand+0x278>)
 80062e4:	f000 fd36 	bl	8006d54 <UARTDMA_Print>
			break;
 80062e8:	e08a      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 80062ea:	4958      	ldr	r1, [pc, #352]	; (800644c <SendComand+0x2b4>)
 80062ec:	4848      	ldr	r0, [pc, #288]	; (8006410 <SendComand+0x278>)
 80062ee:	f000 fd31 	bl	8006d54 <UARTDMA_Print>
			break;
 80062f2:	e085      	b.n	8006400 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 80062f4:	4956      	ldr	r1, [pc, #344]	; (8006450 <SendComand+0x2b8>)
 80062f6:	4846      	ldr	r0, [pc, #280]	; (8006410 <SendComand+0x278>)
 80062f8:	f000 fd2c 	bl	8006d54 <UARTDMA_Print>
			break;
 80062fc:	e080      	b.n	8006400 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 80062fe:	4955      	ldr	r1, [pc, #340]	; (8006454 <SendComand+0x2bc>)
 8006300:	4843      	ldr	r0, [pc, #268]	; (8006410 <SendComand+0x278>)
 8006302:	f000 fd27 	bl	8006d54 <UARTDMA_Print>
			break;
 8006306:	e07b      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8006308:	4953      	ldr	r1, [pc, #332]	; (8006458 <SendComand+0x2c0>)
 800630a:	4841      	ldr	r0, [pc, #260]	; (8006410 <SendComand+0x278>)
 800630c:	f000 fd22 	bl	8006d54 <UARTDMA_Print>
			break;
 8006310:	e076      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8006312:	4952      	ldr	r1, [pc, #328]	; (800645c <SendComand+0x2c4>)
 8006314:	483e      	ldr	r0, [pc, #248]	; (8006410 <SendComand+0x278>)
 8006316:	f000 fd1d 	bl	8006d54 <UARTDMA_Print>
			break;
 800631a:	e071      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 800631c:	4950      	ldr	r1, [pc, #320]	; (8006460 <SendComand+0x2c8>)
 800631e:	483c      	ldr	r0, [pc, #240]	; (8006410 <SendComand+0x278>)
 8006320:	f000 fd18 	bl	8006d54 <UARTDMA_Print>
			break;
 8006324:	e06c      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8006326:	494f      	ldr	r1, [pc, #316]	; (8006464 <SendComand+0x2cc>)
 8006328:	4839      	ldr	r0, [pc, #228]	; (8006410 <SendComand+0x278>)
 800632a:	f000 fd13 	bl	8006d54 <UARTDMA_Print>
			break;
 800632e:	e067      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8006330:	494d      	ldr	r1, [pc, #308]	; (8006468 <SendComand+0x2d0>)
 8006332:	4837      	ldr	r0, [pc, #220]	; (8006410 <SendComand+0x278>)
 8006334:	f000 fd0e 	bl	8006d54 <UARTDMA_Print>
			break;
 8006338:	e062      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 800633a:	494c      	ldr	r1, [pc, #304]	; (800646c <SendComand+0x2d4>)
 800633c:	4834      	ldr	r0, [pc, #208]	; (8006410 <SendComand+0x278>)
 800633e:	f000 fd09 	bl	8006d54 <UARTDMA_Print>
			break;
 8006342:	e05d      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8006344:	494a      	ldr	r1, [pc, #296]	; (8006470 <SendComand+0x2d8>)
 8006346:	4832      	ldr	r0, [pc, #200]	; (8006410 <SendComand+0x278>)
 8006348:	f000 fd04 	bl	8006d54 <UARTDMA_Print>
			break;
 800634c:	e058      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 800634e:	4949      	ldr	r1, [pc, #292]	; (8006474 <SendComand+0x2dc>)
 8006350:	482f      	ldr	r0, [pc, #188]	; (8006410 <SendComand+0x278>)
 8006352:	f000 fcff 	bl	8006d54 <UARTDMA_Print>
			break;
 8006356:	e053      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8006358:	4947      	ldr	r1, [pc, #284]	; (8006478 <SendComand+0x2e0>)
 800635a:	482d      	ldr	r0, [pc, #180]	; (8006410 <SendComand+0x278>)
 800635c:	f000 fcfa 	bl	8006d54 <UARTDMA_Print>
			break;
 8006360:	e04e      	b.n	8006400 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8006362:	4946      	ldr	r1, [pc, #280]	; (800647c <SendComand+0x2e4>)
 8006364:	482a      	ldr	r0, [pc, #168]	; (8006410 <SendComand+0x278>)
 8006366:	f000 fcf5 	bl	8006d54 <UARTDMA_Print>
			break;
 800636a:	e049      	b.n	8006400 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 800636c:	4944      	ldr	r1, [pc, #272]	; (8006480 <SendComand+0x2e8>)
 800636e:	4828      	ldr	r0, [pc, #160]	; (8006410 <SendComand+0x278>)
 8006370:	f000 fcf0 	bl	8006d54 <UARTDMA_Print>
			break;
 8006374:	e044      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8006376:	4943      	ldr	r1, [pc, #268]	; (8006484 <SendComand+0x2ec>)
 8006378:	4825      	ldr	r0, [pc, #148]	; (8006410 <SendComand+0x278>)
 800637a:	f000 fceb 	bl	8006d54 <UARTDMA_Print>
			break;
 800637e:	e03f      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8006380:	4941      	ldr	r1, [pc, #260]	; (8006488 <SendComand+0x2f0>)
 8006382:	4823      	ldr	r0, [pc, #140]	; (8006410 <SendComand+0x278>)
 8006384:	f000 fce6 	bl	8006d54 <UARTDMA_Print>
			break;
 8006388:	e03a      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 800638a:	4940      	ldr	r1, [pc, #256]	; (800648c <SendComand+0x2f4>)
 800638c:	4820      	ldr	r0, [pc, #128]	; (8006410 <SendComand+0x278>)
 800638e:	f000 fce1 	bl	8006d54 <UARTDMA_Print>
			break;
 8006392:	e035      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8006394:	493e      	ldr	r1, [pc, #248]	; (8006490 <SendComand+0x2f8>)
 8006396:	481e      	ldr	r0, [pc, #120]	; (8006410 <SendComand+0x278>)
 8006398:	f000 fcdc 	bl	8006d54 <UARTDMA_Print>
			break;
 800639c:	e030      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 800639e:	493d      	ldr	r1, [pc, #244]	; (8006494 <SendComand+0x2fc>)
 80063a0:	481b      	ldr	r0, [pc, #108]	; (8006410 <SendComand+0x278>)
 80063a2:	f000 fcd7 	bl	8006d54 <UARTDMA_Print>
			break;
 80063a6:	e02b      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 80063a8:	493b      	ldr	r1, [pc, #236]	; (8006498 <SendComand+0x300>)
 80063aa:	4819      	ldr	r0, [pc, #100]	; (8006410 <SendComand+0x278>)
 80063ac:	f000 fcd2 	bl	8006d54 <UARTDMA_Print>
			break;
 80063b0:	e026      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 80063b2:	493a      	ldr	r1, [pc, #232]	; (800649c <SendComand+0x304>)
 80063b4:	4816      	ldr	r0, [pc, #88]	; (8006410 <SendComand+0x278>)
 80063b6:	f000 fccd 	bl	8006d54 <UARTDMA_Print>
			break;
 80063ba:	e021      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 80063bc:	4938      	ldr	r1, [pc, #224]	; (80064a0 <SendComand+0x308>)
 80063be:	4814      	ldr	r0, [pc, #80]	; (8006410 <SendComand+0x278>)
 80063c0:	f000 fcc8 	bl	8006d54 <UARTDMA_Print>
			break;
 80063c4:	e01c      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 80063c6:	4b37      	ldr	r3, [pc, #220]	; (80064a4 <SendComand+0x30c>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d802      	bhi.n	80063d4 <SendComand+0x23c>
 80063ce:	4b35      	ldr	r3, [pc, #212]	; (80064a4 <SendComand+0x30c>)
 80063d0:	2209      	movs	r2, #9
 80063d2:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 80063d4:	4b33      	ldr	r3, [pc, #204]	; (80064a4 <SendComand+0x30c>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	4933      	ldr	r1, [pc, #204]	; (80064a8 <SendComand+0x310>)
 80063dc:	4833      	ldr	r0, [pc, #204]	; (80064ac <SendComand+0x314>)
 80063de:	f008 faa9 	bl	800e934 <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 80063e2:	4932      	ldr	r1, [pc, #200]	; (80064ac <SendComand+0x314>)
 80063e4:	480a      	ldr	r0, [pc, #40]	; (8006410 <SendComand+0x278>)
 80063e6:	f000 fcb5 	bl	8006d54 <UARTDMA_Print>
			break;
 80063ea:	e009      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 80063ec:	4930      	ldr	r1, [pc, #192]	; (80064b0 <SendComand+0x318>)
 80063ee:	4808      	ldr	r0, [pc, #32]	; (8006410 <SendComand+0x278>)
 80063f0:	f000 fcb0 	bl	8006d54 <UARTDMA_Print>
			break;
 80063f4:	e004      	b.n	8006400 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 80063f6:	492f      	ldr	r1, [pc, #188]	; (80064b4 <SendComand+0x31c>)
 80063f8:	4805      	ldr	r0, [pc, #20]	; (8006410 <SendComand+0x278>)
 80063fa:	f000 fcab 	bl	8006d54 <UARTDMA_Print>
			break;
 80063fe:	bf00      	nop
		}
	return 1;
 8006400:	2301      	movs	r3, #1
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	08012a04 	.word	0x08012a04
 8006410:	20000450 	.word	0x20000450
 8006414:	08012a0c 	.word	0x08012a0c
 8006418:	08012a14 	.word	0x08012a14
 800641c:	08012a20 	.word	0x08012a20
 8006420:	08012a28 	.word	0x08012a28
 8006424:	08012a30 	.word	0x08012a30
 8006428:	08012a38 	.word	0x08012a38
 800642c:	08012a48 	.word	0x08012a48
 8006430:	08012a58 	.word	0x08012a58
 8006434:	08012a68 	.word	0x08012a68
 8006438:	08012a78 	.word	0x08012a78
 800643c:	08012a88 	.word	0x08012a88
 8006440:	08012a98 	.word	0x08012a98
 8006444:	08012aa8 	.word	0x08012aa8
 8006448:	08012ab8 	.word	0x08012ab8
 800644c:	08012ac8 	.word	0x08012ac8
 8006450:	08012ad8 	.word	0x08012ad8
 8006454:	08012ae8 	.word	0x08012ae8
 8006458:	08012af8 	.word	0x08012af8
 800645c:	08012b08 	.word	0x08012b08
 8006460:	08012b18 	.word	0x08012b18
 8006464:	08012b28 	.word	0x08012b28
 8006468:	08012b38 	.word	0x08012b38
 800646c:	08012b48 	.word	0x08012b48
 8006470:	08012b58 	.word	0x08012b58
 8006474:	08012b68 	.word	0x08012b68
 8006478:	08012b78 	.word	0x08012b78
 800647c:	08012b88 	.word	0x08012b88
 8006480:	08012b98 	.word	0x08012b98
 8006484:	08012ba8 	.word	0x08012ba8
 8006488:	08012bb8 	.word	0x08012bb8
 800648c:	08012bc8 	.word	0x08012bc8
 8006490:	08012bd8 	.word	0x08012bd8
 8006494:	08012be8 	.word	0x08012be8
 8006498:	08012bf8 	.word	0x08012bf8
 800649c:	08012c08 	.word	0x08012c08
 80064a0:	08012c18 	.word	0x08012c18
 80064a4:	20000033 	.word	0x20000033
 80064a8:	08012c28 	.word	0x08012c28
 80064ac:	20000620 	.word	0x20000620
 80064b0:	08012c38 	.word	0x08012c38
 80064b4:	08012c48 	.word	0x08012c48

080064b8 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d101      	bne.n	80064d2 <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 80064ce:	2301      	movs	r3, #1
 80064d0:	e015      	b.n	80064fe <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	785b      	ldrb	r3, [r3, #1]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	789a      	ldrb	r2, [r3, #2]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	3301      	adds	r3, #1
 80064e8:	425a      	negs	r2, r3
 80064ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064f2:	bf58      	it	pl
 80064f4:	4253      	negpl	r3, r2
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	425a      	negs	r2, r3
 800651e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006526:	bf58      	it	pl
 8006528:	4253      	negpl	r3, r2
 800652a:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	785b      	ldrb	r3, [r3, #1]
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	429a      	cmp	r2, r3
 8006534:	d101      	bne.n	800653a <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8006536:	2301      	movs	r3, #1
 8006538:	e00a      	b.n	8006550 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006560:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <MX_SPI1_Init+0x68>)
 8006564:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800656c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006576:	2200      	movs	r2, #0
 8006578:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <MX_SPI1_Init+0x64>)
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006582:	2200      	movs	r2, #0
 8006584:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800658c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800658e:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006590:	2210      	movs	r2, #16
 8006592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <MX_SPI1_Init+0x64>)
 8006596:	2200      	movs	r2, #0
 8006598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <MX_SPI1_Init+0x64>)
 800659c:	2200      	movs	r2, #0
 800659e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <MX_SPI1_Init+0x64>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <MX_SPI1_Init+0x64>)
 80065a8:	220a      	movs	r2, #10
 80065aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80065ac:	4804      	ldr	r0, [pc, #16]	; (80065c0 <MX_SPI1_Init+0x64>)
 80065ae:	f005 fb0d 	bl	800bbcc <HAL_SPI_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80065b8:	f7fe fa28 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80065bc:	bf00      	nop
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	200006bc 	.word	0x200006bc
 80065c4:	40013000 	.word	0x40013000

080065c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80065cc:	4b17      	ldr	r3, [pc, #92]	; (800662c <MX_SPI3_Init+0x64>)
 80065ce:	4a18      	ldr	r2, [pc, #96]	; (8006630 <MX_SPI3_Init+0x68>)
 80065d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80065d2:	4b16      	ldr	r3, [pc, #88]	; (800662c <MX_SPI3_Init+0x64>)
 80065d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80065da:	4b14      	ldr	r3, [pc, #80]	; (800662c <MX_SPI3_Init+0x64>)
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <MX_SPI3_Init+0x64>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <MX_SPI3_Init+0x64>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065ec:	4b0f      	ldr	r3, [pc, #60]	; (800662c <MX_SPI3_Init+0x64>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80065f2:	4b0e      	ldr	r3, [pc, #56]	; (800662c <MX_SPI3_Init+0x64>)
 80065f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <MX_SPI3_Init+0x64>)
 80065fc:	2220      	movs	r2, #32
 80065fe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <MX_SPI3_Init+0x64>)
 8006602:	2200      	movs	r2, #0
 8006604:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006606:	4b09      	ldr	r3, [pc, #36]	; (800662c <MX_SPI3_Init+0x64>)
 8006608:	2200      	movs	r2, #0
 800660a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800660c:	4b07      	ldr	r3, [pc, #28]	; (800662c <MX_SPI3_Init+0x64>)
 800660e:	2200      	movs	r2, #0
 8006610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8006612:	4b06      	ldr	r3, [pc, #24]	; (800662c <MX_SPI3_Init+0x64>)
 8006614:	220a      	movs	r2, #10
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006618:	4804      	ldr	r0, [pc, #16]	; (800662c <MX_SPI3_Init+0x64>)
 800661a:	f005 fad7 	bl	800bbcc <HAL_SPI_Init>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8006624:	f7fe f9f2 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006628:	bf00      	nop
 800662a:	bd80      	pop	{r7, pc}
 800662c:	20000664 	.word	0x20000664
 8006630:	40003c00 	.word	0x40003c00

08006634 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663c:	f107 031c 	add.w	r3, r7, #28
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	605a      	str	r2, [r3, #4]
 8006646:	609a      	str	r2, [r3, #8]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a32      	ldr	r2, [pc, #200]	; (800671c <HAL_SPI_MspInit+0xe8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d12c      	bne.n	80066b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	4b31      	ldr	r3, [pc, #196]	; (8006720 <HAL_SPI_MspInit+0xec>)
 800665c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665e:	4a30      	ldr	r2, [pc, #192]	; (8006720 <HAL_SPI_MspInit+0xec>)
 8006660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006664:	6453      	str	r3, [r2, #68]	; 0x44
 8006666:	4b2e      	ldr	r3, [pc, #184]	; (8006720 <HAL_SPI_MspInit+0xec>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	4b2a      	ldr	r3, [pc, #168]	; (8006720 <HAL_SPI_MspInit+0xec>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	4a29      	ldr	r2, [pc, #164]	; (8006720 <HAL_SPI_MspInit+0xec>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6313      	str	r3, [r2, #48]	; 0x30
 8006682:	4b27      	ldr	r3, [pc, #156]	; (8006720 <HAL_SPI_MspInit+0xec>)
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800668e:	23e0      	movs	r3, #224	; 0xe0
 8006690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006692:	2302      	movs	r3, #2
 8006694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669a:	2303      	movs	r3, #3
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800669e:	2305      	movs	r3, #5
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066a2:	f107 031c 	add.w	r3, r7, #28
 80066a6:	4619      	mov	r1, r3
 80066a8:	481e      	ldr	r0, [pc, #120]	; (8006724 <HAL_SPI_MspInit+0xf0>)
 80066aa:	f001 fb5b 	bl	8007d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80066ae:	e030      	b.n	8006712 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_SPI_MspInit+0xf4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12b      	bne.n	8006712 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	4b18      	ldr	r3, [pc, #96]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a17      	ldr	r2, [pc, #92]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ca:	4b15      	ldr	r3, [pc, #84]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	4a10      	ldr	r2, [pc, #64]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	6313      	str	r3, [r2, #48]	; 0x30
 80066e6:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <HAL_SPI_MspInit+0xec>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80066f2:	2338      	movs	r3, #56	; 0x38
 80066f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f6:	2302      	movs	r3, #2
 80066f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066fe:	2303      	movs	r3, #3
 8006700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006702:	2306      	movs	r3, #6
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006706:	f107 031c 	add.w	r3, r7, #28
 800670a:	4619      	mov	r1, r3
 800670c:	4807      	ldr	r0, [pc, #28]	; (800672c <HAL_SPI_MspInit+0xf8>)
 800670e:	f001 fb29 	bl	8007d64 <HAL_GPIO_Init>
}
 8006712:	bf00      	nop
 8006714:	3730      	adds	r7, #48	; 0x30
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40013000 	.word	0x40013000
 8006720:	40023800 	.word	0x40023800
 8006724:	40020000 	.word	0x40020000
 8006728:	40003c00 	.word	0x40003c00
 800672c:	40020400 	.word	0x40020400

08006730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006736:	2300      	movs	r3, #0
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <HAL_MspInit+0x4c>)
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	4a0f      	ldr	r2, [pc, #60]	; (800677c <HAL_MspInit+0x4c>)
 8006740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006744:	6453      	str	r3, [r2, #68]	; 0x44
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_MspInit+0x4c>)
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674e:	607b      	str	r3, [r7, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	603b      	str	r3, [r7, #0]
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <HAL_MspInit+0x4c>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	4a08      	ldr	r2, [pc, #32]	; (800677c <HAL_MspInit+0x4c>)
 800675c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006760:	6413      	str	r3, [r2, #64]	; 0x40
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <HAL_MspInit+0x4c>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800

08006780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006784:	e7fe      	b.n	8006784 <NMI_Handler+0x4>

08006786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006786:	b480      	push	{r7}
 8006788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800678a:	e7fe      	b.n	800678a <HardFault_Handler+0x4>

0800678c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006790:	e7fe      	b.n	8006790 <MemManage_Handler+0x4>

08006792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006792:	b480      	push	{r7}
 8006794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006796:	e7fe      	b.n	8006796 <BusFault_Handler+0x4>

08006798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800679c:	e7fe      	b.n	800679c <UsageFault_Handler+0x4>

0800679e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800679e:	b480      	push	{r7}
 80067a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067b0:	bf00      	nop
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067ba:	b480      	push	{r7}
 80067bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067cc:	f000 fcd6 	bl	800717c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80067d0:	bf00      	nop
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 80067d8:	2010      	movs	r0, #16
 80067da:	f001 fc93 	bl	8008104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80067de:	bf00      	nop
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80067e8:	4802      	ldr	r0, [pc, #8]	; (80067f4 <DMA1_Stream0_IRQHandler+0x10>)
 80067ea:	f001 f843 	bl	8007874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80067ee:	bf00      	nop
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200003f0 	.word	0x200003f0

080067f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80067fc:	4802      	ldr	r0, [pc, #8]	; (8006808 <DMA1_Stream1_IRQHandler+0x10>)
 80067fe:	f001 f839 	bl	8007874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000033c 	.word	0x2000033c

0800680c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8006810:	4802      	ldr	r0, [pc, #8]	; (800681c <DMA1_Stream5_IRQHandler+0x10>)
 8006812:	f000 f9e9 	bl	8006be8 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8006816:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000450 	.word	0x20000450

08006820 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006824:	4802      	ldr	r0, [pc, #8]	; (8006830 <DMA1_Stream6_IRQHandler+0x10>)
 8006826:	f001 f825 	bl	8007874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000804 	.word	0x20000804

08006834 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8006838:	f44f 7000 	mov.w	r0, #512	; 0x200
 800683c:	f001 fc62 	bl	8008104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006840:	bf00      	nop
 8006842:	bd80      	pop	{r7, pc}

08006844 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006848:	4802      	ldr	r0, [pc, #8]	; (8006854 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800684a:	f005 feb4 	bl	800c5b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800684e:	bf00      	nop
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000714 	.word	0x20000714

08006858 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800685c:	4802      	ldr	r0, [pc, #8]	; (8006868 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800685e:	f005 feaa 	bl	800c5b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	2000075c 	.word	0x2000075c

0800686c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006870:	4802      	ldr	r0, [pc, #8]	; (800687c <I2C1_EV_IRQHandler+0x10>)
 8006872:	f002 fbe7 	bl	8009044 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006876:	bf00      	nop
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	2000039c 	.word	0x2000039c

08006880 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8006884:	4802      	ldr	r0, [pc, #8]	; (8006890 <I2C1_ER_IRQHandler+0x10>)
 8006886:	f002 fd4e 	bl	8009326 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000039c 	.word	0x2000039c

08006894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8006898:	4803      	ldr	r0, [pc, #12]	; (80068a8 <USART2_IRQHandler+0x14>)
 800689a:	f000 f97b 	bl	8006b94 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800689e:	4803      	ldr	r0, [pc, #12]	; (80068ac <USART2_IRQHandler+0x18>)
 80068a0:	f006 f94a 	bl	800cb38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80068a4:	bf00      	nop
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	20000450 	.word	0x20000450
 80068ac:	20000864 	.word	0x20000864

080068b0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80068b4:	4802      	ldr	r0, [pc, #8]	; (80068c0 <SPI3_IRQHandler+0x10>)
 80068b6:	f005 fbb5 	bl	800c024 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80068ba:	bf00      	nop
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000664 	.word	0x20000664

080068c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	return 1;
 80068c8:	2301      	movs	r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <_kill>:

int _kill(int pid, int sig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80068de:	f007 f977 	bl	800dbd0 <__errno>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2216      	movs	r2, #22
 80068e6:	601a      	str	r2, [r3, #0]
	return -1;
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_exit>:

void _exit (int status)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80068fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff ffe7 	bl	80068d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006906:	e7fe      	b.n	8006906 <_exit+0x12>

08006908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e00a      	b.n	8006930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800691a:	f3af 8000 	nop.w
 800691e:	4601      	mov	r1, r0
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	60ba      	str	r2, [r7, #8]
 8006926:	b2ca      	uxtb	r2, r1
 8006928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	3301      	adds	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	dbf0      	blt.n	800691a <_read+0x12>
	}

return len;
 8006938:	687b      	ldr	r3, [r7, #4]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b086      	sub	sp, #24
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e009      	b.n	8006968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	60ba      	str	r2, [r7, #8]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4618      	mov	r0, r3
 800695e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	dbf1      	blt.n	8006954 <_write+0x12>
	}
	return len;
 8006970:	687b      	ldr	r3, [r7, #4]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <_close>:

int _close(int file)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
	return -1;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069a2:	605a      	str	r2, [r3, #4]
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <_isatty>:

int _isatty(int file)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
	return 1;
 80069ba:	2301      	movs	r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	return 0;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069ec:	4a14      	ldr	r2, [pc, #80]	; (8006a40 <_sbrk+0x5c>)
 80069ee:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <_sbrk+0x60>)
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069f8:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <_sbrk+0x64>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a00:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <_sbrk+0x64>)
 8006a02:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <_sbrk+0x68>)
 8006a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a06:	4b10      	ldr	r3, [pc, #64]	; (8006a48 <_sbrk+0x64>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d207      	bcs.n	8006a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a14:	f007 f8dc 	bl	800dbd0 <__errno>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	220c      	movs	r2, #12
 8006a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	e009      	b.n	8006a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a24:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <_sbrk+0x64>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <_sbrk+0x64>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	4a05      	ldr	r2, [pc, #20]	; (8006a48 <_sbrk+0x64>)
 8006a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a36:	68fb      	ldr	r3, [r7, #12]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20020000 	.word	0x20020000
 8006a44:	00000400 	.word	0x00000400
 8006a48:	20000280 	.word	0x20000280
 8006a4c:	200008c0 	.word	0x200008c0

08006a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <SystemInit+0x20>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	4a05      	ldr	r2, [pc, #20]	; (8006a70 <SystemInit+0x20>)
 8006a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000ed00 	.word	0xe000ed00

08006a74 <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006a78:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a7a:	4a0f      	ldr	r2, [pc, #60]	; (8006ab8 <MX_TIM10_Init+0x44>)
 8006a7c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a84:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a86:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a92:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006aa0:	4804      	ldr	r0, [pc, #16]	; (8006ab4 <MX_TIM10_Init+0x40>)
 8006aa2:	f005 fca7 	bl	800c3f4 <HAL_TIM_Base_Init>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8006aac:	f7fd ffae 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006ab0:	bf00      	nop
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000714 	.word	0x20000714
 8006ab8:	40014400 	.word	0x40014400

08006abc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ac2:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <MX_TIM11_Init+0x48>)
 8006ac4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ac8:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006acc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ace:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ad6:	f247 522f 	movw	r2, #29999	; 0x752f
 8006ada:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006adc:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006aea:	4805      	ldr	r0, [pc, #20]	; (8006b00 <MX_TIM11_Init+0x44>)
 8006aec:	f005 fc82 	bl	800c3f4 <HAL_TIM_Base_Init>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 8006af6:	f7fd ff89 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	2000075c 	.word	0x2000075c
 8006b04:	40014800 	.word	0x40014800

08006b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1c      	ldr	r2, [pc, #112]	; (8006b88 <HAL_TIM_Base_MspInit+0x80>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d116      	bne.n	8006b48 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	4b1b      	ldr	r3, [pc, #108]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b28:	6453      	str	r3, [r2, #68]	; 0x44
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	2019      	movs	r0, #25
 8006b3c:	f000 fca1 	bl	8007482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b40:	2019      	movs	r0, #25
 8006b42:	f000 fcba 	bl	80074ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006b46:	e01a      	b.n	8006b7e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <HAL_TIM_Base_MspInit+0x88>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d115      	bne.n	8006b7e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	4a0c      	ldr	r2, [pc, #48]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b60:	6453      	str	r3, [r2, #68]	; 0x44
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <HAL_TIM_Base_MspInit+0x84>)
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	201a      	movs	r0, #26
 8006b74:	f000 fc85 	bl	8007482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006b78:	201a      	movs	r0, #26
 8006b7a:	f000 fc9e 	bl	80074ba <HAL_NVIC_EnableIRQ>
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40014800 	.word	0x40014800

08006b94 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60fb      	str	r3, [r7, #12]
	}
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d056      	beq.n	8006cba <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c14:	2220      	movs	r2, #32
 8006c16:	409a      	lsls	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006c2c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3304      	adds	r3, #4
 8006c32:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006c34:	2300      	movs	r3, #0
 8006c36:	82fb      	strh	r3, [r7, #22]
 8006c38:	e01a      	b.n	8006c70 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8006c40:	8afb      	ldrh	r3, [r7, #22]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4413      	add	r3, r2
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f7ff fc5e 	bl	800650a <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8006c4e:	8afb      	ldrh	r3, [r7, #22]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	4413      	add	r3, r2
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b0a      	cmp	r3, #10
 8006c58:	d107      	bne.n	8006c6a <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006c60:	3301      	adds	r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8006c6a:	8afb      	ldrh	r3, [r7, #22]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	82fb      	strh	r3, [r7, #22]
 8006c70:	8afa      	ldrh	r2, [r7, #22]
 8006c72:	89fb      	ldrh	r3, [r7, #14]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d3e0      	bcc.n	8006c3a <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	223f      	movs	r2, #63	; 0x3f
 8006c82:	409a      	lsls	r2, r3
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0201 	orr.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
	}
}
 8006cba:	bf00      	nop
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b082      	sub	sp, #8
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f203 1347 	addw	r3, r3, #327	; 0x147
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fc16 	bl	800650a <RB_Write>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01f      	beq.n	8006d4a <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006d0a:	e013      	b.n	8006d34 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b0a      	cmp	r3, #10
 8006d12:	d10c      	bne.n	8006d2e <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006d20:	3b01      	subs	r3, #1
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e00e      	b.n	8006d4c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3344      	adds	r3, #68	; 0x44
 8006d38:	68f9      	ldr	r1, [r7, #12]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fbbc 	bl	80064b8 <RB_Read>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0e2      	beq.n	8006d0c <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8006d46:	2300      	movs	r3, #0
 8006d48:	e000      	b.n	8006d4c <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8006d4a:	2301      	movs	r3, #1
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8006d62:	e012      	b.n	8006d8a <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ffaa 	bl	8006cc2 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8006d74:	7afb      	ldrb	r3, [r7, #11]
 8006d76:	2b0a      	cmp	r3, #10
 8006d78:	d107      	bne.n	8006d8a <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8006d80:	3301      	adds	r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	72fb      	strb	r3, [r7, #11]
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e6      	bne.n	8006d64 <UARTDMA_Print+0x10>
		}
	}
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8006dcc:	2300      	movs	r3, #0
 8006dce:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d028      	beq.n	8006e32 <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006de0:	e013      	b.n	8006e0a <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 8006de2:	7b7b      	ldrb	r3, [r7, #13]
 8006de4:	2b0a      	cmp	r3, #10
 8006de6:	d107      	bne.n	8006df8 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 8006df8:	89fb      	ldrh	r3, [r7, #14]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	81fa      	strh	r2, [r7, #14]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	7b7a      	ldrb	r2, [r7, #13]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	440b      	add	r3, r1
 8006e06:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f203 1347 	addw	r3, r3, #327	; 0x147
 8006e10:	f107 020d 	add.w	r2, r7, #13
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fb4e 	bl	80064b8 <RB_Read>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0df      	beq.n	8006de2 <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	33c7      	adds	r3, #199	; 0xc7
 8006e2a:	89fa      	ldrh	r2, [r7, #14]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f005 fdd5 	bl	800c9dc <HAL_UART_Transmit_DMA>
	}
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0210 	orr.w	r2, r2, #16
 8006e5c:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0210 	orr.w	r2, r2, #16
 8006e74:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0210 	orr.w	r2, r2, #16
 8006e8c:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	4619      	mov	r1, r3
 8006e9a:	f005 fe1d 	bl	800cad8 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0208 	bic.w	r2, r2, #8
 8006eb4:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0208 	bic.w	r2, r2, #8
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006edc:	4b11      	ldr	r3, [pc, #68]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006ede:	4a12      	ldr	r2, [pc, #72]	; (8006f28 <MX_USART2_UART_Init+0x50>)
 8006ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006efe:	220c      	movs	r2, #12
 8006f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f0e:	4805      	ldr	r0, [pc, #20]	; (8006f24 <MX_USART2_UART_Init+0x4c>)
 8006f10:	f005 fd16 	bl	800c940 <HAL_UART_Init>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006f1a:	f7fd fd77 	bl	8004a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006f1e:	bf00      	nop
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000864 	.word	0x20000864
 8006f28:	40004400 	.word	0x40004400

08006f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a47      	ldr	r2, [pc, #284]	; (8007068 <HAL_UART_MspInit+0x13c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f040 8088 	bne.w	8007060 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	4b45      	ldr	r3, [pc, #276]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	4a44      	ldr	r2, [pc, #272]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f60:	4b42      	ldr	r3, [pc, #264]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4b3e      	ldr	r3, [pc, #248]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	4a3d      	ldr	r2, [pc, #244]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7c:	4b3b      	ldr	r3, [pc, #236]	; (800706c <HAL_UART_MspInit+0x140>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006f88:	230c      	movs	r3, #12
 8006f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f94:	2303      	movs	r3, #3
 8006f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006f98:	2307      	movs	r3, #7
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4833      	ldr	r0, [pc, #204]	; (8007070 <HAL_UART_MspInit+0x144>)
 8006fa4:	f000 fede 	bl	8007d64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006fa8:	4b32      	ldr	r3, [pc, #200]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006faa:	4a33      	ldr	r2, [pc, #204]	; (8007078 <HAL_UART_MspInit+0x14c>)
 8006fac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fc2:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fca:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fd0:	4b28      	ldr	r3, [pc, #160]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fdc:	4b25      	ldr	r3, [pc, #148]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006fe8:	4822      	ldr	r0, [pc, #136]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006fea:	f000 faab 	bl	8007544 <HAL_DMA_Init>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006ff4:	f7fd fd0a 	bl	8004a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	; (8007074 <HAL_UART_MspInit+0x148>)
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <HAL_UART_MspInit+0x148>)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007004:	4b1d      	ldr	r3, [pc, #116]	; (800707c <HAL_UART_MspInit+0x150>)
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <HAL_UART_MspInit+0x154>)
 8007008:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_UART_MspInit+0x150>)
 800700c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007010:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <HAL_UART_MspInit+0x150>)
 8007014:	2240      	movs	r2, #64	; 0x40
 8007016:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007018:	4b18      	ldr	r3, [pc, #96]	; (800707c <HAL_UART_MspInit+0x150>)
 800701a:	2200      	movs	r2, #0
 800701c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800701e:	4b17      	ldr	r3, [pc, #92]	; (800707c <HAL_UART_MspInit+0x150>)
 8007020:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007024:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007026:	4b15      	ldr	r3, [pc, #84]	; (800707c <HAL_UART_MspInit+0x150>)
 8007028:	2200      	movs	r2, #0
 800702a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_UART_MspInit+0x150>)
 800702e:	2200      	movs	r2, #0
 8007030:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <HAL_UART_MspInit+0x150>)
 8007034:	2200      	movs	r2, #0
 8007036:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <HAL_UART_MspInit+0x150>)
 800703a:	2200      	movs	r2, #0
 800703c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_UART_MspInit+0x150>)
 8007040:	2200      	movs	r2, #0
 8007042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007044:	480d      	ldr	r0, [pc, #52]	; (800707c <HAL_UART_MspInit+0x150>)
 8007046:	f000 fa7d 	bl	8007544 <HAL_DMA_Init>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8007050:	f7fd fcdc 	bl	8004a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a09      	ldr	r2, [pc, #36]	; (800707c <HAL_UART_MspInit+0x150>)
 8007058:	635a      	str	r2, [r3, #52]	; 0x34
 800705a:	4a08      	ldr	r2, [pc, #32]	; (800707c <HAL_UART_MspInit+0x150>)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007060:	bf00      	nop
 8007062:	3728      	adds	r7, #40	; 0x28
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40004400 	.word	0x40004400
 800706c:	40023800 	.word	0x40023800
 8007070:	40020000 	.word	0x40020000
 8007074:	200007a4 	.word	0x200007a4
 8007078:	40026088 	.word	0x40026088
 800707c:	20000804 	.word	0x20000804
 8007080:	400260a0 	.word	0x400260a0

08007084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007088:	480d      	ldr	r0, [pc, #52]	; (80070c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800708a:	490e      	ldr	r1, [pc, #56]	; (80070c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800708c:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800708e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007090:	e002      	b.n	8007098 <LoopCopyDataInit>

08007092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007096:	3304      	adds	r3, #4

08007098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800709a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800709c:	d3f9      	bcc.n	8007092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800709e:	4a0b      	ldr	r2, [pc, #44]	; (80070cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070a0:	4c0b      	ldr	r4, [pc, #44]	; (80070d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80070a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070a4:	e001      	b.n	80070aa <LoopFillZerobss>

080070a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070a8:	3204      	adds	r2, #4

080070aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070ac:	d3fb      	bcc.n	80070a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070ae:	f7ff fccf 	bl	8006a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070b2:	f006 fd93 	bl	800dbdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070b6:	f7fd fb6d 	bl	8004794 <main>
  bx  lr    
 80070ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80070bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80070c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070c4:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80070c8:	080262b8 	.word	0x080262b8
  ldr r2, =_sbss
 80070cc:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80070d0:	200008bc 	.word	0x200008bc

080070d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070d4:	e7fe      	b.n	80070d4 <ADC_IRQHandler>
	...

080070d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070dc:	4b0e      	ldr	r3, [pc, #56]	; (8007118 <HAL_Init+0x40>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <HAL_Init+0x40>)
 80070e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80070e8:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <HAL_Init+0x40>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <HAL_Init+0x40>)
 80070ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070f4:	4b08      	ldr	r3, [pc, #32]	; (8007118 <HAL_Init+0x40>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a07      	ldr	r2, [pc, #28]	; (8007118 <HAL_Init+0x40>)
 80070fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007100:	2003      	movs	r0, #3
 8007102:	f000 f9b3 	bl	800746c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007106:	2000      	movs	r0, #0
 8007108:	f000 f808 	bl	800711c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800710c:	f7ff fb10 	bl	8006730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40023c00 	.word	0x40023c00

0800711c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007124:	4b12      	ldr	r3, [pc, #72]	; (8007170 <HAL_InitTick+0x54>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	4b12      	ldr	r3, [pc, #72]	; (8007174 <HAL_InitTick+0x58>)
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007132:	fbb3 f3f1 	udiv	r3, r3, r1
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f9d9 	bl	80074f2 <HAL_SYSTICK_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e00e      	b.n	8007168 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b0f      	cmp	r3, #15
 800714e:	d80a      	bhi.n	8007166 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007150:	2200      	movs	r2, #0
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	f04f 30ff 	mov.w	r0, #4294967295
 8007158:	f000 f993 	bl	8007482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800715c:	4a06      	ldr	r2, [pc, #24]	; (8007178 <HAL_InitTick+0x5c>)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	e000      	b.n	8007168 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
}
 8007168:	4618      	mov	r0, r3
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	20000034 	.word	0x20000034
 8007174:	2000003c 	.word	0x2000003c
 8007178:	20000038 	.word	0x20000038

0800717c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007180:	4b06      	ldr	r3, [pc, #24]	; (800719c <HAL_IncTick+0x20>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <HAL_IncTick+0x24>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4413      	add	r3, r2
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_IncTick+0x24>)
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2000003c 	.word	0x2000003c
 80071a0:	200008a8 	.word	0x200008a8

080071a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return uwTick;
 80071a8:	4b03      	ldr	r3, [pc, #12]	; (80071b8 <HAL_GetTick+0x14>)
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	200008a8 	.word	0x200008a8

080071bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071c4:	f7ff ffee 	bl	80071a4 <HAL_GetTick>
 80071c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d005      	beq.n	80071e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071d6:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <HAL_Delay+0x44>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80071e2:	bf00      	nop
 80071e4:	f7ff ffde 	bl	80071a4 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d8f7      	bhi.n	80071e4 <HAL_Delay+0x28>
  {
  }
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	2000003c 	.word	0x2000003c

08007204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007214:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <__NVIC_SetPriorityGrouping+0x44>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800722c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007236:	4a04      	ldr	r2, [pc, #16]	; (8007248 <__NVIC_SetPriorityGrouping+0x44>)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	60d3      	str	r3, [r2, #12]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	e000ed00 	.word	0xe000ed00

0800724c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <__NVIC_GetPriorityGrouping+0x18>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	f003 0307 	and.w	r3, r3, #7
}
 800725a:	4618      	mov	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	e000ed00 	.word	0xe000ed00

08007268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007276:	2b00      	cmp	r3, #0
 8007278:	db0b      	blt.n	8007292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	f003 021f 	and.w	r2, r3, #31
 8007280:	4907      	ldr	r1, [pc, #28]	; (80072a0 <__NVIC_EnableIRQ+0x38>)
 8007282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	2001      	movs	r0, #1
 800728a:	fa00 f202 	lsl.w	r2, r0, r2
 800728e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000e100 	.word	0xe000e100

080072a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	db12      	blt.n	80072dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	f003 021f 	and.w	r2, r3, #31
 80072bc:	490a      	ldr	r1, [pc, #40]	; (80072e8 <__NVIC_DisableIRQ+0x44>)
 80072be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2001      	movs	r0, #1
 80072c6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ca:	3320      	adds	r3, #32
 80072cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80072d0:	f3bf 8f4f 	dsb	sy
}
 80072d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80072d6:	f3bf 8f6f 	isb	sy
}
 80072da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	e000e100 	.word	0xe000e100

080072ec <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	db0e      	blt.n	800731c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80072fe:	4a0b      	ldr	r2, [pc, #44]	; (800732c <__NVIC_GetPendingIRQ+0x40>)
 8007300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	3340      	adds	r3, #64	; 0x40
 8007308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	fa22 f303 	lsr.w	r3, r2, r3
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	e000      	b.n	800731e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 800731c:	2300      	movs	r3, #0
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	e000e100 	.word	0xe000e100

08007330 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db0c      	blt.n	800735c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007342:	79fb      	ldrb	r3, [r7, #7]
 8007344:	f003 021f 	and.w	r2, r3, #31
 8007348:	4907      	ldr	r1, [pc, #28]	; (8007368 <__NVIC_ClearPendingIRQ+0x38>)
 800734a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	2001      	movs	r0, #1
 8007352:	fa00 f202 	lsl.w	r2, r0, r2
 8007356:	3360      	adds	r3, #96	; 0x60
 8007358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000e100 	.word	0xe000e100

0800736c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737c:	2b00      	cmp	r3, #0
 800737e:	db0a      	blt.n	8007396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	490c      	ldr	r1, [pc, #48]	; (80073b8 <__NVIC_SetPriority+0x4c>)
 8007386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	440b      	add	r3, r1
 8007390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007394:	e00a      	b.n	80073ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	4908      	ldr	r1, [pc, #32]	; (80073bc <__NVIC_SetPriority+0x50>)
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	3b04      	subs	r3, #4
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	440b      	add	r3, r1
 80073aa:	761a      	strb	r2, [r3, #24]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	e000e100 	.word	0xe000e100
 80073bc:	e000ed00 	.word	0xe000ed00

080073c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f1c3 0307 	rsb	r3, r3, #7
 80073da:	2b04      	cmp	r3, #4
 80073dc:	bf28      	it	cs
 80073de:	2304      	movcs	r3, #4
 80073e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d902      	bls.n	80073f0 <NVIC_EncodePriority+0x30>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3b03      	subs	r3, #3
 80073ee:	e000      	b.n	80073f2 <NVIC_EncodePriority+0x32>
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f4:	f04f 32ff 	mov.w	r2, #4294967295
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	401a      	ands	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007408:	f04f 31ff 	mov.w	r1, #4294967295
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	43d9      	mvns	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007418:	4313      	orrs	r3, r2
         );
}
 800741a:	4618      	mov	r0, r3
 800741c:	3724      	adds	r7, #36	; 0x24
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3b01      	subs	r3, #1
 8007434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007438:	d301      	bcc.n	800743e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800743a:	2301      	movs	r3, #1
 800743c:	e00f      	b.n	800745e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <SysTick_Config+0x40>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007446:	210f      	movs	r1, #15
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	f7ff ff8e 	bl	800736c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <SysTick_Config+0x40>)
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007456:	4b04      	ldr	r3, [pc, #16]	; (8007468 <SysTick_Config+0x40>)
 8007458:	2207      	movs	r2, #7
 800745a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000e010 	.word	0xe000e010

0800746c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff fec5 	bl	8007204 <__NVIC_SetPriorityGrouping>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007494:	f7ff feda 	bl	800724c <__NVIC_GetPriorityGrouping>
 8007498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	6978      	ldr	r0, [r7, #20]
 80074a0:	f7ff ff8e 	bl	80073c0 <NVIC_EncodePriority>
 80074a4:	4602      	mov	r2, r0
 80074a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff5d 	bl	800736c <__NVIC_SetPriority>
}
 80074b2:	bf00      	nop
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4603      	mov	r3, r0
 80074c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fecd 	bl	8007268 <__NVIC_EnableIRQ>
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	4603      	mov	r3, r0
 80074de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80074e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff fedd 	bl	80072a4 <__NVIC_DisableIRQ>
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff94 	bl	8007428 <SysTick_Config>
 8007500:	4603      	mov	r3, r0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007518:	4618      	mov	r0, r3
 800751a:	f7ff fee7 	bl	80072ec <__NVIC_GetPendingIRQ>
 800751e:	4603      	mov	r3, r0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fefa 	bl	8007330 <__NVIC_ClearPendingIRQ>
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007550:	f7ff fe28 	bl	80071a4 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e099      	b.n	8007694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007580:	e00f      	b.n	80075a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007582:	f7ff fe0f 	bl	80071a4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	2b05      	cmp	r3, #5
 800758e:	d908      	bls.n	80075a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2203      	movs	r2, #3
 800759a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e078      	b.n	8007694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e8      	bne.n	8007582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	4b38      	ldr	r3, [pc, #224]	; (800769c <HAL_DMA_Init+0x158>)
 80075bc:	4013      	ands	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d107      	bne.n	800760c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	4313      	orrs	r3, r2
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0307 	bic.w	r3, r3, #7
 8007622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b04      	cmp	r3, #4
 8007634:	d117      	bne.n	8007666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00e      	beq.n	8007666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb0f 	bl	8007c6c <DMA_CheckFifoParam>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2240      	movs	r2, #64	; 0x40
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007662:	2301      	movs	r3, #1
 8007664:	e016      	b.n	8007694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fac6 	bl	8007c00 <DMA_CalcBaseAndBitshift>
 8007674:	4603      	mov	r3, r0
 8007676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	223f      	movs	r2, #63	; 0x3f
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	f010803f 	.word	0xf010803f

080076a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_DMA_Start_IT+0x26>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e040      	b.n	8007748 <HAL_DMA_Start_IT+0xa8>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d12f      	bne.n	800773a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2202      	movs	r2, #2
 80076de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fa58 	bl	8007ba4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f8:	223f      	movs	r2, #63	; 0x3f
 80076fa:	409a      	lsls	r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0216 	orr.w	r2, r2, #22
 800770e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0208 	orr.w	r2, r2, #8
 8007726:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	e005      	b.n	8007746 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007742:	2302      	movs	r3, #2
 8007744:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800775e:	f7ff fd21 	bl	80071a4 <HAL_GetTick>
 8007762:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d008      	beq.n	8007782 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e052      	b.n	8007828 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0216 	bic.w	r2, r2, #22
 8007790:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_DMA_Abort+0x62>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0208 	bic.w	r2, r2, #8
 80077c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0201 	bic.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077d2:	e013      	b.n	80077fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077d4:	f7ff fce6 	bl	80071a4 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d90c      	bls.n	80077fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2203      	movs	r2, #3
 80077ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e015      	b.n	8007828 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e4      	bne.n	80077d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	223f      	movs	r2, #63	; 0x3f
 8007810:	409a      	lsls	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d004      	beq.n	800784e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2280      	movs	r2, #128	; 0x80
 8007848:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e00c      	b.n	8007868 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2205      	movs	r2, #5
 8007852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0201 	bic.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007880:	4b92      	ldr	r3, [pc, #584]	; (8007acc <HAL_DMA_IRQHandler+0x258>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a92      	ldr	r2, [pc, #584]	; (8007ad0 <HAL_DMA_IRQHandler+0x25c>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	0a9b      	lsrs	r3, r3, #10
 800788c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2208      	movs	r2, #8
 80078a0:	409a      	lsls	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4013      	ands	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01a      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0204 	bic.w	r2, r2, #4
 80078c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078cc:	2208      	movs	r2, #8
 80078ce:	409a      	lsls	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d8:	f043 0201 	orr.w	r2, r3, #1
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078e4:	2201      	movs	r2, #1
 80078e6:	409a      	lsls	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d012      	beq.n	8007916 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007902:	2201      	movs	r2, #1
 8007904:	409a      	lsls	r2, r3
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f043 0202 	orr.w	r2, r3, #2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791a:	2204      	movs	r2, #4
 800791c:	409a      	lsls	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4013      	ands	r3, r2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d012      	beq.n	800794c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007938:	2204      	movs	r2, #4
 800793a:	409a      	lsls	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f043 0204 	orr.w	r2, r3, #4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007950:	2210      	movs	r2, #16
 8007952:	409a      	lsls	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4013      	ands	r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d043      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0308 	and.w	r3, r3, #8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d03c      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796e:	2210      	movs	r2, #16
 8007970:	409a      	lsls	r2, r3
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d018      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d024      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	e01f      	b.n	80079e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01b      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	e016      	b.n	80079e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d107      	bne.n	80079d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0208 	bic.w	r2, r2, #8
 80079d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e8:	2220      	movs	r2, #32
 80079ea:	409a      	lsls	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4013      	ands	r3, r2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 808e 	beq.w	8007b12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 8086 	beq.w	8007b12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	409a      	lsls	r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	d136      	bne.n	8007a8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0216 	bic.w	r2, r2, #22
 8007a2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d103      	bne.n	8007a4e <HAL_DMA_IRQHandler+0x1da>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d007      	beq.n	8007a5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0208 	bic.w	r2, r2, #8
 8007a5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a62:	223f      	movs	r2, #63	; 0x3f
 8007a64:	409a      	lsls	r2, r3
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d07d      	beq.n	8007b7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
        }
        return;
 8007a8a:	e078      	b.n	8007b7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d01c      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d108      	bne.n	8007aba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d030      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	4798      	blx	r3
 8007ab8:	e02b      	b.n	8007b12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d027      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
 8007aca:	e022      	b.n	8007b12 <HAL_DMA_IRQHandler+0x29e>
 8007acc:	20000034 	.word	0x20000034
 8007ad0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10f      	bne.n	8007b02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 0210 	bic.w	r2, r2, #16
 8007af0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d032      	beq.n	8007b80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d022      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2205      	movs	r2, #5
 8007b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d307      	bcc.n	8007b5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1f2      	bne.n	8007b3e <HAL_DMA_IRQHandler+0x2ca>
 8007b58:	e000      	b.n	8007b5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007b5a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	e000      	b.n	8007b80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007b7e:	bf00      	nop
    }
  }
}
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop

08007b88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b96:	b2db      	uxtb	r3, r3
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d108      	bne.n	8007be4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007be2:	e007      	b.n	8007bf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	60da      	str	r2, [r3, #12]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	3b10      	subs	r3, #16
 8007c10:	4a14      	ldr	r2, [pc, #80]	; (8007c64 <DMA_CalcBaseAndBitshift+0x64>)
 8007c12:	fba2 2303 	umull	r2, r3, r2, r3
 8007c16:	091b      	lsrs	r3, r3, #4
 8007c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c1a:	4a13      	ldr	r2, [pc, #76]	; (8007c68 <DMA_CalcBaseAndBitshift+0x68>)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d909      	bls.n	8007c42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8007c40:	e007      	b.n	8007c52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	aaaaaaab 	.word	0xaaaaaaab
 8007c68:	08025d8c 	.word	0x08025d8c

08007c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11f      	bne.n	8007cc6 <DMA_CheckFifoParam+0x5a>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d856      	bhi.n	8007d3a <DMA_CheckFifoParam+0xce>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <DMA_CheckFifoParam+0x28>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cb7 	.word	0x08007cb7
 8007c9c:	08007ca5 	.word	0x08007ca5
 8007ca0:	08007d3b 	.word	0x08007d3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d046      	beq.n	8007d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cb4:	e043      	b.n	8007d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cbe:	d140      	bne.n	8007d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cc4:	e03d      	b.n	8007d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cce:	d121      	bne.n	8007d14 <DMA_CheckFifoParam+0xa8>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d837      	bhi.n	8007d46 <DMA_CheckFifoParam+0xda>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <DMA_CheckFifoParam+0x70>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007cf3 	.word	0x08007cf3
 8007ce4:	08007ced 	.word	0x08007ced
 8007ce8:	08007d05 	.word	0x08007d05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e030      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d025      	beq.n	8007d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007d02:	e022      	b.n	8007d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d0c:	d11f      	bne.n	8007d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d12:	e01c      	b.n	8007d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d903      	bls.n	8007d22 <DMA_CheckFifoParam+0xb6>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d003      	beq.n	8007d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d20:	e018      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	73fb      	strb	r3, [r7, #15]
      break;
 8007d26:	e015      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00e      	beq.n	8007d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	73fb      	strb	r3, [r7, #15]
      break;
 8007d38:	e00b      	b.n	8007d52 <DMA_CheckFifoParam+0xe6>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e00a      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;
 8007d3e:	bf00      	nop
 8007d40:	e008      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;
 8007d42:	bf00      	nop
 8007d44:	e006      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;
 8007d46:	bf00      	nop
 8007d48:	e004      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <DMA_CheckFifoParam+0xe8>
      break;
 8007d52:	bf00      	nop
    }
  } 
  
  return status; 
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop

08007d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b089      	sub	sp, #36	; 0x24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	e159      	b.n	8008034 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d80:	2201      	movs	r2, #1
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	fa02 f303 	lsl.w	r3, r2, r3
 8007d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	4013      	ands	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	f040 8148 	bne.w	800802e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d005      	beq.n	8007db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d130      	bne.n	8007e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007dec:	2201      	movs	r2, #1
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	091b      	lsrs	r3, r3, #4
 8007e02:	f003 0201 	and.w	r2, r3, #1
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f003 0303 	and.w	r3, r3, #3
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d017      	beq.n	8007e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	2203      	movs	r2, #3
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	43db      	mvns	r3, r3
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f003 0303 	and.w	r3, r3, #3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d123      	bne.n	8007ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	08da      	lsrs	r2, r3, #3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3208      	adds	r2, #8
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	220f      	movs	r2, #15
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4013      	ands	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	691a      	ldr	r2, [r3, #16]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	08da      	lsrs	r2, r3, #3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3208      	adds	r2, #8
 8007ea2:	69b9      	ldr	r1, [r7, #24]
 8007ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb8:	43db      	mvns	r3, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f003 0203 	and.w	r2, r3, #3
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a2 	beq.w	800802e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	4b57      	ldr	r3, [pc, #348]	; (800804c <HAL_GPIO_Init+0x2e8>)
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	4a56      	ldr	r2, [pc, #344]	; (800804c <HAL_GPIO_Init+0x2e8>)
 8007ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8007efa:	4b54      	ldr	r3, [pc, #336]	; (800804c <HAL_GPIO_Init+0x2e8>)
 8007efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f06:	4a52      	ldr	r2, [pc, #328]	; (8008050 <HAL_GPIO_Init+0x2ec>)
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	089b      	lsrs	r3, r3, #2
 8007f0c:	3302      	adds	r3, #2
 8007f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	220f      	movs	r2, #15
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43db      	mvns	r3, r3
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	4013      	ands	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a49      	ldr	r2, [pc, #292]	; (8008054 <HAL_GPIO_Init+0x2f0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d019      	beq.n	8007f66 <HAL_GPIO_Init+0x202>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a48      	ldr	r2, [pc, #288]	; (8008058 <HAL_GPIO_Init+0x2f4>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d013      	beq.n	8007f62 <HAL_GPIO_Init+0x1fe>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a47      	ldr	r2, [pc, #284]	; (800805c <HAL_GPIO_Init+0x2f8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00d      	beq.n	8007f5e <HAL_GPIO_Init+0x1fa>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a46      	ldr	r2, [pc, #280]	; (8008060 <HAL_GPIO_Init+0x2fc>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <HAL_GPIO_Init+0x1f6>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a45      	ldr	r2, [pc, #276]	; (8008064 <HAL_GPIO_Init+0x300>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d101      	bne.n	8007f56 <HAL_GPIO_Init+0x1f2>
 8007f52:	2304      	movs	r3, #4
 8007f54:	e008      	b.n	8007f68 <HAL_GPIO_Init+0x204>
 8007f56:	2307      	movs	r3, #7
 8007f58:	e006      	b.n	8007f68 <HAL_GPIO_Init+0x204>
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e004      	b.n	8007f68 <HAL_GPIO_Init+0x204>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e002      	b.n	8007f68 <HAL_GPIO_Init+0x204>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <HAL_GPIO_Init+0x204>
 8007f66:	2300      	movs	r3, #0
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	f002 0203 	and.w	r2, r2, #3
 8007f6e:	0092      	lsls	r2, r2, #2
 8007f70:	4093      	lsls	r3, r2
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f78:	4935      	ldr	r1, [pc, #212]	; (8008050 <HAL_GPIO_Init+0x2ec>)
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	089b      	lsrs	r3, r3, #2
 8007f7e:	3302      	adds	r3, #2
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f86:	4b38      	ldr	r3, [pc, #224]	; (8008068 <HAL_GPIO_Init+0x304>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4013      	ands	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007faa:	4a2f      	ldr	r2, [pc, #188]	; (8008068 <HAL_GPIO_Init+0x304>)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fb0:	4b2d      	ldr	r3, [pc, #180]	; (8008068 <HAL_GPIO_Init+0x304>)
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fd4:	4a24      	ldr	r2, [pc, #144]	; (8008068 <HAL_GPIO_Init+0x304>)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fda:	4b23      	ldr	r3, [pc, #140]	; (8008068 <HAL_GPIO_Init+0x304>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ffe:	4a1a      	ldr	r2, [pc, #104]	; (8008068 <HAL_GPIO_Init+0x304>)
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008004:	4b18      	ldr	r3, [pc, #96]	; (8008068 <HAL_GPIO_Init+0x304>)
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	43db      	mvns	r3, r3
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008028:	4a0f      	ldr	r2, [pc, #60]	; (8008068 <HAL_GPIO_Init+0x304>)
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3301      	adds	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	f67f aea2 	bls.w	8007d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	3724      	adds	r7, #36	; 0x24
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40023800 	.word	0x40023800
 8008050:	40013800 	.word	0x40013800
 8008054:	40020000 	.word	0x40020000
 8008058:	40020400 	.word	0x40020400
 800805c:	40020800 	.word	0x40020800
 8008060:	40020c00 	.word	0x40020c00
 8008064:	40021000 	.word	0x40021000
 8008068:	40013c00 	.word	0x40013c00

0800806c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	887b      	ldrh	r3, [r7, #2]
 800807e:	4013      	ands	r3, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
 8008088:	e001      	b.n	800808e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	807b      	strh	r3, [r7, #2]
 80080a8:	4613      	mov	r3, r2
 80080aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080ac:	787b      	ldrb	r3, [r7, #1]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080b2:	887a      	ldrh	r2, [r7, #2]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080b8:	e003      	b.n	80080c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080ba:	887b      	ldrh	r3, [r7, #2]
 80080bc:	041a      	lsls	r2, r3, #16
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	619a      	str	r2, [r3, #24]
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080e0:	887a      	ldrh	r2, [r7, #2]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4013      	ands	r3, r2
 80080e6:	041a      	lsls	r2, r3, #16
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	43d9      	mvns	r1, r3
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	400b      	ands	r3, r1
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	619a      	str	r2, [r3, #24]
}
 80080f6:	bf00      	nop
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800811a:	4a05      	ldr	r2, [pc, #20]	; (8008130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	4618      	mov	r0, r3
 8008124:	f7fc fc5e 	bl	80049e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40013c00 	.word	0x40013c00

08008134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e12b      	b.n	800839e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fc fa10 	bl	8004580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2224      	movs	r2, #36	; 0x24
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0201 	bic.w	r2, r2, #1
 8008176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008198:	f003 fcf0 	bl	800bb7c <HAL_RCC_GetPCLK1Freq>
 800819c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	4a81      	ldr	r2, [pc, #516]	; (80083a8 <HAL_I2C_Init+0x274>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d807      	bhi.n	80081b8 <HAL_I2C_Init+0x84>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4a80      	ldr	r2, [pc, #512]	; (80083ac <HAL_I2C_Init+0x278>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bf94      	ite	ls
 80081b0:	2301      	movls	r3, #1
 80081b2:	2300      	movhi	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	e006      	b.n	80081c6 <HAL_I2C_Init+0x92>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a7d      	ldr	r2, [pc, #500]	; (80083b0 <HAL_I2C_Init+0x27c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	bf94      	ite	ls
 80081c0:	2301      	movls	r3, #1
 80081c2:	2300      	movhi	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e0e7      	b.n	800839e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a78      	ldr	r2, [pc, #480]	; (80083b4 <HAL_I2C_Init+0x280>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	0c9b      	lsrs	r3, r3, #18
 80081d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4a6a      	ldr	r2, [pc, #424]	; (80083a8 <HAL_I2C_Init+0x274>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d802      	bhi.n	8008208 <HAL_I2C_Init+0xd4>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	3301      	adds	r3, #1
 8008206:	e009      	b.n	800821c <HAL_I2C_Init+0xe8>
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	4a69      	ldr	r2, [pc, #420]	; (80083b8 <HAL_I2C_Init+0x284>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	099b      	lsrs	r3, r3, #6
 800821a:	3301      	adds	r3, #1
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	430b      	orrs	r3, r1
 8008222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800822e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	495c      	ldr	r1, [pc, #368]	; (80083a8 <HAL_I2C_Init+0x274>)
 8008238:	428b      	cmp	r3, r1
 800823a:	d819      	bhi.n	8008270 <HAL_I2C_Init+0x13c>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	1e59      	subs	r1, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	fbb1 f3f3 	udiv	r3, r1, r3
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008250:	400b      	ands	r3, r1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <HAL_I2C_Init+0x138>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	1e59      	subs	r1, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	fbb1 f3f3 	udiv	r3, r1, r3
 8008264:	3301      	adds	r3, #1
 8008266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800826a:	e051      	b.n	8008310 <HAL_I2C_Init+0x1dc>
 800826c:	2304      	movs	r3, #4
 800826e:	e04f      	b.n	8008310 <HAL_I2C_Init+0x1dc>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d111      	bne.n	800829c <HAL_I2C_Init+0x168>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1e58      	subs	r0, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6859      	ldr	r1, [r3, #4]
 8008280:	460b      	mov	r3, r1
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	440b      	add	r3, r1
 8008286:	fbb0 f3f3 	udiv	r3, r0, r3
 800828a:	3301      	adds	r3, #1
 800828c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008290:	2b00      	cmp	r3, #0
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	e012      	b.n	80082c2 <HAL_I2C_Init+0x18e>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1e58      	subs	r0, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6859      	ldr	r1, [r3, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	0099      	lsls	r1, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80082b2:	3301      	adds	r3, #1
 80082b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	bf0c      	ite	eq
 80082bc:	2301      	moveq	r3, #1
 80082be:	2300      	movne	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Init+0x196>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e022      	b.n	8008310 <HAL_I2C_Init+0x1dc>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10e      	bne.n	80082f0 <HAL_I2C_Init+0x1bc>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1e58      	subs	r0, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6859      	ldr	r1, [r3, #4]
 80082da:	460b      	mov	r3, r1
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	440b      	add	r3, r1
 80082e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082e4:	3301      	adds	r3, #1
 80082e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ee:	e00f      	b.n	8008310 <HAL_I2C_Init+0x1dc>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	1e58      	subs	r0, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6859      	ldr	r1, [r3, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	0099      	lsls	r1, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	fbb0 f3f3 	udiv	r3, r0, r3
 8008306:	3301      	adds	r3, #1
 8008308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800830c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	6809      	ldr	r1, [r1, #0]
 8008314:	4313      	orrs	r3, r2
 8008316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800833e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6911      	ldr	r1, [r2, #16]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68d2      	ldr	r2, [r2, #12]
 800834a:	4311      	orrs	r1, r2
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	430b      	orrs	r3, r1
 8008352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	000186a0 	.word	0x000186a0
 80083ac:	001e847f 	.word	0x001e847f
 80083b0:	003d08ff 	.word	0x003d08ff
 80083b4:	431bde83 	.word	0x431bde83
 80083b8:	10624dd3 	.word	0x10624dd3

080083bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af02      	add	r7, sp, #8
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	461a      	mov	r2, r3
 80083c8:	460b      	mov	r3, r1
 80083ca:	817b      	strh	r3, [r7, #10]
 80083cc:	4613      	mov	r3, r2
 80083ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80083d0:	f7fe fee8 	bl	80071a4 <HAL_GetTick>
 80083d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b20      	cmp	r3, #32
 80083e0:	f040 80e0 	bne.w	80085a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	2319      	movs	r3, #25
 80083ea:	2201      	movs	r2, #1
 80083ec:	4970      	ldr	r1, [pc, #448]	; (80085b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f002 fd7a 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80083fa:	2302      	movs	r3, #2
 80083fc:	e0d3      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_I2C_Master_Transmit+0x50>
 8008408:	2302      	movs	r3, #2
 800840a:	e0cc      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b01      	cmp	r3, #1
 8008420:	d007      	beq.n	8008432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0201 	orr.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2221      	movs	r2, #33	; 0x21
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2210      	movs	r2, #16
 800844e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	893a      	ldrh	r2, [r7, #8]
 8008462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a50      	ldr	r2, [pc, #320]	; (80085b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8008472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008474:	8979      	ldrh	r1, [r7, #10]
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	6a3a      	ldr	r2, [r7, #32]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f002 f9be 	bl	800a7fc <I2C_MasterRequestWrite>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e08d      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800848a:	2300      	movs	r3, #0
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80084a0:	e066      	b.n	8008570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	6a39      	ldr	r1, [r7, #32]
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f002 fdf4 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d107      	bne.n	80084ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e06b      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b04      	cmp	r3, #4
 800850a:	d11b      	bne.n	8008544 <HAL_I2C_Master_Transmit+0x188>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008510:	2b00      	cmp	r3, #0
 8008512:	d017      	beq.n	8008544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	781a      	ldrb	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852e:	b29b      	uxth	r3, r3
 8008530:	3b01      	subs	r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	6a39      	ldr	r1, [r7, #32]
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f002 fde4 	bl	800b116 <I2C_WaitOnBTFFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00d      	beq.n	8008570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008558:	2b04      	cmp	r3, #4
 800855a:	d107      	bne.n	800856c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e01a      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d194      	bne.n	80084a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e000      	b.n	80085a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	00100002 	.word	0x00100002
 80085b4:	ffff0000 	.word	0xffff0000

080085b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08c      	sub	sp, #48	; 0x30
 80085bc:	af02      	add	r7, sp, #8
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	461a      	mov	r2, r3
 80085c4:	460b      	mov	r3, r1
 80085c6:	817b      	strh	r3, [r7, #10]
 80085c8:	4613      	mov	r3, r2
 80085ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80085cc:	f7fe fdea 	bl	80071a4 <HAL_GetTick>
 80085d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b20      	cmp	r3, #32
 80085dc:	f040 820b 	bne.w	80089f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2319      	movs	r3, #25
 80085e6:	2201      	movs	r2, #1
 80085e8:	497c      	ldr	r1, [pc, #496]	; (80087dc <HAL_I2C_Master_Receive+0x224>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f002 fc7c 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
 80085f8:	e1fe      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_I2C_Master_Receive+0x50>
 8008604:	2302      	movs	r3, #2
 8008606:	e1f7      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	2b01      	cmp	r3, #1
 800861c:	d007      	beq.n	800862e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0201 	orr.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800863c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2222      	movs	r2, #34	; 0x22
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2210      	movs	r2, #16
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	893a      	ldrh	r2, [r7, #8]
 800865e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008664:	b29a      	uxth	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4a5c      	ldr	r2, [pc, #368]	; (80087e0 <HAL_I2C_Master_Receive+0x228>)
 800866e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008670:	8979      	ldrh	r1, [r7, #10]
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f002 f942 	bl	800a900 <I2C_MasterRequestRead>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e1b8      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800868a:	2b00      	cmp	r3, #0
 800868c:	d113      	bne.n	80086b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800868e:	2300      	movs	r3, #0
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	623b      	str	r3, [r7, #32]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	623b      	str	r3, [r7, #32]
 80086a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	e18c      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d11b      	bne.n	80086f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	61fb      	str	r3, [r7, #28]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e16c      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d11b      	bne.n	8008736 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800870c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800871c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800871e:	2300      	movs	r3, #0
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	e14c      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800875c:	e138      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008762:	2b03      	cmp	r3, #3
 8008764:	f200 80f1 	bhi.w	800894a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876c:	2b01      	cmp	r3, #1
 800876e:	d123      	bne.n	80087b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f002 fd41 	bl	800b1fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e139      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a0:	3b01      	subs	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087b6:	e10b      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d14e      	bne.n	800885e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	4906      	ldr	r1, [pc, #24]	; (80087e4 <HAL_I2C_Master_Receive+0x22c>)
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f002 fb8c 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d008      	beq.n	80087e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e10e      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
 80087da:	bf00      	nop
 80087dc:	00100002 	.word	0x00100002
 80087e0:	ffff0000 	.word	0xffff0000
 80087e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008814:	3b01      	subs	r3, #1
 8008816:	b29a      	uxth	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008820:	b29b      	uxth	r3, r3
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691a      	ldr	r2, [r3, #16]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	b2d2      	uxtb	r2, r2
 8008836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	1c5a      	adds	r2, r3, #1
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800885c:	e0b8      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	2200      	movs	r2, #0
 8008866:	4966      	ldr	r1, [pc, #408]	; (8008a00 <HAL_I2C_Master_Receive+0x448>)
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f002 fb3d 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e0bf      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2200      	movs	r2, #0
 80088c2:	494f      	ldr	r1, [pc, #316]	; (8008a00 <HAL_I2C_Master_Receive+0x448>)
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f002 fb0f 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e091      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691a      	ldr	r2, [r3, #16]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	b2d2      	uxtb	r2, r2
 8008922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008932:	3b01      	subs	r3, #1
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893e:	b29b      	uxth	r3, r3
 8008940:	3b01      	subs	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008948:	e042      	b.n	80089d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800894a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f002 fc54 	bl	800b1fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e04c      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	b2d2      	uxtb	r2, r2
 800896a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	3b01      	subs	r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b04      	cmp	r3, #4
 800899c:	d118      	bne.n	80089d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	3b01      	subs	r3, #1
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f47f aec2 	bne.w	800875e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2220      	movs	r2, #32
 80089de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e000      	b.n	80089f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80089f6:	2302      	movs	r3, #2
  }
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3728      	adds	r7, #40	; 0x28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	00010004 	.word	0x00010004

08008a04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	817b      	strh	r3, [r7, #10]
 8008a16:	460b      	mov	r3, r1
 8008a18:	813b      	strh	r3, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a1e:	f7fe fbc1 	bl	80071a4 <HAL_GetTick>
 8008a22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	f040 80d9 	bne.w	8008be4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2319      	movs	r3, #25
 8008a38:	2201      	movs	r2, #1
 8008a3a:	496d      	ldr	r1, [pc, #436]	; (8008bf0 <HAL_I2C_Mem_Write+0x1ec>)
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f002 fa53 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d001      	beq.n	8008a4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e0cc      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_I2C_Mem_Write+0x56>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e0c5      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d007      	beq.n	8008a80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0201 	orr.w	r2, r2, #1
 8008a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2221      	movs	r2, #33	; 0x21
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2240      	movs	r2, #64	; 0x40
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a4d      	ldr	r2, [pc, #308]	; (8008bf4 <HAL_I2C_Mem_Write+0x1f0>)
 8008ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ac2:	88f8      	ldrh	r0, [r7, #6]
 8008ac4:	893a      	ldrh	r2, [r7, #8]
 8008ac6:	8979      	ldrh	r1, [r7, #10]
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f001 ffe2 	bl	800aa9c <I2C_RequestMemoryWrite>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d052      	beq.n	8008b84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e081      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f002 fad4 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d107      	bne.n	8008b0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e06b      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	781a      	ldrb	r2, [r3, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	1c5a      	adds	r2, r3, #1
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3b01      	subs	r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d11b      	bne.n	8008b84 <HAL_I2C_Mem_Write+0x180>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d017      	beq.n	8008b84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1aa      	bne.n	8008ae2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f002 fac0 	bl	800b116 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d107      	bne.n	8008bb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e016      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	e000      	b.n	8008be6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008be4:	2302      	movs	r3, #2
  }
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	00100002 	.word	0x00100002
 8008bf4:	ffff0000 	.word	0xffff0000

08008bf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08c      	sub	sp, #48	; 0x30
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	4608      	mov	r0, r1
 8008c02:	4611      	mov	r1, r2
 8008c04:	461a      	mov	r2, r3
 8008c06:	4603      	mov	r3, r0
 8008c08:	817b      	strh	r3, [r7, #10]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	813b      	strh	r3, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c12:	f7fe fac7 	bl	80071a4 <HAL_GetTick>
 8008c16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	f040 8208 	bne.w	8009036 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2319      	movs	r3, #25
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	497b      	ldr	r1, [pc, #492]	; (8008e1c <HAL_I2C_Mem_Read+0x224>)
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f002 f959 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e1fb      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_I2C_Mem_Read+0x56>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e1f4      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d007      	beq.n	8008c74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2222      	movs	r2, #34	; 0x22
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a5b      	ldr	r2, [pc, #364]	; (8008e20 <HAL_I2C_Mem_Read+0x228>)
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cb6:	88f8      	ldrh	r0, [r7, #6]
 8008cb8:	893a      	ldrh	r2, [r7, #8]
 8008cba:	8979      	ldrh	r1, [r7, #10]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 ff7e 	bl	800abc8 <I2C_RequestMemoryRead>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e1b0      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d113      	bne.n	8008d06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	623b      	str	r3, [r7, #32]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	623b      	str	r3, [r7, #32]
 8008cf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e184      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d11b      	bne.n	8008d46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	61fb      	str	r3, [r7, #28]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e164      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d11b      	bne.n	8008d86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	61bb      	str	r3, [r7, #24]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	e144      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	695b      	ldr	r3, [r3, #20]
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	699b      	ldr	r3, [r3, #24]
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008d9c:	e138      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	f200 80f1 	bhi.w	8008f8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d123      	bne.n	8008df8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f002 fa21 	bl	800b1fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e139      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	b2d2      	uxtb	r2, r2
 8008dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008df6:	e10b      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d14e      	bne.n	8008e9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	2200      	movs	r2, #0
 8008e08:	4906      	ldr	r1, [pc, #24]	; (8008e24 <HAL_I2C_Mem_Read+0x22c>)
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f002 f86c 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d008      	beq.n	8008e28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e10e      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
 8008e1a:	bf00      	nop
 8008e1c:	00100002 	.word	0x00100002
 8008e20:	ffff0000 	.word	0xffff0000
 8008e24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	691a      	ldr	r2, [r3, #16]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	3b01      	subs	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e9c:	e0b8      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4966      	ldr	r1, [pc, #408]	; (8009040 <HAL_I2C_Mem_Read+0x448>)
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f002 f81d 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e0bf      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	2200      	movs	r2, #0
 8008f02:	494f      	ldr	r1, [pc, #316]	; (8009040 <HAL_I2C_Mem_Read+0x448>)
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f001 ffef 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e091      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	b2d2      	uxtb	r2, r2
 8008f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	1c5a      	adds	r2, r3, #1
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f88:	e042      	b.n	8009010 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f002 f934 	bl	800b1fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e04c      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d118      	bne.n	8009010 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	b2d2      	uxtb	r2, r2
 8008fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009014:	2b00      	cmp	r3, #0
 8009016:	f47f aec2 	bne.w	8008d9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	e000      	b.n	8009038 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009036:	2302      	movs	r3, #2
  }
}
 8009038:	4618      	mov	r0, r3
 800903a:	3728      	adds	r7, #40	; 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	00010004 	.word	0x00010004

08009044 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009064:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b10      	cmp	r3, #16
 8009072:	d003      	beq.n	800907c <HAL_I2C_EV_IRQHandler+0x38>
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b40      	cmp	r3, #64	; 0x40
 8009078:	f040 80c1 	bne.w	80091fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10d      	bne.n	80090b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800909c:	d003      	beq.n	80090a6 <HAL_I2C_EV_IRQHandler+0x62>
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80090a4:	d101      	bne.n	80090aa <HAL_I2C_EV_IRQHandler+0x66>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e000      	b.n	80090ac <HAL_I2C_EV_IRQHandler+0x68>
 80090aa:	2300      	movs	r3, #0
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	f000 8132 	beq.w	8009316 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00c      	beq.n	80090d6 <HAL_I2C_EV_IRQHandler+0x92>
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	0a5b      	lsrs	r3, r3, #9
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d006      	beq.n	80090d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f002 f91c 	bl	800b306 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fd79 	bl	8009bc6 <I2C_Master_SB>
 80090d4:	e092      	b.n	80091fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	08db      	lsrs	r3, r3, #3
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d009      	beq.n	80090f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	0a5b      	lsrs	r3, r3, #9
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fdef 	bl	8009cd2 <I2C_Master_ADD10>
 80090f4:	e082      	b.n	80091fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d009      	beq.n	8009116 <HAL_I2C_EV_IRQHandler+0xd2>
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	0a5b      	lsrs	r3, r3, #9
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d003      	beq.n	8009116 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe09 	bl	8009d26 <I2C_Master_ADDR>
 8009114:	e072      	b.n	80091fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	089b      	lsrs	r3, r3, #2
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d03b      	beq.n	800919a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800912c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009130:	f000 80f3 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	09db      	lsrs	r3, r3, #7
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00f      	beq.n	8009160 <HAL_I2C_EV_IRQHandler+0x11c>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	0a9b      	lsrs	r3, r3, #10
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <HAL_I2C_EV_IRQHandler+0x11c>
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	089b      	lsrs	r3, r3, #2
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9f3 	bl	8009544 <I2C_MasterTransmit_TXE>
 800915e:	e04d      	b.n	80091fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	089b      	lsrs	r3, r3, #2
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80d6 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	0a5b      	lsrs	r3, r3, #9
 8009172:	f003 0301 	and.w	r3, r3, #1
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80cf 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b21      	cmp	r3, #33	; 0x21
 8009180:	d103      	bne.n	800918a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa7a 	bl	800967c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009188:	e0c7      	b.n	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2b40      	cmp	r3, #64	; 0x40
 800918e:	f040 80c4 	bne.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fae8 	bl	8009768 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009198:	e0bf      	b.n	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091a8:	f000 80b7 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	099b      	lsrs	r3, r3, #6
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00f      	beq.n	80091d8 <HAL_I2C_EV_IRQHandler+0x194>
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	0a9b      	lsrs	r3, r3, #10
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <HAL_I2C_EV_IRQHandler+0x194>
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	089b      	lsrs	r3, r3, #2
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fb5d 	bl	8009890 <I2C_MasterReceive_RXNE>
 80091d6:	e011      	b.n	80091fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	089b      	lsrs	r3, r3, #2
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 809a 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	0a5b      	lsrs	r3, r3, #9
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8093 	beq.w	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fbfc 	bl	80099f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80091fa:	e08e      	b.n	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
 80091fc:	e08d      	b.n	800931a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	2b00      	cmp	r3, #0
 8009204:	d004      	beq.n	8009210 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	61fb      	str	r3, [r7, #28]
 800920e:	e007      	b.n	8009220 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d012      	beq.n	8009252 <HAL_I2C_EV_IRQHandler+0x20e>
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	0a5b      	lsrs	r3, r3, #9
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 ffba 	bl	800a1c4 <I2C_Slave_ADDR>
 8009250:	e066      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	091b      	lsrs	r3, r3, #4
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <HAL_I2C_EV_IRQHandler+0x22e>
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	0a5b      	lsrs	r3, r3, #9
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fff4 	bl	800a258 <I2C_Slave_STOPF>
 8009270:	e056      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b21      	cmp	r3, #33	; 0x21
 8009276:	d002      	beq.n	800927e <HAL_I2C_EV_IRQHandler+0x23a>
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b29      	cmp	r3, #41	; 0x29
 800927c:	d125      	bne.n	80092ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	09db      	lsrs	r3, r3, #7
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00f      	beq.n	80092aa <HAL_I2C_EV_IRQHandler+0x266>
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	0a9b      	lsrs	r3, r3, #10
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d009      	beq.n	80092aa <HAL_I2C_EV_IRQHandler+0x266>
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	089b      	lsrs	r3, r3, #2
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d103      	bne.n	80092aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fed0 	bl	800a048 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092a8:	e039      	b.n	800931e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	089b      	lsrs	r3, r3, #2
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d033      	beq.n	800931e <HAL_I2C_EV_IRQHandler+0x2da>
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	0a5b      	lsrs	r3, r3, #9
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02d      	beq.n	800931e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fefd 	bl	800a0c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092c8:	e029      	b.n	800931e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	099b      	lsrs	r3, r3, #6
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00f      	beq.n	80092f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	0a9b      	lsrs	r3, r3, #10
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d009      	beq.n	80092f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	089b      	lsrs	r3, r3, #2
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 ff08 	bl	800a104 <I2C_SlaveReceive_RXNE>
 80092f4:	e014      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	089b      	lsrs	r3, r3, #2
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	0a5b      	lsrs	r3, r3, #9
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	2b00      	cmp	r3, #0
 800930c:	d008      	beq.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 ff36 	bl	800a180 <I2C_SlaveReceive_BTF>
 8009314:	e004      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8009316:	bf00      	nop
 8009318:	e002      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800931a:	bf00      	nop
 800931c:	e000      	b.n	8009320 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800931e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8009320:	3720      	adds	r7, #32
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b08a      	sub	sp, #40	; 0x28
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009348:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00e      	beq.n	8009374 <HAL_I2C_ER_IRQHandler+0x4e>
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	2b00      	cmp	r3, #0
 8009360:	d008      	beq.n	8009374 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	f043 0301 	orr.w	r3, r3, #1
 8009368:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009372:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009374:	6a3b      	ldr	r3, [r7, #32]
 8009376:	0a5b      	lsrs	r3, r3, #9
 8009378:	f003 0301 	and.w	r3, r3, #1
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00e      	beq.n	800939e <HAL_I2C_ER_IRQHandler+0x78>
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d008      	beq.n	800939e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f043 0302 	orr.w	r3, r3, #2
 8009392:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800939c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	0a9b      	lsrs	r3, r3, #10
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d03f      	beq.n	800942a <HAL_I2C_ER_IRQHandler+0x104>
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d039      	beq.n	800942a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80093b6:	7efb      	ldrb	r3, [r7, #27]
 80093b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093be:	b29b      	uxth	r3, r3
 80093c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80093d0:	7ebb      	ldrb	r3, [r7, #26]
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d112      	bne.n	80093fc <HAL_I2C_ER_IRQHandler+0xd6>
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10f      	bne.n	80093fc <HAL_I2C_ER_IRQHandler+0xd6>
 80093dc:	7cfb      	ldrb	r3, [r7, #19]
 80093de:	2b21      	cmp	r3, #33	; 0x21
 80093e0:	d008      	beq.n	80093f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80093e2:	7cfb      	ldrb	r3, [r7, #19]
 80093e4:	2b29      	cmp	r3, #41	; 0x29
 80093e6:	d005      	beq.n	80093f4 <HAL_I2C_ER_IRQHandler+0xce>
 80093e8:	7cfb      	ldrb	r3, [r7, #19]
 80093ea:	2b28      	cmp	r3, #40	; 0x28
 80093ec:	d106      	bne.n	80093fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b21      	cmp	r3, #33	; 0x21
 80093f2:	d103      	bne.n	80093fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 f85f 	bl	800a4b8 <I2C_Slave_AF>
 80093fa:	e016      	b.n	800942a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009404:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	f043 0304 	orr.w	r3, r3, #4
 800940c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800940e:	7efb      	ldrb	r3, [r7, #27]
 8009410:	2b10      	cmp	r3, #16
 8009412:	d002      	beq.n	800941a <HAL_I2C_ER_IRQHandler+0xf4>
 8009414:	7efb      	ldrb	r3, [r7, #27]
 8009416:	2b40      	cmp	r3, #64	; 0x40
 8009418:	d107      	bne.n	800942a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009428:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800942a:	6a3b      	ldr	r3, [r7, #32]
 800942c:	0adb      	lsrs	r3, r3, #11
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00e      	beq.n	8009454 <HAL_I2C_ER_IRQHandler+0x12e>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	0a1b      	lsrs	r3, r3, #8
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	f043 0308 	orr.w	r3, r3, #8
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009452:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f001 f896 	bl	800a598 <I2C_ITError>
  }
}
 800946c:	bf00      	nop
 800946e:	3728      	adds	r7, #40	; 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
 80094d0:	4613      	mov	r3, r2
 80094d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009552:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800955a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d150      	bne.n	800960c <I2C_MasterTransmit_TXE+0xc8>
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2b21      	cmp	r3, #33	; 0x21
 800956e:	d14d      	bne.n	800960c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b08      	cmp	r3, #8
 8009574:	d01d      	beq.n	80095b2 <I2C_MasterTransmit_TXE+0x6e>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b20      	cmp	r3, #32
 800957a:	d01a      	beq.n	80095b2 <I2C_MasterTransmit_TXE+0x6e>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009582:	d016      	beq.n	80095b2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009592:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2211      	movs	r2, #17
 8009598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ff62 	bl	8009474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80095b0:	e060      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095c0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095d0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d107      	bne.n	80095fc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff ff7d 	bl	80094f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80095fa:	e03b      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff ff35 	bl	8009474 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800960a:	e033      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b21      	cmp	r3, #33	; 0x21
 8009610:	d005      	beq.n	800961e <I2C_MasterTransmit_TXE+0xda>
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d12d      	bne.n	8009674 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	2b22      	cmp	r3, #34	; 0x22
 800961c:	d12a      	bne.n	8009674 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009622:	b29b      	uxth	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d108      	bne.n	800963a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009636:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009638:	e01c      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d103      	bne.n	800964e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f88e 	bl	8009768 <I2C_MemoryTransmit_TXE_BTF>
}
 800964c:	e012      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009652:	781a      	ldrb	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29a      	uxth	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009672:	e7ff      	b.n	8009674 <I2C_MasterTransmit_TXE+0x130>
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009688:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b21      	cmp	r3, #33	; 0x21
 8009694:	d164      	bne.n	8009760 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d012      	beq.n	80096c6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	3b01      	subs	r3, #1
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80096c4:	e04c      	b.n	8009760 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b08      	cmp	r3, #8
 80096ca:	d01d      	beq.n	8009708 <I2C_MasterTransmit_BTF+0x8c>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d01a      	beq.n	8009708 <I2C_MasterTransmit_BTF+0x8c>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096d8:	d016      	beq.n	8009708 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80096e8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2211      	movs	r2, #17
 80096ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff feb7 	bl	8009474 <HAL_I2C_MasterTxCpltCallback>
}
 8009706:	e02b      	b.n	8009760 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009716:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009726:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2220      	movs	r2, #32
 8009732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d107      	bne.n	8009752 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fed2 	bl	80094f4 <HAL_I2C_MemTxCpltCallback>
}
 8009750:	e006      	b.n	8009760 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fe8a 	bl	8009474 <HAL_I2C_MasterTxCpltCallback>
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977c:	2b00      	cmp	r3, #0
 800977e:	d11d      	bne.n	80097bc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d10b      	bne.n	80097a0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800978c:	b2da      	uxtb	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009798:	1c9a      	adds	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800979e:	e073      	b.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	121b      	asrs	r3, r3, #8
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80097ba:	e065      	b.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d10b      	bne.n	80097dc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80097da:	e055      	b.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d151      	bne.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	2b22      	cmp	r3, #34	; 0x22
 80097e8:	d10d      	bne.n	8009806 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097f8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fe:	1c5a      	adds	r2, r3, #1
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009804:	e040      	b.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d015      	beq.n	800983c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009810:	7bfb      	ldrb	r3, [r7, #15]
 8009812:	2b21      	cmp	r3, #33	; 0x21
 8009814:	d112      	bne.n	800983c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800983a:	e025      	b.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d120      	bne.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b21      	cmp	r3, #33	; 0x21
 800984a:	d11d      	bne.n	8009888 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800985a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff fe36 	bl	80094f4 <HAL_I2C_MemTxCpltCallback>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b22      	cmp	r3, #34	; 0x22
 80098a2:	f040 80a2 	bne.w	80099ea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d921      	bls.n	80098f8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	f040 8082 	bne.w	80099ea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80098f6:	e078      	b.n	80099ea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d074      	beq.n	80099ea <I2C_MasterReceive_RXNE+0x15a>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d002      	beq.n	800990c <I2C_MasterReceive_RXNE+0x7c>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d16e      	bne.n	80099ea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f001 fc43 	bl	800b198 <I2C_WaitOnSTOPRequestThroughIT>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d142      	bne.n	800999e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009926:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691a      	ldr	r2, [r3, #16]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b40      	cmp	r3, #64	; 0x40
 8009970:	d10a      	bne.n	8009988 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff fdc1 	bl	8009508 <HAL_I2C_MemRxCpltCallback>
}
 8009986:	e030      	b.n	80099ea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2212      	movs	r2, #18
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fd76 	bl	8009488 <HAL_I2C_MasterRxCpltCallback>
}
 800999c:	e025      	b.n	80099ea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80099ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff fd99 	bl	800951c <HAL_I2C_ErrorCallback>
}
 80099ea:	bf00      	nop
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d11b      	bne.n	8009a42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	691a      	ldr	r2, [r3, #16]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009a40:	e0bd      	b.n	8009bbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d129      	bne.n	8009aa0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d00a      	beq.n	8009a78 <I2C_MasterReceive_BTF+0x86>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d007      	beq.n	8009a78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009a9e:	e08e      	b.n	8009bbe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d176      	bne.n	8009b98 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d002      	beq.n	8009ab6 <I2C_MasterReceive_BTF+0xc4>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b10      	cmp	r3, #16
 8009ab4:	d108      	bne.n	8009ac8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	e019      	b.n	8009afc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d002      	beq.n	8009ad4 <I2C_MasterReceive_BTF+0xe2>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d108      	bne.n	8009ae6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e00a      	b.n	8009afc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d007      	beq.n	8009afc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009afa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691a      	ldr	r2, [r3, #16]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009b56:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b40      	cmp	r3, #64	; 0x40
 8009b6a:	d10a      	bne.n	8009b82 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff fcc4 	bl	8009508 <HAL_I2C_MemRxCpltCallback>
}
 8009b80:	e01d      	b.n	8009bbe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2212      	movs	r2, #18
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fc79 	bl	8009488 <HAL_I2C_MasterRxCpltCallback>
}
 8009b96:	e012      	b.n	8009bbe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009bbe:	bf00      	nop
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	2b40      	cmp	r3, #64	; 0x40
 8009bd8:	d117      	bne.n	8009c0a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009bf2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009bf4:	e067      	b.n	8009cc6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f043 0301 	orr.w	r3, r3, #1
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	611a      	str	r2, [r3, #16]
}
 8009c08:	e05d      	b.n	8009cc6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c12:	d133      	bne.n	8009c7c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b21      	cmp	r3, #33	; 0x21
 8009c1e:	d109      	bne.n	8009c34 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	461a      	mov	r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c30:	611a      	str	r2, [r3, #16]
 8009c32:	e008      	b.n	8009c46 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d004      	beq.n	8009c58 <I2C_Master_SB+0x92>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d108      	bne.n	8009c6a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d032      	beq.n	8009cc6 <I2C_Master_SB+0x100>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d02d      	beq.n	8009cc6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c78:	605a      	str	r2, [r3, #4]
}
 8009c7a:	e024      	b.n	8009cc6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10e      	bne.n	8009ca2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	11db      	asrs	r3, r3, #7
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0306 	and.w	r3, r3, #6
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f063 030f 	orn	r3, r3, #15
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	611a      	str	r2, [r3, #16]
}
 8009ca0:	e011      	b.n	8009cc6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d10d      	bne.n	8009cc6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	11db      	asrs	r3, r3, #7
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0306 	and.w	r3, r3, #6
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	f063 030e 	orn	r3, r3, #14
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	611a      	str	r2, [r3, #16]
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d004      	beq.n	8009cf8 <I2C_Master_ADD10+0x26>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d108      	bne.n	8009d0a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00c      	beq.n	8009d1a <I2C_Master_ADD10+0x48>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d007      	beq.n	8009d1a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d18:	605a      	str	r2, [r3, #4]
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b091      	sub	sp, #68	; 0x44
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d42:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b22      	cmp	r3, #34	; 0x22
 8009d4e:	f040 8169 	bne.w	800a024 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10f      	bne.n	8009d7a <I2C_Master_ADDR+0x54>
 8009d5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d10b      	bne.n	8009d7a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d62:	2300      	movs	r3, #0
 8009d64:	633b      	str	r3, [r7, #48]	; 0x30
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	633b      	str	r3, [r7, #48]	; 0x30
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	e160      	b.n	800a03c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d11d      	bne.n	8009dbe <I2C_Master_ADDR+0x98>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d8a:	d118      	bne.n	8009dbe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009db0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	651a      	str	r2, [r3, #80]	; 0x50
 8009dbc:	e13e      	b.n	800a03c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d113      	bne.n	8009df0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dc8:	2300      	movs	r3, #0
 8009dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e115      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	f040 808a 	bne.w	8009f10 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e02:	d137      	bne.n	8009e74 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e12:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e22:	d113      	bne.n	8009e4c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e32:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e34:	2300      	movs	r3, #0
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	e0e7      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	623b      	str	r3, [r7, #32]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	623b      	str	r3, [r7, #32]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	623b      	str	r3, [r7, #32]
 8009e60:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	e0d3      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	2b08      	cmp	r3, #8
 8009e78:	d02e      	beq.n	8009ed8 <I2C_Master_ADDR+0x1b2>
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7c:	2b20      	cmp	r3, #32
 8009e7e:	d02b      	beq.n	8009ed8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e82:	2b12      	cmp	r3, #18
 8009e84:	d102      	bne.n	8009e8c <I2C_Master_ADDR+0x166>
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d125      	bne.n	8009ed8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d00e      	beq.n	8009eb0 <I2C_Master_ADDR+0x18a>
 8009e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d00b      	beq.n	8009eb0 <I2C_Master_ADDR+0x18a>
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	2b10      	cmp	r3, #16
 8009e9c:	d008      	beq.n	8009eb0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e007      	b.n	8009ec0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ebe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695b      	ldr	r3, [r3, #20]
 8009eca:	61fb      	str	r3, [r7, #28]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	e0a1      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ee6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	61bb      	str	r3, [r7, #24]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	61bb      	str	r3, [r7, #24]
 8009efc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	e085      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d14d      	bne.n	8009fb6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d016      	beq.n	8009f4e <I2C_Master_ADDR+0x228>
 8009f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d013      	beq.n	8009f4e <I2C_Master_ADDR+0x228>
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	2b10      	cmp	r3, #16
 8009f2a:	d010      	beq.n	8009f4e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f3a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	e007      	b.n	8009f5e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f5c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f6c:	d117      	bne.n	8009f9e <I2C_Master_ADDR+0x278>
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f74:	d00b      	beq.n	8009f8e <I2C_Master_ADDR+0x268>
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d008      	beq.n	8009f8e <I2C_Master_ADDR+0x268>
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	2b08      	cmp	r3, #8
 8009f80:	d005      	beq.n	8009f8e <I2C_Master_ADDR+0x268>
 8009f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f84:	2b10      	cmp	r3, #16
 8009f86:	d002      	beq.n	8009f8e <I2C_Master_ADDR+0x268>
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	d107      	bne.n	8009f9e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	617b      	str	r3, [r7, #20]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	e032      	b.n	800a01c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fc4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd4:	d117      	bne.n	800a006 <I2C_Master_ADDR+0x2e0>
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009fdc:	d00b      	beq.n	8009ff6 <I2C_Master_ADDR+0x2d0>
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d008      	beq.n	8009ff6 <I2C_Master_ADDR+0x2d0>
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	d005      	beq.n	8009ff6 <I2C_Master_ADDR+0x2d0>
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	d002      	beq.n	8009ff6 <I2C_Master_ADDR+0x2d0>
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d107      	bne.n	800a006 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a004:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a006:	2300      	movs	r3, #0
 800a008:	613b      	str	r3, [r7, #16]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	613b      	str	r3, [r7, #16]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	613b      	str	r3, [r7, #16]
 800a01a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a022:	e00b      	b.n	800a03c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
}
 800a03a:	e7ff      	b.n	800a03c <I2C_Master_ADDR+0x316>
 800a03c:	bf00      	nop
 800a03e:	3744      	adds	r7, #68	; 0x44
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d02b      	beq.n	800a0ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	781a      	ldrb	r2, [r3, #0]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d114      	bne.n	800a0ba <I2C_SlaveTransmit_TXE+0x72>
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b29      	cmp	r3, #41	; 0x29
 800a094:	d111      	bne.n	800a0ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2221      	movs	r2, #33	; 0x21
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2228      	movs	r2, #40	; 0x28
 800a0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff f9f1 	bl	800949c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d011      	beq.n	800a0f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	781a      	ldrb	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a112:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a118:	b29b      	uxth	r3, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d02c      	beq.n	800a178 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691a      	ldr	r2, [r3, #16]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d114      	bne.n	800a178 <I2C_SlaveReceive_RXNE+0x74>
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	2b2a      	cmp	r3, #42	; 0x2a
 800a152:	d111      	bne.n	800a178 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a162:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2222      	movs	r2, #34	; 0x22
 800a168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2228      	movs	r2, #40	; 0x28
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff f99c 	bl	80094b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a178:	bf00      	nop
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d012      	beq.n	800a1b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	691a      	ldr	r2, [r3, #16]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19c:	b2d2      	uxtb	r2, r2
 800a19e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a1de:	2b28      	cmp	r3, #40	; 0x28
 800a1e0:	d127      	bne.n	800a232 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	089b      	lsrs	r3, r3, #2
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d101      	bne.n	800a202 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a1fe:	2301      	movs	r3, #1
 800a200:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	09db      	lsrs	r3, r3, #7
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	81bb      	strh	r3, [r7, #12]
 800a214:	e002      	b.n	800a21c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a224:	89ba      	ldrh	r2, [r7, #12]
 800a226:	7bfb      	ldrb	r3, [r7, #15]
 800a228:	4619      	mov	r1, r3
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff f94a 	bl	80094c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a230:	e00e      	b.n	800a250 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a232:	2300      	movs	r3, #0
 800a234:	60bb      	str	r3, [r7, #8]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	695b      	ldr	r3, [r3, #20]
 800a23c:	60bb      	str	r3, [r7, #8]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	60bb      	str	r3, [r7, #8]
 800a246:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a250:	bf00      	nop
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a266:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a276:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a278:	2300      	movs	r3, #0
 800a27a:	60bb      	str	r3, [r7, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	695b      	ldr	r3, [r3, #20]
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]
 800a294:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b4:	d172      	bne.n	800a39c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	2b22      	cmp	r3, #34	; 0x22
 800a2ba:	d002      	beq.n	800a2c2 <I2C_Slave_STOPF+0x6a>
 800a2bc:	7bfb      	ldrb	r3, [r7, #15]
 800a2be:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c0:	d135      	bne.n	800a32e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d005      	beq.n	800a2e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2de:	f043 0204 	orr.w	r2, r3, #4
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fc44 	bl	8007b88 <HAL_DMA_GetState>
 800a300:	4603      	mov	r3, r0
 800a302:	2b01      	cmp	r3, #1
 800a304:	d049      	beq.n	800a39a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30a:	4a69      	ldr	r2, [pc, #420]	; (800a4b0 <I2C_Slave_STOPF+0x258>)
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	4618      	mov	r0, r3
 800a314:	f7fd fa8c 	bl	8007830 <HAL_DMA_Abort_IT>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d03d      	beq.n	800a39a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a32c:	e035      	b.n	800a39a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d005      	beq.n	800a352 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f043 0204 	orr.w	r2, r3, #4
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a360:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a366:	4618      	mov	r0, r3
 800a368:	f7fd fc0e 	bl	8007b88 <HAL_DMA_GetState>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d014      	beq.n	800a39c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	4a4e      	ldr	r2, [pc, #312]	; (800a4b0 <I2C_Slave_STOPF+0x258>)
 800a378:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd fa56 	bl	8007830 <HAL_DMA_Abort_IT>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a394:	4610      	mov	r0, r2
 800a396:	4798      	blx	r3
 800a398:	e000      	b.n	800a39c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a39a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d03e      	beq.n	800a424 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b04      	cmp	r3, #4
 800a3b2:	d112      	bne.n	800a3da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3e4:	2b40      	cmp	r3, #64	; 0x40
 800a3e6:	d112      	bne.n	800a40e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	b2d2      	uxtb	r2, r2
 800a3f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41c:	f043 0204 	orr.w	r2, r3, #4
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d003      	beq.n	800a434 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f8b3 	bl	800a598 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a432:	e039      	b.n	800a4a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d109      	bne.n	800a44e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2228      	movs	r2, #40	; 0x28
 800a444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff f831 	bl	80094b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b28      	cmp	r3, #40	; 0x28
 800a458:	d111      	bne.n	800a47e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <I2C_Slave_STOPF+0x25c>)
 800a45e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7ff f832 	bl	80094e0 <HAL_I2C_ListenCpltCallback>
}
 800a47c:	e014      	b.n	800a4a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	2b22      	cmp	r3, #34	; 0x22
 800a484:	d002      	beq.n	800a48c <I2C_Slave_STOPF+0x234>
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	2b22      	cmp	r3, #34	; 0x22
 800a48a:	d10d      	bne.n	800a4a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2220      	movs	r2, #32
 800a496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff f804 	bl	80094b0 <HAL_I2C_SlaveRxCpltCallback>
}
 800a4a8:	bf00      	nop
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	0800ad99 	.word	0x0800ad99
 800a4b4:	ffff0000 	.word	0xffff0000

0800a4b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d002      	beq.n	800a4da <I2C_Slave_AF+0x22>
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b20      	cmp	r3, #32
 800a4d8:	d129      	bne.n	800a52e <I2C_Slave_AF+0x76>
 800a4da:	7bfb      	ldrb	r3, [r7, #15]
 800a4dc:	2b28      	cmp	r3, #40	; 0x28
 800a4de:	d126      	bne.n	800a52e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a2c      	ldr	r2, [pc, #176]	; (800a594 <I2C_Slave_AF+0xdc>)
 800a4e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a4f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2220      	movs	r2, #32
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7fe ffda 	bl	80094e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a52c:	e02e      	b.n	800a58c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	2b21      	cmp	r3, #33	; 0x21
 800a532:	d126      	bne.n	800a582 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a17      	ldr	r2, [pc, #92]	; (800a594 <I2C_Slave_AF+0xdc>)
 800a538:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2221      	movs	r2, #33	; 0x21
 800a53e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a55e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a568:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a578:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7fe ff8e 	bl	800949c <HAL_I2C_SlaveTxCpltCallback>
}
 800a580:	e004      	b.n	800a58c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a58a:	615a      	str	r2, [r3, #20]
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	ffff0000 	.word	0xffff0000

0800a598 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a5b0:	7bbb      	ldrb	r3, [r7, #14]
 800a5b2:	2b10      	cmp	r3, #16
 800a5b4:	d002      	beq.n	800a5bc <I2C_ITError+0x24>
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b40      	cmp	r3, #64	; 0x40
 800a5ba:	d10a      	bne.n	800a5d2 <I2C_ITError+0x3a>
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	2b22      	cmp	r3, #34	; 0x22
 800a5c0:	d107      	bne.n	800a5d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a5d8:	2b28      	cmp	r3, #40	; 0x28
 800a5da:	d107      	bne.n	800a5ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2228      	movs	r2, #40	; 0x28
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5ea:	e015      	b.n	800a618 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5fa:	d00a      	beq.n	800a612 <I2C_ITError+0x7a>
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b60      	cmp	r3, #96	; 0x60
 800a600:	d007      	beq.n	800a612 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a626:	d162      	bne.n	800a6ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a636:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b01      	cmp	r3, #1
 800a644:	d020      	beq.n	800a688 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64a:	4a6a      	ldr	r2, [pc, #424]	; (800a7f4 <I2C_ITError+0x25c>)
 800a64c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a652:	4618      	mov	r0, r3
 800a654:	f7fd f8ec 	bl	8007830 <HAL_DMA_Abort_IT>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 8089 	beq.w	800a772 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f022 0201 	bic.w	r2, r2, #1
 800a66e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2220      	movs	r2, #32
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a682:	4610      	mov	r0, r2
 800a684:	4798      	blx	r3
 800a686:	e074      	b.n	800a772 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68c:	4a59      	ldr	r2, [pc, #356]	; (800a7f4 <I2C_ITError+0x25c>)
 800a68e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a694:	4618      	mov	r0, r3
 800a696:	f7fd f8cb 	bl	8007830 <HAL_DMA_Abort_IT>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d068      	beq.n	800a772 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6aa:	2b40      	cmp	r3, #64	; 0x40
 800a6ac:	d10b      	bne.n	800a6c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	b2d2      	uxtb	r2, r2
 800a6ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4798      	blx	r3
 800a6ec:	e041      	b.n	800a772 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b60      	cmp	r3, #96	; 0x60
 800a6f8:	d125      	bne.n	800a746 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d10b      	bne.n	800a72e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	691a      	ldr	r2, [r3, #16]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0201 	bic.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7fe fef6 	bl	8009530 <HAL_I2C_AbortCpltCallback>
 800a744:	e015      	b.n	800a772 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	d10b      	bne.n	800a76c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	691a      	ldr	r2, [r3, #16]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7fe fed5 	bl	800951c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10e      	bne.n	800a7a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a792:	2b00      	cmp	r3, #0
 800a794:	d104      	bne.n	800a7a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a7ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d113      	bne.n	800a7ec <I2C_ITError+0x254>
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	2b28      	cmp	r3, #40	; 0x28
 800a7c8:	d110      	bne.n	800a7ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a0a      	ldr	r2, [pc, #40]	; (800a7f8 <I2C_ITError+0x260>)
 800a7ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f7fe fe7a 	bl	80094e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	0800ad99 	.word	0x0800ad99
 800a7f8:	ffff0000 	.word	0xffff0000

0800a7fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af02      	add	r7, sp, #8
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	607a      	str	r2, [r7, #4]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	460b      	mov	r3, r1
 800a80a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b08      	cmp	r3, #8
 800a816:	d006      	beq.n	800a826 <I2C_MasterRequestWrite+0x2a>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d003      	beq.n	800a826 <I2C_MasterRequestWrite+0x2a>
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a824:	d108      	bne.n	800a838 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a834:	601a      	str	r2, [r3, #0]
 800a836:	e00b      	b.n	800a850 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83c:	2b12      	cmp	r3, #18
 800a83e:	d107      	bne.n	800a850 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a84e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 fb43 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00d      	beq.n	800a884 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a876:	d103      	bne.n	800a880 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a87e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e035      	b.n	800a8f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a88c:	d108      	bne.n	800a8a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a88e:	897b      	ldrh	r3, [r7, #10]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a89c:	611a      	str	r2, [r3, #16]
 800a89e:	e01b      	b.n	800a8d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a8a0:	897b      	ldrh	r3, [r7, #10]
 800a8a2:	11db      	asrs	r3, r3, #7
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0306 	and.w	r3, r3, #6
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	f063 030f 	orn	r3, r3, #15
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	490e      	ldr	r1, [pc, #56]	; (800a8f8 <I2C_MasterRequestWrite+0xfc>)
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fb69 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e010      	b.n	800a8f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a8ce:	897b      	ldrh	r3, [r7, #10]
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4907      	ldr	r1, [pc, #28]	; (800a8fc <I2C_MasterRequestWrite+0x100>)
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fb59 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	00010008 	.word	0x00010008
 800a8fc:	00010002 	.word	0x00010002

0800a900 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	607a      	str	r2, [r7, #4]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	460b      	mov	r3, r1
 800a90e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a924:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d006      	beq.n	800a93a <I2C_MasterRequestRead+0x3a>
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d003      	beq.n	800a93a <I2C_MasterRequestRead+0x3a>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a938:	d108      	bne.n	800a94c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	e00b      	b.n	800a964 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	2b11      	cmp	r3, #17
 800a952:	d107      	bne.n	800a964 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a962:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 fab9 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00d      	beq.n	800a998 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a98a:	d103      	bne.n	800a994 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a994:	2303      	movs	r3, #3
 800a996:	e079      	b.n	800aa8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9a0:	d108      	bne.n	800a9b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9a2:	897b      	ldrh	r3, [r7, #10]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	f043 0301 	orr.w	r3, r3, #1
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	611a      	str	r2, [r3, #16]
 800a9b2:	e05f      	b.n	800aa74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a9b4:	897b      	ldrh	r3, [r7, #10]
 800a9b6:	11db      	asrs	r3, r3, #7
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	f003 0306 	and.w	r3, r3, #6
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f063 030f 	orn	r3, r3, #15
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	4930      	ldr	r1, [pc, #192]	; (800aa94 <I2C_MasterRequestRead+0x194>)
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fadf 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e054      	b.n	800aa8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9e2:	897b      	ldrh	r3, [r7, #10]
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	4929      	ldr	r1, [pc, #164]	; (800aa98 <I2C_MasterRequestRead+0x198>)
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 facf 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e044      	b.n	800aa8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa02:	2300      	movs	r3, #0
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 fa57 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa4e:	d103      	bne.n	800aa58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e017      	b.n	800aa8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800aa5c:	897b      	ldrh	r3, [r7, #10]
 800aa5e:	11db      	asrs	r3, r3, #7
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	f003 0306 	and.w	r3, r3, #6
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	f063 030e 	orn	r3, r3, #14
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	4907      	ldr	r1, [pc, #28]	; (800aa98 <I2C_MasterRequestRead+0x198>)
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fa8b 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e000      	b.n	800aa8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3718      	adds	r7, #24
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	00010008 	.word	0x00010008
 800aa98:	00010002 	.word	0x00010002

0800aa9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af02      	add	r7, sp, #8
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	4608      	mov	r0, r1
 800aaa6:	4611      	mov	r1, r2
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4603      	mov	r3, r0
 800aaac:	817b      	strh	r3, [r7, #10]
 800aaae:	460b      	mov	r3, r1
 800aab0:	813b      	strh	r3, [r7, #8]
 800aab2:	4613      	mov	r3, r2
 800aab4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aac4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2200      	movs	r2, #0
 800aace:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fa08 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00d      	beq.n	800aafa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaec:	d103      	bne.n	800aaf6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e05f      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aafa:	897b      	ldrh	r3, [r7, #10]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	461a      	mov	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	6a3a      	ldr	r2, [r7, #32]
 800ab0e:	492d      	ldr	r1, [pc, #180]	; (800abc4 <I2C_RequestMemoryWrite+0x128>)
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 fa40 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d001      	beq.n	800ab20 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e04c      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab20:	2300      	movs	r3, #0
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	617b      	str	r3, [r7, #20]
 800ab34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab38:	6a39      	ldr	r1, [r7, #32]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 faaa 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00d      	beq.n	800ab62 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4a:	2b04      	cmp	r3, #4
 800ab4c:	d107      	bne.n	800ab5e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e02b      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab62:	88fb      	ldrh	r3, [r7, #6]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d105      	bne.n	800ab74 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab68:	893b      	ldrh	r3, [r7, #8]
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	611a      	str	r2, [r3, #16]
 800ab72:	e021      	b.n	800abb8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab74:	893b      	ldrh	r3, [r7, #8]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab84:	6a39      	ldr	r1, [r7, #32]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fa84 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	d107      	bne.n	800abaa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aba8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e005      	b.n	800abba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abae:	893b      	ldrh	r3, [r7, #8]
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	00010002 	.word	0x00010002

0800abc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	4608      	mov	r0, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	817b      	strh	r3, [r7, #10]
 800abda:	460b      	mov	r3, r1
 800abdc:	813b      	strh	r3, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 f96a 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00d      	beq.n	800ac36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac28:	d103      	bne.n	800ac32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e0aa      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac36:	897b      	ldrh	r3, [r7, #10]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	6a3a      	ldr	r2, [r7, #32]
 800ac4a:	4952      	ldr	r1, [pc, #328]	; (800ad94 <I2C_RequestMemoryRead+0x1cc>)
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 f9a2 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e097      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	617b      	str	r3, [r7, #20]
 800ac70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac74:	6a39      	ldr	r1, [r7, #32]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fa0c 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d107      	bne.n	800ac9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e076      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d105      	bne.n	800acb0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aca4:	893b      	ldrh	r3, [r7, #8]
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	611a      	str	r2, [r3, #16]
 800acae:	e021      	b.n	800acf4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800acb0:	893b      	ldrh	r3, [r7, #8]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acc0:	6a39      	ldr	r1, [r7, #32]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f9e6 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d107      	bne.n	800ace6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ace4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e050      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acea:	893b      	ldrh	r3, [r7, #8]
 800acec:	b2da      	uxtb	r2, r3
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf6:	6a39      	ldr	r1, [r7, #32]
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f9cb 	bl	800b094 <I2C_WaitOnTXEFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	2b04      	cmp	r3, #4
 800ad0a:	d107      	bne.n	800ad1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e035      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 f8d3 	bl	800aee8 <I2C_WaitOnFlagUntilTimeout>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00d      	beq.n	800ad64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad56:	d103      	bne.n	800ad60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad60:	2303      	movs	r3, #3
 800ad62:	e013      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ad64:	897b      	ldrh	r3, [r7, #10]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	f043 0301 	orr.w	r3, r3, #1
 800ad6c:	b2da      	uxtb	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	6a3a      	ldr	r2, [r7, #32]
 800ad78:	4906      	ldr	r1, [pc, #24]	; (800ad94 <I2C_RequestMemoryRead+0x1cc>)
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f000 f90b 	bl	800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e000      	b.n	800ad8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	00010002 	.word	0x00010002

0800ad98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800adb2:	4b4b      	ldr	r3, [pc, #300]	; (800aee0 <I2C_DMAAbort+0x148>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	08db      	lsrs	r3, r3, #3
 800adb8:	4a4a      	ldr	r2, [pc, #296]	; (800aee4 <I2C_DMAAbort+0x14c>)
 800adba:	fba2 2303 	umull	r2, r3, r2, r3
 800adbe:	0a1a      	lsrs	r2, r3, #8
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	00da      	lsls	r2, r3, #3
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add6:	f043 0220 	orr.w	r2, r3, #32
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800adde:	e00a      	b.n	800adf6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf4:	d0ea      	beq.n	800adcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae02:	2200      	movs	r2, #0
 800ae04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	2200      	movs	r2, #0
 800ae14:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae38:	2200      	movs	r2, #0
 800ae3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae48:	2200      	movs	r2, #0
 800ae4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f022 0201 	bic.w	r2, r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b60      	cmp	r3, #96	; 0x60
 800ae66:	d10e      	bne.n	800ae86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f7fe fb56 	bl	8009530 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ae84:	e027      	b.n	800aed6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae86:	7cfb      	ldrb	r3, [r7, #19]
 800ae88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ae8c:	2b28      	cmp	r3, #40	; 0x28
 800ae8e:	d117      	bne.n	800aec0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aeae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2228      	movs	r2, #40	; 0x28
 800aeba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800aebe:	e007      	b.n	800aed0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800aed0:	6978      	ldr	r0, [r7, #20]
 800aed2:	f7fe fb23 	bl	800951c <HAL_I2C_ErrorCallback>
}
 800aed6:	bf00      	nop
 800aed8:	3718      	adds	r7, #24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	20000034 	.word	0x20000034
 800aee4:	14f8b589 	.word	0x14f8b589

0800aee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4613      	mov	r3, r2
 800aef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aef8:	e025      	b.n	800af46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d021      	beq.n	800af46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af02:	f7fc f94f 	bl	80071a4 <HAL_GetTick>
 800af06:	4602      	mov	r2, r0
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d302      	bcc.n	800af18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d116      	bne.n	800af46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2220      	movs	r2, #32
 800af22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f043 0220 	orr.w	r2, r3, #32
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2200      	movs	r2, #0
 800af3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	e023      	b.n	800af8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	0c1b      	lsrs	r3, r3, #16
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d10d      	bne.n	800af6c <I2C_WaitOnFlagUntilTimeout+0x84>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	43da      	mvns	r2, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	4013      	ands	r3, r2
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	bf0c      	ite	eq
 800af62:	2301      	moveq	r3, #1
 800af64:	2300      	movne	r3, #0
 800af66:	b2db      	uxtb	r3, r3
 800af68:	461a      	mov	r2, r3
 800af6a:	e00c      	b.n	800af86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	43da      	mvns	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4013      	ands	r3, r2
 800af78:	b29b      	uxth	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	bf0c      	ite	eq
 800af7e:	2301      	moveq	r3, #1
 800af80:	2300      	movne	r3, #0
 800af82:	b2db      	uxtb	r3, r3
 800af84:	461a      	mov	r2, r3
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d0b6      	beq.n	800aefa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b084      	sub	sp, #16
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60f8      	str	r0, [r7, #12]
 800af9e:	60b9      	str	r1, [r7, #8]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afa4:	e051      	b.n	800b04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afb4:	d123      	bne.n	800affe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800afce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2220      	movs	r2, #32
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afea:	f043 0204 	orr.w	r2, r3, #4
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e046      	b.n	800b08c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b004:	d021      	beq.n	800b04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b006:	f7fc f8cd 	bl	80071a4 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	429a      	cmp	r2, r3
 800b014:	d302      	bcc.n	800b01c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d116      	bne.n	800b04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2220      	movs	r2, #32
 800b026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b036:	f043 0220 	orr.w	r2, r3, #32
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e020      	b.n	800b08c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	0c1b      	lsrs	r3, r3, #16
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	2b01      	cmp	r3, #1
 800b052:	d10c      	bne.n	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	43da      	mvns	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4013      	ands	r3, r2
 800b060:	b29b      	uxth	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	bf14      	ite	ne
 800b066:	2301      	movne	r3, #1
 800b068:	2300      	moveq	r3, #0
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	e00b      	b.n	800b086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	43da      	mvns	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4013      	ands	r3, r2
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	bf14      	ite	ne
 800b080:	2301      	movne	r3, #1
 800b082:	2300      	moveq	r3, #0
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d18d      	bne.n	800afa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0a0:	e02d      	b.n	800b0fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f900 	bl	800b2a8 <I2C_IsAcknowledgeFailed>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d001      	beq.n	800b0b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e02d      	b.n	800b10e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d021      	beq.n	800b0fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ba:	f7fc f873 	bl	80071a4 <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d116      	bne.n	800b0fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2220      	movs	r2, #32
 800b0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f043 0220 	orr.w	r2, r3, #32
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e007      	b.n	800b10e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b108:	2b80      	cmp	r3, #128	; 0x80
 800b10a:	d1ca      	bne.n	800b0a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	60f8      	str	r0, [r7, #12]
 800b11e:	60b9      	str	r1, [r7, #8]
 800b120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b122:	e02d      	b.n	800b180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 f8bf 	bl	800b2a8 <I2C_IsAcknowledgeFailed>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e02d      	b.n	800b190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d021      	beq.n	800b180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b13c:	f7fc f832 	bl	80071a4 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d302      	bcc.n	800b152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d116      	bne.n	800b180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16c:	f043 0220 	orr.w	r2, r3, #32
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e007      	b.n	800b190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f003 0304 	and.w	r3, r3, #4
 800b18a:	2b04      	cmp	r3, #4
 800b18c:	d1ca      	bne.n	800b124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800b1a4:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	08db      	lsrs	r3, r3, #3
 800b1aa:	4a13      	ldr	r2, [pc, #76]	; (800b1f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b0:	0a1a      	lsrs	r2, r3, #8
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d107      	bne.n	800b1d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	f043 0220 	orr.w	r2, r3, #32
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e008      	b.n	800b1e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1e4:	d0e9      	beq.n	800b1ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr
 800b1f4:	20000034 	.word	0x20000034
 800b1f8:	14f8b589 	.word	0x14f8b589

0800b1fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b208:	e042      	b.n	800b290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b10      	cmp	r3, #16
 800b216:	d119      	bne.n	800b24c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f06f 0210 	mvn.w	r2, #16
 800b220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2220      	movs	r2, #32
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e029      	b.n	800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b24c:	f7fb ffaa 	bl	80071a4 <HAL_GetTick>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d302      	bcc.n	800b262 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d116      	bne.n	800b290 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27c:	f043 0220 	orr.w	r2, r3, #32
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e007      	b.n	800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b29a:	2b40      	cmp	r3, #64	; 0x40
 800b29c:	d1b5      	bne.n	800b20a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	695b      	ldr	r3, [r3, #20]
 800b2b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2be:	d11b      	bne.n	800b2f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	f043 0204 	orr.w	r2, r3, #4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b316:	d103      	bne.n	800b320 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b31e:	e007      	b.n	800b330 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b328:	d102      	bne.n	800b330 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2208      	movs	r2, #8
 800b32e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e264      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d075      	beq.n	800b446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b35a:	4ba3      	ldr	r3, [pc, #652]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f003 030c 	and.w	r3, r3, #12
 800b362:	2b04      	cmp	r3, #4
 800b364:	d00c      	beq.n	800b380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b366:	4ba0      	ldr	r3, [pc, #640]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b36e:	2b08      	cmp	r3, #8
 800b370:	d112      	bne.n	800b398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b372:	4b9d      	ldr	r3, [pc, #628]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b37a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b37e:	d10b      	bne.n	800b398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b380:	4b99      	ldr	r3, [pc, #612]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d05b      	beq.n	800b444 <HAL_RCC_OscConfig+0x108>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d157      	bne.n	800b444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	e23f      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a0:	d106      	bne.n	800b3b0 <HAL_RCC_OscConfig+0x74>
 800b3a2:	4b91      	ldr	r3, [pc, #580]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a90      	ldr	r2, [pc, #576]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	e01d      	b.n	800b3ec <HAL_RCC_OscConfig+0xb0>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b3b8:	d10c      	bne.n	800b3d4 <HAL_RCC_OscConfig+0x98>
 800b3ba:	4b8b      	ldr	r3, [pc, #556]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a8a      	ldr	r2, [pc, #552]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	4b88      	ldr	r3, [pc, #544]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a87      	ldr	r2, [pc, #540]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	e00b      	b.n	800b3ec <HAL_RCC_OscConfig+0xb0>
 800b3d4:	4b84      	ldr	r3, [pc, #528]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a83      	ldr	r2, [pc, #524]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	4b81      	ldr	r3, [pc, #516]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a80      	ldr	r2, [pc, #512]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d013      	beq.n	800b41c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3f4:	f7fb fed6 	bl	80071a4 <HAL_GetTick>
 800b3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b3fc:	f7fb fed2 	bl	80071a4 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b64      	cmp	r3, #100	; 0x64
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e204      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b40e:	4b76      	ldr	r3, [pc, #472]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0f0      	beq.n	800b3fc <HAL_RCC_OscConfig+0xc0>
 800b41a:	e014      	b.n	800b446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b41c:	f7fb fec2 	bl	80071a4 <HAL_GetTick>
 800b420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b422:	e008      	b.n	800b436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b424:	f7fb febe 	bl	80071a4 <HAL_GetTick>
 800b428:	4602      	mov	r2, r0
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	2b64      	cmp	r3, #100	; 0x64
 800b430:	d901      	bls.n	800b436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e1f0      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b436:	4b6c      	ldr	r3, [pc, #432]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1f0      	bne.n	800b424 <HAL_RCC_OscConfig+0xe8>
 800b442:	e000      	b.n	800b446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d063      	beq.n	800b51a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b452:	4b65      	ldr	r3, [pc, #404]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	f003 030c 	and.w	r3, r3, #12
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b45e:	4b62      	ldr	r3, [pc, #392]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b466:	2b08      	cmp	r3, #8
 800b468:	d11c      	bne.n	800b4a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b46a:	4b5f      	ldr	r3, [pc, #380]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d116      	bne.n	800b4a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b476:	4b5c      	ldr	r3, [pc, #368]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d005      	beq.n	800b48e <HAL_RCC_OscConfig+0x152>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d001      	beq.n	800b48e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e1c4      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b48e:	4b56      	ldr	r3, [pc, #344]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	4952      	ldr	r1, [pc, #328]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4a2:	e03a      	b.n	800b51a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d020      	beq.n	800b4ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4ac:	4b4f      	ldr	r3, [pc, #316]	; (800b5ec <HAL_RCC_OscConfig+0x2b0>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b2:	f7fb fe77 	bl	80071a4 <HAL_GetTick>
 800b4b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4b8:	e008      	b.n	800b4cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4ba:	f7fb fe73 	bl	80071a4 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e1a5      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4cc:	4b46      	ldr	r3, [pc, #280]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0f0      	beq.n	800b4ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4d8:	4b43      	ldr	r3, [pc, #268]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	4940      	ldr	r1, [pc, #256]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	600b      	str	r3, [r1, #0]
 800b4ec:	e015      	b.n	800b51a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4ee:	4b3f      	ldr	r3, [pc, #252]	; (800b5ec <HAL_RCC_OscConfig+0x2b0>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f4:	f7fb fe56 	bl	80071a4 <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4fa:	e008      	b.n	800b50e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4fc:	f7fb fe52 	bl	80071a4 <HAL_GetTick>
 800b500:	4602      	mov	r2, r0
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	2b02      	cmp	r3, #2
 800b508:	d901      	bls.n	800b50e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e184      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b50e:	4b36      	ldr	r3, [pc, #216]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1f0      	bne.n	800b4fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d030      	beq.n	800b588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d016      	beq.n	800b55c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b52e:	4b30      	ldr	r3, [pc, #192]	; (800b5f0 <HAL_RCC_OscConfig+0x2b4>)
 800b530:	2201      	movs	r2, #1
 800b532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b534:	f7fb fe36 	bl	80071a4 <HAL_GetTick>
 800b538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b53a:	e008      	b.n	800b54e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b53c:	f7fb fe32 	bl	80071a4 <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	2b02      	cmp	r3, #2
 800b548:	d901      	bls.n	800b54e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e164      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b54e:	4b26      	ldr	r3, [pc, #152]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0f0      	beq.n	800b53c <HAL_RCC_OscConfig+0x200>
 800b55a:	e015      	b.n	800b588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b55c:	4b24      	ldr	r3, [pc, #144]	; (800b5f0 <HAL_RCC_OscConfig+0x2b4>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b562:	f7fb fe1f 	bl	80071a4 <HAL_GetTick>
 800b566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b568:	e008      	b.n	800b57c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b56a:	f7fb fe1b 	bl	80071a4 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b02      	cmp	r3, #2
 800b576:	d901      	bls.n	800b57c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e14d      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b57c:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b57e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b580:	f003 0302 	and.w	r3, r3, #2
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1f0      	bne.n	800b56a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a0 	beq.w	800b6d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b596:	2300      	movs	r3, #0
 800b598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b59a:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10f      	bne.n	800b5c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
 800b5aa:	4b0f      	ldr	r3, [pc, #60]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ae:	4a0e      	ldr	r2, [pc, #56]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b5b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	; (800b5e8 <HAL_RCC_OscConfig+0x2ac>)
 800b5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5be:	60bb      	str	r3, [r7, #8]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5c6:	4b0b      	ldr	r3, [pc, #44]	; (800b5f4 <HAL_RCC_OscConfig+0x2b8>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d121      	bne.n	800b616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b5d2:	4b08      	ldr	r3, [pc, #32]	; (800b5f4 <HAL_RCC_OscConfig+0x2b8>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a07      	ldr	r2, [pc, #28]	; (800b5f4 <HAL_RCC_OscConfig+0x2b8>)
 800b5d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5de:	f7fb fde1 	bl	80071a4 <HAL_GetTick>
 800b5e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5e4:	e011      	b.n	800b60a <HAL_RCC_OscConfig+0x2ce>
 800b5e6:	bf00      	nop
 800b5e8:	40023800 	.word	0x40023800
 800b5ec:	42470000 	.word	0x42470000
 800b5f0:	42470e80 	.word	0x42470e80
 800b5f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5f8:	f7fb fdd4 	bl	80071a4 <HAL_GetTick>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	2b02      	cmp	r3, #2
 800b604:	d901      	bls.n	800b60a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e106      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b60a:	4b85      	ldr	r3, [pc, #532]	; (800b820 <HAL_RCC_OscConfig+0x4e4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b612:	2b00      	cmp	r3, #0
 800b614:	d0f0      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d106      	bne.n	800b62c <HAL_RCC_OscConfig+0x2f0>
 800b61e:	4b81      	ldr	r3, [pc, #516]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b622:	4a80      	ldr	r2, [pc, #512]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b624:	f043 0301 	orr.w	r3, r3, #1
 800b628:	6713      	str	r3, [r2, #112]	; 0x70
 800b62a:	e01c      	b.n	800b666 <HAL_RCC_OscConfig+0x32a>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	2b05      	cmp	r3, #5
 800b632:	d10c      	bne.n	800b64e <HAL_RCC_OscConfig+0x312>
 800b634:	4b7b      	ldr	r3, [pc, #492]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b638:	4a7a      	ldr	r2, [pc, #488]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b63a:	f043 0304 	orr.w	r3, r3, #4
 800b63e:	6713      	str	r3, [r2, #112]	; 0x70
 800b640:	4b78      	ldr	r3, [pc, #480]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b644:	4a77      	ldr	r2, [pc, #476]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b646:	f043 0301 	orr.w	r3, r3, #1
 800b64a:	6713      	str	r3, [r2, #112]	; 0x70
 800b64c:	e00b      	b.n	800b666 <HAL_RCC_OscConfig+0x32a>
 800b64e:	4b75      	ldr	r3, [pc, #468]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b652:	4a74      	ldr	r2, [pc, #464]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b654:	f023 0301 	bic.w	r3, r3, #1
 800b658:	6713      	str	r3, [r2, #112]	; 0x70
 800b65a:	4b72      	ldr	r3, [pc, #456]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65e:	4a71      	ldr	r2, [pc, #452]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b660:	f023 0304 	bic.w	r3, r3, #4
 800b664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d015      	beq.n	800b69a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b66e:	f7fb fd99 	bl	80071a4 <HAL_GetTick>
 800b672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b674:	e00a      	b.n	800b68c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b676:	f7fb fd95 	bl	80071a4 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	f241 3288 	movw	r2, #5000	; 0x1388
 800b684:	4293      	cmp	r3, r2
 800b686:	d901      	bls.n	800b68c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e0c5      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b68c:	4b65      	ldr	r3, [pc, #404]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b690:	f003 0302 	and.w	r3, r3, #2
 800b694:	2b00      	cmp	r3, #0
 800b696:	d0ee      	beq.n	800b676 <HAL_RCC_OscConfig+0x33a>
 800b698:	e014      	b.n	800b6c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b69a:	f7fb fd83 	bl	80071a4 <HAL_GetTick>
 800b69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6a0:	e00a      	b.n	800b6b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6a2:	f7fb fd7f 	bl	80071a4 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d901      	bls.n	800b6b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	e0af      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6b8:	4b5a      	ldr	r3, [pc, #360]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1ee      	bne.n	800b6a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d105      	bne.n	800b6d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6ca:	4b56      	ldr	r3, [pc, #344]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	4a55      	ldr	r2, [pc, #340]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	699b      	ldr	r3, [r3, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 809b 	beq.w	800b816 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b6e0:	4b50      	ldr	r3, [pc, #320]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f003 030c 	and.w	r3, r3, #12
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d05c      	beq.n	800b7a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d141      	bne.n	800b778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6f4:	4b4c      	ldr	r3, [pc, #304]	; (800b828 <HAL_RCC_OscConfig+0x4ec>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6fa:	f7fb fd53 	bl	80071a4 <HAL_GetTick>
 800b6fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b700:	e008      	b.n	800b714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b702:	f7fb fd4f 	bl	80071a4 <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d901      	bls.n	800b714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b710:	2303      	movs	r3, #3
 800b712:	e081      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b714:	4b43      	ldr	r3, [pc, #268]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1f0      	bne.n	800b702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	431a      	orrs	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	019b      	lsls	r3, r3, #6
 800b730:	431a      	orrs	r2, r3
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	085b      	lsrs	r3, r3, #1
 800b738:	3b01      	subs	r3, #1
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	431a      	orrs	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	061b      	lsls	r3, r3, #24
 800b744:	4937      	ldr	r1, [pc, #220]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b746:	4313      	orrs	r3, r2
 800b748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b74a:	4b37      	ldr	r3, [pc, #220]	; (800b828 <HAL_RCC_OscConfig+0x4ec>)
 800b74c:	2201      	movs	r2, #1
 800b74e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b750:	f7fb fd28 	bl	80071a4 <HAL_GetTick>
 800b754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b756:	e008      	b.n	800b76a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b758:	f7fb fd24 	bl	80071a4 <HAL_GetTick>
 800b75c:	4602      	mov	r2, r0
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	2b02      	cmp	r3, #2
 800b764:	d901      	bls.n	800b76a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e056      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b76a:	4b2e      	ldr	r3, [pc, #184]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0f0      	beq.n	800b758 <HAL_RCC_OscConfig+0x41c>
 800b776:	e04e      	b.n	800b816 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b778:	4b2b      	ldr	r3, [pc, #172]	; (800b828 <HAL_RCC_OscConfig+0x4ec>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b77e:	f7fb fd11 	bl	80071a4 <HAL_GetTick>
 800b782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b784:	e008      	b.n	800b798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b786:	f7fb fd0d 	bl	80071a4 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	2b02      	cmp	r3, #2
 800b792:	d901      	bls.n	800b798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e03f      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b798:	4b22      	ldr	r3, [pc, #136]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1f0      	bne.n	800b786 <HAL_RCC_OscConfig+0x44a>
 800b7a4:	e037      	b.n	800b816 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d101      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e032      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b7b2:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <HAL_RCC_OscConfig+0x4e8>)
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	699b      	ldr	r3, [r3, #24]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d028      	beq.n	800b812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d121      	bne.n	800b812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d11a      	bne.n	800b812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b7e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d111      	bne.n	800b812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f8:	085b      	lsrs	r3, r3, #1
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d107      	bne.n	800b812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b80e:	429a      	cmp	r2, r3
 800b810:	d001      	beq.n	800b816 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e000      	b.n	800b818 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	40007000 	.word	0x40007000
 800b824:	40023800 	.word	0x40023800
 800b828:	42470060 	.word	0x42470060

0800b82c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d101      	bne.n	800b840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	e0cc      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b840:	4b68      	ldr	r3, [pc, #416]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f003 0307 	and.w	r3, r3, #7
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d90c      	bls.n	800b868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b84e:	4b65      	ldr	r3, [pc, #404]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	b2d2      	uxtb	r2, r2
 800b854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b856:	4b63      	ldr	r3, [pc, #396]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 0307 	and.w	r3, r3, #7
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d001      	beq.n	800b868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e0b8      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b00      	cmp	r3, #0
 800b872:	d020      	beq.n	800b8b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b880:	4b59      	ldr	r3, [pc, #356]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	4a58      	ldr	r2, [pc, #352]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b88a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0308 	and.w	r3, r3, #8
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b898:	4b53      	ldr	r3, [pc, #332]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	4a52      	ldr	r2, [pc, #328]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b89e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b8a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8a4:	4b50      	ldr	r3, [pc, #320]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	494d      	ldr	r1, [pc, #308]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d044      	beq.n	800b94c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d107      	bne.n	800b8da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8ca:	4b47      	ldr	r3, [pc, #284]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d119      	bne.n	800b90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e07f      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d003      	beq.n	800b8ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d107      	bne.n	800b8fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8ea:	4b3f      	ldr	r3, [pc, #252]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d109      	bne.n	800b90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e06f      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8fa:	4b3b      	ldr	r3, [pc, #236]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e067      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b90a:	4b37      	ldr	r3, [pc, #220]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f023 0203 	bic.w	r2, r3, #3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	4934      	ldr	r1, [pc, #208]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b91c:	f7fb fc42 	bl	80071a4 <HAL_GetTick>
 800b920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b922:	e00a      	b.n	800b93a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b924:	f7fb fc3e 	bl	80071a4 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b932:	4293      	cmp	r3, r2
 800b934:	d901      	bls.n	800b93a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e04f      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b93a:	4b2b      	ldr	r3, [pc, #172]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f003 020c 	and.w	r2, r3, #12
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	429a      	cmp	r2, r3
 800b94a:	d1eb      	bne.n	800b924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b94c:	4b25      	ldr	r3, [pc, #148]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d20c      	bcs.n	800b974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b95a:	4b22      	ldr	r3, [pc, #136]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b962:	4b20      	ldr	r3, [pc, #128]	; (800b9e4 <HAL_RCC_ClockConfig+0x1b8>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d001      	beq.n	800b974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e032      	b.n	800b9da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b980:	4b19      	ldr	r3, [pc, #100]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	4916      	ldr	r1, [pc, #88]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f003 0308 	and.w	r3, r3, #8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b99e:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	490e      	ldr	r1, [pc, #56]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b9b2:	f000 f821 	bl	800b9f8 <HAL_RCC_GetSysClockFreq>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b0b      	ldr	r3, [pc, #44]	; (800b9e8 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	091b      	lsrs	r3, r3, #4
 800b9be:	f003 030f 	and.w	r3, r3, #15
 800b9c2:	490a      	ldr	r1, [pc, #40]	; (800b9ec <HAL_RCC_ClockConfig+0x1c0>)
 800b9c4:	5ccb      	ldrb	r3, [r1, r3]
 800b9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ca:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <HAL_RCC_ClockConfig+0x1c4>)
 800b9cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b9ce:	4b09      	ldr	r3, [pc, #36]	; (800b9f4 <HAL_RCC_ClockConfig+0x1c8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fb fba2 	bl	800711c <HAL_InitTick>

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	40023c00 	.word	0x40023c00
 800b9e8:	40023800 	.word	0x40023800
 800b9ec:	08025d74 	.word	0x08025d74
 800b9f0:	20000034 	.word	0x20000034
 800b9f4:	20000038 	.word	0x20000038

0800b9f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9f8:	b5b0      	push	{r4, r5, r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b9fe:	2100      	movs	r1, #0
 800ba00:	6079      	str	r1, [r7, #4]
 800ba02:	2100      	movs	r1, #0
 800ba04:	60f9      	str	r1, [r7, #12]
 800ba06:	2100      	movs	r1, #0
 800ba08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba0e:	4952      	ldr	r1, [pc, #328]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba10:	6889      	ldr	r1, [r1, #8]
 800ba12:	f001 010c 	and.w	r1, r1, #12
 800ba16:	2908      	cmp	r1, #8
 800ba18:	d00d      	beq.n	800ba36 <HAL_RCC_GetSysClockFreq+0x3e>
 800ba1a:	2908      	cmp	r1, #8
 800ba1c:	f200 8094 	bhi.w	800bb48 <HAL_RCC_GetSysClockFreq+0x150>
 800ba20:	2900      	cmp	r1, #0
 800ba22:	d002      	beq.n	800ba2a <HAL_RCC_GetSysClockFreq+0x32>
 800ba24:	2904      	cmp	r1, #4
 800ba26:	d003      	beq.n	800ba30 <HAL_RCC_GetSysClockFreq+0x38>
 800ba28:	e08e      	b.n	800bb48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ba2a:	4b4c      	ldr	r3, [pc, #304]	; (800bb5c <HAL_RCC_GetSysClockFreq+0x164>)
 800ba2c:	60bb      	str	r3, [r7, #8]
       break;
 800ba2e:	e08e      	b.n	800bb4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ba30:	4b4b      	ldr	r3, [pc, #300]	; (800bb60 <HAL_RCC_GetSysClockFreq+0x168>)
 800ba32:	60bb      	str	r3, [r7, #8]
      break;
 800ba34:	e08b      	b.n	800bb4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ba36:	4948      	ldr	r1, [pc, #288]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba38:	6849      	ldr	r1, [r1, #4]
 800ba3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800ba3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba40:	4945      	ldr	r1, [pc, #276]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba42:	6849      	ldr	r1, [r1, #4]
 800ba44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800ba48:	2900      	cmp	r1, #0
 800ba4a:	d024      	beq.n	800ba96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba4c:	4942      	ldr	r1, [pc, #264]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba4e:	6849      	ldr	r1, [r1, #4]
 800ba50:	0989      	lsrs	r1, r1, #6
 800ba52:	4608      	mov	r0, r1
 800ba54:	f04f 0100 	mov.w	r1, #0
 800ba58:	f240 14ff 	movw	r4, #511	; 0x1ff
 800ba5c:	f04f 0500 	mov.w	r5, #0
 800ba60:	ea00 0204 	and.w	r2, r0, r4
 800ba64:	ea01 0305 	and.w	r3, r1, r5
 800ba68:	493d      	ldr	r1, [pc, #244]	; (800bb60 <HAL_RCC_GetSysClockFreq+0x168>)
 800ba6a:	fb01 f003 	mul.w	r0, r1, r3
 800ba6e:	2100      	movs	r1, #0
 800ba70:	fb01 f102 	mul.w	r1, r1, r2
 800ba74:	1844      	adds	r4, r0, r1
 800ba76:	493a      	ldr	r1, [pc, #232]	; (800bb60 <HAL_RCC_GetSysClockFreq+0x168>)
 800ba78:	fba2 0101 	umull	r0, r1, r2, r1
 800ba7c:	1863      	adds	r3, r4, r1
 800ba7e:	4619      	mov	r1, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	461a      	mov	r2, r3
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	f7f5 f916 	bl	8000cb8 <__aeabi_uldivmod>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	460b      	mov	r3, r1
 800ba90:	4613      	mov	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e04a      	b.n	800bb2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba96:	4b30      	ldr	r3, [pc, #192]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	099b      	lsrs	r3, r3, #6
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	f04f 0300 	mov.w	r3, #0
 800baa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800baa6:	f04f 0100 	mov.w	r1, #0
 800baaa:	ea02 0400 	and.w	r4, r2, r0
 800baae:	ea03 0501 	and.w	r5, r3, r1
 800bab2:	4620      	mov	r0, r4
 800bab4:	4629      	mov	r1, r5
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	014b      	lsls	r3, r1, #5
 800bac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800bac4:	0142      	lsls	r2, r0, #5
 800bac6:	4610      	mov	r0, r2
 800bac8:	4619      	mov	r1, r3
 800baca:	1b00      	subs	r0, r0, r4
 800bacc:	eb61 0105 	sbc.w	r1, r1, r5
 800bad0:	f04f 0200 	mov.w	r2, #0
 800bad4:	f04f 0300 	mov.w	r3, #0
 800bad8:	018b      	lsls	r3, r1, #6
 800bada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800bade:	0182      	lsls	r2, r0, #6
 800bae0:	1a12      	subs	r2, r2, r0
 800bae2:	eb63 0301 	sbc.w	r3, r3, r1
 800bae6:	f04f 0000 	mov.w	r0, #0
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	00d9      	lsls	r1, r3, #3
 800baf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800baf4:	00d0      	lsls	r0, r2, #3
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	1912      	adds	r2, r2, r4
 800bafc:	eb45 0303 	adc.w	r3, r5, r3
 800bb00:	f04f 0000 	mov.w	r0, #0
 800bb04:	f04f 0100 	mov.w	r1, #0
 800bb08:	0299      	lsls	r1, r3, #10
 800bb0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800bb0e:	0290      	lsls	r0, r2, #10
 800bb10:	4602      	mov	r2, r0
 800bb12:	460b      	mov	r3, r1
 800bb14:	4610      	mov	r0, r2
 800bb16:	4619      	mov	r1, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f04f 0300 	mov.w	r3, #0
 800bb20:	f7f5 f8ca 	bl	8000cb8 <__aeabi_uldivmod>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4613      	mov	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <HAL_RCC_GetSysClockFreq+0x160>)
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	0c1b      	lsrs	r3, r3, #16
 800bb32:	f003 0303 	and.w	r3, r3, #3
 800bb36:	3301      	adds	r3, #1
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb44:	60bb      	str	r3, [r7, #8]
      break;
 800bb46:	e002      	b.n	800bb4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb48:	4b04      	ldr	r3, [pc, #16]	; (800bb5c <HAL_RCC_GetSysClockFreq+0x164>)
 800bb4a:	60bb      	str	r3, [r7, #8]
      break;
 800bb4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb4e:	68bb      	ldr	r3, [r7, #8]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3710      	adds	r7, #16
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bdb0      	pop	{r4, r5, r7, pc}
 800bb58:	40023800 	.word	0x40023800
 800bb5c:	00f42400 	.word	0x00f42400
 800bb60:	017d7840 	.word	0x017d7840

0800bb64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb68:	4b03      	ldr	r3, [pc, #12]	; (800bb78 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000034 	.word	0x20000034

0800bb7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bb80:	f7ff fff0 	bl	800bb64 <HAL_RCC_GetHCLKFreq>
 800bb84:	4602      	mov	r2, r0
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	0a9b      	lsrs	r3, r3, #10
 800bb8c:	f003 0307 	and.w	r3, r3, #7
 800bb90:	4903      	ldr	r1, [pc, #12]	; (800bba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb92:	5ccb      	ldrb	r3, [r1, r3]
 800bb94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	40023800 	.word	0x40023800
 800bba0:	08025d84 	.word	0x08025d84

0800bba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bba8:	f7ff ffdc 	bl	800bb64 <HAL_RCC_GetHCLKFreq>
 800bbac:	4602      	mov	r2, r0
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	0b5b      	lsrs	r3, r3, #13
 800bbb4:	f003 0307 	and.w	r3, r3, #7
 800bbb8:	4903      	ldr	r1, [pc, #12]	; (800bbc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbba:	5ccb      	ldrb	r3, [r1, r3]
 800bbbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	40023800 	.word	0x40023800
 800bbc8:	08025d84 	.word	0x08025d84

0800bbcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e07b      	b.n	800bcd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d108      	bne.n	800bbf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbee:	d009      	beq.n	800bc04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	61da      	str	r2, [r3, #28]
 800bbf6:	e005      	b.n	800bc04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7fa fd08 	bl	8006634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc56:	431a      	orrs	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	695b      	ldr	r3, [r3, #20]
 800bc66:	f003 0301 	and.w	r3, r3, #1
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	699b      	ldr	r3, [r3, #24]
 800bc70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc74:	431a      	orrs	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	69db      	ldr	r3, [r3, #28]
 800bc7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6a1b      	ldr	r3, [r3, #32]
 800bc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc88:	ea42 0103 	orr.w	r1, r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	699b      	ldr	r3, [r3, #24]
 800bca0:	0c1b      	lsrs	r3, r3, #16
 800bca2:	f003 0104 	and.w	r1, r3, #4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	f003 0210 	and.w	r2, r3, #16
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69da      	ldr	r2, [r3, #28]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b08c      	sub	sp, #48	; 0x30
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	60f8      	str	r0, [r7, #12]
 800bce6:	60b9      	str	r1, [r7, #8]
 800bce8:	607a      	str	r2, [r7, #4]
 800bcea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bcec:	2301      	movs	r3, #1
 800bcee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d101      	bne.n	800bd04 <HAL_SPI_TransmitReceive+0x26>
 800bd00:	2302      	movs	r3, #2
 800bd02:	e18a      	b.n	800c01a <HAL_SPI_TransmitReceive+0x33c>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd0c:	f7fb fa4a 	bl	80071a4 <HAL_GetTick>
 800bd10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bd22:	887b      	ldrh	r3, [r7, #2]
 800bd24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bd26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d00f      	beq.n	800bd4e <HAL_SPI_TransmitReceive+0x70>
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd34:	d107      	bne.n	800bd46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d103      	bne.n	800bd46 <HAL_SPI_TransmitReceive+0x68>
 800bd3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d003      	beq.n	800bd4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bd46:	2302      	movs	r3, #2
 800bd48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd4c:	e15b      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <HAL_SPI_TransmitReceive+0x82>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <HAL_SPI_TransmitReceive+0x82>
 800bd5a:	887b      	ldrh	r3, [r7, #2]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bd66:	e14e      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b04      	cmp	r3, #4
 800bd72:	d003      	beq.n	800bd7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2205      	movs	r2, #5
 800bd78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	887a      	ldrh	r2, [r7, #2]
 800bd8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	887a      	ldrh	r2, [r7, #2]
 800bd92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	887a      	ldrh	r2, [r7, #2]
 800bd9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	887a      	ldrh	r2, [r7, #2]
 800bda4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdbc:	2b40      	cmp	r3, #64	; 0x40
 800bdbe:	d007      	beq.n	800bdd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdd8:	d178      	bne.n	800becc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d002      	beq.n	800bde8 <HAL_SPI_TransmitReceive+0x10a>
 800bde2:	8b7b      	ldrh	r3, [r7, #26]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d166      	bne.n	800beb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	881a      	ldrh	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be02:	b29b      	uxth	r3, r3
 800be04:	3b01      	subs	r3, #1
 800be06:	b29a      	uxth	r2, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800be0c:	e053      	b.n	800beb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d11b      	bne.n	800be54 <HAL_SPI_TransmitReceive+0x176>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d016      	beq.n	800be54 <HAL_SPI_TransmitReceive+0x176>
 800be26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d113      	bne.n	800be54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	881a      	ldrh	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3c:	1c9a      	adds	r2, r3, #2
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be46:	b29b      	uxth	r3, r3
 800be48:	3b01      	subs	r3, #1
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800be50:	2300      	movs	r3, #0
 800be52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d119      	bne.n	800be96 <HAL_SPI_TransmitReceive+0x1b8>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be66:	b29b      	uxth	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d014      	beq.n	800be96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be76:	b292      	uxth	r2, r2
 800be78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7e:	1c9a      	adds	r2, r3, #2
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be88:	b29b      	uxth	r3, r3
 800be8a:	3b01      	subs	r3, #1
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800be92:	2301      	movs	r3, #1
 800be94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800be96:	f7fb f985 	bl	80071a4 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d807      	bhi.n	800beb6 <HAL_SPI_TransmitReceive+0x1d8>
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beac:	d003      	beq.n	800beb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800beb4:	e0a7      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beba:	b29b      	uxth	r3, r3
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1a6      	bne.n	800be0e <HAL_SPI_TransmitReceive+0x130>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1a1      	bne.n	800be0e <HAL_SPI_TransmitReceive+0x130>
 800beca:	e07c      	b.n	800bfc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <HAL_SPI_TransmitReceive+0x1fc>
 800bed4:	8b7b      	ldrh	r3, [r7, #26]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d16b      	bne.n	800bfb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	330c      	adds	r3, #12
 800bee4:	7812      	ldrb	r2, [r2, #0]
 800bee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beec:	1c5a      	adds	r2, r3, #1
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	3b01      	subs	r3, #1
 800befa:	b29a      	uxth	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf00:	e057      	b.n	800bfb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d11c      	bne.n	800bf4a <HAL_SPI_TransmitReceive+0x26c>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d017      	beq.n	800bf4a <HAL_SPI_TransmitReceive+0x26c>
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d114      	bne.n	800bf4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	330c      	adds	r3, #12
 800bf2a:	7812      	ldrb	r2, [r2, #0]
 800bf2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf32:	1c5a      	adds	r2, r3, #1
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b01      	subs	r3, #1
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf46:	2300      	movs	r3, #0
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d119      	bne.n	800bf8c <HAL_SPI_TransmitReceive+0x2ae>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d014      	beq.n	800bf8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68da      	ldr	r2, [r3, #12]
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6c:	b2d2      	uxtb	r2, r2
 800bf6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf74:	1c5a      	adds	r2, r3, #1
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bf8c:	f7fb f90a 	bl	80071a4 <HAL_GetTick>
 800bf90:	4602      	mov	r2, r0
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d803      	bhi.n	800bfa4 <HAL_SPI_TransmitReceive+0x2c6>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa2:	d102      	bne.n	800bfaa <HAL_SPI_TransmitReceive+0x2cc>
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d103      	bne.n	800bfb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bfaa:	2303      	movs	r3, #3
 800bfac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bfb0:	e029      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1a2      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x224>
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d19d      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 f9d0 	bl	800c370 <SPI_EndRxTxTransaction>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d006      	beq.n	800bfe4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bfe2:	e010      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfec:	2300      	movs	r3, #0
 800bfee:	617b      	str	r3, [r7, #20]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	e000      	b.n	800c006 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c004:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3730      	adds	r7, #48	; 0x30
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	099b      	lsrs	r3, r3, #6
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10f      	bne.n	800c068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c048:	69bb      	ldr	r3, [r7, #24]
 800c04a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	099b      	lsrs	r3, r3, #6
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	4798      	blx	r3
    return;
 800c066:	e0d7      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00a      	beq.n	800c08a <HAL_SPI_IRQHandler+0x66>
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	09db      	lsrs	r3, r3, #7
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d004      	beq.n	800c08a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
    return;
 800c088:	e0c6      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	095b      	lsrs	r3, r3, #5
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10c      	bne.n	800c0b0 <HAL_SPI_IRQHandler+0x8c>
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	099b      	lsrs	r3, r3, #6
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d106      	bne.n	800c0b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	0a1b      	lsrs	r3, r3, #8
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 80b4 	beq.w	800c218 <HAL_SPI_IRQHandler+0x1f4>
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 80ad 	beq.w	800c218 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	099b      	lsrs	r3, r3, #6
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d023      	beq.n	800c112 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d011      	beq.n	800c0fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0da:	f043 0204 	orr.w	r2, r3, #4
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	617b      	str	r3, [r7, #20]
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	e00b      	b.n	800c112 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	613b      	str	r3, [r7, #16]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	613b      	str	r3, [r7, #16]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	693b      	ldr	r3, [r7, #16]
        return;
 800c110:	e082      	b.n	800c218 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	095b      	lsrs	r3, r3, #5
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d014      	beq.n	800c148 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c122:	f043 0201 	orr.w	r2, r3, #1
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	60fb      	str	r3, [r7, #12]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	0a1b      	lsrs	r3, r3, #8
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00c      	beq.n	800c16e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c158:	f043 0208 	orr.w	r2, r3, #8
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c160:	2300      	movs	r3, #0
 800c162:	60bb      	str	r3, [r7, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	60bb      	str	r3, [r7, #8]
 800c16c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c172:	2b00      	cmp	r3, #0
 800c174:	d04f      	beq.n	800c216 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c184:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	f003 0302 	and.w	r3, r3, #2
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <HAL_SPI_IRQHandler+0x17e>
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d034      	beq.n	800c20c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0203 	bic.w	r2, r2, #3
 800c1b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d011      	beq.n	800c1de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1be:	4a18      	ldr	r2, [pc, #96]	; (800c220 <HAL_SPI_IRQHandler+0x1fc>)
 800c1c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fb fb32 	bl	8007830 <HAL_DMA_Abort_IT>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d016      	beq.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1ea:	4a0d      	ldr	r2, [pc, #52]	; (800c220 <HAL_SPI_IRQHandler+0x1fc>)
 800c1ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fb fb1c 	bl	8007830 <HAL_DMA_Abort_IT>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c202:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c20a:	e003      	b.n	800c214 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f809 	bl	800c224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c212:	e000      	b.n	800c216 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c214:	bf00      	nop
    return;
 800c216:	bf00      	nop
  }
}
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0800c239 	.word	0x0800c239

0800c224 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c244:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff ffe6 	bl	800c224 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	4613      	mov	r3, r2
 800c26e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c270:	f7fa ff98 	bl	80071a4 <HAL_GetTick>
 800c274:	4602      	mov	r2, r0
 800c276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	4413      	add	r3, r2
 800c27e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c280:	f7fa ff90 	bl	80071a4 <HAL_GetTick>
 800c284:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c286:	4b39      	ldr	r3, [pc, #228]	; (800c36c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	015b      	lsls	r3, r3, #5
 800c28c:	0d1b      	lsrs	r3, r3, #20
 800c28e:	69fa      	ldr	r2, [r7, #28]
 800c290:	fb02 f303 	mul.w	r3, r2, r3
 800c294:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c296:	e054      	b.n	800c342 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d050      	beq.n	800c342 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c2a0:	f7fa ff80 	bl	80071a4 <HAL_GetTick>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	69fa      	ldr	r2, [r7, #28]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d902      	bls.n	800c2b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d13d      	bne.n	800c332 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c2c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2ce:	d111      	bne.n	800c2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2d8:	d004      	beq.n	800c2e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2e2:	d107      	bne.n	800c2f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2fc:	d10f      	bne.n	800c31e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c31c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c32e:	2303      	movs	r3, #3
 800c330:	e017      	b.n	800c362 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d101      	bne.n	800c33c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c338:	2300      	movs	r3, #0
 800c33a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	3b01      	subs	r3, #1
 800c340:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	689a      	ldr	r2, [r3, #8]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	4013      	ands	r3, r2
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	bf0c      	ite	eq
 800c352:	2301      	moveq	r3, #1
 800c354:	2300      	movne	r3, #0
 800c356:	b2db      	uxtb	r3, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	79fb      	ldrb	r3, [r7, #7]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d19b      	bne.n	800c298 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3720      	adds	r7, #32
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20000034 	.word	0x20000034

0800c370 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c37c:	4b1b      	ldr	r3, [pc, #108]	; (800c3ec <SPI_EndRxTxTransaction+0x7c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a1b      	ldr	r2, [pc, #108]	; (800c3f0 <SPI_EndRxTxTransaction+0x80>)
 800c382:	fba2 2303 	umull	r2, r3, r2, r3
 800c386:	0d5b      	lsrs	r3, r3, #21
 800c388:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c38c:	fb02 f303 	mul.w	r3, r2, r3
 800c390:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c39a:	d112      	bne.n	800c3c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2180      	movs	r1, #128	; 0x80
 800c3a6:	68f8      	ldr	r0, [r7, #12]
 800c3a8:	f7ff ff5a 	bl	800c260 <SPI_WaitFlagStateUntilTimeout>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d016      	beq.n	800c3e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b6:	f043 0220 	orr.w	r2, r3, #32
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e00f      	b.n	800c3e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00a      	beq.n	800c3de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d8:	2b80      	cmp	r3, #128	; 0x80
 800c3da:	d0f2      	beq.n	800c3c2 <SPI_EndRxTxTransaction+0x52>
 800c3dc:	e000      	b.n	800c3e0 <SPI_EndRxTxTransaction+0x70>
        break;
 800c3de:	bf00      	nop
  }

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000034 	.word	0x20000034
 800c3f0:	165e9f81 	.word	0x165e9f81

0800c3f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e041      	b.n	800c48a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d106      	bne.n	800c420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f7fa fb74 	bl	8006b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2202      	movs	r2, #2
 800c424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3304      	adds	r3, #4
 800c430:	4619      	mov	r1, r3
 800c432:	4610      	mov	r0, r2
 800c434:	f000 f9f0 	bl	800c818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2201      	movs	r2, #1
 800c444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b085      	sub	sp, #20
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d001      	beq.n	800c4ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e044      	b.n	800c536 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68da      	ldr	r2, [r3, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0201 	orr.w	r2, r2, #1
 800c4c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a1e      	ldr	r2, [pc, #120]	; (800c544 <HAL_TIM_Base_Start_IT+0xb0>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d018      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x6c>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d6:	d013      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x6c>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a1a      	ldr	r2, [pc, #104]	; (800c548 <HAL_TIM_Base_Start_IT+0xb4>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d00e      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x6c>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a19      	ldr	r2, [pc, #100]	; (800c54c <HAL_TIM_Base_Start_IT+0xb8>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d009      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x6c>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a17      	ldr	r2, [pc, #92]	; (800c550 <HAL_TIM_Base_Start_IT+0xbc>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d004      	beq.n	800c500 <HAL_TIM_Base_Start_IT+0x6c>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a16      	ldr	r2, [pc, #88]	; (800c554 <HAL_TIM_Base_Start_IT+0xc0>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d111      	bne.n	800c524 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f003 0307 	and.w	r3, r3, #7
 800c50a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b06      	cmp	r3, #6
 800c510:	d010      	beq.n	800c534 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f042 0201 	orr.w	r2, r2, #1
 800c520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c522:	e007      	b.n	800c534 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f042 0201 	orr.w	r2, r2, #1
 800c532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	40010000 	.word	0x40010000
 800c548:	40000400 	.word	0x40000400
 800c54c:	40000800 	.word	0x40000800
 800c550:	40000c00 	.word	0x40000c00
 800c554:	40014000 	.word	0x40014000

0800c558 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f022 0201 	bic.w	r2, r2, #1
 800c56e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	6a1a      	ldr	r2, [r3, #32]
 800c576:	f241 1311 	movw	r3, #4369	; 0x1111
 800c57a:	4013      	ands	r3, r2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10f      	bne.n	800c5a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6a1a      	ldr	r2, [r3, #32]
 800c586:	f240 4344 	movw	r3, #1092	; 0x444
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d107      	bne.n	800c5a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f022 0201 	bic.w	r2, r2, #1
 800c59e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	370c      	adds	r7, #12
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	f003 0302 	and.w	r3, r3, #2
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d122      	bne.n	800c612 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	f003 0302 	and.w	r3, r3, #2
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d11b      	bne.n	800c612 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f06f 0202 	mvn.w	r2, #2
 800c5e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	f003 0303 	and.w	r3, r3, #3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f8ee 	bl	800c7da <HAL_TIM_IC_CaptureCallback>
 800c5fe:	e005      	b.n	800c60c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f8e0 	bl	800c7c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f8f1 	bl	800c7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d122      	bne.n	800c666 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	f003 0304 	and.w	r3, r3, #4
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	d11b      	bne.n	800c666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f06f 0204 	mvn.w	r2, #4
 800c636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2202      	movs	r2, #2
 800c63c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	699b      	ldr	r3, [r3, #24]
 800c644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f8c4 	bl	800c7da <HAL_TIM_IC_CaptureCallback>
 800c652:	e005      	b.n	800c660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f8b6 	bl	800c7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f8c7 	bl	800c7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	f003 0308 	and.w	r3, r3, #8
 800c670:	2b08      	cmp	r3, #8
 800c672:	d122      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f003 0308 	and.w	r3, r3, #8
 800c67e:	2b08      	cmp	r3, #8
 800c680:	d11b      	bne.n	800c6ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f06f 0208 	mvn.w	r2, #8
 800c68a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2204      	movs	r2, #4
 800c690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69db      	ldr	r3, [r3, #28]
 800c698:	f003 0303 	and.w	r3, r3, #3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f89a 	bl	800c7da <HAL_TIM_IC_CaptureCallback>
 800c6a6:	e005      	b.n	800c6b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f88c 	bl	800c7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f89d 	bl	800c7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	f003 0310 	and.w	r3, r3, #16
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	d122      	bne.n	800c70e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b10      	cmp	r3, #16
 800c6d4:	d11b      	bne.n	800c70e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f06f 0210 	mvn.w	r2, #16
 800c6de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2208      	movs	r2, #8
 800c6e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d003      	beq.n	800c6fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f870 	bl	800c7da <HAL_TIM_IC_CaptureCallback>
 800c6fa:	e005      	b.n	800c708 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f862 	bl	800c7c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f873 	bl	800c7ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d10e      	bne.n	800c73a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	2b01      	cmp	r3, #1
 800c728:	d107      	bne.n	800c73a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f06f 0201 	mvn.w	r2, #1
 800c732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7f8 f91f 	bl	8004978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c744:	2b80      	cmp	r3, #128	; 0x80
 800c746:	d10e      	bne.n	800c766 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c752:	2b80      	cmp	r3, #128	; 0x80
 800c754:	d107      	bne.n	800c766 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f8e3 	bl	800c92c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c770:	2b40      	cmp	r3, #64	; 0x40
 800c772:	d10e      	bne.n	800c792 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77e:	2b40      	cmp	r3, #64	; 0x40
 800c780:	d107      	bne.n	800c792 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f838 	bl	800c802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f003 0320 	and.w	r3, r3, #32
 800c79c:	2b20      	cmp	r3, #32
 800c79e:	d10e      	bne.n	800c7be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	f003 0320 	and.w	r3, r3, #32
 800c7aa:	2b20      	cmp	r3, #32
 800c7ac:	d107      	bne.n	800c7be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f06f 0220 	mvn.w	r2, #32
 800c7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f8ad 	bl	800c918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7ce:	bf00      	nop
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7e2:	bf00      	nop
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b083      	sub	sp, #12
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7f6:	bf00      	nop
 800c7f8:	370c      	adds	r7, #12
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr

0800c802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c80a:	bf00      	nop
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
	...

0800c818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a34      	ldr	r2, [pc, #208]	; (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d00f      	beq.n	800c850 <TIM_Base_SetConfig+0x38>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c836:	d00b      	beq.n	800c850 <TIM_Base_SetConfig+0x38>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a31      	ldr	r2, [pc, #196]	; (800c900 <TIM_Base_SetConfig+0xe8>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d007      	beq.n	800c850 <TIM_Base_SetConfig+0x38>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a30      	ldr	r2, [pc, #192]	; (800c904 <TIM_Base_SetConfig+0xec>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d003      	beq.n	800c850 <TIM_Base_SetConfig+0x38>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a2f      	ldr	r2, [pc, #188]	; (800c908 <TIM_Base_SetConfig+0xf0>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d108      	bne.n	800c862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	4313      	orrs	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a25      	ldr	r2, [pc, #148]	; (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d01b      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c870:	d017      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a22      	ldr	r2, [pc, #136]	; (800c900 <TIM_Base_SetConfig+0xe8>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d013      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a21      	ldr	r2, [pc, #132]	; (800c904 <TIM_Base_SetConfig+0xec>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d00f      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a20      	ldr	r2, [pc, #128]	; (800c908 <TIM_Base_SetConfig+0xf0>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d00b      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a1f      	ldr	r2, [pc, #124]	; (800c90c <TIM_Base_SetConfig+0xf4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d007      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a1e      	ldr	r2, [pc, #120]	; (800c910 <TIM_Base_SetConfig+0xf8>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d003      	beq.n	800c8a2 <TIM_Base_SetConfig+0x8a>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a1d      	ldr	r2, [pc, #116]	; (800c914 <TIM_Base_SetConfig+0xfc>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d108      	bne.n	800c8b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68fa      	ldr	r2, [r7, #12]
 800c8c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a08      	ldr	r2, [pc, #32]	; (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d103      	bne.n	800c8e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	691a      	ldr	r2, [r3, #16]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	615a      	str	r2, [r3, #20]
}
 800c8ee:	bf00      	nop
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	40010000 	.word	0x40010000
 800c900:	40000400 	.word	0x40000400
 800c904:	40000800 	.word	0x40000800
 800c908:	40000c00 	.word	0x40000c00
 800c90c:	40014000 	.word	0x40014000
 800c910:	40014400 	.word	0x40014400
 800c914:	40014800 	.word	0x40014800

0800c918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e03f      	b.n	800c9d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2200      	movs	r2, #0
 800c962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7fa fae0 	bl	8006f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2224      	movs	r2, #36	; 0x24
 800c970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 ff53 	bl	800d830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	691a      	ldr	r2, [r3, #16]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	695a      	ldr	r2, [r3, #20]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68da      	ldr	r2, [r3, #12]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c9b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2220      	movs	r2, #32
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2220      	movs	r2, #32
 800c9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b08c      	sub	sp, #48	; 0x30
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b20      	cmp	r3, #32
 800c9f4:	d165      	bne.n	800cac2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <HAL_UART_Transmit_DMA+0x26>
 800c9fc:	88fb      	ldrh	r3, [r7, #6]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e05e      	b.n	800cac4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_UART_Transmit_DMA+0x38>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e057      	b.n	800cac4 <HAL_UART_Transmit_DMA+0xe8>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	88fa      	ldrh	r2, [r7, #6]
 800ca26:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	88fa      	ldrh	r2, [r7, #6]
 800ca2c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2200      	movs	r2, #0
 800ca32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2221      	movs	r2, #33	; 0x21
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca40:	4a22      	ldr	r2, [pc, #136]	; (800cacc <HAL_UART_Transmit_DMA+0xf0>)
 800ca42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca48:	4a21      	ldr	r2, [pc, #132]	; (800cad0 <HAL_UART_Transmit_DMA+0xf4>)
 800ca4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca50:	4a20      	ldr	r2, [pc, #128]	; (800cad4 <HAL_UART_Transmit_DMA+0xf8>)
 800ca52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca58:	2200      	movs	r2, #0
 800ca5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ca5c:	f107 0308 	add.w	r3, r7, #8
 800ca60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca68:	6819      	ldr	r1, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3304      	adds	r3, #4
 800ca70:	461a      	mov	r2, r3
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	f7fa fe14 	bl	80076a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca80:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	3314      	adds	r3, #20
 800ca90:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	e853 3f00 	ldrex	r3, [r3]
 800ca98:	617b      	str	r3, [r7, #20]
   return(result);
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caa0:	62bb      	str	r3, [r7, #40]	; 0x28
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3314      	adds	r3, #20
 800caa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caaa:	627a      	str	r2, [r7, #36]	; 0x24
 800caac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caae:	6a39      	ldr	r1, [r7, #32]
 800cab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e5      	bne.n	800ca8a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	e000      	b.n	800cac4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800cac2:	2302      	movs	r3, #2
  }
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3730      	adds	r7, #48	; 0x30
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	0800d0d1 	.word	0x0800d0d1
 800cad0:	0800d16b 	.word	0x0800d16b
 800cad4:	0800d2e3 	.word	0x0800d2e3

0800cad8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	4613      	mov	r3, r2
 800cae4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b20      	cmp	r3, #32
 800caf0:	d11d      	bne.n	800cb2e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <HAL_UART_Receive_DMA+0x26>
 800caf8:	88fb      	ldrh	r3, [r7, #6]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e016      	b.n	800cb30 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d101      	bne.n	800cb10 <HAL_UART_Receive_DMA+0x38>
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	e00f      	b.n	800cb30 <HAL_UART_Receive_DMA+0x58>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cb1e:	88fb      	ldrh	r3, [r7, #6]
 800cb20:	461a      	mov	r2, r3
 800cb22:	68b9      	ldr	r1, [r7, #8]
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 fc27 	bl	800d378 <UART_Start_Receive_DMA>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	e000      	b.n	800cb30 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800cb2e:	2302      	movs	r3, #2
  }
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b0ba      	sub	sp, #232	; 0xe8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	695b      	ldr	r3, [r3, #20]
 800cb5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cb64:	2300      	movs	r3, #0
 800cb66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cb6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb6e:	f003 030f 	and.w	r3, r3, #15
 800cb72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cb76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10f      	bne.n	800cb9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb82:	f003 0320 	and.w	r3, r3, #32
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d009      	beq.n	800cb9e <HAL_UART_IRQHandler+0x66>
 800cb8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb8e:	f003 0320 	and.w	r3, r3, #32
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fd8f 	bl	800d6ba <UART_Receive_IT>
      return;
 800cb9c:	e256      	b.n	800d04c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cb9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 80de 	beq.w	800cd64 <HAL_UART_IRQHandler+0x22c>
 800cba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 80d1 	beq.w	800cd64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00b      	beq.n	800cbe6 <HAL_UART_IRQHandler+0xae>
 800cbce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d005      	beq.n	800cbe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbde:	f043 0201 	orr.w	r2, r3, #1
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbea:	f003 0304 	and.w	r3, r3, #4
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00b      	beq.n	800cc0a <HAL_UART_IRQHandler+0xd2>
 800cbf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc02:	f043 0202 	orr.w	r2, r3, #2
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc0e:	f003 0302 	and.w	r3, r3, #2
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00b      	beq.n	800cc2e <HAL_UART_IRQHandler+0xf6>
 800cc16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d005      	beq.n	800cc2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	f043 0204 	orr.w	r2, r3, #4
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d011      	beq.n	800cc5e <HAL_UART_IRQHandler+0x126>
 800cc3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc3e:	f003 0320 	and.w	r3, r3, #32
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d105      	bne.n	800cc52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cc46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d005      	beq.n	800cc5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc56:	f043 0208 	orr.w	r2, r3, #8
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 81ed 	beq.w	800d042 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc6c:	f003 0320 	and.w	r3, r3, #32
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d008      	beq.n	800cc86 <HAL_UART_IRQHandler+0x14e>
 800cc74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc78:	f003 0320 	and.w	r3, r3, #32
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fd1a 	bl	800d6ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	695b      	ldr	r3, [r3, #20]
 800cc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc90:	2b40      	cmp	r3, #64	; 0x40
 800cc92:	bf0c      	ite	eq
 800cc94:	2301      	moveq	r3, #1
 800cc96:	2300      	movne	r3, #0
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	f003 0308 	and.w	r3, r3, #8
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d103      	bne.n	800ccb2 <HAL_UART_IRQHandler+0x17a>
 800ccaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d04f      	beq.n	800cd52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fc22 	bl	800d4fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc2:	2b40      	cmp	r3, #64	; 0x40
 800ccc4:	d141      	bne.n	800cd4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3314      	adds	r3, #20
 800cccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccd4:	e853 3f00 	ldrex	r3, [r3]
 800ccd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ccdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3314      	adds	r3, #20
 800ccee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ccf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ccf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ccfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cd0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1d9      	bne.n	800ccc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d013      	beq.n	800cd42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	4a7d      	ldr	r2, [pc, #500]	; (800cf14 <HAL_UART_IRQHandler+0x3dc>)
 800cd20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fa fd82 	bl	8007830 <HAL_DMA_Abort_IT>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d016      	beq.n	800cd60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd40:	e00e      	b.n	800cd60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f9ae 	bl	800d0a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd48:	e00a      	b.n	800cd60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f9aa 	bl	800d0a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd50:	e006      	b.n	800cd60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f9a6 	bl	800d0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800cd5e:	e170      	b.n	800d042 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd60:	bf00      	nop
    return;
 800cd62:	e16e      	b.n	800d042 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	f040 814a 	bne.w	800d002 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd72:	f003 0310 	and.w	r3, r3, #16
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	f000 8143 	beq.w	800d002 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd80:	f003 0310 	and.w	r3, r3, #16
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 813c 	beq.w	800d002 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60bb      	str	r3, [r7, #8]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	60bb      	str	r3, [r7, #8]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	60bb      	str	r3, [r7, #8]
 800cd9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdaa:	2b40      	cmp	r3, #64	; 0x40
 800cdac:	f040 80b4 	bne.w	800cf18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f000 8140 	beq.w	800d046 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cdca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	f080 8139 	bcs.w	800d046 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	69db      	ldr	r3, [r3, #28]
 800cde2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cde6:	f000 8088 	beq.w	800cefa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	330c      	adds	r3, #12
 800cdf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cdf8:	e853 3f00 	ldrex	r3, [r3]
 800cdfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	330c      	adds	r3, #12
 800ce12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ce16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ce1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce26:	e841 2300 	strex	r3, r2, [r1]
 800ce2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ce2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1d9      	bne.n	800cdea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce40:	e853 3f00 	ldrex	r3, [r3]
 800ce44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce48:	f023 0301 	bic.w	r3, r3, #1
 800ce4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3314      	adds	r3, #20
 800ce56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce66:	e841 2300 	strex	r3, r2, [r1]
 800ce6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d1e1      	bne.n	800ce36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3314      	adds	r3, #20
 800ce78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce7c:	e853 3f00 	ldrex	r3, [r3]
 800ce80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ce82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3314      	adds	r3, #20
 800ce92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ce96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ce98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ce9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ce9e:	e841 2300 	strex	r3, r2, [r1]
 800cea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e3      	bne.n	800ce72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2220      	movs	r2, #32
 800ceae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	330c      	adds	r3, #12
 800cebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cec2:	e853 3f00 	ldrex	r3, [r3]
 800cec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ceca:	f023 0310 	bic.w	r3, r3, #16
 800cece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	330c      	adds	r3, #12
 800ced8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cedc:	65ba      	str	r2, [r7, #88]	; 0x58
 800cede:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cee4:	e841 2300 	strex	r3, r2, [r1]
 800cee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ceea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e3      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef4:	4618      	mov	r0, r3
 800cef6:	f7fa fc2b 	bl	8007750 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 f8d4 	bl	800d0b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cf10:	e099      	b.n	800d046 <HAL_UART_IRQHandler+0x50e>
 800cf12:	bf00      	nop
 800cf14:	0800d5c3 	.word	0x0800d5c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 808b 	beq.w	800d04a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800cf34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 8086 	beq.w	800d04a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	330c      	adds	r3, #12
 800cf44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	330c      	adds	r3, #12
 800cf5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cf62:	647a      	str	r2, [r7, #68]	; 0x44
 800cf64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e3      	bne.n	800cf3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3314      	adds	r3, #20
 800cf7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	e853 3f00 	ldrex	r3, [r3]
 800cf84:	623b      	str	r3, [r7, #32]
   return(result);
 800cf86:	6a3b      	ldr	r3, [r7, #32]
 800cf88:	f023 0301 	bic.w	r3, r3, #1
 800cf8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3314      	adds	r3, #20
 800cf96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cf9a:	633a      	str	r2, [r7, #48]	; 0x30
 800cf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfa2:	e841 2300 	strex	r3, r2, [r1]
 800cfa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1e3      	bne.n	800cf76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2220      	movs	r2, #32
 800cfb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	e853 3f00 	ldrex	r3, [r3]
 800cfca:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f023 0310 	bic.w	r3, r3, #16
 800cfd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	330c      	adds	r3, #12
 800cfdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cfe0:	61fa      	str	r2, [r7, #28]
 800cfe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe4:	69b9      	ldr	r1, [r7, #24]
 800cfe6:	69fa      	ldr	r2, [r7, #28]
 800cfe8:	e841 2300 	strex	r3, r2, [r1]
 800cfec:	617b      	str	r3, [r7, #20]
   return(result);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e3      	bne.n	800cfbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f85c 	bl	800d0b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d000:	e023      	b.n	800d04a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d009      	beq.n	800d022 <HAL_UART_IRQHandler+0x4ea>
 800d00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fae5 	bl	800d5ea <UART_Transmit_IT>
    return;
 800d020:	e014      	b.n	800d04c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00e      	beq.n	800d04c <HAL_UART_IRQHandler+0x514>
 800d02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d036:	2b00      	cmp	r3, #0
 800d038:	d008      	beq.n	800d04c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fb25 	bl	800d68a <UART_EndTransmit_IT>
    return;
 800d040:	e004      	b.n	800d04c <HAL_UART_IRQHandler+0x514>
    return;
 800d042:	bf00      	nop
 800d044:	e002      	b.n	800d04c <HAL_UART_IRQHandler+0x514>
      return;
 800d046:	bf00      	nop
 800d048:	e000      	b.n	800d04c <HAL_UART_IRQHandler+0x514>
      return;
 800d04a:	bf00      	nop
  }
}
 800d04c:	37e8      	adds	r7, #232	; 0xe8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop

0800d054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d098:	bf00      	nop
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d0c4:	bf00      	nop
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b090      	sub	sp, #64	; 0x40
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d137      	bne.n	800d15c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3314      	adds	r3, #20
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	e853 3f00 	ldrex	r3, [r3]
 800d100:	623b      	str	r3, [r7, #32]
   return(result);
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d108:	63bb      	str	r3, [r7, #56]	; 0x38
 800d10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3314      	adds	r3, #20
 800d110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d112:	633a      	str	r2, [r7, #48]	; 0x30
 800d114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d11a:	e841 2300 	strex	r3, r2, [r1]
 800d11e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1e5      	bne.n	800d0f2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	330c      	adds	r3, #12
 800d12c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	e853 3f00 	ldrex	r3, [r3]
 800d134:	60fb      	str	r3, [r7, #12]
   return(result);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d13c:	637b      	str	r3, [r7, #52]	; 0x34
 800d13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	330c      	adds	r3, #12
 800d144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d146:	61fa      	str	r2, [r7, #28]
 800d148:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d14a:	69b9      	ldr	r1, [r7, #24]
 800d14c:	69fa      	ldr	r2, [r7, #28]
 800d14e:	e841 2300 	strex	r3, r2, [r1]
 800d152:	617b      	str	r3, [r7, #20]
   return(result);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1e5      	bne.n	800d126 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d15a:	e002      	b.n	800d162 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d15c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d15e:	f7ff ff79 	bl	800d054 <HAL_UART_TxCpltCallback>
}
 800d162:	bf00      	nop
 800d164:	3740      	adds	r7, #64	; 0x40
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d176:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f7ff ff75 	bl	800d068 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d17e:	bf00      	nop
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b09c      	sub	sp, #112	; 0x70
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d192:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d172      	bne.n	800d288 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d1a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	330c      	adds	r3, #12
 800d1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1be:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	330c      	adds	r3, #12
 800d1c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d1c8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d1ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e5      	bne.n	800d1a8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3314      	adds	r3, #20
 800d1e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e6:	e853 3f00 	ldrex	r3, [r3]
 800d1ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	667b      	str	r3, [r7, #100]	; 0x64
 800d1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3314      	adds	r3, #20
 800d1fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d1fc:	647a      	str	r2, [r7, #68]	; 0x44
 800d1fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e5      	bne.n	800d1dc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3314      	adds	r3, #20
 800d216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21a:	e853 3f00 	ldrex	r3, [r3]
 800d21e:	623b      	str	r3, [r7, #32]
   return(result);
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d226:	663b      	str	r3, [r7, #96]	; 0x60
 800d228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3314      	adds	r3, #20
 800d22e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d230:	633a      	str	r2, [r7, #48]	; 0x30
 800d232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d238:	e841 2300 	strex	r3, r2, [r1]
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	d1e5      	bne.n	800d210 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d246:	2220      	movs	r2, #32
 800d248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d24c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d250:	2b01      	cmp	r3, #1
 800d252:	d119      	bne.n	800d288 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	330c      	adds	r3, #12
 800d25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	e853 3f00 	ldrex	r3, [r3]
 800d262:	60fb      	str	r3, [r7, #12]
   return(result);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f023 0310 	bic.w	r3, r3, #16
 800d26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	330c      	adds	r3, #12
 800d272:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d274:	61fa      	str	r2, [r7, #28]
 800d276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d278:	69b9      	ldr	r1, [r7, #24]
 800d27a:	69fa      	ldr	r2, [r7, #28]
 800d27c:	e841 2300 	strex	r3, r2, [r1]
 800d280:	617b      	str	r3, [r7, #20]
   return(result);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e5      	bne.n	800d254 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d106      	bne.n	800d29e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d292:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d294:	4619      	mov	r1, r3
 800d296:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d298:	f7ff ff0e 	bl	800d0b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d29c:	e002      	b.n	800d2a4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800d29e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d2a0:	f7ff feec 	bl	800d07c <HAL_UART_RxCpltCallback>
}
 800d2a4:	bf00      	nop
 800d2a6:	3770      	adds	r7, #112	; 0x70
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d108      	bne.n	800d2d4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7ff fef3 	bl	800d0b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2d2:	e002      	b.n	800d2da <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fedb 	bl	800d090 <HAL_UART_RxHalfCpltCallback>
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2e2:	b580      	push	{r7, lr}
 800d2e4:	b084      	sub	sp, #16
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fe:	2b80      	cmp	r3, #128	; 0x80
 800d300:	bf0c      	ite	eq
 800d302:	2301      	moveq	r3, #1
 800d304:	2300      	movne	r3, #0
 800d306:	b2db      	uxtb	r3, r3
 800d308:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b21      	cmp	r3, #33	; 0x21
 800d314:	d108      	bne.n	800d328 <UART_DMAError+0x46>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d005      	beq.n	800d328 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2200      	movs	r2, #0
 800d320:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d322:	68b8      	ldr	r0, [r7, #8]
 800d324:	f000 f8c2 	bl	800d4ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d332:	2b40      	cmp	r3, #64	; 0x40
 800d334:	bf0c      	ite	eq
 800d336:	2301      	moveq	r3, #1
 800d338:	2300      	movne	r3, #0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b22      	cmp	r3, #34	; 0x22
 800d348:	d108      	bne.n	800d35c <UART_DMAError+0x7a>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d005      	beq.n	800d35c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2200      	movs	r2, #0
 800d354:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d356:	68b8      	ldr	r0, [r7, #8]
 800d358:	f000 f8d0 	bl	800d4fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d360:	f043 0210 	orr.w	r2, r3, #16
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d368:	68b8      	ldr	r0, [r7, #8]
 800d36a:	f7ff fe9b 	bl	800d0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b098      	sub	sp, #96	; 0x60
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	88fa      	ldrh	r2, [r7, #6]
 800d390:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2200      	movs	r2, #0
 800d396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2222      	movs	r2, #34	; 0x22
 800d39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a4:	4a3e      	ldr	r2, [pc, #248]	; (800d4a0 <UART_Start_Receive_DMA+0x128>)
 800d3a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ac:	4a3d      	ldr	r2, [pc, #244]	; (800d4a4 <UART_Start_Receive_DMA+0x12c>)
 800d3ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	4a3c      	ldr	r2, [pc, #240]	; (800d4a8 <UART_Start_Receive_DMA+0x130>)
 800d3b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3bc:	2200      	movs	r2, #0
 800d3be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d3c0:	f107 0308 	add.w	r3, r7, #8
 800d3c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	f7fa f962 	bl	80076a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d3dc:	2300      	movs	r3, #0
 800d3de:	613b      	str	r3, [r7, #16]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	613b      	str	r3, [r7, #16]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	330c      	adds	r3, #12
 800d400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d404:	e853 3f00 	ldrex	r3, [r3]
 800d408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d410:	65bb      	str	r3, [r7, #88]	; 0x58
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	330c      	adds	r3, #12
 800d418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d41a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d41c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d420:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e5      	bne.n	800d3fa <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3314      	adds	r3, #20
 800d434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	e853 3f00 	ldrex	r3, [r3]
 800d43c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d440:	f043 0301 	orr.w	r3, r3, #1
 800d444:	657b      	str	r3, [r7, #84]	; 0x54
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3314      	adds	r3, #20
 800d44c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d44e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e5      	bne.n	800d42e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3314      	adds	r3, #20
 800d468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	e853 3f00 	ldrex	r3, [r3]
 800d470:	617b      	str	r3, [r7, #20]
   return(result);
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d478:	653b      	str	r3, [r7, #80]	; 0x50
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	3314      	adds	r3, #20
 800d480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d482:	627a      	str	r2, [r7, #36]	; 0x24
 800d484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d486:	6a39      	ldr	r1, [r7, #32]
 800d488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d48a:	e841 2300 	strex	r3, r2, [r1]
 800d48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1e5      	bne.n	800d462 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3760      	adds	r7, #96	; 0x60
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	0800d187 	.word	0x0800d187
 800d4a4:	0800d2ad 	.word	0x0800d2ad
 800d4a8:	0800d2e3 	.word	0x0800d2e3

0800d4ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b089      	sub	sp, #36	; 0x24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	330c      	adds	r3, #12
 800d4ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	e853 3f00 	ldrex	r3, [r3]
 800d4c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	330c      	adds	r3, #12
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	61ba      	str	r2, [r7, #24]
 800d4d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d8:	6979      	ldr	r1, [r7, #20]
 800d4da:	69ba      	ldr	r2, [r7, #24]
 800d4dc:	e841 2300 	strex	r3, r2, [r1]
 800d4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1e5      	bne.n	800d4b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2220      	movs	r2, #32
 800d4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800d4f0:	bf00      	nop
 800d4f2:	3724      	adds	r7, #36	; 0x24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b095      	sub	sp, #84	; 0x54
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	330c      	adds	r3, #12
 800d50a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d51a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	330c      	adds	r3, #12
 800d522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d524:	643a      	str	r2, [r7, #64]	; 0x40
 800d526:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d52a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d52c:	e841 2300 	strex	r3, r2, [r1]
 800d530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1e5      	bne.n	800d504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3314      	adds	r3, #20
 800d53e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	e853 3f00 	ldrex	r3, [r3]
 800d546:	61fb      	str	r3, [r7, #28]
   return(result);
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	f023 0301 	bic.w	r3, r3, #1
 800d54e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3314      	adds	r3, #20
 800d556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d55a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d55c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d55e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d560:	e841 2300 	strex	r3, r2, [r1]
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1e5      	bne.n	800d538 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d570:	2b01      	cmp	r3, #1
 800d572:	d119      	bne.n	800d5a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	330c      	adds	r3, #12
 800d57a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	e853 3f00 	ldrex	r3, [r3]
 800d582:	60bb      	str	r3, [r7, #8]
   return(result);
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f023 0310 	bic.w	r3, r3, #16
 800d58a:	647b      	str	r3, [r7, #68]	; 0x44
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	330c      	adds	r3, #12
 800d592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d594:	61ba      	str	r2, [r7, #24]
 800d596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d598:	6979      	ldr	r1, [r7, #20]
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	e841 2300 	strex	r3, r2, [r1]
 800d5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1e5      	bne.n	800d574 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d5b6:	bf00      	nop
 800d5b8:	3754      	adds	r7, #84	; 0x54
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr

0800d5c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b084      	sub	sp, #16
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff fd61 	bl	800d0a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5e2:	bf00      	nop
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b085      	sub	sp, #20
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	2b21      	cmp	r3, #33	; 0x21
 800d5fc:	d13e      	bne.n	800d67c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d606:	d114      	bne.n	800d632 <UART_Transmit_IT+0x48>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d110      	bne.n	800d632 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d624:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	1c9a      	adds	r2, r3, #2
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	621a      	str	r2, [r3, #32]
 800d630:	e008      	b.n	800d644 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a1b      	ldr	r3, [r3, #32]
 800d636:	1c59      	adds	r1, r3, #1
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	6211      	str	r1, [r2, #32]
 800d63c:	781a      	ldrb	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d648:	b29b      	uxth	r3, r3
 800d64a:	3b01      	subs	r3, #1
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4619      	mov	r1, r3
 800d652:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10f      	bne.n	800d678 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d666:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	68da      	ldr	r2, [r3, #12]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d676:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	e000      	b.n	800d67e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d67c:	2302      	movs	r3, #2
  }
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3714      	adds	r7, #20
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	68da      	ldr	r2, [r3, #12]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2220      	movs	r2, #32
 800d6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fcd2 	bl	800d054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b08c      	sub	sp, #48	; 0x30
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b22      	cmp	r3, #34	; 0x22
 800d6cc:	f040 80ab 	bne.w	800d826 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d8:	d117      	bne.n	800d70a <UART_Receive_IT+0x50>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d113      	bne.n	800d70a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d702:	1c9a      	adds	r2, r3, #2
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	629a      	str	r2, [r3, #40]	; 0x28
 800d708:	e026      	b.n	800d758 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d70e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d71c:	d007      	beq.n	800d72e <UART_Receive_IT+0x74>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	689b      	ldr	r3, [r3, #8]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10a      	bne.n	800d73c <UART_Receive_IT+0x82>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d106      	bne.n	800d73c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	b2da      	uxtb	r2, r3
 800d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d738:	701a      	strb	r2, [r3, #0]
 800d73a:	e008      	b.n	800d74e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	b2db      	uxtb	r3, r3
 800d744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	3b01      	subs	r3, #1
 800d760:	b29b      	uxth	r3, r3
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	4619      	mov	r1, r3
 800d766:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d15a      	bne.n	800d822 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f022 0220 	bic.w	r2, r2, #32
 800d77a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d78a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	695a      	ldr	r2, [r3, #20]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 0201 	bic.w	r2, r2, #1
 800d79a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d135      	bne.n	800d818 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	330c      	adds	r3, #12
 800d7b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	e853 3f00 	ldrex	r3, [r3]
 800d7c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	f023 0310 	bic.w	r3, r3, #16
 800d7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	330c      	adds	r3, #12
 800d7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d2:	623a      	str	r2, [r7, #32]
 800d7d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d6:	69f9      	ldr	r1, [r7, #28]
 800d7d8:	6a3a      	ldr	r2, [r7, #32]
 800d7da:	e841 2300 	strex	r3, r2, [r1]
 800d7de:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d1e5      	bne.n	800d7b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0310 	and.w	r3, r3, #16
 800d7f0:	2b10      	cmp	r3, #16
 800d7f2:	d10a      	bne.n	800d80a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	60fb      	str	r3, [r7, #12]
 800d808:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d80e:	4619      	mov	r1, r3
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7ff fc51 	bl	800d0b8 <HAL_UARTEx_RxEventCallback>
 800d816:	e002      	b.n	800d81e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff fc2f 	bl	800d07c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	e002      	b.n	800d828 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	e000      	b.n	800d828 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d826:	2302      	movs	r3, #2
  }
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3730      	adds	r7, #48	; 0x30
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	b09f      	sub	sp, #124	; 0x7c
 800d836:	af00      	add	r7, sp, #0
 800d838:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d83a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d846:	68d9      	ldr	r1, [r3, #12]
 800d848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	ea40 0301 	orr.w	r3, r0, r1
 800d850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	431a      	orrs	r2, r3
 800d85c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	431a      	orrs	r2, r3
 800d862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	4313      	orrs	r3, r2
 800d868:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d86a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d874:	f021 010c 	bic.w	r1, r1, #12
 800d878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d87e:	430b      	orrs	r3, r1
 800d880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d88c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d88e:	6999      	ldr	r1, [r3, #24]
 800d890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	ea40 0301 	orr.w	r3, r0, r1
 800d898:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d89a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	4bc5      	ldr	r3, [pc, #788]	; (800dbb4 <UART_SetConfig+0x384>)
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d004      	beq.n	800d8ae <UART_SetConfig+0x7e>
 800d8a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	4bc3      	ldr	r3, [pc, #780]	; (800dbb8 <UART_SetConfig+0x388>)
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d103      	bne.n	800d8b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d8ae:	f7fe f979 	bl	800bba4 <HAL_RCC_GetPCLK2Freq>
 800d8b2:	6778      	str	r0, [r7, #116]	; 0x74
 800d8b4:	e002      	b.n	800d8bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d8b6:	f7fe f961 	bl	800bb7c <HAL_RCC_GetPCLK1Freq>
 800d8ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8be:	69db      	ldr	r3, [r3, #28]
 800d8c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8c4:	f040 80b6 	bne.w	800da34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8ca:	461c      	mov	r4, r3
 800d8cc:	f04f 0500 	mov.w	r5, #0
 800d8d0:	4622      	mov	r2, r4
 800d8d2:	462b      	mov	r3, r5
 800d8d4:	1891      	adds	r1, r2, r2
 800d8d6:	6439      	str	r1, [r7, #64]	; 0x40
 800d8d8:	415b      	adcs	r3, r3
 800d8da:	647b      	str	r3, [r7, #68]	; 0x44
 800d8dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d8e0:	1912      	adds	r2, r2, r4
 800d8e2:	eb45 0303 	adc.w	r3, r5, r3
 800d8e6:	f04f 0000 	mov.w	r0, #0
 800d8ea:	f04f 0100 	mov.w	r1, #0
 800d8ee:	00d9      	lsls	r1, r3, #3
 800d8f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d8f4:	00d0      	lsls	r0, r2, #3
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	1911      	adds	r1, r2, r4
 800d8fc:	6639      	str	r1, [r7, #96]	; 0x60
 800d8fe:	416b      	adcs	r3, r5
 800d900:	667b      	str	r3, [r7, #100]	; 0x64
 800d902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	461a      	mov	r2, r3
 800d908:	f04f 0300 	mov.w	r3, #0
 800d90c:	1891      	adds	r1, r2, r2
 800d90e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d910:	415b      	adcs	r3, r3
 800d912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d918:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d91c:	f7f3 f9cc 	bl	8000cb8 <__aeabi_uldivmod>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4ba5      	ldr	r3, [pc, #660]	; (800dbbc <UART_SetConfig+0x38c>)
 800d926:	fba3 2302 	umull	r2, r3, r3, r2
 800d92a:	095b      	lsrs	r3, r3, #5
 800d92c:	011e      	lsls	r6, r3, #4
 800d92e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d930:	461c      	mov	r4, r3
 800d932:	f04f 0500 	mov.w	r5, #0
 800d936:	4622      	mov	r2, r4
 800d938:	462b      	mov	r3, r5
 800d93a:	1891      	adds	r1, r2, r2
 800d93c:	6339      	str	r1, [r7, #48]	; 0x30
 800d93e:	415b      	adcs	r3, r3
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
 800d942:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d946:	1912      	adds	r2, r2, r4
 800d948:	eb45 0303 	adc.w	r3, r5, r3
 800d94c:	f04f 0000 	mov.w	r0, #0
 800d950:	f04f 0100 	mov.w	r1, #0
 800d954:	00d9      	lsls	r1, r3, #3
 800d956:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d95a:	00d0      	lsls	r0, r2, #3
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	1911      	adds	r1, r2, r4
 800d962:	65b9      	str	r1, [r7, #88]	; 0x58
 800d964:	416b      	adcs	r3, r5
 800d966:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	461a      	mov	r2, r3
 800d96e:	f04f 0300 	mov.w	r3, #0
 800d972:	1891      	adds	r1, r2, r2
 800d974:	62b9      	str	r1, [r7, #40]	; 0x28
 800d976:	415b      	adcs	r3, r3
 800d978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d97a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d97e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d982:	f7f3 f999 	bl	8000cb8 <__aeabi_uldivmod>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4b8c      	ldr	r3, [pc, #560]	; (800dbbc <UART_SetConfig+0x38c>)
 800d98c:	fba3 1302 	umull	r1, r3, r3, r2
 800d990:	095b      	lsrs	r3, r3, #5
 800d992:	2164      	movs	r1, #100	; 0x64
 800d994:	fb01 f303 	mul.w	r3, r1, r3
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	3332      	adds	r3, #50	; 0x32
 800d99e:	4a87      	ldr	r2, [pc, #540]	; (800dbbc <UART_SetConfig+0x38c>)
 800d9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a4:	095b      	lsrs	r3, r3, #5
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9ac:	441e      	add	r6, r3
 800d9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f04f 0100 	mov.w	r1, #0
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	1894      	adds	r4, r2, r2
 800d9bc:	623c      	str	r4, [r7, #32]
 800d9be:	415b      	adcs	r3, r3
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d9c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9c6:	1812      	adds	r2, r2, r0
 800d9c8:	eb41 0303 	adc.w	r3, r1, r3
 800d9cc:	f04f 0400 	mov.w	r4, #0
 800d9d0:	f04f 0500 	mov.w	r5, #0
 800d9d4:	00dd      	lsls	r5, r3, #3
 800d9d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d9da:	00d4      	lsls	r4, r2, #3
 800d9dc:	4622      	mov	r2, r4
 800d9de:	462b      	mov	r3, r5
 800d9e0:	1814      	adds	r4, r2, r0
 800d9e2:	653c      	str	r4, [r7, #80]	; 0x50
 800d9e4:	414b      	adcs	r3, r1
 800d9e6:	657b      	str	r3, [r7, #84]	; 0x54
 800d9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	f04f 0300 	mov.w	r3, #0
 800d9f2:	1891      	adds	r1, r2, r2
 800d9f4:	61b9      	str	r1, [r7, #24]
 800d9f6:	415b      	adcs	r3, r3
 800d9f8:	61fb      	str	r3, [r7, #28]
 800d9fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d9fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800da02:	f7f3 f959 	bl	8000cb8 <__aeabi_uldivmod>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4b6c      	ldr	r3, [pc, #432]	; (800dbbc <UART_SetConfig+0x38c>)
 800da0c:	fba3 1302 	umull	r1, r3, r3, r2
 800da10:	095b      	lsrs	r3, r3, #5
 800da12:	2164      	movs	r1, #100	; 0x64
 800da14:	fb01 f303 	mul.w	r3, r1, r3
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	3332      	adds	r3, #50	; 0x32
 800da1e:	4a67      	ldr	r2, [pc, #412]	; (800dbbc <UART_SetConfig+0x38c>)
 800da20:	fba2 2303 	umull	r2, r3, r2, r3
 800da24:	095b      	lsrs	r3, r3, #5
 800da26:	f003 0207 	and.w	r2, r3, #7
 800da2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4432      	add	r2, r6
 800da30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800da32:	e0b9      	b.n	800dba8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800da34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da36:	461c      	mov	r4, r3
 800da38:	f04f 0500 	mov.w	r5, #0
 800da3c:	4622      	mov	r2, r4
 800da3e:	462b      	mov	r3, r5
 800da40:	1891      	adds	r1, r2, r2
 800da42:	6139      	str	r1, [r7, #16]
 800da44:	415b      	adcs	r3, r3
 800da46:	617b      	str	r3, [r7, #20]
 800da48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da4c:	1912      	adds	r2, r2, r4
 800da4e:	eb45 0303 	adc.w	r3, r5, r3
 800da52:	f04f 0000 	mov.w	r0, #0
 800da56:	f04f 0100 	mov.w	r1, #0
 800da5a:	00d9      	lsls	r1, r3, #3
 800da5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800da60:	00d0      	lsls	r0, r2, #3
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	eb12 0804 	adds.w	r8, r2, r4
 800da6a:	eb43 0905 	adc.w	r9, r3, r5
 800da6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	4618      	mov	r0, r3
 800da74:	f04f 0100 	mov.w	r1, #0
 800da78:	f04f 0200 	mov.w	r2, #0
 800da7c:	f04f 0300 	mov.w	r3, #0
 800da80:	008b      	lsls	r3, r1, #2
 800da82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800da86:	0082      	lsls	r2, r0, #2
 800da88:	4640      	mov	r0, r8
 800da8a:	4649      	mov	r1, r9
 800da8c:	f7f3 f914 	bl	8000cb8 <__aeabi_uldivmod>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	4b49      	ldr	r3, [pc, #292]	; (800dbbc <UART_SetConfig+0x38c>)
 800da96:	fba3 2302 	umull	r2, r3, r3, r2
 800da9a:	095b      	lsrs	r3, r3, #5
 800da9c:	011e      	lsls	r6, r3, #4
 800da9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daa0:	4618      	mov	r0, r3
 800daa2:	f04f 0100 	mov.w	r1, #0
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	1894      	adds	r4, r2, r2
 800daac:	60bc      	str	r4, [r7, #8]
 800daae:	415b      	adcs	r3, r3
 800dab0:	60fb      	str	r3, [r7, #12]
 800dab2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dab6:	1812      	adds	r2, r2, r0
 800dab8:	eb41 0303 	adc.w	r3, r1, r3
 800dabc:	f04f 0400 	mov.w	r4, #0
 800dac0:	f04f 0500 	mov.w	r5, #0
 800dac4:	00dd      	lsls	r5, r3, #3
 800dac6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800daca:	00d4      	lsls	r4, r2, #3
 800dacc:	4622      	mov	r2, r4
 800dace:	462b      	mov	r3, r5
 800dad0:	1814      	adds	r4, r2, r0
 800dad2:	64bc      	str	r4, [r7, #72]	; 0x48
 800dad4:	414b      	adcs	r3, r1
 800dad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	f04f 0100 	mov.w	r1, #0
 800dae2:	f04f 0200 	mov.w	r2, #0
 800dae6:	f04f 0300 	mov.w	r3, #0
 800daea:	008b      	lsls	r3, r1, #2
 800daec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800daf0:	0082      	lsls	r2, r0, #2
 800daf2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800daf6:	f7f3 f8df 	bl	8000cb8 <__aeabi_uldivmod>
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4b2f      	ldr	r3, [pc, #188]	; (800dbbc <UART_SetConfig+0x38c>)
 800db00:	fba3 1302 	umull	r1, r3, r3, r2
 800db04:	095b      	lsrs	r3, r3, #5
 800db06:	2164      	movs	r1, #100	; 0x64
 800db08:	fb01 f303 	mul.w	r3, r1, r3
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	011b      	lsls	r3, r3, #4
 800db10:	3332      	adds	r3, #50	; 0x32
 800db12:	4a2a      	ldr	r2, [pc, #168]	; (800dbbc <UART_SetConfig+0x38c>)
 800db14:	fba2 2303 	umull	r2, r3, r2, r3
 800db18:	095b      	lsrs	r3, r3, #5
 800db1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db1e:	441e      	add	r6, r3
 800db20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db22:	4618      	mov	r0, r3
 800db24:	f04f 0100 	mov.w	r1, #0
 800db28:	4602      	mov	r2, r0
 800db2a:	460b      	mov	r3, r1
 800db2c:	1894      	adds	r4, r2, r2
 800db2e:	603c      	str	r4, [r7, #0]
 800db30:	415b      	adcs	r3, r3
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db38:	1812      	adds	r2, r2, r0
 800db3a:	eb41 0303 	adc.w	r3, r1, r3
 800db3e:	f04f 0400 	mov.w	r4, #0
 800db42:	f04f 0500 	mov.w	r5, #0
 800db46:	00dd      	lsls	r5, r3, #3
 800db48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800db4c:	00d4      	lsls	r4, r2, #3
 800db4e:	4622      	mov	r2, r4
 800db50:	462b      	mov	r3, r5
 800db52:	eb12 0a00 	adds.w	sl, r2, r0
 800db56:	eb43 0b01 	adc.w	fp, r3, r1
 800db5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4618      	mov	r0, r3
 800db60:	f04f 0100 	mov.w	r1, #0
 800db64:	f04f 0200 	mov.w	r2, #0
 800db68:	f04f 0300 	mov.w	r3, #0
 800db6c:	008b      	lsls	r3, r1, #2
 800db6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800db72:	0082      	lsls	r2, r0, #2
 800db74:	4650      	mov	r0, sl
 800db76:	4659      	mov	r1, fp
 800db78:	f7f3 f89e 	bl	8000cb8 <__aeabi_uldivmod>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4b0e      	ldr	r3, [pc, #56]	; (800dbbc <UART_SetConfig+0x38c>)
 800db82:	fba3 1302 	umull	r1, r3, r3, r2
 800db86:	095b      	lsrs	r3, r3, #5
 800db88:	2164      	movs	r1, #100	; 0x64
 800db8a:	fb01 f303 	mul.w	r3, r1, r3
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	011b      	lsls	r3, r3, #4
 800db92:	3332      	adds	r3, #50	; 0x32
 800db94:	4a09      	ldr	r2, [pc, #36]	; (800dbbc <UART_SetConfig+0x38c>)
 800db96:	fba2 2303 	umull	r2, r3, r2, r3
 800db9a:	095b      	lsrs	r3, r3, #5
 800db9c:	f003 020f 	and.w	r2, r3, #15
 800dba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4432      	add	r2, r6
 800dba6:	609a      	str	r2, [r3, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	377c      	adds	r7, #124	; 0x7c
 800dbac:	46bd      	mov	sp, r7
 800dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb2:	bf00      	nop
 800dbb4:	40011000 	.word	0x40011000
 800dbb8:	40011400 	.word	0x40011400
 800dbbc:	51eb851f 	.word	0x51eb851f

0800dbc0 <atof>:
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	f001 bd05 	b.w	800f5d0 <strtod>

0800dbc6 <atoi>:
 800dbc6:	220a      	movs	r2, #10
 800dbc8:	2100      	movs	r1, #0
 800dbca:	f001 bdef 	b.w	800f7ac <strtol>
	...

0800dbd0 <__errno>:
 800dbd0:	4b01      	ldr	r3, [pc, #4]	; (800dbd8 <__errno+0x8>)
 800dbd2:	6818      	ldr	r0, [r3, #0]
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	20000040 	.word	0x20000040

0800dbdc <__libc_init_array>:
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	4d0d      	ldr	r5, [pc, #52]	; (800dc14 <__libc_init_array+0x38>)
 800dbe0:	4c0d      	ldr	r4, [pc, #52]	; (800dc18 <__libc_init_array+0x3c>)
 800dbe2:	1b64      	subs	r4, r4, r5
 800dbe4:	10a4      	asrs	r4, r4, #2
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	42a6      	cmp	r6, r4
 800dbea:	d109      	bne.n	800dc00 <__libc_init_array+0x24>
 800dbec:	4d0b      	ldr	r5, [pc, #44]	; (800dc1c <__libc_init_array+0x40>)
 800dbee:	4c0c      	ldr	r4, [pc, #48]	; (800dc20 <__libc_init_array+0x44>)
 800dbf0:	f004 fcb8 	bl	8012564 <_init>
 800dbf4:	1b64      	subs	r4, r4, r5
 800dbf6:	10a4      	asrs	r4, r4, #2
 800dbf8:	2600      	movs	r6, #0
 800dbfa:	42a6      	cmp	r6, r4
 800dbfc:	d105      	bne.n	800dc0a <__libc_init_array+0x2e>
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc04:	4798      	blx	r3
 800dc06:	3601      	adds	r6, #1
 800dc08:	e7ee      	b.n	800dbe8 <__libc_init_array+0xc>
 800dc0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0e:	4798      	blx	r3
 800dc10:	3601      	adds	r6, #1
 800dc12:	e7f2      	b.n	800dbfa <__libc_init_array+0x1e>
 800dc14:	080262b0 	.word	0x080262b0
 800dc18:	080262b0 	.word	0x080262b0
 800dc1c:	080262b0 	.word	0x080262b0
 800dc20:	080262b4 	.word	0x080262b4

0800dc24 <memset>:
 800dc24:	4402      	add	r2, r0
 800dc26:	4603      	mov	r3, r0
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d100      	bne.n	800dc2e <memset+0xa>
 800dc2c:	4770      	bx	lr
 800dc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc32:	e7f9      	b.n	800dc28 <memset+0x4>

0800dc34 <__cvt>:
 800dc34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc38:	ec55 4b10 	vmov	r4, r5, d0
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	460e      	mov	r6, r1
 800dc40:	4619      	mov	r1, r3
 800dc42:	462b      	mov	r3, r5
 800dc44:	bfbb      	ittet	lt
 800dc46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dc4a:	461d      	movlt	r5, r3
 800dc4c:	2300      	movge	r3, #0
 800dc4e:	232d      	movlt	r3, #45	; 0x2d
 800dc50:	700b      	strb	r3, [r1, #0]
 800dc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc58:	4691      	mov	r9, r2
 800dc5a:	f023 0820 	bic.w	r8, r3, #32
 800dc5e:	bfbc      	itt	lt
 800dc60:	4622      	movlt	r2, r4
 800dc62:	4614      	movlt	r4, r2
 800dc64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc68:	d005      	beq.n	800dc76 <__cvt+0x42>
 800dc6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc6e:	d100      	bne.n	800dc72 <__cvt+0x3e>
 800dc70:	3601      	adds	r6, #1
 800dc72:	2102      	movs	r1, #2
 800dc74:	e000      	b.n	800dc78 <__cvt+0x44>
 800dc76:	2103      	movs	r1, #3
 800dc78:	ab03      	add	r3, sp, #12
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	ab02      	add	r3, sp, #8
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	ec45 4b10 	vmov	d0, r4, r5
 800dc84:	4653      	mov	r3, sl
 800dc86:	4632      	mov	r2, r6
 800dc88:	f001 fe46 	bl	800f918 <_dtoa_r>
 800dc8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc90:	4607      	mov	r7, r0
 800dc92:	d102      	bne.n	800dc9a <__cvt+0x66>
 800dc94:	f019 0f01 	tst.w	r9, #1
 800dc98:	d022      	beq.n	800dce0 <__cvt+0xac>
 800dc9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc9e:	eb07 0906 	add.w	r9, r7, r6
 800dca2:	d110      	bne.n	800dcc6 <__cvt+0x92>
 800dca4:	783b      	ldrb	r3, [r7, #0]
 800dca6:	2b30      	cmp	r3, #48	; 0x30
 800dca8:	d10a      	bne.n	800dcc0 <__cvt+0x8c>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2300      	movs	r3, #0
 800dcae:	4620      	mov	r0, r4
 800dcb0:	4629      	mov	r1, r5
 800dcb2:	f7f2 ff21 	bl	8000af8 <__aeabi_dcmpeq>
 800dcb6:	b918      	cbnz	r0, 800dcc0 <__cvt+0x8c>
 800dcb8:	f1c6 0601 	rsb	r6, r6, #1
 800dcbc:	f8ca 6000 	str.w	r6, [sl]
 800dcc0:	f8da 3000 	ldr.w	r3, [sl]
 800dcc4:	4499      	add	r9, r3
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4620      	mov	r0, r4
 800dccc:	4629      	mov	r1, r5
 800dcce:	f7f2 ff13 	bl	8000af8 <__aeabi_dcmpeq>
 800dcd2:	b108      	cbz	r0, 800dcd8 <__cvt+0xa4>
 800dcd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dcd8:	2230      	movs	r2, #48	; 0x30
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	454b      	cmp	r3, r9
 800dcde:	d307      	bcc.n	800dcf0 <__cvt+0xbc>
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce4:	1bdb      	subs	r3, r3, r7
 800dce6:	4638      	mov	r0, r7
 800dce8:	6013      	str	r3, [r2, #0]
 800dcea:	b004      	add	sp, #16
 800dcec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf0:	1c59      	adds	r1, r3, #1
 800dcf2:	9103      	str	r1, [sp, #12]
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	e7f0      	b.n	800dcda <__cvt+0xa6>

0800dcf8 <__exponent>:
 800dcf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	bfb8      	it	lt
 800dd00:	4249      	neglt	r1, r1
 800dd02:	f803 2b02 	strb.w	r2, [r3], #2
 800dd06:	bfb4      	ite	lt
 800dd08:	222d      	movlt	r2, #45	; 0x2d
 800dd0a:	222b      	movge	r2, #43	; 0x2b
 800dd0c:	2909      	cmp	r1, #9
 800dd0e:	7042      	strb	r2, [r0, #1]
 800dd10:	dd2a      	ble.n	800dd68 <__exponent+0x70>
 800dd12:	f10d 0407 	add.w	r4, sp, #7
 800dd16:	46a4      	mov	ip, r4
 800dd18:	270a      	movs	r7, #10
 800dd1a:	46a6      	mov	lr, r4
 800dd1c:	460a      	mov	r2, r1
 800dd1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800dd22:	fb07 1516 	mls	r5, r7, r6, r1
 800dd26:	3530      	adds	r5, #48	; 0x30
 800dd28:	2a63      	cmp	r2, #99	; 0x63
 800dd2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dd32:	4631      	mov	r1, r6
 800dd34:	dcf1      	bgt.n	800dd1a <__exponent+0x22>
 800dd36:	3130      	adds	r1, #48	; 0x30
 800dd38:	f1ae 0502 	sub.w	r5, lr, #2
 800dd3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dd40:	1c44      	adds	r4, r0, #1
 800dd42:	4629      	mov	r1, r5
 800dd44:	4561      	cmp	r1, ip
 800dd46:	d30a      	bcc.n	800dd5e <__exponent+0x66>
 800dd48:	f10d 0209 	add.w	r2, sp, #9
 800dd4c:	eba2 020e 	sub.w	r2, r2, lr
 800dd50:	4565      	cmp	r5, ip
 800dd52:	bf88      	it	hi
 800dd54:	2200      	movhi	r2, #0
 800dd56:	4413      	add	r3, r2
 800dd58:	1a18      	subs	r0, r3, r0
 800dd5a:	b003      	add	sp, #12
 800dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd66:	e7ed      	b.n	800dd44 <__exponent+0x4c>
 800dd68:	2330      	movs	r3, #48	; 0x30
 800dd6a:	3130      	adds	r1, #48	; 0x30
 800dd6c:	7083      	strb	r3, [r0, #2]
 800dd6e:	70c1      	strb	r1, [r0, #3]
 800dd70:	1d03      	adds	r3, r0, #4
 800dd72:	e7f1      	b.n	800dd58 <__exponent+0x60>

0800dd74 <_printf_float>:
 800dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd78:	ed2d 8b02 	vpush	{d8}
 800dd7c:	b08d      	sub	sp, #52	; 0x34
 800dd7e:	460c      	mov	r4, r1
 800dd80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd84:	4616      	mov	r6, r2
 800dd86:	461f      	mov	r7, r3
 800dd88:	4605      	mov	r5, r0
 800dd8a:	f002 ff33 	bl	8010bf4 <_localeconv_r>
 800dd8e:	f8d0 a000 	ldr.w	sl, [r0]
 800dd92:	4650      	mov	r0, sl
 800dd94:	f7f2 fa2e 	bl	80001f4 <strlen>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	9305      	str	r3, [sp, #20]
 800dda0:	f8d8 3000 	ldr.w	r3, [r8]
 800dda4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dda8:	3307      	adds	r3, #7
 800ddaa:	f023 0307 	bic.w	r3, r3, #7
 800ddae:	f103 0208 	add.w	r2, r3, #8
 800ddb2:	f8c8 2000 	str.w	r2, [r8]
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ddbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ddc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddc6:	9307      	str	r3, [sp, #28]
 800ddc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800ddcc:	ee08 0a10 	vmov	s16, r0
 800ddd0:	4b9f      	ldr	r3, [pc, #636]	; (800e050 <_printf_float+0x2dc>)
 800ddd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddda:	f7f2 febf 	bl	8000b5c <__aeabi_dcmpun>
 800ddde:	bb88      	cbnz	r0, 800de44 <_printf_float+0xd0>
 800dde0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dde4:	4b9a      	ldr	r3, [pc, #616]	; (800e050 <_printf_float+0x2dc>)
 800dde6:	f04f 32ff 	mov.w	r2, #4294967295
 800ddea:	f7f2 fe99 	bl	8000b20 <__aeabi_dcmple>
 800ddee:	bb48      	cbnz	r0, 800de44 <_printf_float+0xd0>
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	4640      	mov	r0, r8
 800ddf6:	4649      	mov	r1, r9
 800ddf8:	f7f2 fe88 	bl	8000b0c <__aeabi_dcmplt>
 800ddfc:	b110      	cbz	r0, 800de04 <_printf_float+0x90>
 800ddfe:	232d      	movs	r3, #45	; 0x2d
 800de00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de04:	4b93      	ldr	r3, [pc, #588]	; (800e054 <_printf_float+0x2e0>)
 800de06:	4894      	ldr	r0, [pc, #592]	; (800e058 <_printf_float+0x2e4>)
 800de08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800de0c:	bf94      	ite	ls
 800de0e:	4698      	movls	r8, r3
 800de10:	4680      	movhi	r8, r0
 800de12:	2303      	movs	r3, #3
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	9b05      	ldr	r3, [sp, #20]
 800de18:	f023 0204 	bic.w	r2, r3, #4
 800de1c:	6022      	str	r2, [r4, #0]
 800de1e:	f04f 0900 	mov.w	r9, #0
 800de22:	9700      	str	r7, [sp, #0]
 800de24:	4633      	mov	r3, r6
 800de26:	aa0b      	add	r2, sp, #44	; 0x2c
 800de28:	4621      	mov	r1, r4
 800de2a:	4628      	mov	r0, r5
 800de2c:	f000 f9d8 	bl	800e1e0 <_printf_common>
 800de30:	3001      	adds	r0, #1
 800de32:	f040 8090 	bne.w	800df56 <_printf_float+0x1e2>
 800de36:	f04f 30ff 	mov.w	r0, #4294967295
 800de3a:	b00d      	add	sp, #52	; 0x34
 800de3c:	ecbd 8b02 	vpop	{d8}
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de44:	4642      	mov	r2, r8
 800de46:	464b      	mov	r3, r9
 800de48:	4640      	mov	r0, r8
 800de4a:	4649      	mov	r1, r9
 800de4c:	f7f2 fe86 	bl	8000b5c <__aeabi_dcmpun>
 800de50:	b140      	cbz	r0, 800de64 <_printf_float+0xf0>
 800de52:	464b      	mov	r3, r9
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfbc      	itt	lt
 800de58:	232d      	movlt	r3, #45	; 0x2d
 800de5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de5e:	487f      	ldr	r0, [pc, #508]	; (800e05c <_printf_float+0x2e8>)
 800de60:	4b7f      	ldr	r3, [pc, #508]	; (800e060 <_printf_float+0x2ec>)
 800de62:	e7d1      	b.n	800de08 <_printf_float+0x94>
 800de64:	6863      	ldr	r3, [r4, #4]
 800de66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de6a:	9206      	str	r2, [sp, #24]
 800de6c:	1c5a      	adds	r2, r3, #1
 800de6e:	d13f      	bne.n	800def0 <_printf_float+0x17c>
 800de70:	2306      	movs	r3, #6
 800de72:	6063      	str	r3, [r4, #4]
 800de74:	9b05      	ldr	r3, [sp, #20]
 800de76:	6861      	ldr	r1, [r4, #4]
 800de78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de7c:	2300      	movs	r3, #0
 800de7e:	9303      	str	r3, [sp, #12]
 800de80:	ab0a      	add	r3, sp, #40	; 0x28
 800de82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de86:	ab09      	add	r3, sp, #36	; 0x24
 800de88:	ec49 8b10 	vmov	d0, r8, r9
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	6022      	str	r2, [r4, #0]
 800de90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de94:	4628      	mov	r0, r5
 800de96:	f7ff fecd 	bl	800dc34 <__cvt>
 800de9a:	9b06      	ldr	r3, [sp, #24]
 800de9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de9e:	2b47      	cmp	r3, #71	; 0x47
 800dea0:	4680      	mov	r8, r0
 800dea2:	d108      	bne.n	800deb6 <_printf_float+0x142>
 800dea4:	1cc8      	adds	r0, r1, #3
 800dea6:	db02      	blt.n	800deae <_printf_float+0x13a>
 800dea8:	6863      	ldr	r3, [r4, #4]
 800deaa:	4299      	cmp	r1, r3
 800deac:	dd41      	ble.n	800df32 <_printf_float+0x1be>
 800deae:	f1ab 0b02 	sub.w	fp, fp, #2
 800deb2:	fa5f fb8b 	uxtb.w	fp, fp
 800deb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800deba:	d820      	bhi.n	800defe <_printf_float+0x18a>
 800debc:	3901      	subs	r1, #1
 800debe:	465a      	mov	r2, fp
 800dec0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dec4:	9109      	str	r1, [sp, #36]	; 0x24
 800dec6:	f7ff ff17 	bl	800dcf8 <__exponent>
 800deca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800decc:	1813      	adds	r3, r2, r0
 800dece:	2a01      	cmp	r2, #1
 800ded0:	4681      	mov	r9, r0
 800ded2:	6123      	str	r3, [r4, #16]
 800ded4:	dc02      	bgt.n	800dedc <_printf_float+0x168>
 800ded6:	6822      	ldr	r2, [r4, #0]
 800ded8:	07d2      	lsls	r2, r2, #31
 800deda:	d501      	bpl.n	800dee0 <_printf_float+0x16c>
 800dedc:	3301      	adds	r3, #1
 800dede:	6123      	str	r3, [r4, #16]
 800dee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d09c      	beq.n	800de22 <_printf_float+0xae>
 800dee8:	232d      	movs	r3, #45	; 0x2d
 800deea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deee:	e798      	b.n	800de22 <_printf_float+0xae>
 800def0:	9a06      	ldr	r2, [sp, #24]
 800def2:	2a47      	cmp	r2, #71	; 0x47
 800def4:	d1be      	bne.n	800de74 <_printf_float+0x100>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1bc      	bne.n	800de74 <_printf_float+0x100>
 800defa:	2301      	movs	r3, #1
 800defc:	e7b9      	b.n	800de72 <_printf_float+0xfe>
 800defe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800df02:	d118      	bne.n	800df36 <_printf_float+0x1c2>
 800df04:	2900      	cmp	r1, #0
 800df06:	6863      	ldr	r3, [r4, #4]
 800df08:	dd0b      	ble.n	800df22 <_printf_float+0x1ae>
 800df0a:	6121      	str	r1, [r4, #16]
 800df0c:	b913      	cbnz	r3, 800df14 <_printf_float+0x1a0>
 800df0e:	6822      	ldr	r2, [r4, #0]
 800df10:	07d0      	lsls	r0, r2, #31
 800df12:	d502      	bpl.n	800df1a <_printf_float+0x1a6>
 800df14:	3301      	adds	r3, #1
 800df16:	440b      	add	r3, r1
 800df18:	6123      	str	r3, [r4, #16]
 800df1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800df1c:	f04f 0900 	mov.w	r9, #0
 800df20:	e7de      	b.n	800dee0 <_printf_float+0x16c>
 800df22:	b913      	cbnz	r3, 800df2a <_printf_float+0x1b6>
 800df24:	6822      	ldr	r2, [r4, #0]
 800df26:	07d2      	lsls	r2, r2, #31
 800df28:	d501      	bpl.n	800df2e <_printf_float+0x1ba>
 800df2a:	3302      	adds	r3, #2
 800df2c:	e7f4      	b.n	800df18 <_printf_float+0x1a4>
 800df2e:	2301      	movs	r3, #1
 800df30:	e7f2      	b.n	800df18 <_printf_float+0x1a4>
 800df32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800df36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df38:	4299      	cmp	r1, r3
 800df3a:	db05      	blt.n	800df48 <_printf_float+0x1d4>
 800df3c:	6823      	ldr	r3, [r4, #0]
 800df3e:	6121      	str	r1, [r4, #16]
 800df40:	07d8      	lsls	r0, r3, #31
 800df42:	d5ea      	bpl.n	800df1a <_printf_float+0x1a6>
 800df44:	1c4b      	adds	r3, r1, #1
 800df46:	e7e7      	b.n	800df18 <_printf_float+0x1a4>
 800df48:	2900      	cmp	r1, #0
 800df4a:	bfd4      	ite	le
 800df4c:	f1c1 0202 	rsble	r2, r1, #2
 800df50:	2201      	movgt	r2, #1
 800df52:	4413      	add	r3, r2
 800df54:	e7e0      	b.n	800df18 <_printf_float+0x1a4>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	055a      	lsls	r2, r3, #21
 800df5a:	d407      	bmi.n	800df6c <_printf_float+0x1f8>
 800df5c:	6923      	ldr	r3, [r4, #16]
 800df5e:	4642      	mov	r2, r8
 800df60:	4631      	mov	r1, r6
 800df62:	4628      	mov	r0, r5
 800df64:	47b8      	blx	r7
 800df66:	3001      	adds	r0, #1
 800df68:	d12c      	bne.n	800dfc4 <_printf_float+0x250>
 800df6a:	e764      	b.n	800de36 <_printf_float+0xc2>
 800df6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df70:	f240 80e0 	bls.w	800e134 <_printf_float+0x3c0>
 800df74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df78:	2200      	movs	r2, #0
 800df7a:	2300      	movs	r3, #0
 800df7c:	f7f2 fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 800df80:	2800      	cmp	r0, #0
 800df82:	d034      	beq.n	800dfee <_printf_float+0x27a>
 800df84:	4a37      	ldr	r2, [pc, #220]	; (800e064 <_printf_float+0x2f0>)
 800df86:	2301      	movs	r3, #1
 800df88:	4631      	mov	r1, r6
 800df8a:	4628      	mov	r0, r5
 800df8c:	47b8      	blx	r7
 800df8e:	3001      	adds	r0, #1
 800df90:	f43f af51 	beq.w	800de36 <_printf_float+0xc2>
 800df94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df98:	429a      	cmp	r2, r3
 800df9a:	db02      	blt.n	800dfa2 <_printf_float+0x22e>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	07d8      	lsls	r0, r3, #31
 800dfa0:	d510      	bpl.n	800dfc4 <_printf_float+0x250>
 800dfa2:	ee18 3a10 	vmov	r3, s16
 800dfa6:	4652      	mov	r2, sl
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	4628      	mov	r0, r5
 800dfac:	47b8      	blx	r7
 800dfae:	3001      	adds	r0, #1
 800dfb0:	f43f af41 	beq.w	800de36 <_printf_float+0xc2>
 800dfb4:	f04f 0800 	mov.w	r8, #0
 800dfb8:	f104 091a 	add.w	r9, r4, #26
 800dfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	4543      	cmp	r3, r8
 800dfc2:	dc09      	bgt.n	800dfd8 <_printf_float+0x264>
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	079b      	lsls	r3, r3, #30
 800dfc8:	f100 8105 	bmi.w	800e1d6 <_printf_float+0x462>
 800dfcc:	68e0      	ldr	r0, [r4, #12]
 800dfce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfd0:	4298      	cmp	r0, r3
 800dfd2:	bfb8      	it	lt
 800dfd4:	4618      	movlt	r0, r3
 800dfd6:	e730      	b.n	800de3a <_printf_float+0xc6>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	464a      	mov	r2, r9
 800dfdc:	4631      	mov	r1, r6
 800dfde:	4628      	mov	r0, r5
 800dfe0:	47b8      	blx	r7
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	f43f af27 	beq.w	800de36 <_printf_float+0xc2>
 800dfe8:	f108 0801 	add.w	r8, r8, #1
 800dfec:	e7e6      	b.n	800dfbc <_printf_float+0x248>
 800dfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dc39      	bgt.n	800e068 <_printf_float+0x2f4>
 800dff4:	4a1b      	ldr	r2, [pc, #108]	; (800e064 <_printf_float+0x2f0>)
 800dff6:	2301      	movs	r3, #1
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f43f af19 	beq.w	800de36 <_printf_float+0xc2>
 800e004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e008:	4313      	orrs	r3, r2
 800e00a:	d102      	bne.n	800e012 <_printf_float+0x29e>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	07d9      	lsls	r1, r3, #31
 800e010:	d5d8      	bpl.n	800dfc4 <_printf_float+0x250>
 800e012:	ee18 3a10 	vmov	r3, s16
 800e016:	4652      	mov	r2, sl
 800e018:	4631      	mov	r1, r6
 800e01a:	4628      	mov	r0, r5
 800e01c:	47b8      	blx	r7
 800e01e:	3001      	adds	r0, #1
 800e020:	f43f af09 	beq.w	800de36 <_printf_float+0xc2>
 800e024:	f04f 0900 	mov.w	r9, #0
 800e028:	f104 0a1a 	add.w	sl, r4, #26
 800e02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e02e:	425b      	negs	r3, r3
 800e030:	454b      	cmp	r3, r9
 800e032:	dc01      	bgt.n	800e038 <_printf_float+0x2c4>
 800e034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e036:	e792      	b.n	800df5e <_printf_float+0x1ea>
 800e038:	2301      	movs	r3, #1
 800e03a:	4652      	mov	r2, sl
 800e03c:	4631      	mov	r1, r6
 800e03e:	4628      	mov	r0, r5
 800e040:	47b8      	blx	r7
 800e042:	3001      	adds	r0, #1
 800e044:	f43f aef7 	beq.w	800de36 <_printf_float+0xc2>
 800e048:	f109 0901 	add.w	r9, r9, #1
 800e04c:	e7ee      	b.n	800e02c <_printf_float+0x2b8>
 800e04e:	bf00      	nop
 800e050:	7fefffff 	.word	0x7fefffff
 800e054:	08025d98 	.word	0x08025d98
 800e058:	08025d9c 	.word	0x08025d9c
 800e05c:	08025da4 	.word	0x08025da4
 800e060:	08025da0 	.word	0x08025da0
 800e064:	08025da8 	.word	0x08025da8
 800e068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e06a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e06c:	429a      	cmp	r2, r3
 800e06e:	bfa8      	it	ge
 800e070:	461a      	movge	r2, r3
 800e072:	2a00      	cmp	r2, #0
 800e074:	4691      	mov	r9, r2
 800e076:	dc37      	bgt.n	800e0e8 <_printf_float+0x374>
 800e078:	f04f 0b00 	mov.w	fp, #0
 800e07c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e080:	f104 021a 	add.w	r2, r4, #26
 800e084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e086:	9305      	str	r3, [sp, #20]
 800e088:	eba3 0309 	sub.w	r3, r3, r9
 800e08c:	455b      	cmp	r3, fp
 800e08e:	dc33      	bgt.n	800e0f8 <_printf_float+0x384>
 800e090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e094:	429a      	cmp	r2, r3
 800e096:	db3b      	blt.n	800e110 <_printf_float+0x39c>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	07da      	lsls	r2, r3, #31
 800e09c:	d438      	bmi.n	800e110 <_printf_float+0x39c>
 800e09e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0a0:	9b05      	ldr	r3, [sp, #20]
 800e0a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	eba2 0901 	sub.w	r9, r2, r1
 800e0aa:	4599      	cmp	r9, r3
 800e0ac:	bfa8      	it	ge
 800e0ae:	4699      	movge	r9, r3
 800e0b0:	f1b9 0f00 	cmp.w	r9, #0
 800e0b4:	dc35      	bgt.n	800e122 <_printf_float+0x3ae>
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0be:	f104 0a1a 	add.w	sl, r4, #26
 800e0c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0c6:	1a9b      	subs	r3, r3, r2
 800e0c8:	eba3 0309 	sub.w	r3, r3, r9
 800e0cc:	4543      	cmp	r3, r8
 800e0ce:	f77f af79 	ble.w	800dfc4 <_printf_float+0x250>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4652      	mov	r2, sl
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	47b8      	blx	r7
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f43f aeaa 	beq.w	800de36 <_printf_float+0xc2>
 800e0e2:	f108 0801 	add.w	r8, r8, #1
 800e0e6:	e7ec      	b.n	800e0c2 <_printf_float+0x34e>
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	4642      	mov	r2, r8
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	47b8      	blx	r7
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	d1c0      	bne.n	800e078 <_printf_float+0x304>
 800e0f6:	e69e      	b.n	800de36 <_printf_float+0xc2>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	4631      	mov	r1, r6
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	9205      	str	r2, [sp, #20]
 800e100:	47b8      	blx	r7
 800e102:	3001      	adds	r0, #1
 800e104:	f43f ae97 	beq.w	800de36 <_printf_float+0xc2>
 800e108:	9a05      	ldr	r2, [sp, #20]
 800e10a:	f10b 0b01 	add.w	fp, fp, #1
 800e10e:	e7b9      	b.n	800e084 <_printf_float+0x310>
 800e110:	ee18 3a10 	vmov	r3, s16
 800e114:	4652      	mov	r2, sl
 800e116:	4631      	mov	r1, r6
 800e118:	4628      	mov	r0, r5
 800e11a:	47b8      	blx	r7
 800e11c:	3001      	adds	r0, #1
 800e11e:	d1be      	bne.n	800e09e <_printf_float+0x32a>
 800e120:	e689      	b.n	800de36 <_printf_float+0xc2>
 800e122:	9a05      	ldr	r2, [sp, #20]
 800e124:	464b      	mov	r3, r9
 800e126:	4442      	add	r2, r8
 800e128:	4631      	mov	r1, r6
 800e12a:	4628      	mov	r0, r5
 800e12c:	47b8      	blx	r7
 800e12e:	3001      	adds	r0, #1
 800e130:	d1c1      	bne.n	800e0b6 <_printf_float+0x342>
 800e132:	e680      	b.n	800de36 <_printf_float+0xc2>
 800e134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e136:	2a01      	cmp	r2, #1
 800e138:	dc01      	bgt.n	800e13e <_printf_float+0x3ca>
 800e13a:	07db      	lsls	r3, r3, #31
 800e13c:	d538      	bpl.n	800e1b0 <_printf_float+0x43c>
 800e13e:	2301      	movs	r3, #1
 800e140:	4642      	mov	r2, r8
 800e142:	4631      	mov	r1, r6
 800e144:	4628      	mov	r0, r5
 800e146:	47b8      	blx	r7
 800e148:	3001      	adds	r0, #1
 800e14a:	f43f ae74 	beq.w	800de36 <_printf_float+0xc2>
 800e14e:	ee18 3a10 	vmov	r3, s16
 800e152:	4652      	mov	r2, sl
 800e154:	4631      	mov	r1, r6
 800e156:	4628      	mov	r0, r5
 800e158:	47b8      	blx	r7
 800e15a:	3001      	adds	r0, #1
 800e15c:	f43f ae6b 	beq.w	800de36 <_printf_float+0xc2>
 800e160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e164:	2200      	movs	r2, #0
 800e166:	2300      	movs	r3, #0
 800e168:	f7f2 fcc6 	bl	8000af8 <__aeabi_dcmpeq>
 800e16c:	b9d8      	cbnz	r0, 800e1a6 <_printf_float+0x432>
 800e16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e170:	f108 0201 	add.w	r2, r8, #1
 800e174:	3b01      	subs	r3, #1
 800e176:	4631      	mov	r1, r6
 800e178:	4628      	mov	r0, r5
 800e17a:	47b8      	blx	r7
 800e17c:	3001      	adds	r0, #1
 800e17e:	d10e      	bne.n	800e19e <_printf_float+0x42a>
 800e180:	e659      	b.n	800de36 <_printf_float+0xc2>
 800e182:	2301      	movs	r3, #1
 800e184:	4652      	mov	r2, sl
 800e186:	4631      	mov	r1, r6
 800e188:	4628      	mov	r0, r5
 800e18a:	47b8      	blx	r7
 800e18c:	3001      	adds	r0, #1
 800e18e:	f43f ae52 	beq.w	800de36 <_printf_float+0xc2>
 800e192:	f108 0801 	add.w	r8, r8, #1
 800e196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e198:	3b01      	subs	r3, #1
 800e19a:	4543      	cmp	r3, r8
 800e19c:	dcf1      	bgt.n	800e182 <_printf_float+0x40e>
 800e19e:	464b      	mov	r3, r9
 800e1a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e1a4:	e6dc      	b.n	800df60 <_printf_float+0x1ec>
 800e1a6:	f04f 0800 	mov.w	r8, #0
 800e1aa:	f104 0a1a 	add.w	sl, r4, #26
 800e1ae:	e7f2      	b.n	800e196 <_printf_float+0x422>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	4642      	mov	r2, r8
 800e1b4:	e7df      	b.n	800e176 <_printf_float+0x402>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	464a      	mov	r2, r9
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4628      	mov	r0, r5
 800e1be:	47b8      	blx	r7
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	f43f ae38 	beq.w	800de36 <_printf_float+0xc2>
 800e1c6:	f108 0801 	add.w	r8, r8, #1
 800e1ca:	68e3      	ldr	r3, [r4, #12]
 800e1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1ce:	1a5b      	subs	r3, r3, r1
 800e1d0:	4543      	cmp	r3, r8
 800e1d2:	dcf0      	bgt.n	800e1b6 <_printf_float+0x442>
 800e1d4:	e6fa      	b.n	800dfcc <_printf_float+0x258>
 800e1d6:	f04f 0800 	mov.w	r8, #0
 800e1da:	f104 0919 	add.w	r9, r4, #25
 800e1de:	e7f4      	b.n	800e1ca <_printf_float+0x456>

0800e1e0 <_printf_common>:
 800e1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e4:	4616      	mov	r6, r2
 800e1e6:	4699      	mov	r9, r3
 800e1e8:	688a      	ldr	r2, [r1, #8]
 800e1ea:	690b      	ldr	r3, [r1, #16]
 800e1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	bfb8      	it	lt
 800e1f4:	4613      	movlt	r3, r2
 800e1f6:	6033      	str	r3, [r6, #0]
 800e1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	460c      	mov	r4, r1
 800e200:	b10a      	cbz	r2, 800e206 <_printf_common+0x26>
 800e202:	3301      	adds	r3, #1
 800e204:	6033      	str	r3, [r6, #0]
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	0699      	lsls	r1, r3, #26
 800e20a:	bf42      	ittt	mi
 800e20c:	6833      	ldrmi	r3, [r6, #0]
 800e20e:	3302      	addmi	r3, #2
 800e210:	6033      	strmi	r3, [r6, #0]
 800e212:	6825      	ldr	r5, [r4, #0]
 800e214:	f015 0506 	ands.w	r5, r5, #6
 800e218:	d106      	bne.n	800e228 <_printf_common+0x48>
 800e21a:	f104 0a19 	add.w	sl, r4, #25
 800e21e:	68e3      	ldr	r3, [r4, #12]
 800e220:	6832      	ldr	r2, [r6, #0]
 800e222:	1a9b      	subs	r3, r3, r2
 800e224:	42ab      	cmp	r3, r5
 800e226:	dc26      	bgt.n	800e276 <_printf_common+0x96>
 800e228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e22c:	1e13      	subs	r3, r2, #0
 800e22e:	6822      	ldr	r2, [r4, #0]
 800e230:	bf18      	it	ne
 800e232:	2301      	movne	r3, #1
 800e234:	0692      	lsls	r2, r2, #26
 800e236:	d42b      	bmi.n	800e290 <_printf_common+0xb0>
 800e238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e23c:	4649      	mov	r1, r9
 800e23e:	4638      	mov	r0, r7
 800e240:	47c0      	blx	r8
 800e242:	3001      	adds	r0, #1
 800e244:	d01e      	beq.n	800e284 <_printf_common+0xa4>
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	68e5      	ldr	r5, [r4, #12]
 800e24a:	6832      	ldr	r2, [r6, #0]
 800e24c:	f003 0306 	and.w	r3, r3, #6
 800e250:	2b04      	cmp	r3, #4
 800e252:	bf08      	it	eq
 800e254:	1aad      	subeq	r5, r5, r2
 800e256:	68a3      	ldr	r3, [r4, #8]
 800e258:	6922      	ldr	r2, [r4, #16]
 800e25a:	bf0c      	ite	eq
 800e25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e260:	2500      	movne	r5, #0
 800e262:	4293      	cmp	r3, r2
 800e264:	bfc4      	itt	gt
 800e266:	1a9b      	subgt	r3, r3, r2
 800e268:	18ed      	addgt	r5, r5, r3
 800e26a:	2600      	movs	r6, #0
 800e26c:	341a      	adds	r4, #26
 800e26e:	42b5      	cmp	r5, r6
 800e270:	d11a      	bne.n	800e2a8 <_printf_common+0xc8>
 800e272:	2000      	movs	r0, #0
 800e274:	e008      	b.n	800e288 <_printf_common+0xa8>
 800e276:	2301      	movs	r3, #1
 800e278:	4652      	mov	r2, sl
 800e27a:	4649      	mov	r1, r9
 800e27c:	4638      	mov	r0, r7
 800e27e:	47c0      	blx	r8
 800e280:	3001      	adds	r0, #1
 800e282:	d103      	bne.n	800e28c <_printf_common+0xac>
 800e284:	f04f 30ff 	mov.w	r0, #4294967295
 800e288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e28c:	3501      	adds	r5, #1
 800e28e:	e7c6      	b.n	800e21e <_printf_common+0x3e>
 800e290:	18e1      	adds	r1, r4, r3
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	2030      	movs	r0, #48	; 0x30
 800e296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e29a:	4422      	add	r2, r4
 800e29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	e7c7      	b.n	800e238 <_printf_common+0x58>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	47c0      	blx	r8
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	d0e6      	beq.n	800e284 <_printf_common+0xa4>
 800e2b6:	3601      	adds	r6, #1
 800e2b8:	e7d9      	b.n	800e26e <_printf_common+0x8e>
	...

0800e2bc <_printf_i>:
 800e2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	4691      	mov	r9, r2
 800e2c4:	7e27      	ldrb	r7, [r4, #24]
 800e2c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e2c8:	2f78      	cmp	r7, #120	; 0x78
 800e2ca:	4680      	mov	r8, r0
 800e2cc:	469a      	mov	sl, r3
 800e2ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2d2:	d807      	bhi.n	800e2e4 <_printf_i+0x28>
 800e2d4:	2f62      	cmp	r7, #98	; 0x62
 800e2d6:	d80a      	bhi.n	800e2ee <_printf_i+0x32>
 800e2d8:	2f00      	cmp	r7, #0
 800e2da:	f000 80d8 	beq.w	800e48e <_printf_i+0x1d2>
 800e2de:	2f58      	cmp	r7, #88	; 0x58
 800e2e0:	f000 80a3 	beq.w	800e42a <_printf_i+0x16e>
 800e2e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2ec:	e03a      	b.n	800e364 <_printf_i+0xa8>
 800e2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2f2:	2b15      	cmp	r3, #21
 800e2f4:	d8f6      	bhi.n	800e2e4 <_printf_i+0x28>
 800e2f6:	a001      	add	r0, pc, #4	; (adr r0, 800e2fc <_printf_i+0x40>)
 800e2f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e2fc:	0800e355 	.word	0x0800e355
 800e300:	0800e369 	.word	0x0800e369
 800e304:	0800e2e5 	.word	0x0800e2e5
 800e308:	0800e2e5 	.word	0x0800e2e5
 800e30c:	0800e2e5 	.word	0x0800e2e5
 800e310:	0800e2e5 	.word	0x0800e2e5
 800e314:	0800e369 	.word	0x0800e369
 800e318:	0800e2e5 	.word	0x0800e2e5
 800e31c:	0800e2e5 	.word	0x0800e2e5
 800e320:	0800e2e5 	.word	0x0800e2e5
 800e324:	0800e2e5 	.word	0x0800e2e5
 800e328:	0800e475 	.word	0x0800e475
 800e32c:	0800e399 	.word	0x0800e399
 800e330:	0800e457 	.word	0x0800e457
 800e334:	0800e2e5 	.word	0x0800e2e5
 800e338:	0800e2e5 	.word	0x0800e2e5
 800e33c:	0800e497 	.word	0x0800e497
 800e340:	0800e2e5 	.word	0x0800e2e5
 800e344:	0800e399 	.word	0x0800e399
 800e348:	0800e2e5 	.word	0x0800e2e5
 800e34c:	0800e2e5 	.word	0x0800e2e5
 800e350:	0800e45f 	.word	0x0800e45f
 800e354:	680b      	ldr	r3, [r1, #0]
 800e356:	1d1a      	adds	r2, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	600a      	str	r2, [r1, #0]
 800e35c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e364:	2301      	movs	r3, #1
 800e366:	e0a3      	b.n	800e4b0 <_printf_i+0x1f4>
 800e368:	6825      	ldr	r5, [r4, #0]
 800e36a:	6808      	ldr	r0, [r1, #0]
 800e36c:	062e      	lsls	r6, r5, #24
 800e36e:	f100 0304 	add.w	r3, r0, #4
 800e372:	d50a      	bpl.n	800e38a <_printf_i+0xce>
 800e374:	6805      	ldr	r5, [r0, #0]
 800e376:	600b      	str	r3, [r1, #0]
 800e378:	2d00      	cmp	r5, #0
 800e37a:	da03      	bge.n	800e384 <_printf_i+0xc8>
 800e37c:	232d      	movs	r3, #45	; 0x2d
 800e37e:	426d      	negs	r5, r5
 800e380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e384:	485e      	ldr	r0, [pc, #376]	; (800e500 <_printf_i+0x244>)
 800e386:	230a      	movs	r3, #10
 800e388:	e019      	b.n	800e3be <_printf_i+0x102>
 800e38a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e38e:	6805      	ldr	r5, [r0, #0]
 800e390:	600b      	str	r3, [r1, #0]
 800e392:	bf18      	it	ne
 800e394:	b22d      	sxthne	r5, r5
 800e396:	e7ef      	b.n	800e378 <_printf_i+0xbc>
 800e398:	680b      	ldr	r3, [r1, #0]
 800e39a:	6825      	ldr	r5, [r4, #0]
 800e39c:	1d18      	adds	r0, r3, #4
 800e39e:	6008      	str	r0, [r1, #0]
 800e3a0:	0628      	lsls	r0, r5, #24
 800e3a2:	d501      	bpl.n	800e3a8 <_printf_i+0xec>
 800e3a4:	681d      	ldr	r5, [r3, #0]
 800e3a6:	e002      	b.n	800e3ae <_printf_i+0xf2>
 800e3a8:	0669      	lsls	r1, r5, #25
 800e3aa:	d5fb      	bpl.n	800e3a4 <_printf_i+0xe8>
 800e3ac:	881d      	ldrh	r5, [r3, #0]
 800e3ae:	4854      	ldr	r0, [pc, #336]	; (800e500 <_printf_i+0x244>)
 800e3b0:	2f6f      	cmp	r7, #111	; 0x6f
 800e3b2:	bf0c      	ite	eq
 800e3b4:	2308      	moveq	r3, #8
 800e3b6:	230a      	movne	r3, #10
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3be:	6866      	ldr	r6, [r4, #4]
 800e3c0:	60a6      	str	r6, [r4, #8]
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	bfa2      	ittt	ge
 800e3c6:	6821      	ldrge	r1, [r4, #0]
 800e3c8:	f021 0104 	bicge.w	r1, r1, #4
 800e3cc:	6021      	strge	r1, [r4, #0]
 800e3ce:	b90d      	cbnz	r5, 800e3d4 <_printf_i+0x118>
 800e3d0:	2e00      	cmp	r6, #0
 800e3d2:	d04d      	beq.n	800e470 <_printf_i+0x1b4>
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3da:	fb03 5711 	mls	r7, r3, r1, r5
 800e3de:	5dc7      	ldrb	r7, [r0, r7]
 800e3e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3e4:	462f      	mov	r7, r5
 800e3e6:	42bb      	cmp	r3, r7
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	d9f4      	bls.n	800e3d6 <_printf_i+0x11a>
 800e3ec:	2b08      	cmp	r3, #8
 800e3ee:	d10b      	bne.n	800e408 <_printf_i+0x14c>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	07df      	lsls	r7, r3, #31
 800e3f4:	d508      	bpl.n	800e408 <_printf_i+0x14c>
 800e3f6:	6923      	ldr	r3, [r4, #16]
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	bfde      	ittt	le
 800e3fe:	2330      	movle	r3, #48	; 0x30
 800e400:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e404:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e408:	1b92      	subs	r2, r2, r6
 800e40a:	6122      	str	r2, [r4, #16]
 800e40c:	f8cd a000 	str.w	sl, [sp]
 800e410:	464b      	mov	r3, r9
 800e412:	aa03      	add	r2, sp, #12
 800e414:	4621      	mov	r1, r4
 800e416:	4640      	mov	r0, r8
 800e418:	f7ff fee2 	bl	800e1e0 <_printf_common>
 800e41c:	3001      	adds	r0, #1
 800e41e:	d14c      	bne.n	800e4ba <_printf_i+0x1fe>
 800e420:	f04f 30ff 	mov.w	r0, #4294967295
 800e424:	b004      	add	sp, #16
 800e426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42a:	4835      	ldr	r0, [pc, #212]	; (800e500 <_printf_i+0x244>)
 800e42c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	680e      	ldr	r6, [r1, #0]
 800e434:	061f      	lsls	r7, r3, #24
 800e436:	f856 5b04 	ldr.w	r5, [r6], #4
 800e43a:	600e      	str	r6, [r1, #0]
 800e43c:	d514      	bpl.n	800e468 <_printf_i+0x1ac>
 800e43e:	07d9      	lsls	r1, r3, #31
 800e440:	bf44      	itt	mi
 800e442:	f043 0320 	orrmi.w	r3, r3, #32
 800e446:	6023      	strmi	r3, [r4, #0]
 800e448:	b91d      	cbnz	r5, 800e452 <_printf_i+0x196>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	f023 0320 	bic.w	r3, r3, #32
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	2310      	movs	r3, #16
 800e454:	e7b0      	b.n	800e3b8 <_printf_i+0xfc>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	f043 0320 	orr.w	r3, r3, #32
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	2378      	movs	r3, #120	; 0x78
 800e460:	4828      	ldr	r0, [pc, #160]	; (800e504 <_printf_i+0x248>)
 800e462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e466:	e7e3      	b.n	800e430 <_printf_i+0x174>
 800e468:	065e      	lsls	r6, r3, #25
 800e46a:	bf48      	it	mi
 800e46c:	b2ad      	uxthmi	r5, r5
 800e46e:	e7e6      	b.n	800e43e <_printf_i+0x182>
 800e470:	4616      	mov	r6, r2
 800e472:	e7bb      	b.n	800e3ec <_printf_i+0x130>
 800e474:	680b      	ldr	r3, [r1, #0]
 800e476:	6826      	ldr	r6, [r4, #0]
 800e478:	6960      	ldr	r0, [r4, #20]
 800e47a:	1d1d      	adds	r5, r3, #4
 800e47c:	600d      	str	r5, [r1, #0]
 800e47e:	0635      	lsls	r5, r6, #24
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	d501      	bpl.n	800e488 <_printf_i+0x1cc>
 800e484:	6018      	str	r0, [r3, #0]
 800e486:	e002      	b.n	800e48e <_printf_i+0x1d2>
 800e488:	0671      	lsls	r1, r6, #25
 800e48a:	d5fb      	bpl.n	800e484 <_printf_i+0x1c8>
 800e48c:	8018      	strh	r0, [r3, #0]
 800e48e:	2300      	movs	r3, #0
 800e490:	6123      	str	r3, [r4, #16]
 800e492:	4616      	mov	r6, r2
 800e494:	e7ba      	b.n	800e40c <_printf_i+0x150>
 800e496:	680b      	ldr	r3, [r1, #0]
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	600a      	str	r2, [r1, #0]
 800e49c:	681e      	ldr	r6, [r3, #0]
 800e49e:	6862      	ldr	r2, [r4, #4]
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f7f1 feb4 	bl	8000210 <memchr>
 800e4a8:	b108      	cbz	r0, 800e4ae <_printf_i+0x1f2>
 800e4aa:	1b80      	subs	r0, r0, r6
 800e4ac:	6060      	str	r0, [r4, #4]
 800e4ae:	6863      	ldr	r3, [r4, #4]
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4b8:	e7a8      	b.n	800e40c <_printf_i+0x150>
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	4632      	mov	r2, r6
 800e4be:	4649      	mov	r1, r9
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	47d0      	blx	sl
 800e4c4:	3001      	adds	r0, #1
 800e4c6:	d0ab      	beq.n	800e420 <_printf_i+0x164>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	079b      	lsls	r3, r3, #30
 800e4cc:	d413      	bmi.n	800e4f6 <_printf_i+0x23a>
 800e4ce:	68e0      	ldr	r0, [r4, #12]
 800e4d0:	9b03      	ldr	r3, [sp, #12]
 800e4d2:	4298      	cmp	r0, r3
 800e4d4:	bfb8      	it	lt
 800e4d6:	4618      	movlt	r0, r3
 800e4d8:	e7a4      	b.n	800e424 <_printf_i+0x168>
 800e4da:	2301      	movs	r3, #1
 800e4dc:	4632      	mov	r2, r6
 800e4de:	4649      	mov	r1, r9
 800e4e0:	4640      	mov	r0, r8
 800e4e2:	47d0      	blx	sl
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	d09b      	beq.n	800e420 <_printf_i+0x164>
 800e4e8:	3501      	adds	r5, #1
 800e4ea:	68e3      	ldr	r3, [r4, #12]
 800e4ec:	9903      	ldr	r1, [sp, #12]
 800e4ee:	1a5b      	subs	r3, r3, r1
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	dcf2      	bgt.n	800e4da <_printf_i+0x21e>
 800e4f4:	e7eb      	b.n	800e4ce <_printf_i+0x212>
 800e4f6:	2500      	movs	r5, #0
 800e4f8:	f104 0619 	add.w	r6, r4, #25
 800e4fc:	e7f5      	b.n	800e4ea <_printf_i+0x22e>
 800e4fe:	bf00      	nop
 800e500:	08025daa 	.word	0x08025daa
 800e504:	08025dbb 	.word	0x08025dbb

0800e508 <_scanf_float>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	b087      	sub	sp, #28
 800e50e:	4617      	mov	r7, r2
 800e510:	9303      	str	r3, [sp, #12]
 800e512:	688b      	ldr	r3, [r1, #8]
 800e514:	1e5a      	subs	r2, r3, #1
 800e516:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e51a:	bf83      	ittte	hi
 800e51c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e520:	195b      	addhi	r3, r3, r5
 800e522:	9302      	strhi	r3, [sp, #8]
 800e524:	2300      	movls	r3, #0
 800e526:	bf86      	itte	hi
 800e528:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e52c:	608b      	strhi	r3, [r1, #8]
 800e52e:	9302      	strls	r3, [sp, #8]
 800e530:	680b      	ldr	r3, [r1, #0]
 800e532:	468b      	mov	fp, r1
 800e534:	2500      	movs	r5, #0
 800e536:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e53a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e53e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e542:	4680      	mov	r8, r0
 800e544:	460c      	mov	r4, r1
 800e546:	465e      	mov	r6, fp
 800e548:	46aa      	mov	sl, r5
 800e54a:	46a9      	mov	r9, r5
 800e54c:	9501      	str	r5, [sp, #4]
 800e54e:	68a2      	ldr	r2, [r4, #8]
 800e550:	b152      	cbz	r2, 800e568 <_scanf_float+0x60>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	2b4e      	cmp	r3, #78	; 0x4e
 800e558:	d864      	bhi.n	800e624 <_scanf_float+0x11c>
 800e55a:	2b40      	cmp	r3, #64	; 0x40
 800e55c:	d83c      	bhi.n	800e5d8 <_scanf_float+0xd0>
 800e55e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e562:	b2c8      	uxtb	r0, r1
 800e564:	280e      	cmp	r0, #14
 800e566:	d93a      	bls.n	800e5de <_scanf_float+0xd6>
 800e568:	f1b9 0f00 	cmp.w	r9, #0
 800e56c:	d003      	beq.n	800e576 <_scanf_float+0x6e>
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e57a:	f1ba 0f01 	cmp.w	sl, #1
 800e57e:	f200 8113 	bhi.w	800e7a8 <_scanf_float+0x2a0>
 800e582:	455e      	cmp	r6, fp
 800e584:	f200 8105 	bhi.w	800e792 <_scanf_float+0x28a>
 800e588:	2501      	movs	r5, #1
 800e58a:	4628      	mov	r0, r5
 800e58c:	b007      	add	sp, #28
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e592:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e596:	2a0d      	cmp	r2, #13
 800e598:	d8e6      	bhi.n	800e568 <_scanf_float+0x60>
 800e59a:	a101      	add	r1, pc, #4	; (adr r1, 800e5a0 <_scanf_float+0x98>)
 800e59c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e5a0:	0800e6df 	.word	0x0800e6df
 800e5a4:	0800e569 	.word	0x0800e569
 800e5a8:	0800e569 	.word	0x0800e569
 800e5ac:	0800e569 	.word	0x0800e569
 800e5b0:	0800e73f 	.word	0x0800e73f
 800e5b4:	0800e717 	.word	0x0800e717
 800e5b8:	0800e569 	.word	0x0800e569
 800e5bc:	0800e569 	.word	0x0800e569
 800e5c0:	0800e6ed 	.word	0x0800e6ed
 800e5c4:	0800e569 	.word	0x0800e569
 800e5c8:	0800e569 	.word	0x0800e569
 800e5cc:	0800e569 	.word	0x0800e569
 800e5d0:	0800e569 	.word	0x0800e569
 800e5d4:	0800e6a5 	.word	0x0800e6a5
 800e5d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e5dc:	e7db      	b.n	800e596 <_scanf_float+0x8e>
 800e5de:	290e      	cmp	r1, #14
 800e5e0:	d8c2      	bhi.n	800e568 <_scanf_float+0x60>
 800e5e2:	a001      	add	r0, pc, #4	; (adr r0, 800e5e8 <_scanf_float+0xe0>)
 800e5e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e5e8:	0800e697 	.word	0x0800e697
 800e5ec:	0800e569 	.word	0x0800e569
 800e5f0:	0800e697 	.word	0x0800e697
 800e5f4:	0800e72b 	.word	0x0800e72b
 800e5f8:	0800e569 	.word	0x0800e569
 800e5fc:	0800e645 	.word	0x0800e645
 800e600:	0800e681 	.word	0x0800e681
 800e604:	0800e681 	.word	0x0800e681
 800e608:	0800e681 	.word	0x0800e681
 800e60c:	0800e681 	.word	0x0800e681
 800e610:	0800e681 	.word	0x0800e681
 800e614:	0800e681 	.word	0x0800e681
 800e618:	0800e681 	.word	0x0800e681
 800e61c:	0800e681 	.word	0x0800e681
 800e620:	0800e681 	.word	0x0800e681
 800e624:	2b6e      	cmp	r3, #110	; 0x6e
 800e626:	d809      	bhi.n	800e63c <_scanf_float+0x134>
 800e628:	2b60      	cmp	r3, #96	; 0x60
 800e62a:	d8b2      	bhi.n	800e592 <_scanf_float+0x8a>
 800e62c:	2b54      	cmp	r3, #84	; 0x54
 800e62e:	d077      	beq.n	800e720 <_scanf_float+0x218>
 800e630:	2b59      	cmp	r3, #89	; 0x59
 800e632:	d199      	bne.n	800e568 <_scanf_float+0x60>
 800e634:	2d07      	cmp	r5, #7
 800e636:	d197      	bne.n	800e568 <_scanf_float+0x60>
 800e638:	2508      	movs	r5, #8
 800e63a:	e029      	b.n	800e690 <_scanf_float+0x188>
 800e63c:	2b74      	cmp	r3, #116	; 0x74
 800e63e:	d06f      	beq.n	800e720 <_scanf_float+0x218>
 800e640:	2b79      	cmp	r3, #121	; 0x79
 800e642:	e7f6      	b.n	800e632 <_scanf_float+0x12a>
 800e644:	6821      	ldr	r1, [r4, #0]
 800e646:	05c8      	lsls	r0, r1, #23
 800e648:	d51a      	bpl.n	800e680 <_scanf_float+0x178>
 800e64a:	9b02      	ldr	r3, [sp, #8]
 800e64c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e650:	6021      	str	r1, [r4, #0]
 800e652:	f109 0901 	add.w	r9, r9, #1
 800e656:	b11b      	cbz	r3, 800e660 <_scanf_float+0x158>
 800e658:	3b01      	subs	r3, #1
 800e65a:	3201      	adds	r2, #1
 800e65c:	9302      	str	r3, [sp, #8]
 800e65e:	60a2      	str	r2, [r4, #8]
 800e660:	68a3      	ldr	r3, [r4, #8]
 800e662:	3b01      	subs	r3, #1
 800e664:	60a3      	str	r3, [r4, #8]
 800e666:	6923      	ldr	r3, [r4, #16]
 800e668:	3301      	adds	r3, #1
 800e66a:	6123      	str	r3, [r4, #16]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3b01      	subs	r3, #1
 800e670:	2b00      	cmp	r3, #0
 800e672:	607b      	str	r3, [r7, #4]
 800e674:	f340 8084 	ble.w	800e780 <_scanf_float+0x278>
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	3301      	adds	r3, #1
 800e67c:	603b      	str	r3, [r7, #0]
 800e67e:	e766      	b.n	800e54e <_scanf_float+0x46>
 800e680:	eb1a 0f05 	cmn.w	sl, r5
 800e684:	f47f af70 	bne.w	800e568 <_scanf_float+0x60>
 800e688:	6822      	ldr	r2, [r4, #0]
 800e68a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e68e:	6022      	str	r2, [r4, #0]
 800e690:	f806 3b01 	strb.w	r3, [r6], #1
 800e694:	e7e4      	b.n	800e660 <_scanf_float+0x158>
 800e696:	6822      	ldr	r2, [r4, #0]
 800e698:	0610      	lsls	r0, r2, #24
 800e69a:	f57f af65 	bpl.w	800e568 <_scanf_float+0x60>
 800e69e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e6a2:	e7f4      	b.n	800e68e <_scanf_float+0x186>
 800e6a4:	f1ba 0f00 	cmp.w	sl, #0
 800e6a8:	d10e      	bne.n	800e6c8 <_scanf_float+0x1c0>
 800e6aa:	f1b9 0f00 	cmp.w	r9, #0
 800e6ae:	d10e      	bne.n	800e6ce <_scanf_float+0x1c6>
 800e6b0:	6822      	ldr	r2, [r4, #0]
 800e6b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e6b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e6ba:	d108      	bne.n	800e6ce <_scanf_float+0x1c6>
 800e6bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e6c0:	6022      	str	r2, [r4, #0]
 800e6c2:	f04f 0a01 	mov.w	sl, #1
 800e6c6:	e7e3      	b.n	800e690 <_scanf_float+0x188>
 800e6c8:	f1ba 0f02 	cmp.w	sl, #2
 800e6cc:	d055      	beq.n	800e77a <_scanf_float+0x272>
 800e6ce:	2d01      	cmp	r5, #1
 800e6d0:	d002      	beq.n	800e6d8 <_scanf_float+0x1d0>
 800e6d2:	2d04      	cmp	r5, #4
 800e6d4:	f47f af48 	bne.w	800e568 <_scanf_float+0x60>
 800e6d8:	3501      	adds	r5, #1
 800e6da:	b2ed      	uxtb	r5, r5
 800e6dc:	e7d8      	b.n	800e690 <_scanf_float+0x188>
 800e6de:	f1ba 0f01 	cmp.w	sl, #1
 800e6e2:	f47f af41 	bne.w	800e568 <_scanf_float+0x60>
 800e6e6:	f04f 0a02 	mov.w	sl, #2
 800e6ea:	e7d1      	b.n	800e690 <_scanf_float+0x188>
 800e6ec:	b97d      	cbnz	r5, 800e70e <_scanf_float+0x206>
 800e6ee:	f1b9 0f00 	cmp.w	r9, #0
 800e6f2:	f47f af3c 	bne.w	800e56e <_scanf_float+0x66>
 800e6f6:	6822      	ldr	r2, [r4, #0]
 800e6f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e6fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e700:	f47f af39 	bne.w	800e576 <_scanf_float+0x6e>
 800e704:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e708:	6022      	str	r2, [r4, #0]
 800e70a:	2501      	movs	r5, #1
 800e70c:	e7c0      	b.n	800e690 <_scanf_float+0x188>
 800e70e:	2d03      	cmp	r5, #3
 800e710:	d0e2      	beq.n	800e6d8 <_scanf_float+0x1d0>
 800e712:	2d05      	cmp	r5, #5
 800e714:	e7de      	b.n	800e6d4 <_scanf_float+0x1cc>
 800e716:	2d02      	cmp	r5, #2
 800e718:	f47f af26 	bne.w	800e568 <_scanf_float+0x60>
 800e71c:	2503      	movs	r5, #3
 800e71e:	e7b7      	b.n	800e690 <_scanf_float+0x188>
 800e720:	2d06      	cmp	r5, #6
 800e722:	f47f af21 	bne.w	800e568 <_scanf_float+0x60>
 800e726:	2507      	movs	r5, #7
 800e728:	e7b2      	b.n	800e690 <_scanf_float+0x188>
 800e72a:	6822      	ldr	r2, [r4, #0]
 800e72c:	0591      	lsls	r1, r2, #22
 800e72e:	f57f af1b 	bpl.w	800e568 <_scanf_float+0x60>
 800e732:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e736:	6022      	str	r2, [r4, #0]
 800e738:	f8cd 9004 	str.w	r9, [sp, #4]
 800e73c:	e7a8      	b.n	800e690 <_scanf_float+0x188>
 800e73e:	6822      	ldr	r2, [r4, #0]
 800e740:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e744:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e748:	d006      	beq.n	800e758 <_scanf_float+0x250>
 800e74a:	0550      	lsls	r0, r2, #21
 800e74c:	f57f af0c 	bpl.w	800e568 <_scanf_float+0x60>
 800e750:	f1b9 0f00 	cmp.w	r9, #0
 800e754:	f43f af0f 	beq.w	800e576 <_scanf_float+0x6e>
 800e758:	0591      	lsls	r1, r2, #22
 800e75a:	bf58      	it	pl
 800e75c:	9901      	ldrpl	r1, [sp, #4]
 800e75e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e762:	bf58      	it	pl
 800e764:	eba9 0101 	subpl.w	r1, r9, r1
 800e768:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e76c:	bf58      	it	pl
 800e76e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e772:	6022      	str	r2, [r4, #0]
 800e774:	f04f 0900 	mov.w	r9, #0
 800e778:	e78a      	b.n	800e690 <_scanf_float+0x188>
 800e77a:	f04f 0a03 	mov.w	sl, #3
 800e77e:	e787      	b.n	800e690 <_scanf_float+0x188>
 800e780:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e784:	4639      	mov	r1, r7
 800e786:	4640      	mov	r0, r8
 800e788:	4798      	blx	r3
 800e78a:	2800      	cmp	r0, #0
 800e78c:	f43f aedf 	beq.w	800e54e <_scanf_float+0x46>
 800e790:	e6ea      	b.n	800e568 <_scanf_float+0x60>
 800e792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e79a:	463a      	mov	r2, r7
 800e79c:	4640      	mov	r0, r8
 800e79e:	4798      	blx	r3
 800e7a0:	6923      	ldr	r3, [r4, #16]
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	6123      	str	r3, [r4, #16]
 800e7a6:	e6ec      	b.n	800e582 <_scanf_float+0x7a>
 800e7a8:	1e6b      	subs	r3, r5, #1
 800e7aa:	2b06      	cmp	r3, #6
 800e7ac:	d825      	bhi.n	800e7fa <_scanf_float+0x2f2>
 800e7ae:	2d02      	cmp	r5, #2
 800e7b0:	d836      	bhi.n	800e820 <_scanf_float+0x318>
 800e7b2:	455e      	cmp	r6, fp
 800e7b4:	f67f aee8 	bls.w	800e588 <_scanf_float+0x80>
 800e7b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7c0:	463a      	mov	r2, r7
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4798      	blx	r3
 800e7c6:	6923      	ldr	r3, [r4, #16]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	e7f1      	b.n	800e7b2 <_scanf_float+0x2aa>
 800e7ce:	9802      	ldr	r0, [sp, #8]
 800e7d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e7d8:	9002      	str	r0, [sp, #8]
 800e7da:	463a      	mov	r2, r7
 800e7dc:	4640      	mov	r0, r8
 800e7de:	4798      	blx	r3
 800e7e0:	6923      	ldr	r3, [r4, #16]
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	6123      	str	r3, [r4, #16]
 800e7e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7ea:	fa5f fa8a 	uxtb.w	sl, sl
 800e7ee:	f1ba 0f02 	cmp.w	sl, #2
 800e7f2:	d1ec      	bne.n	800e7ce <_scanf_float+0x2c6>
 800e7f4:	3d03      	subs	r5, #3
 800e7f6:	b2ed      	uxtb	r5, r5
 800e7f8:	1b76      	subs	r6, r6, r5
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	05da      	lsls	r2, r3, #23
 800e7fe:	d52f      	bpl.n	800e860 <_scanf_float+0x358>
 800e800:	055b      	lsls	r3, r3, #21
 800e802:	d510      	bpl.n	800e826 <_scanf_float+0x31e>
 800e804:	455e      	cmp	r6, fp
 800e806:	f67f aebf 	bls.w	800e588 <_scanf_float+0x80>
 800e80a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e80e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e812:	463a      	mov	r2, r7
 800e814:	4640      	mov	r0, r8
 800e816:	4798      	blx	r3
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	3b01      	subs	r3, #1
 800e81c:	6123      	str	r3, [r4, #16]
 800e81e:	e7f1      	b.n	800e804 <_scanf_float+0x2fc>
 800e820:	46aa      	mov	sl, r5
 800e822:	9602      	str	r6, [sp, #8]
 800e824:	e7df      	b.n	800e7e6 <_scanf_float+0x2de>
 800e826:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e82a:	6923      	ldr	r3, [r4, #16]
 800e82c:	2965      	cmp	r1, #101	; 0x65
 800e82e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e832:	f106 35ff 	add.w	r5, r6, #4294967295
 800e836:	6123      	str	r3, [r4, #16]
 800e838:	d00c      	beq.n	800e854 <_scanf_float+0x34c>
 800e83a:	2945      	cmp	r1, #69	; 0x45
 800e83c:	d00a      	beq.n	800e854 <_scanf_float+0x34c>
 800e83e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e842:	463a      	mov	r2, r7
 800e844:	4640      	mov	r0, r8
 800e846:	4798      	blx	r3
 800e848:	6923      	ldr	r3, [r4, #16]
 800e84a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e84e:	3b01      	subs	r3, #1
 800e850:	1eb5      	subs	r5, r6, #2
 800e852:	6123      	str	r3, [r4, #16]
 800e854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e858:	463a      	mov	r2, r7
 800e85a:	4640      	mov	r0, r8
 800e85c:	4798      	blx	r3
 800e85e:	462e      	mov	r6, r5
 800e860:	6825      	ldr	r5, [r4, #0]
 800e862:	f015 0510 	ands.w	r5, r5, #16
 800e866:	d158      	bne.n	800e91a <_scanf_float+0x412>
 800e868:	7035      	strb	r5, [r6, #0]
 800e86a:	6823      	ldr	r3, [r4, #0]
 800e86c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e874:	d11c      	bne.n	800e8b0 <_scanf_float+0x3a8>
 800e876:	9b01      	ldr	r3, [sp, #4]
 800e878:	454b      	cmp	r3, r9
 800e87a:	eba3 0209 	sub.w	r2, r3, r9
 800e87e:	d124      	bne.n	800e8ca <_scanf_float+0x3c2>
 800e880:	2200      	movs	r2, #0
 800e882:	4659      	mov	r1, fp
 800e884:	4640      	mov	r0, r8
 800e886:	f000 fe9d 	bl	800f5c4 <_strtod_r>
 800e88a:	9b03      	ldr	r3, [sp, #12]
 800e88c:	6821      	ldr	r1, [r4, #0]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f011 0f02 	tst.w	r1, #2
 800e894:	ec57 6b10 	vmov	r6, r7, d0
 800e898:	f103 0204 	add.w	r2, r3, #4
 800e89c:	d020      	beq.n	800e8e0 <_scanf_float+0x3d8>
 800e89e:	9903      	ldr	r1, [sp, #12]
 800e8a0:	600a      	str	r2, [r1, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	e9c3 6700 	strd	r6, r7, [r3]
 800e8a8:	68e3      	ldr	r3, [r4, #12]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	60e3      	str	r3, [r4, #12]
 800e8ae:	e66c      	b.n	800e58a <_scanf_float+0x82>
 800e8b0:	9b04      	ldr	r3, [sp, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0e4      	beq.n	800e880 <_scanf_float+0x378>
 800e8b6:	9905      	ldr	r1, [sp, #20]
 800e8b8:	230a      	movs	r3, #10
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	3101      	adds	r1, #1
 800e8be:	4640      	mov	r0, r8
 800e8c0:	f000 ff72 	bl	800f7a8 <_strtol_r>
 800e8c4:	9b04      	ldr	r3, [sp, #16]
 800e8c6:	9e05      	ldr	r6, [sp, #20]
 800e8c8:	1ac2      	subs	r2, r0, r3
 800e8ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e8ce:	429e      	cmp	r6, r3
 800e8d0:	bf28      	it	cs
 800e8d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e8d6:	4912      	ldr	r1, [pc, #72]	; (800e920 <_scanf_float+0x418>)
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f000 f82b 	bl	800e934 <siprintf>
 800e8de:	e7cf      	b.n	800e880 <_scanf_float+0x378>
 800e8e0:	f011 0f04 	tst.w	r1, #4
 800e8e4:	9903      	ldr	r1, [sp, #12]
 800e8e6:	600a      	str	r2, [r1, #0]
 800e8e8:	d1db      	bne.n	800e8a2 <_scanf_float+0x39a>
 800e8ea:	f8d3 8000 	ldr.w	r8, [r3]
 800e8ee:	ee10 2a10 	vmov	r2, s0
 800e8f2:	ee10 0a10 	vmov	r0, s0
 800e8f6:	463b      	mov	r3, r7
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	f7f2 f92f 	bl	8000b5c <__aeabi_dcmpun>
 800e8fe:	b128      	cbz	r0, 800e90c <_scanf_float+0x404>
 800e900:	4808      	ldr	r0, [pc, #32]	; (800e924 <_scanf_float+0x41c>)
 800e902:	f000 f811 	bl	800e928 <nanf>
 800e906:	ed88 0a00 	vstr	s0, [r8]
 800e90a:	e7cd      	b.n	800e8a8 <_scanf_float+0x3a0>
 800e90c:	4630      	mov	r0, r6
 800e90e:	4639      	mov	r1, r7
 800e910:	f7f2 f982 	bl	8000c18 <__aeabi_d2f>
 800e914:	f8c8 0000 	str.w	r0, [r8]
 800e918:	e7c6      	b.n	800e8a8 <_scanf_float+0x3a0>
 800e91a:	2500      	movs	r5, #0
 800e91c:	e635      	b.n	800e58a <_scanf_float+0x82>
 800e91e:	bf00      	nop
 800e920:	08025dcc 	.word	0x08025dcc
 800e924:	08025edb 	.word	0x08025edb

0800e928 <nanf>:
 800e928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e930 <nanf+0x8>
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	7fc00000 	.word	0x7fc00000

0800e934 <siprintf>:
 800e934:	b40e      	push	{r1, r2, r3}
 800e936:	b500      	push	{lr}
 800e938:	b09c      	sub	sp, #112	; 0x70
 800e93a:	ab1d      	add	r3, sp, #116	; 0x74
 800e93c:	9002      	str	r0, [sp, #8]
 800e93e:	9006      	str	r0, [sp, #24]
 800e940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e944:	4809      	ldr	r0, [pc, #36]	; (800e96c <siprintf+0x38>)
 800e946:	9107      	str	r1, [sp, #28]
 800e948:	9104      	str	r1, [sp, #16]
 800e94a:	4909      	ldr	r1, [pc, #36]	; (800e970 <siprintf+0x3c>)
 800e94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e950:	9105      	str	r1, [sp, #20]
 800e952:	6800      	ldr	r0, [r0, #0]
 800e954:	9301      	str	r3, [sp, #4]
 800e956:	a902      	add	r1, sp, #8
 800e958:	f002 ff48 	bl	80117ec <_svfiprintf_r>
 800e95c:	9b02      	ldr	r3, [sp, #8]
 800e95e:	2200      	movs	r2, #0
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	b01c      	add	sp, #112	; 0x70
 800e964:	f85d eb04 	ldr.w	lr, [sp], #4
 800e968:	b003      	add	sp, #12
 800e96a:	4770      	bx	lr
 800e96c:	20000040 	.word	0x20000040
 800e970:	ffff0208 	.word	0xffff0208

0800e974 <sulp>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	4604      	mov	r4, r0
 800e978:	460d      	mov	r5, r1
 800e97a:	ec45 4b10 	vmov	d0, r4, r5
 800e97e:	4616      	mov	r6, r2
 800e980:	f002 fcd0 	bl	8011324 <__ulp>
 800e984:	ec51 0b10 	vmov	r0, r1, d0
 800e988:	b17e      	cbz	r6, 800e9aa <sulp+0x36>
 800e98a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e98e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e992:	2b00      	cmp	r3, #0
 800e994:	dd09      	ble.n	800e9aa <sulp+0x36>
 800e996:	051b      	lsls	r3, r3, #20
 800e998:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e99c:	2400      	movs	r4, #0
 800e99e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	f7f1 fe3f 	bl	8000628 <__aeabi_dmul>
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
 800e9ac:	0000      	movs	r0, r0
	...

0800e9b0 <_strtod_l>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	b0a3      	sub	sp, #140	; 0x8c
 800e9b6:	461f      	mov	r7, r3
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	931e      	str	r3, [sp, #120]	; 0x78
 800e9bc:	4ba4      	ldr	r3, [pc, #656]	; (800ec50 <_strtod_l+0x2a0>)
 800e9be:	9219      	str	r2, [sp, #100]	; 0x64
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	9307      	str	r3, [sp, #28]
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	4688      	mov	r8, r1
 800e9ca:	f7f1 fc13 	bl	80001f4 <strlen>
 800e9ce:	f04f 0a00 	mov.w	sl, #0
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	f04f 0b00 	mov.w	fp, #0
 800e9d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e9de:	781a      	ldrb	r2, [r3, #0]
 800e9e0:	2a2b      	cmp	r2, #43	; 0x2b
 800e9e2:	d04c      	beq.n	800ea7e <_strtod_l+0xce>
 800e9e4:	d839      	bhi.n	800ea5a <_strtod_l+0xaa>
 800e9e6:	2a0d      	cmp	r2, #13
 800e9e8:	d832      	bhi.n	800ea50 <_strtod_l+0xa0>
 800e9ea:	2a08      	cmp	r2, #8
 800e9ec:	d832      	bhi.n	800ea54 <_strtod_l+0xa4>
 800e9ee:	2a00      	cmp	r2, #0
 800e9f0:	d03c      	beq.n	800ea6c <_strtod_l+0xbc>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e9f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e9f8:	7833      	ldrb	r3, [r6, #0]
 800e9fa:	2b30      	cmp	r3, #48	; 0x30
 800e9fc:	f040 80b4 	bne.w	800eb68 <_strtod_l+0x1b8>
 800ea00:	7873      	ldrb	r3, [r6, #1]
 800ea02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ea06:	2b58      	cmp	r3, #88	; 0x58
 800ea08:	d16c      	bne.n	800eae4 <_strtod_l+0x134>
 800ea0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea0c:	9301      	str	r3, [sp, #4]
 800ea0e:	ab1e      	add	r3, sp, #120	; 0x78
 800ea10:	9702      	str	r7, [sp, #8]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	4a8f      	ldr	r2, [pc, #572]	; (800ec54 <_strtod_l+0x2a4>)
 800ea16:	ab1f      	add	r3, sp, #124	; 0x7c
 800ea18:	a91d      	add	r1, sp, #116	; 0x74
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f001 fde2 	bl	80105e4 <__gethex>
 800ea20:	f010 0707 	ands.w	r7, r0, #7
 800ea24:	4605      	mov	r5, r0
 800ea26:	d005      	beq.n	800ea34 <_strtod_l+0x84>
 800ea28:	2f06      	cmp	r7, #6
 800ea2a:	d12a      	bne.n	800ea82 <_strtod_l+0xd2>
 800ea2c:	3601      	adds	r6, #1
 800ea2e:	2300      	movs	r3, #0
 800ea30:	961d      	str	r6, [sp, #116]	; 0x74
 800ea32:	930e      	str	r3, [sp, #56]	; 0x38
 800ea34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f040 8596 	bne.w	800f568 <_strtod_l+0xbb8>
 800ea3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea3e:	b1db      	cbz	r3, 800ea78 <_strtod_l+0xc8>
 800ea40:	4652      	mov	r2, sl
 800ea42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ea46:	ec43 2b10 	vmov	d0, r2, r3
 800ea4a:	b023      	add	sp, #140	; 0x8c
 800ea4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea50:	2a20      	cmp	r2, #32
 800ea52:	d1ce      	bne.n	800e9f2 <_strtod_l+0x42>
 800ea54:	3301      	adds	r3, #1
 800ea56:	931d      	str	r3, [sp, #116]	; 0x74
 800ea58:	e7c0      	b.n	800e9dc <_strtod_l+0x2c>
 800ea5a:	2a2d      	cmp	r2, #45	; 0x2d
 800ea5c:	d1c9      	bne.n	800e9f2 <_strtod_l+0x42>
 800ea5e:	2201      	movs	r2, #1
 800ea60:	920e      	str	r2, [sp, #56]	; 0x38
 800ea62:	1c5a      	adds	r2, r3, #1
 800ea64:	921d      	str	r2, [sp, #116]	; 0x74
 800ea66:	785b      	ldrb	r3, [r3, #1]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1c4      	bne.n	800e9f6 <_strtod_l+0x46>
 800ea6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f040 8576 	bne.w	800f564 <_strtod_l+0xbb4>
 800ea78:	4652      	mov	r2, sl
 800ea7a:	465b      	mov	r3, fp
 800ea7c:	e7e3      	b.n	800ea46 <_strtod_l+0x96>
 800ea7e:	2200      	movs	r2, #0
 800ea80:	e7ee      	b.n	800ea60 <_strtod_l+0xb0>
 800ea82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea84:	b13a      	cbz	r2, 800ea96 <_strtod_l+0xe6>
 800ea86:	2135      	movs	r1, #53	; 0x35
 800ea88:	a820      	add	r0, sp, #128	; 0x80
 800ea8a:	f002 fd56 	bl	801153a <__copybits>
 800ea8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea90:	4620      	mov	r0, r4
 800ea92:	f002 f91b 	bl	8010ccc <_Bfree>
 800ea96:	3f01      	subs	r7, #1
 800ea98:	2f05      	cmp	r7, #5
 800ea9a:	d807      	bhi.n	800eaac <_strtod_l+0xfc>
 800ea9c:	e8df f007 	tbb	[pc, r7]
 800eaa0:	1d180b0e 	.word	0x1d180b0e
 800eaa4:	030e      	.short	0x030e
 800eaa6:	f04f 0b00 	mov.w	fp, #0
 800eaaa:	46da      	mov	sl, fp
 800eaac:	0728      	lsls	r0, r5, #28
 800eaae:	d5c1      	bpl.n	800ea34 <_strtod_l+0x84>
 800eab0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800eab4:	e7be      	b.n	800ea34 <_strtod_l+0x84>
 800eab6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800eaba:	e7f7      	b.n	800eaac <_strtod_l+0xfc>
 800eabc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800eac0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800eac6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800eaca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eace:	e7ed      	b.n	800eaac <_strtod_l+0xfc>
 800ead0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ec58 <_strtod_l+0x2a8>
 800ead4:	f04f 0a00 	mov.w	sl, #0
 800ead8:	e7e8      	b.n	800eaac <_strtod_l+0xfc>
 800eada:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800eade:	f04f 3aff 	mov.w	sl, #4294967295
 800eae2:	e7e3      	b.n	800eaac <_strtod_l+0xfc>
 800eae4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	921d      	str	r2, [sp, #116]	; 0x74
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	2b30      	cmp	r3, #48	; 0x30
 800eaee:	d0f9      	beq.n	800eae4 <_strtod_l+0x134>
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d09f      	beq.n	800ea34 <_strtod_l+0x84>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	f04f 0900 	mov.w	r9, #0
 800eafa:	9304      	str	r3, [sp, #16]
 800eafc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eafe:	930a      	str	r3, [sp, #40]	; 0x28
 800eb00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800eb04:	464f      	mov	r7, r9
 800eb06:	220a      	movs	r2, #10
 800eb08:	981d      	ldr	r0, [sp, #116]	; 0x74
 800eb0a:	7806      	ldrb	r6, [r0, #0]
 800eb0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800eb10:	b2d9      	uxtb	r1, r3
 800eb12:	2909      	cmp	r1, #9
 800eb14:	d92a      	bls.n	800eb6c <_strtod_l+0x1bc>
 800eb16:	9907      	ldr	r1, [sp, #28]
 800eb18:	462a      	mov	r2, r5
 800eb1a:	f003 f8d9 	bl	8011cd0 <strncmp>
 800eb1e:	b398      	cbz	r0, 800eb88 <_strtod_l+0x1d8>
 800eb20:	2000      	movs	r0, #0
 800eb22:	4633      	mov	r3, r6
 800eb24:	463d      	mov	r5, r7
 800eb26:	9007      	str	r0, [sp, #28]
 800eb28:	4602      	mov	r2, r0
 800eb2a:	2b65      	cmp	r3, #101	; 0x65
 800eb2c:	d001      	beq.n	800eb32 <_strtod_l+0x182>
 800eb2e:	2b45      	cmp	r3, #69	; 0x45
 800eb30:	d118      	bne.n	800eb64 <_strtod_l+0x1b4>
 800eb32:	b91d      	cbnz	r5, 800eb3c <_strtod_l+0x18c>
 800eb34:	9b04      	ldr	r3, [sp, #16]
 800eb36:	4303      	orrs	r3, r0
 800eb38:	d098      	beq.n	800ea6c <_strtod_l+0xbc>
 800eb3a:	2500      	movs	r5, #0
 800eb3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800eb40:	f108 0301 	add.w	r3, r8, #1
 800eb44:	931d      	str	r3, [sp, #116]	; 0x74
 800eb46:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eb4a:	2b2b      	cmp	r3, #43	; 0x2b
 800eb4c:	d075      	beq.n	800ec3a <_strtod_l+0x28a>
 800eb4e:	2b2d      	cmp	r3, #45	; 0x2d
 800eb50:	d07b      	beq.n	800ec4a <_strtod_l+0x29a>
 800eb52:	f04f 0c00 	mov.w	ip, #0
 800eb56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800eb5a:	2909      	cmp	r1, #9
 800eb5c:	f240 8082 	bls.w	800ec64 <_strtod_l+0x2b4>
 800eb60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800eb64:	2600      	movs	r6, #0
 800eb66:	e09d      	b.n	800eca4 <_strtod_l+0x2f4>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e7c4      	b.n	800eaf6 <_strtod_l+0x146>
 800eb6c:	2f08      	cmp	r7, #8
 800eb6e:	bfd8      	it	le
 800eb70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800eb72:	f100 0001 	add.w	r0, r0, #1
 800eb76:	bfda      	itte	le
 800eb78:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb7c:	9309      	strle	r3, [sp, #36]	; 0x24
 800eb7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800eb82:	3701      	adds	r7, #1
 800eb84:	901d      	str	r0, [sp, #116]	; 0x74
 800eb86:	e7bf      	b.n	800eb08 <_strtod_l+0x158>
 800eb88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb8a:	195a      	adds	r2, r3, r5
 800eb8c:	921d      	str	r2, [sp, #116]	; 0x74
 800eb8e:	5d5b      	ldrb	r3, [r3, r5]
 800eb90:	2f00      	cmp	r7, #0
 800eb92:	d037      	beq.n	800ec04 <_strtod_l+0x254>
 800eb94:	9007      	str	r0, [sp, #28]
 800eb96:	463d      	mov	r5, r7
 800eb98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eb9c:	2a09      	cmp	r2, #9
 800eb9e:	d912      	bls.n	800ebc6 <_strtod_l+0x216>
 800eba0:	2201      	movs	r2, #1
 800eba2:	e7c2      	b.n	800eb2a <_strtod_l+0x17a>
 800eba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	921d      	str	r2, [sp, #116]	; 0x74
 800ebaa:	785b      	ldrb	r3, [r3, #1]
 800ebac:	3001      	adds	r0, #1
 800ebae:	2b30      	cmp	r3, #48	; 0x30
 800ebb0:	d0f8      	beq.n	800eba4 <_strtod_l+0x1f4>
 800ebb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ebb6:	2a08      	cmp	r2, #8
 800ebb8:	f200 84db 	bhi.w	800f572 <_strtod_l+0xbc2>
 800ebbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ebbe:	9007      	str	r0, [sp, #28]
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	920a      	str	r2, [sp, #40]	; 0x28
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	3b30      	subs	r3, #48	; 0x30
 800ebc8:	f100 0201 	add.w	r2, r0, #1
 800ebcc:	d014      	beq.n	800ebf8 <_strtod_l+0x248>
 800ebce:	9907      	ldr	r1, [sp, #28]
 800ebd0:	4411      	add	r1, r2
 800ebd2:	9107      	str	r1, [sp, #28]
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	eb00 0e05 	add.w	lr, r0, r5
 800ebda:	210a      	movs	r1, #10
 800ebdc:	4572      	cmp	r2, lr
 800ebde:	d113      	bne.n	800ec08 <_strtod_l+0x258>
 800ebe0:	182a      	adds	r2, r5, r0
 800ebe2:	2a08      	cmp	r2, #8
 800ebe4:	f105 0501 	add.w	r5, r5, #1
 800ebe8:	4405      	add	r5, r0
 800ebea:	dc1c      	bgt.n	800ec26 <_strtod_l+0x276>
 800ebec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebee:	220a      	movs	r2, #10
 800ebf0:	fb02 3301 	mla	r3, r2, r1, r3
 800ebf4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebfa:	1c59      	adds	r1, r3, #1
 800ebfc:	911d      	str	r1, [sp, #116]	; 0x74
 800ebfe:	785b      	ldrb	r3, [r3, #1]
 800ec00:	4610      	mov	r0, r2
 800ec02:	e7c9      	b.n	800eb98 <_strtod_l+0x1e8>
 800ec04:	4638      	mov	r0, r7
 800ec06:	e7d2      	b.n	800ebae <_strtod_l+0x1fe>
 800ec08:	2a08      	cmp	r2, #8
 800ec0a:	dc04      	bgt.n	800ec16 <_strtod_l+0x266>
 800ec0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ec0e:	434e      	muls	r6, r1
 800ec10:	9609      	str	r6, [sp, #36]	; 0x24
 800ec12:	3201      	adds	r2, #1
 800ec14:	e7e2      	b.n	800ebdc <_strtod_l+0x22c>
 800ec16:	f102 0c01 	add.w	ip, r2, #1
 800ec1a:	f1bc 0f10 	cmp.w	ip, #16
 800ec1e:	bfd8      	it	le
 800ec20:	fb01 f909 	mulle.w	r9, r1, r9
 800ec24:	e7f5      	b.n	800ec12 <_strtod_l+0x262>
 800ec26:	2d10      	cmp	r5, #16
 800ec28:	bfdc      	itt	le
 800ec2a:	220a      	movle	r2, #10
 800ec2c:	fb02 3909 	mlale	r9, r2, r9, r3
 800ec30:	e7e1      	b.n	800ebf6 <_strtod_l+0x246>
 800ec32:	2300      	movs	r3, #0
 800ec34:	9307      	str	r3, [sp, #28]
 800ec36:	2201      	movs	r2, #1
 800ec38:	e77c      	b.n	800eb34 <_strtod_l+0x184>
 800ec3a:	f04f 0c00 	mov.w	ip, #0
 800ec3e:	f108 0302 	add.w	r3, r8, #2
 800ec42:	931d      	str	r3, [sp, #116]	; 0x74
 800ec44:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ec48:	e785      	b.n	800eb56 <_strtod_l+0x1a6>
 800ec4a:	f04f 0c01 	mov.w	ip, #1
 800ec4e:	e7f6      	b.n	800ec3e <_strtod_l+0x28e>
 800ec50:	080260c4 	.word	0x080260c4
 800ec54:	08025dd4 	.word	0x08025dd4
 800ec58:	7ff00000 	.word	0x7ff00000
 800ec5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec5e:	1c59      	adds	r1, r3, #1
 800ec60:	911d      	str	r1, [sp, #116]	; 0x74
 800ec62:	785b      	ldrb	r3, [r3, #1]
 800ec64:	2b30      	cmp	r3, #48	; 0x30
 800ec66:	d0f9      	beq.n	800ec5c <_strtod_l+0x2ac>
 800ec68:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ec6c:	2908      	cmp	r1, #8
 800ec6e:	f63f af79 	bhi.w	800eb64 <_strtod_l+0x1b4>
 800ec72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ec76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec78:	9308      	str	r3, [sp, #32]
 800ec7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec7c:	1c59      	adds	r1, r3, #1
 800ec7e:	911d      	str	r1, [sp, #116]	; 0x74
 800ec80:	785b      	ldrb	r3, [r3, #1]
 800ec82:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ec86:	2e09      	cmp	r6, #9
 800ec88:	d937      	bls.n	800ecfa <_strtod_l+0x34a>
 800ec8a:	9e08      	ldr	r6, [sp, #32]
 800ec8c:	1b89      	subs	r1, r1, r6
 800ec8e:	2908      	cmp	r1, #8
 800ec90:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ec94:	dc02      	bgt.n	800ec9c <_strtod_l+0x2ec>
 800ec96:	4576      	cmp	r6, lr
 800ec98:	bfa8      	it	ge
 800ec9a:	4676      	movge	r6, lr
 800ec9c:	f1bc 0f00 	cmp.w	ip, #0
 800eca0:	d000      	beq.n	800eca4 <_strtod_l+0x2f4>
 800eca2:	4276      	negs	r6, r6
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	d14f      	bne.n	800ed48 <_strtod_l+0x398>
 800eca8:	9904      	ldr	r1, [sp, #16]
 800ecaa:	4301      	orrs	r1, r0
 800ecac:	f47f aec2 	bne.w	800ea34 <_strtod_l+0x84>
 800ecb0:	2a00      	cmp	r2, #0
 800ecb2:	f47f aedb 	bne.w	800ea6c <_strtod_l+0xbc>
 800ecb6:	2b69      	cmp	r3, #105	; 0x69
 800ecb8:	d027      	beq.n	800ed0a <_strtod_l+0x35a>
 800ecba:	dc24      	bgt.n	800ed06 <_strtod_l+0x356>
 800ecbc:	2b49      	cmp	r3, #73	; 0x49
 800ecbe:	d024      	beq.n	800ed0a <_strtod_l+0x35a>
 800ecc0:	2b4e      	cmp	r3, #78	; 0x4e
 800ecc2:	f47f aed3 	bne.w	800ea6c <_strtod_l+0xbc>
 800ecc6:	499e      	ldr	r1, [pc, #632]	; (800ef40 <_strtod_l+0x590>)
 800ecc8:	a81d      	add	r0, sp, #116	; 0x74
 800ecca:	f001 fee3 	bl	8010a94 <__match>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	f43f aecc 	beq.w	800ea6c <_strtod_l+0xbc>
 800ecd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2b28      	cmp	r3, #40	; 0x28
 800ecda:	d12d      	bne.n	800ed38 <_strtod_l+0x388>
 800ecdc:	4999      	ldr	r1, [pc, #612]	; (800ef44 <_strtod_l+0x594>)
 800ecde:	aa20      	add	r2, sp, #128	; 0x80
 800ece0:	a81d      	add	r0, sp, #116	; 0x74
 800ece2:	f001 feeb 	bl	8010abc <__hexnan>
 800ece6:	2805      	cmp	r0, #5
 800ece8:	d126      	bne.n	800ed38 <_strtod_l+0x388>
 800ecea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ecf0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ecf4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ecf8:	e69c      	b.n	800ea34 <_strtod_l+0x84>
 800ecfa:	210a      	movs	r1, #10
 800ecfc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ed00:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ed04:	e7b9      	b.n	800ec7a <_strtod_l+0x2ca>
 800ed06:	2b6e      	cmp	r3, #110	; 0x6e
 800ed08:	e7db      	b.n	800ecc2 <_strtod_l+0x312>
 800ed0a:	498f      	ldr	r1, [pc, #572]	; (800ef48 <_strtod_l+0x598>)
 800ed0c:	a81d      	add	r0, sp, #116	; 0x74
 800ed0e:	f001 fec1 	bl	8010a94 <__match>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	f43f aeaa 	beq.w	800ea6c <_strtod_l+0xbc>
 800ed18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed1a:	498c      	ldr	r1, [pc, #560]	; (800ef4c <_strtod_l+0x59c>)
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	a81d      	add	r0, sp, #116	; 0x74
 800ed20:	931d      	str	r3, [sp, #116]	; 0x74
 800ed22:	f001 feb7 	bl	8010a94 <__match>
 800ed26:	b910      	cbnz	r0, 800ed2e <_strtod_l+0x37e>
 800ed28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	931d      	str	r3, [sp, #116]	; 0x74
 800ed2e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ef5c <_strtod_l+0x5ac>
 800ed32:	f04f 0a00 	mov.w	sl, #0
 800ed36:	e67d      	b.n	800ea34 <_strtod_l+0x84>
 800ed38:	4885      	ldr	r0, [pc, #532]	; (800ef50 <_strtod_l+0x5a0>)
 800ed3a:	f002 ffb1 	bl	8011ca0 <nan>
 800ed3e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ed42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ed46:	e675      	b.n	800ea34 <_strtod_l+0x84>
 800ed48:	9b07      	ldr	r3, [sp, #28]
 800ed4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed4c:	1af3      	subs	r3, r6, r3
 800ed4e:	2f00      	cmp	r7, #0
 800ed50:	bf08      	it	eq
 800ed52:	462f      	moveq	r7, r5
 800ed54:	2d10      	cmp	r5, #16
 800ed56:	9308      	str	r3, [sp, #32]
 800ed58:	46a8      	mov	r8, r5
 800ed5a:	bfa8      	it	ge
 800ed5c:	f04f 0810 	movge.w	r8, #16
 800ed60:	f7f1 fbe8 	bl	8000534 <__aeabi_ui2d>
 800ed64:	2d09      	cmp	r5, #9
 800ed66:	4682      	mov	sl, r0
 800ed68:	468b      	mov	fp, r1
 800ed6a:	dd13      	ble.n	800ed94 <_strtod_l+0x3e4>
 800ed6c:	4b79      	ldr	r3, [pc, #484]	; (800ef54 <_strtod_l+0x5a4>)
 800ed6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ed72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ed76:	f7f1 fc57 	bl	8000628 <__aeabi_dmul>
 800ed7a:	4682      	mov	sl, r0
 800ed7c:	4648      	mov	r0, r9
 800ed7e:	468b      	mov	fp, r1
 800ed80:	f7f1 fbd8 	bl	8000534 <__aeabi_ui2d>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4650      	mov	r0, sl
 800ed8a:	4659      	mov	r1, fp
 800ed8c:	f7f1 fa96 	bl	80002bc <__adddf3>
 800ed90:	4682      	mov	sl, r0
 800ed92:	468b      	mov	fp, r1
 800ed94:	2d0f      	cmp	r5, #15
 800ed96:	dc38      	bgt.n	800ee0a <_strtod_l+0x45a>
 800ed98:	9b08      	ldr	r3, [sp, #32]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f43f ae4a 	beq.w	800ea34 <_strtod_l+0x84>
 800eda0:	dd24      	ble.n	800edec <_strtod_l+0x43c>
 800eda2:	2b16      	cmp	r3, #22
 800eda4:	dc0b      	bgt.n	800edbe <_strtod_l+0x40e>
 800eda6:	4d6b      	ldr	r5, [pc, #428]	; (800ef54 <_strtod_l+0x5a4>)
 800eda8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800edac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800edb0:	4652      	mov	r2, sl
 800edb2:	465b      	mov	r3, fp
 800edb4:	f7f1 fc38 	bl	8000628 <__aeabi_dmul>
 800edb8:	4682      	mov	sl, r0
 800edba:	468b      	mov	fp, r1
 800edbc:	e63a      	b.n	800ea34 <_strtod_l+0x84>
 800edbe:	9a08      	ldr	r2, [sp, #32]
 800edc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800edc4:	4293      	cmp	r3, r2
 800edc6:	db20      	blt.n	800ee0a <_strtod_l+0x45a>
 800edc8:	4c62      	ldr	r4, [pc, #392]	; (800ef54 <_strtod_l+0x5a4>)
 800edca:	f1c5 050f 	rsb	r5, r5, #15
 800edce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800edd2:	4652      	mov	r2, sl
 800edd4:	465b      	mov	r3, fp
 800edd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edda:	f7f1 fc25 	bl	8000628 <__aeabi_dmul>
 800edde:	9b08      	ldr	r3, [sp, #32]
 800ede0:	1b5d      	subs	r5, r3, r5
 800ede2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ede6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800edea:	e7e3      	b.n	800edb4 <_strtod_l+0x404>
 800edec:	9b08      	ldr	r3, [sp, #32]
 800edee:	3316      	adds	r3, #22
 800edf0:	db0b      	blt.n	800ee0a <_strtod_l+0x45a>
 800edf2:	9b07      	ldr	r3, [sp, #28]
 800edf4:	4a57      	ldr	r2, [pc, #348]	; (800ef54 <_strtod_l+0x5a4>)
 800edf6:	1b9e      	subs	r6, r3, r6
 800edf8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800edfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee00:	4650      	mov	r0, sl
 800ee02:	4659      	mov	r1, fp
 800ee04:	f7f1 fd3a 	bl	800087c <__aeabi_ddiv>
 800ee08:	e7d6      	b.n	800edb8 <_strtod_l+0x408>
 800ee0a:	9b08      	ldr	r3, [sp, #32]
 800ee0c:	eba5 0808 	sub.w	r8, r5, r8
 800ee10:	4498      	add	r8, r3
 800ee12:	f1b8 0f00 	cmp.w	r8, #0
 800ee16:	dd71      	ble.n	800eefc <_strtod_l+0x54c>
 800ee18:	f018 030f 	ands.w	r3, r8, #15
 800ee1c:	d00a      	beq.n	800ee34 <_strtod_l+0x484>
 800ee1e:	494d      	ldr	r1, [pc, #308]	; (800ef54 <_strtod_l+0x5a4>)
 800ee20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee24:	4652      	mov	r2, sl
 800ee26:	465b      	mov	r3, fp
 800ee28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee2c:	f7f1 fbfc 	bl	8000628 <__aeabi_dmul>
 800ee30:	4682      	mov	sl, r0
 800ee32:	468b      	mov	fp, r1
 800ee34:	f038 080f 	bics.w	r8, r8, #15
 800ee38:	d04d      	beq.n	800eed6 <_strtod_l+0x526>
 800ee3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ee3e:	dd22      	ble.n	800ee86 <_strtod_l+0x4d6>
 800ee40:	2500      	movs	r5, #0
 800ee42:	462e      	mov	r6, r5
 800ee44:	9509      	str	r5, [sp, #36]	; 0x24
 800ee46:	9507      	str	r5, [sp, #28]
 800ee48:	2322      	movs	r3, #34	; 0x22
 800ee4a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ef5c <_strtod_l+0x5ac>
 800ee4e:	6023      	str	r3, [r4, #0]
 800ee50:	f04f 0a00 	mov.w	sl, #0
 800ee54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f43f adec 	beq.w	800ea34 <_strtod_l+0x84>
 800ee5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f001 ff34 	bl	8010ccc <_Bfree>
 800ee64:	9907      	ldr	r1, [sp, #28]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f001 ff30 	bl	8010ccc <_Bfree>
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f001 ff2c 	bl	8010ccc <_Bfree>
 800ee74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee76:	4620      	mov	r0, r4
 800ee78:	f001 ff28 	bl	8010ccc <_Bfree>
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f001 ff24 	bl	8010ccc <_Bfree>
 800ee84:	e5d6      	b.n	800ea34 <_strtod_l+0x84>
 800ee86:	2300      	movs	r3, #0
 800ee88:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ee8c:	4650      	mov	r0, sl
 800ee8e:	4659      	mov	r1, fp
 800ee90:	4699      	mov	r9, r3
 800ee92:	f1b8 0f01 	cmp.w	r8, #1
 800ee96:	dc21      	bgt.n	800eedc <_strtod_l+0x52c>
 800ee98:	b10b      	cbz	r3, 800ee9e <_strtod_l+0x4ee>
 800ee9a:	4682      	mov	sl, r0
 800ee9c:	468b      	mov	fp, r1
 800ee9e:	4b2e      	ldr	r3, [pc, #184]	; (800ef58 <_strtod_l+0x5a8>)
 800eea0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800eea4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800eea8:	4652      	mov	r2, sl
 800eeaa:	465b      	mov	r3, fp
 800eeac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800eeb0:	f7f1 fbba 	bl	8000628 <__aeabi_dmul>
 800eeb4:	4b29      	ldr	r3, [pc, #164]	; (800ef5c <_strtod_l+0x5ac>)
 800eeb6:	460a      	mov	r2, r1
 800eeb8:	400b      	ands	r3, r1
 800eeba:	4929      	ldr	r1, [pc, #164]	; (800ef60 <_strtod_l+0x5b0>)
 800eebc:	428b      	cmp	r3, r1
 800eebe:	4682      	mov	sl, r0
 800eec0:	d8be      	bhi.n	800ee40 <_strtod_l+0x490>
 800eec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800eec6:	428b      	cmp	r3, r1
 800eec8:	bf86      	itte	hi
 800eeca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ef64 <_strtod_l+0x5b4>
 800eece:	f04f 3aff 	movhi.w	sl, #4294967295
 800eed2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800eed6:	2300      	movs	r3, #0
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	e081      	b.n	800efe0 <_strtod_l+0x630>
 800eedc:	f018 0f01 	tst.w	r8, #1
 800eee0:	d007      	beq.n	800eef2 <_strtod_l+0x542>
 800eee2:	4b1d      	ldr	r3, [pc, #116]	; (800ef58 <_strtod_l+0x5a8>)
 800eee4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeec:	f7f1 fb9c 	bl	8000628 <__aeabi_dmul>
 800eef0:	2301      	movs	r3, #1
 800eef2:	f109 0901 	add.w	r9, r9, #1
 800eef6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eefa:	e7ca      	b.n	800ee92 <_strtod_l+0x4e2>
 800eefc:	d0eb      	beq.n	800eed6 <_strtod_l+0x526>
 800eefe:	f1c8 0800 	rsb	r8, r8, #0
 800ef02:	f018 020f 	ands.w	r2, r8, #15
 800ef06:	d00a      	beq.n	800ef1e <_strtod_l+0x56e>
 800ef08:	4b12      	ldr	r3, [pc, #72]	; (800ef54 <_strtod_l+0x5a4>)
 800ef0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef0e:	4650      	mov	r0, sl
 800ef10:	4659      	mov	r1, fp
 800ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef16:	f7f1 fcb1 	bl	800087c <__aeabi_ddiv>
 800ef1a:	4682      	mov	sl, r0
 800ef1c:	468b      	mov	fp, r1
 800ef1e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ef22:	d0d8      	beq.n	800eed6 <_strtod_l+0x526>
 800ef24:	f1b8 0f1f 	cmp.w	r8, #31
 800ef28:	dd1e      	ble.n	800ef68 <_strtod_l+0x5b8>
 800ef2a:	2500      	movs	r5, #0
 800ef2c:	462e      	mov	r6, r5
 800ef2e:	9509      	str	r5, [sp, #36]	; 0x24
 800ef30:	9507      	str	r5, [sp, #28]
 800ef32:	2322      	movs	r3, #34	; 0x22
 800ef34:	f04f 0a00 	mov.w	sl, #0
 800ef38:	f04f 0b00 	mov.w	fp, #0
 800ef3c:	6023      	str	r3, [r4, #0]
 800ef3e:	e789      	b.n	800ee54 <_strtod_l+0x4a4>
 800ef40:	08025da5 	.word	0x08025da5
 800ef44:	08025de8 	.word	0x08025de8
 800ef48:	08025d9d 	.word	0x08025d9d
 800ef4c:	08025fe0 	.word	0x08025fe0
 800ef50:	08025edb 	.word	0x08025edb
 800ef54:	08026160 	.word	0x08026160
 800ef58:	08026138 	.word	0x08026138
 800ef5c:	7ff00000 	.word	0x7ff00000
 800ef60:	7ca00000 	.word	0x7ca00000
 800ef64:	7fefffff 	.word	0x7fefffff
 800ef68:	f018 0310 	ands.w	r3, r8, #16
 800ef6c:	bf18      	it	ne
 800ef6e:	236a      	movne	r3, #106	; 0x6a
 800ef70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f328 <_strtod_l+0x978>
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	4650      	mov	r0, sl
 800ef78:	4659      	mov	r1, fp
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f018 0f01 	tst.w	r8, #1
 800ef80:	d004      	beq.n	800ef8c <_strtod_l+0x5dc>
 800ef82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ef86:	f7f1 fb4f 	bl	8000628 <__aeabi_dmul>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ef90:	f109 0908 	add.w	r9, r9, #8
 800ef94:	d1f2      	bne.n	800ef7c <_strtod_l+0x5cc>
 800ef96:	b10b      	cbz	r3, 800ef9c <_strtod_l+0x5ec>
 800ef98:	4682      	mov	sl, r0
 800ef9a:	468b      	mov	fp, r1
 800ef9c:	9b04      	ldr	r3, [sp, #16]
 800ef9e:	b1bb      	cbz	r3, 800efd0 <_strtod_l+0x620>
 800efa0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800efa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	4659      	mov	r1, fp
 800efac:	dd10      	ble.n	800efd0 <_strtod_l+0x620>
 800efae:	2b1f      	cmp	r3, #31
 800efb0:	f340 8128 	ble.w	800f204 <_strtod_l+0x854>
 800efb4:	2b34      	cmp	r3, #52	; 0x34
 800efb6:	bfde      	ittt	le
 800efb8:	3b20      	suble	r3, #32
 800efba:	f04f 32ff 	movle.w	r2, #4294967295
 800efbe:	fa02 f303 	lslle.w	r3, r2, r3
 800efc2:	f04f 0a00 	mov.w	sl, #0
 800efc6:	bfcc      	ite	gt
 800efc8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800efcc:	ea03 0b01 	andle.w	fp, r3, r1
 800efd0:	2200      	movs	r2, #0
 800efd2:	2300      	movs	r3, #0
 800efd4:	4650      	mov	r0, sl
 800efd6:	4659      	mov	r1, fp
 800efd8:	f7f1 fd8e 	bl	8000af8 <__aeabi_dcmpeq>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d1a4      	bne.n	800ef2a <_strtod_l+0x57a>
 800efe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800efe6:	462b      	mov	r3, r5
 800efe8:	463a      	mov	r2, r7
 800efea:	4620      	mov	r0, r4
 800efec:	f001 feda 	bl	8010da4 <__s2b>
 800eff0:	9009      	str	r0, [sp, #36]	; 0x24
 800eff2:	2800      	cmp	r0, #0
 800eff4:	f43f af24 	beq.w	800ee40 <_strtod_l+0x490>
 800eff8:	9b07      	ldr	r3, [sp, #28]
 800effa:	1b9e      	subs	r6, r3, r6
 800effc:	9b08      	ldr	r3, [sp, #32]
 800effe:	2b00      	cmp	r3, #0
 800f000:	bfb4      	ite	lt
 800f002:	4633      	movlt	r3, r6
 800f004:	2300      	movge	r3, #0
 800f006:	9310      	str	r3, [sp, #64]	; 0x40
 800f008:	9b08      	ldr	r3, [sp, #32]
 800f00a:	2500      	movs	r5, #0
 800f00c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f010:	9318      	str	r3, [sp, #96]	; 0x60
 800f012:	462e      	mov	r6, r5
 800f014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f016:	4620      	mov	r0, r4
 800f018:	6859      	ldr	r1, [r3, #4]
 800f01a:	f001 fe17 	bl	8010c4c <_Balloc>
 800f01e:	9007      	str	r0, [sp, #28]
 800f020:	2800      	cmp	r0, #0
 800f022:	f43f af11 	beq.w	800ee48 <_strtod_l+0x498>
 800f026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f028:	691a      	ldr	r2, [r3, #16]
 800f02a:	3202      	adds	r2, #2
 800f02c:	f103 010c 	add.w	r1, r3, #12
 800f030:	0092      	lsls	r2, r2, #2
 800f032:	300c      	adds	r0, #12
 800f034:	f001 fdfc 	bl	8010c30 <memcpy>
 800f038:	ec4b ab10 	vmov	d0, sl, fp
 800f03c:	aa20      	add	r2, sp, #128	; 0x80
 800f03e:	a91f      	add	r1, sp, #124	; 0x7c
 800f040:	4620      	mov	r0, r4
 800f042:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f046:	f002 f9e9 	bl	801141c <__d2b>
 800f04a:	901e      	str	r0, [sp, #120]	; 0x78
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f43f aefb 	beq.w	800ee48 <_strtod_l+0x498>
 800f052:	2101      	movs	r1, #1
 800f054:	4620      	mov	r0, r4
 800f056:	f001 ff3f 	bl	8010ed8 <__i2b>
 800f05a:	4606      	mov	r6, r0
 800f05c:	2800      	cmp	r0, #0
 800f05e:	f43f aef3 	beq.w	800ee48 <_strtod_l+0x498>
 800f062:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f064:	9904      	ldr	r1, [sp, #16]
 800f066:	2b00      	cmp	r3, #0
 800f068:	bfab      	itete	ge
 800f06a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800f06c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800f06e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800f070:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800f074:	bfac      	ite	ge
 800f076:	eb03 0902 	addge.w	r9, r3, r2
 800f07a:	1ad7      	sublt	r7, r2, r3
 800f07c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f07e:	eba3 0801 	sub.w	r8, r3, r1
 800f082:	4490      	add	r8, r2
 800f084:	4ba3      	ldr	r3, [pc, #652]	; (800f314 <_strtod_l+0x964>)
 800f086:	f108 38ff 	add.w	r8, r8, #4294967295
 800f08a:	4598      	cmp	r8, r3
 800f08c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f090:	f280 80cc 	bge.w	800f22c <_strtod_l+0x87c>
 800f094:	eba3 0308 	sub.w	r3, r3, r8
 800f098:	2b1f      	cmp	r3, #31
 800f09a:	eba2 0203 	sub.w	r2, r2, r3
 800f09e:	f04f 0101 	mov.w	r1, #1
 800f0a2:	f300 80b6 	bgt.w	800f212 <_strtod_l+0x862>
 800f0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800f0aa:	9311      	str	r3, [sp, #68]	; 0x44
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	930c      	str	r3, [sp, #48]	; 0x30
 800f0b0:	eb09 0802 	add.w	r8, r9, r2
 800f0b4:	9b04      	ldr	r3, [sp, #16]
 800f0b6:	45c1      	cmp	r9, r8
 800f0b8:	4417      	add	r7, r2
 800f0ba:	441f      	add	r7, r3
 800f0bc:	464b      	mov	r3, r9
 800f0be:	bfa8      	it	ge
 800f0c0:	4643      	movge	r3, r8
 800f0c2:	42bb      	cmp	r3, r7
 800f0c4:	bfa8      	it	ge
 800f0c6:	463b      	movge	r3, r7
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	bfc2      	ittt	gt
 800f0cc:	eba8 0803 	subgt.w	r8, r8, r3
 800f0d0:	1aff      	subgt	r7, r7, r3
 800f0d2:	eba9 0903 	subgt.w	r9, r9, r3
 800f0d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	dd17      	ble.n	800f10c <_strtod_l+0x75c>
 800f0dc:	4631      	mov	r1, r6
 800f0de:	461a      	mov	r2, r3
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f001 ffb5 	bl	8011050 <__pow5mult>
 800f0e6:	4606      	mov	r6, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	f43f aead 	beq.w	800ee48 <_strtod_l+0x498>
 800f0ee:	4601      	mov	r1, r0
 800f0f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f001 ff06 	bl	8010f04 <__multiply>
 800f0f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	f43f aea4 	beq.w	800ee48 <_strtod_l+0x498>
 800f100:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f102:	4620      	mov	r0, r4
 800f104:	f001 fde2 	bl	8010ccc <_Bfree>
 800f108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f10a:	931e      	str	r3, [sp, #120]	; 0x78
 800f10c:	f1b8 0f00 	cmp.w	r8, #0
 800f110:	f300 8091 	bgt.w	800f236 <_strtod_l+0x886>
 800f114:	9b08      	ldr	r3, [sp, #32]
 800f116:	2b00      	cmp	r3, #0
 800f118:	dd08      	ble.n	800f12c <_strtod_l+0x77c>
 800f11a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f11c:	9907      	ldr	r1, [sp, #28]
 800f11e:	4620      	mov	r0, r4
 800f120:	f001 ff96 	bl	8011050 <__pow5mult>
 800f124:	9007      	str	r0, [sp, #28]
 800f126:	2800      	cmp	r0, #0
 800f128:	f43f ae8e 	beq.w	800ee48 <_strtod_l+0x498>
 800f12c:	2f00      	cmp	r7, #0
 800f12e:	dd08      	ble.n	800f142 <_strtod_l+0x792>
 800f130:	9907      	ldr	r1, [sp, #28]
 800f132:	463a      	mov	r2, r7
 800f134:	4620      	mov	r0, r4
 800f136:	f001 ffe5 	bl	8011104 <__lshift>
 800f13a:	9007      	str	r0, [sp, #28]
 800f13c:	2800      	cmp	r0, #0
 800f13e:	f43f ae83 	beq.w	800ee48 <_strtod_l+0x498>
 800f142:	f1b9 0f00 	cmp.w	r9, #0
 800f146:	dd08      	ble.n	800f15a <_strtod_l+0x7aa>
 800f148:	4631      	mov	r1, r6
 800f14a:	464a      	mov	r2, r9
 800f14c:	4620      	mov	r0, r4
 800f14e:	f001 ffd9 	bl	8011104 <__lshift>
 800f152:	4606      	mov	r6, r0
 800f154:	2800      	cmp	r0, #0
 800f156:	f43f ae77 	beq.w	800ee48 <_strtod_l+0x498>
 800f15a:	9a07      	ldr	r2, [sp, #28]
 800f15c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f15e:	4620      	mov	r0, r4
 800f160:	f002 f858 	bl	8011214 <__mdiff>
 800f164:	4605      	mov	r5, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	f43f ae6e 	beq.w	800ee48 <_strtod_l+0x498>
 800f16c:	68c3      	ldr	r3, [r0, #12]
 800f16e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f170:	2300      	movs	r3, #0
 800f172:	60c3      	str	r3, [r0, #12]
 800f174:	4631      	mov	r1, r6
 800f176:	f002 f831 	bl	80111dc <__mcmp>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	da65      	bge.n	800f24a <_strtod_l+0x89a>
 800f17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f180:	ea53 030a 	orrs.w	r3, r3, sl
 800f184:	f040 8087 	bne.w	800f296 <_strtod_l+0x8e6>
 800f188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f040 8082 	bne.w	800f296 <_strtod_l+0x8e6>
 800f192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f196:	0d1b      	lsrs	r3, r3, #20
 800f198:	051b      	lsls	r3, r3, #20
 800f19a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f19e:	d97a      	bls.n	800f296 <_strtod_l+0x8e6>
 800f1a0:	696b      	ldr	r3, [r5, #20]
 800f1a2:	b913      	cbnz	r3, 800f1aa <_strtod_l+0x7fa>
 800f1a4:	692b      	ldr	r3, [r5, #16]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	dd75      	ble.n	800f296 <_strtod_l+0x8e6>
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f001 ffa8 	bl	8011104 <__lshift>
 800f1b4:	4631      	mov	r1, r6
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	f002 f810 	bl	80111dc <__mcmp>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	dd6a      	ble.n	800f296 <_strtod_l+0x8e6>
 800f1c0:	9904      	ldr	r1, [sp, #16]
 800f1c2:	4a55      	ldr	r2, [pc, #340]	; (800f318 <_strtod_l+0x968>)
 800f1c4:	465b      	mov	r3, fp
 800f1c6:	2900      	cmp	r1, #0
 800f1c8:	f000 8085 	beq.w	800f2d6 <_strtod_l+0x926>
 800f1cc:	ea02 010b 	and.w	r1, r2, fp
 800f1d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f1d4:	dc7f      	bgt.n	800f2d6 <_strtod_l+0x926>
 800f1d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f1da:	f77f aeaa 	ble.w	800ef32 <_strtod_l+0x582>
 800f1de:	4a4f      	ldr	r2, [pc, #316]	; (800f31c <_strtod_l+0x96c>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f1ec:	4659      	mov	r1, fp
 800f1ee:	f7f1 fa1b 	bl	8000628 <__aeabi_dmul>
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4303      	orrs	r3, r0
 800f1f6:	bf08      	it	eq
 800f1f8:	2322      	moveq	r3, #34	; 0x22
 800f1fa:	4682      	mov	sl, r0
 800f1fc:	468b      	mov	fp, r1
 800f1fe:	bf08      	it	eq
 800f200:	6023      	streq	r3, [r4, #0]
 800f202:	e62b      	b.n	800ee5c <_strtod_l+0x4ac>
 800f204:	f04f 32ff 	mov.w	r2, #4294967295
 800f208:	fa02 f303 	lsl.w	r3, r2, r3
 800f20c:	ea03 0a0a 	and.w	sl, r3, sl
 800f210:	e6de      	b.n	800efd0 <_strtod_l+0x620>
 800f212:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f216:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f21a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f21e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f222:	fa01 f308 	lsl.w	r3, r1, r8
 800f226:	930c      	str	r3, [sp, #48]	; 0x30
 800f228:	9111      	str	r1, [sp, #68]	; 0x44
 800f22a:	e741      	b.n	800f0b0 <_strtod_l+0x700>
 800f22c:	2300      	movs	r3, #0
 800f22e:	930c      	str	r3, [sp, #48]	; 0x30
 800f230:	2301      	movs	r3, #1
 800f232:	9311      	str	r3, [sp, #68]	; 0x44
 800f234:	e73c      	b.n	800f0b0 <_strtod_l+0x700>
 800f236:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f238:	4642      	mov	r2, r8
 800f23a:	4620      	mov	r0, r4
 800f23c:	f001 ff62 	bl	8011104 <__lshift>
 800f240:	901e      	str	r0, [sp, #120]	; 0x78
 800f242:	2800      	cmp	r0, #0
 800f244:	f47f af66 	bne.w	800f114 <_strtod_l+0x764>
 800f248:	e5fe      	b.n	800ee48 <_strtod_l+0x498>
 800f24a:	465f      	mov	r7, fp
 800f24c:	d16e      	bne.n	800f32c <_strtod_l+0x97c>
 800f24e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f254:	b342      	cbz	r2, 800f2a8 <_strtod_l+0x8f8>
 800f256:	4a32      	ldr	r2, [pc, #200]	; (800f320 <_strtod_l+0x970>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d128      	bne.n	800f2ae <_strtod_l+0x8fe>
 800f25c:	9b04      	ldr	r3, [sp, #16]
 800f25e:	4650      	mov	r0, sl
 800f260:	b1eb      	cbz	r3, 800f29e <_strtod_l+0x8ee>
 800f262:	4a2d      	ldr	r2, [pc, #180]	; (800f318 <_strtod_l+0x968>)
 800f264:	403a      	ands	r2, r7
 800f266:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f26a:	f04f 31ff 	mov.w	r1, #4294967295
 800f26e:	d819      	bhi.n	800f2a4 <_strtod_l+0x8f4>
 800f270:	0d12      	lsrs	r2, r2, #20
 800f272:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f276:	fa01 f303 	lsl.w	r3, r1, r3
 800f27a:	4298      	cmp	r0, r3
 800f27c:	d117      	bne.n	800f2ae <_strtod_l+0x8fe>
 800f27e:	4b29      	ldr	r3, [pc, #164]	; (800f324 <_strtod_l+0x974>)
 800f280:	429f      	cmp	r7, r3
 800f282:	d102      	bne.n	800f28a <_strtod_l+0x8da>
 800f284:	3001      	adds	r0, #1
 800f286:	f43f addf 	beq.w	800ee48 <_strtod_l+0x498>
 800f28a:	4b23      	ldr	r3, [pc, #140]	; (800f318 <_strtod_l+0x968>)
 800f28c:	403b      	ands	r3, r7
 800f28e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f292:	f04f 0a00 	mov.w	sl, #0
 800f296:	9b04      	ldr	r3, [sp, #16]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d1a0      	bne.n	800f1de <_strtod_l+0x82e>
 800f29c:	e5de      	b.n	800ee5c <_strtod_l+0x4ac>
 800f29e:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a2:	e7ea      	b.n	800f27a <_strtod_l+0x8ca>
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	e7e8      	b.n	800f27a <_strtod_l+0x8ca>
 800f2a8:	ea53 030a 	orrs.w	r3, r3, sl
 800f2ac:	d088      	beq.n	800f1c0 <_strtod_l+0x810>
 800f2ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2b0:	b1db      	cbz	r3, 800f2ea <_strtod_l+0x93a>
 800f2b2:	423b      	tst	r3, r7
 800f2b4:	d0ef      	beq.n	800f296 <_strtod_l+0x8e6>
 800f2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2b8:	9a04      	ldr	r2, [sp, #16]
 800f2ba:	4650      	mov	r0, sl
 800f2bc:	4659      	mov	r1, fp
 800f2be:	b1c3      	cbz	r3, 800f2f2 <_strtod_l+0x942>
 800f2c0:	f7ff fb58 	bl	800e974 <sulp>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f2cc:	f7f0 fff6 	bl	80002bc <__adddf3>
 800f2d0:	4682      	mov	sl, r0
 800f2d2:	468b      	mov	fp, r1
 800f2d4:	e7df      	b.n	800f296 <_strtod_l+0x8e6>
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f2dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f2e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f2e4:	f04f 3aff 	mov.w	sl, #4294967295
 800f2e8:	e7d5      	b.n	800f296 <_strtod_l+0x8e6>
 800f2ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f2ec:	ea13 0f0a 	tst.w	r3, sl
 800f2f0:	e7e0      	b.n	800f2b4 <_strtod_l+0x904>
 800f2f2:	f7ff fb3f 	bl	800e974 <sulp>
 800f2f6:	4602      	mov	r2, r0
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f2fe:	f7f0 ffdb 	bl	80002b8 <__aeabi_dsub>
 800f302:	2200      	movs	r2, #0
 800f304:	2300      	movs	r3, #0
 800f306:	4682      	mov	sl, r0
 800f308:	468b      	mov	fp, r1
 800f30a:	f7f1 fbf5 	bl	8000af8 <__aeabi_dcmpeq>
 800f30e:	2800      	cmp	r0, #0
 800f310:	d0c1      	beq.n	800f296 <_strtod_l+0x8e6>
 800f312:	e60e      	b.n	800ef32 <_strtod_l+0x582>
 800f314:	fffffc02 	.word	0xfffffc02
 800f318:	7ff00000 	.word	0x7ff00000
 800f31c:	39500000 	.word	0x39500000
 800f320:	000fffff 	.word	0x000fffff
 800f324:	7fefffff 	.word	0x7fefffff
 800f328:	08025e00 	.word	0x08025e00
 800f32c:	4631      	mov	r1, r6
 800f32e:	4628      	mov	r0, r5
 800f330:	f002 f8d0 	bl	80114d4 <__ratio>
 800f334:	ec59 8b10 	vmov	r8, r9, d0
 800f338:	ee10 0a10 	vmov	r0, s0
 800f33c:	2200      	movs	r2, #0
 800f33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f342:	4649      	mov	r1, r9
 800f344:	f7f1 fbec 	bl	8000b20 <__aeabi_dcmple>
 800f348:	2800      	cmp	r0, #0
 800f34a:	d07c      	beq.n	800f446 <_strtod_l+0xa96>
 800f34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d04c      	beq.n	800f3ec <_strtod_l+0xa3c>
 800f352:	4b95      	ldr	r3, [pc, #596]	; (800f5a8 <_strtod_l+0xbf8>)
 800f354:	2200      	movs	r2, #0
 800f356:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f35a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f5a8 <_strtod_l+0xbf8>
 800f35e:	f04f 0800 	mov.w	r8, #0
 800f362:	4b92      	ldr	r3, [pc, #584]	; (800f5ac <_strtod_l+0xbfc>)
 800f364:	403b      	ands	r3, r7
 800f366:	9311      	str	r3, [sp, #68]	; 0x44
 800f368:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f36a:	4b91      	ldr	r3, [pc, #580]	; (800f5b0 <_strtod_l+0xc00>)
 800f36c:	429a      	cmp	r2, r3
 800f36e:	f040 80b2 	bne.w	800f4d6 <_strtod_l+0xb26>
 800f372:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f37a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f37e:	ec4b ab10 	vmov	d0, sl, fp
 800f382:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f386:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f38a:	f001 ffcb 	bl	8011324 <__ulp>
 800f38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f392:	ec53 2b10 	vmov	r2, r3, d0
 800f396:	f7f1 f947 	bl	8000628 <__aeabi_dmul>
 800f39a:	4652      	mov	r2, sl
 800f39c:	465b      	mov	r3, fp
 800f39e:	f7f0 ff8d 	bl	80002bc <__adddf3>
 800f3a2:	460b      	mov	r3, r1
 800f3a4:	4981      	ldr	r1, [pc, #516]	; (800f5ac <_strtod_l+0xbfc>)
 800f3a6:	4a83      	ldr	r2, [pc, #524]	; (800f5b4 <_strtod_l+0xc04>)
 800f3a8:	4019      	ands	r1, r3
 800f3aa:	4291      	cmp	r1, r2
 800f3ac:	4682      	mov	sl, r0
 800f3ae:	d95e      	bls.n	800f46e <_strtod_l+0xabe>
 800f3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d103      	bne.n	800f3c2 <_strtod_l+0xa12>
 800f3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3bc:	3301      	adds	r3, #1
 800f3be:	f43f ad43 	beq.w	800ee48 <_strtod_l+0x498>
 800f3c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f5c0 <_strtod_l+0xc10>
 800f3c6:	f04f 3aff 	mov.w	sl, #4294967295
 800f3ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f001 fc7d 	bl	8010ccc <_Bfree>
 800f3d2:	9907      	ldr	r1, [sp, #28]
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	f001 fc79 	bl	8010ccc <_Bfree>
 800f3da:	4631      	mov	r1, r6
 800f3dc:	4620      	mov	r0, r4
 800f3de:	f001 fc75 	bl	8010ccc <_Bfree>
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	f001 fc71 	bl	8010ccc <_Bfree>
 800f3ea:	e613      	b.n	800f014 <_strtod_l+0x664>
 800f3ec:	f1ba 0f00 	cmp.w	sl, #0
 800f3f0:	d11b      	bne.n	800f42a <_strtod_l+0xa7a>
 800f3f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3f6:	b9f3      	cbnz	r3, 800f436 <_strtod_l+0xa86>
 800f3f8:	4b6b      	ldr	r3, [pc, #428]	; (800f5a8 <_strtod_l+0xbf8>)
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f1 fb84 	bl	8000b0c <__aeabi_dcmplt>
 800f404:	b9d0      	cbnz	r0, 800f43c <_strtod_l+0xa8c>
 800f406:	4640      	mov	r0, r8
 800f408:	4649      	mov	r1, r9
 800f40a:	4b6b      	ldr	r3, [pc, #428]	; (800f5b8 <_strtod_l+0xc08>)
 800f40c:	2200      	movs	r2, #0
 800f40e:	f7f1 f90b 	bl	8000628 <__aeabi_dmul>
 800f412:	4680      	mov	r8, r0
 800f414:	4689      	mov	r9, r1
 800f416:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f41a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f41e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f420:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f424:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f428:	e79b      	b.n	800f362 <_strtod_l+0x9b2>
 800f42a:	f1ba 0f01 	cmp.w	sl, #1
 800f42e:	d102      	bne.n	800f436 <_strtod_l+0xa86>
 800f430:	2f00      	cmp	r7, #0
 800f432:	f43f ad7e 	beq.w	800ef32 <_strtod_l+0x582>
 800f436:	4b61      	ldr	r3, [pc, #388]	; (800f5bc <_strtod_l+0xc0c>)
 800f438:	2200      	movs	r2, #0
 800f43a:	e78c      	b.n	800f356 <_strtod_l+0x9a6>
 800f43c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f5b8 <_strtod_l+0xc08>
 800f440:	f04f 0800 	mov.w	r8, #0
 800f444:	e7e7      	b.n	800f416 <_strtod_l+0xa66>
 800f446:	4b5c      	ldr	r3, [pc, #368]	; (800f5b8 <_strtod_l+0xc08>)
 800f448:	4640      	mov	r0, r8
 800f44a:	4649      	mov	r1, r9
 800f44c:	2200      	movs	r2, #0
 800f44e:	f7f1 f8eb 	bl	8000628 <__aeabi_dmul>
 800f452:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f454:	4680      	mov	r8, r0
 800f456:	4689      	mov	r9, r1
 800f458:	b933      	cbnz	r3, 800f468 <_strtod_l+0xab8>
 800f45a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f45e:	9012      	str	r0, [sp, #72]	; 0x48
 800f460:	9313      	str	r3, [sp, #76]	; 0x4c
 800f462:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f466:	e7dd      	b.n	800f424 <_strtod_l+0xa74>
 800f468:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f46c:	e7f9      	b.n	800f462 <_strtod_l+0xab2>
 800f46e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f472:	9b04      	ldr	r3, [sp, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d1a8      	bne.n	800f3ca <_strtod_l+0xa1a>
 800f478:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f47c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f47e:	0d1b      	lsrs	r3, r3, #20
 800f480:	051b      	lsls	r3, r3, #20
 800f482:	429a      	cmp	r2, r3
 800f484:	d1a1      	bne.n	800f3ca <_strtod_l+0xa1a>
 800f486:	4640      	mov	r0, r8
 800f488:	4649      	mov	r1, r9
 800f48a:	f7f1 fc2d 	bl	8000ce8 <__aeabi_d2lz>
 800f48e:	f7f1 f89d 	bl	80005cc <__aeabi_l2d>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4640      	mov	r0, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	f7f0 ff0d 	bl	80002b8 <__aeabi_dsub>
 800f49e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4a4:	ea43 030a 	orr.w	r3, r3, sl
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	4680      	mov	r8, r0
 800f4ac:	4689      	mov	r9, r1
 800f4ae:	d053      	beq.n	800f558 <_strtod_l+0xba8>
 800f4b0:	a335      	add	r3, pc, #212	; (adr r3, 800f588 <_strtod_l+0xbd8>)
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	f7f1 fb29 	bl	8000b0c <__aeabi_dcmplt>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	f47f acce 	bne.w	800ee5c <_strtod_l+0x4ac>
 800f4c0:	a333      	add	r3, pc, #204	; (adr r3, 800f590 <_strtod_l+0xbe0>)
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	4649      	mov	r1, r9
 800f4ca:	f7f1 fb3d 	bl	8000b48 <__aeabi_dcmpgt>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	f43f af7b 	beq.w	800f3ca <_strtod_l+0xa1a>
 800f4d4:	e4c2      	b.n	800ee5c <_strtod_l+0x4ac>
 800f4d6:	9b04      	ldr	r3, [sp, #16]
 800f4d8:	b333      	cbz	r3, 800f528 <_strtod_l+0xb78>
 800f4da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f4dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f4e0:	d822      	bhi.n	800f528 <_strtod_l+0xb78>
 800f4e2:	a32d      	add	r3, pc, #180	; (adr r3, 800f598 <_strtod_l+0xbe8>)
 800f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	f7f1 fb18 	bl	8000b20 <__aeabi_dcmple>
 800f4f0:	b1a0      	cbz	r0, 800f51c <_strtod_l+0xb6c>
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	f7f1 fb6f 	bl	8000bd8 <__aeabi_d2uiz>
 800f4fa:	2801      	cmp	r0, #1
 800f4fc:	bf38      	it	cc
 800f4fe:	2001      	movcc	r0, #1
 800f500:	f7f1 f818 	bl	8000534 <__aeabi_ui2d>
 800f504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f506:	4680      	mov	r8, r0
 800f508:	4689      	mov	r9, r1
 800f50a:	bb13      	cbnz	r3, 800f552 <_strtod_l+0xba2>
 800f50c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f510:	9014      	str	r0, [sp, #80]	; 0x50
 800f512:	9315      	str	r3, [sp, #84]	; 0x54
 800f514:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f518:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f51e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f520:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f524:	1a9b      	subs	r3, r3, r2
 800f526:	930d      	str	r3, [sp, #52]	; 0x34
 800f528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f52c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f530:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f534:	f001 fef6 	bl	8011324 <__ulp>
 800f538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f53c:	ec53 2b10 	vmov	r2, r3, d0
 800f540:	f7f1 f872 	bl	8000628 <__aeabi_dmul>
 800f544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f548:	f7f0 feb8 	bl	80002bc <__adddf3>
 800f54c:	4682      	mov	sl, r0
 800f54e:	468b      	mov	fp, r1
 800f550:	e78f      	b.n	800f472 <_strtod_l+0xac2>
 800f552:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f556:	e7dd      	b.n	800f514 <_strtod_l+0xb64>
 800f558:	a311      	add	r3, pc, #68	; (adr r3, 800f5a0 <_strtod_l+0xbf0>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	f7f1 fad5 	bl	8000b0c <__aeabi_dcmplt>
 800f562:	e7b4      	b.n	800f4ce <_strtod_l+0xb1e>
 800f564:	2300      	movs	r3, #0
 800f566:	930e      	str	r3, [sp, #56]	; 0x38
 800f568:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f56a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	f7ff ba65 	b.w	800ea3c <_strtod_l+0x8c>
 800f572:	2b65      	cmp	r3, #101	; 0x65
 800f574:	f43f ab5d 	beq.w	800ec32 <_strtod_l+0x282>
 800f578:	2b45      	cmp	r3, #69	; 0x45
 800f57a:	f43f ab5a 	beq.w	800ec32 <_strtod_l+0x282>
 800f57e:	2201      	movs	r2, #1
 800f580:	f7ff bb92 	b.w	800eca8 <_strtod_l+0x2f8>
 800f584:	f3af 8000 	nop.w
 800f588:	94a03595 	.word	0x94a03595
 800f58c:	3fdfffff 	.word	0x3fdfffff
 800f590:	35afe535 	.word	0x35afe535
 800f594:	3fe00000 	.word	0x3fe00000
 800f598:	ffc00000 	.word	0xffc00000
 800f59c:	41dfffff 	.word	0x41dfffff
 800f5a0:	94a03595 	.word	0x94a03595
 800f5a4:	3fcfffff 	.word	0x3fcfffff
 800f5a8:	3ff00000 	.word	0x3ff00000
 800f5ac:	7ff00000 	.word	0x7ff00000
 800f5b0:	7fe00000 	.word	0x7fe00000
 800f5b4:	7c9fffff 	.word	0x7c9fffff
 800f5b8:	3fe00000 	.word	0x3fe00000
 800f5bc:	bff00000 	.word	0xbff00000
 800f5c0:	7fefffff 	.word	0x7fefffff

0800f5c4 <_strtod_r>:
 800f5c4:	4b01      	ldr	r3, [pc, #4]	; (800f5cc <_strtod_r+0x8>)
 800f5c6:	f7ff b9f3 	b.w	800e9b0 <_strtod_l>
 800f5ca:	bf00      	nop
 800f5cc:	200000a8 	.word	0x200000a8

0800f5d0 <strtod>:
 800f5d0:	460a      	mov	r2, r1
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	4802      	ldr	r0, [pc, #8]	; (800f5e0 <strtod+0x10>)
 800f5d6:	4b03      	ldr	r3, [pc, #12]	; (800f5e4 <strtod+0x14>)
 800f5d8:	6800      	ldr	r0, [r0, #0]
 800f5da:	f7ff b9e9 	b.w	800e9b0 <_strtod_l>
 800f5de:	bf00      	nop
 800f5e0:	20000040 	.word	0x20000040
 800f5e4:	200000a8 	.word	0x200000a8

0800f5e8 <strtok>:
 800f5e8:	4b16      	ldr	r3, [pc, #88]	; (800f644 <strtok+0x5c>)
 800f5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f5ec:	681e      	ldr	r6, [r3, #0]
 800f5ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	b9fc      	cbnz	r4, 800f634 <strtok+0x4c>
 800f5f4:	2050      	movs	r0, #80	; 0x50
 800f5f6:	9101      	str	r1, [sp, #4]
 800f5f8:	f001 fb00 	bl	8010bfc <malloc>
 800f5fc:	9901      	ldr	r1, [sp, #4]
 800f5fe:	65b0      	str	r0, [r6, #88]	; 0x58
 800f600:	4602      	mov	r2, r0
 800f602:	b920      	cbnz	r0, 800f60e <strtok+0x26>
 800f604:	4b10      	ldr	r3, [pc, #64]	; (800f648 <strtok+0x60>)
 800f606:	4811      	ldr	r0, [pc, #68]	; (800f64c <strtok+0x64>)
 800f608:	2157      	movs	r1, #87	; 0x57
 800f60a:	f000 f8d9 	bl	800f7c0 <__assert_func>
 800f60e:	e9c0 4400 	strd	r4, r4, [r0]
 800f612:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f616:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f61a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f61e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f622:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f626:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f62a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f62e:	6184      	str	r4, [r0, #24]
 800f630:	7704      	strb	r4, [r0, #28]
 800f632:	6244      	str	r4, [r0, #36]	; 0x24
 800f634:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f636:	2301      	movs	r3, #1
 800f638:	4628      	mov	r0, r5
 800f63a:	b002      	add	sp, #8
 800f63c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f640:	f000 b806 	b.w	800f650 <__strtok_r>
 800f644:	20000040 	.word	0x20000040
 800f648:	08025e28 	.word	0x08025e28
 800f64c:	08025e3f 	.word	0x08025e3f

0800f650 <__strtok_r>:
 800f650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f652:	b908      	cbnz	r0, 800f658 <__strtok_r+0x8>
 800f654:	6810      	ldr	r0, [r2, #0]
 800f656:	b188      	cbz	r0, 800f67c <__strtok_r+0x2c>
 800f658:	4604      	mov	r4, r0
 800f65a:	4620      	mov	r0, r4
 800f65c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f660:	460f      	mov	r7, r1
 800f662:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f666:	b91e      	cbnz	r6, 800f670 <__strtok_r+0x20>
 800f668:	b965      	cbnz	r5, 800f684 <__strtok_r+0x34>
 800f66a:	6015      	str	r5, [r2, #0]
 800f66c:	4628      	mov	r0, r5
 800f66e:	e005      	b.n	800f67c <__strtok_r+0x2c>
 800f670:	42b5      	cmp	r5, r6
 800f672:	d1f6      	bne.n	800f662 <__strtok_r+0x12>
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1f0      	bne.n	800f65a <__strtok_r+0xa>
 800f678:	6014      	str	r4, [r2, #0]
 800f67a:	7003      	strb	r3, [r0, #0]
 800f67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f67e:	461c      	mov	r4, r3
 800f680:	e00c      	b.n	800f69c <__strtok_r+0x4c>
 800f682:	b915      	cbnz	r5, 800f68a <__strtok_r+0x3a>
 800f684:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f688:	460e      	mov	r6, r1
 800f68a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f68e:	42ab      	cmp	r3, r5
 800f690:	d1f7      	bne.n	800f682 <__strtok_r+0x32>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d0f3      	beq.n	800f67e <__strtok_r+0x2e>
 800f696:	2300      	movs	r3, #0
 800f698:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f69c:	6014      	str	r4, [r2, #0]
 800f69e:	e7ed      	b.n	800f67c <__strtok_r+0x2c>

0800f6a0 <_strtol_l.isra.0>:
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6a6:	d001      	beq.n	800f6ac <_strtol_l.isra.0+0xc>
 800f6a8:	2b24      	cmp	r3, #36	; 0x24
 800f6aa:	d906      	bls.n	800f6ba <_strtol_l.isra.0+0x1a>
 800f6ac:	f7fe fa90 	bl	800dbd0 <__errno>
 800f6b0:	2316      	movs	r3, #22
 800f6b2:	6003      	str	r3, [r0, #0]
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ba:	4f3a      	ldr	r7, [pc, #232]	; (800f7a4 <_strtol_l.isra.0+0x104>)
 800f6bc:	468e      	mov	lr, r1
 800f6be:	4676      	mov	r6, lr
 800f6c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f6c4:	5de5      	ldrb	r5, [r4, r7]
 800f6c6:	f015 0508 	ands.w	r5, r5, #8
 800f6ca:	d1f8      	bne.n	800f6be <_strtol_l.isra.0+0x1e>
 800f6cc:	2c2d      	cmp	r4, #45	; 0x2d
 800f6ce:	d134      	bne.n	800f73a <_strtol_l.isra.0+0x9a>
 800f6d0:	f89e 4000 	ldrb.w	r4, [lr]
 800f6d4:	f04f 0801 	mov.w	r8, #1
 800f6d8:	f106 0e02 	add.w	lr, r6, #2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d05c      	beq.n	800f79a <_strtol_l.isra.0+0xfa>
 800f6e0:	2b10      	cmp	r3, #16
 800f6e2:	d10c      	bne.n	800f6fe <_strtol_l.isra.0+0x5e>
 800f6e4:	2c30      	cmp	r4, #48	; 0x30
 800f6e6:	d10a      	bne.n	800f6fe <_strtol_l.isra.0+0x5e>
 800f6e8:	f89e 4000 	ldrb.w	r4, [lr]
 800f6ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f6f0:	2c58      	cmp	r4, #88	; 0x58
 800f6f2:	d14d      	bne.n	800f790 <_strtol_l.isra.0+0xf0>
 800f6f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f6f8:	2310      	movs	r3, #16
 800f6fa:	f10e 0e02 	add.w	lr, lr, #2
 800f6fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f702:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f706:	2600      	movs	r6, #0
 800f708:	fbbc f9f3 	udiv	r9, ip, r3
 800f70c:	4635      	mov	r5, r6
 800f70e:	fb03 ca19 	mls	sl, r3, r9, ip
 800f712:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f716:	2f09      	cmp	r7, #9
 800f718:	d818      	bhi.n	800f74c <_strtol_l.isra.0+0xac>
 800f71a:	463c      	mov	r4, r7
 800f71c:	42a3      	cmp	r3, r4
 800f71e:	dd24      	ble.n	800f76a <_strtol_l.isra.0+0xca>
 800f720:	2e00      	cmp	r6, #0
 800f722:	db1f      	blt.n	800f764 <_strtol_l.isra.0+0xc4>
 800f724:	45a9      	cmp	r9, r5
 800f726:	d31d      	bcc.n	800f764 <_strtol_l.isra.0+0xc4>
 800f728:	d101      	bne.n	800f72e <_strtol_l.isra.0+0x8e>
 800f72a:	45a2      	cmp	sl, r4
 800f72c:	db1a      	blt.n	800f764 <_strtol_l.isra.0+0xc4>
 800f72e:	fb05 4503 	mla	r5, r5, r3, r4
 800f732:	2601      	movs	r6, #1
 800f734:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f738:	e7eb      	b.n	800f712 <_strtol_l.isra.0+0x72>
 800f73a:	2c2b      	cmp	r4, #43	; 0x2b
 800f73c:	bf08      	it	eq
 800f73e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f742:	46a8      	mov	r8, r5
 800f744:	bf08      	it	eq
 800f746:	f106 0e02 	addeq.w	lr, r6, #2
 800f74a:	e7c7      	b.n	800f6dc <_strtol_l.isra.0+0x3c>
 800f74c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f750:	2f19      	cmp	r7, #25
 800f752:	d801      	bhi.n	800f758 <_strtol_l.isra.0+0xb8>
 800f754:	3c37      	subs	r4, #55	; 0x37
 800f756:	e7e1      	b.n	800f71c <_strtol_l.isra.0+0x7c>
 800f758:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f75c:	2f19      	cmp	r7, #25
 800f75e:	d804      	bhi.n	800f76a <_strtol_l.isra.0+0xca>
 800f760:	3c57      	subs	r4, #87	; 0x57
 800f762:	e7db      	b.n	800f71c <_strtol_l.isra.0+0x7c>
 800f764:	f04f 36ff 	mov.w	r6, #4294967295
 800f768:	e7e4      	b.n	800f734 <_strtol_l.isra.0+0x94>
 800f76a:	2e00      	cmp	r6, #0
 800f76c:	da05      	bge.n	800f77a <_strtol_l.isra.0+0xda>
 800f76e:	2322      	movs	r3, #34	; 0x22
 800f770:	6003      	str	r3, [r0, #0]
 800f772:	4665      	mov	r5, ip
 800f774:	b942      	cbnz	r2, 800f788 <_strtol_l.isra.0+0xe8>
 800f776:	4628      	mov	r0, r5
 800f778:	e79d      	b.n	800f6b6 <_strtol_l.isra.0+0x16>
 800f77a:	f1b8 0f00 	cmp.w	r8, #0
 800f77e:	d000      	beq.n	800f782 <_strtol_l.isra.0+0xe2>
 800f780:	426d      	negs	r5, r5
 800f782:	2a00      	cmp	r2, #0
 800f784:	d0f7      	beq.n	800f776 <_strtol_l.isra.0+0xd6>
 800f786:	b10e      	cbz	r6, 800f78c <_strtol_l.isra.0+0xec>
 800f788:	f10e 31ff 	add.w	r1, lr, #4294967295
 800f78c:	6011      	str	r1, [r2, #0]
 800f78e:	e7f2      	b.n	800f776 <_strtol_l.isra.0+0xd6>
 800f790:	2430      	movs	r4, #48	; 0x30
 800f792:	2b00      	cmp	r3, #0
 800f794:	d1b3      	bne.n	800f6fe <_strtol_l.isra.0+0x5e>
 800f796:	2308      	movs	r3, #8
 800f798:	e7b1      	b.n	800f6fe <_strtol_l.isra.0+0x5e>
 800f79a:	2c30      	cmp	r4, #48	; 0x30
 800f79c:	d0a4      	beq.n	800f6e8 <_strtol_l.isra.0+0x48>
 800f79e:	230a      	movs	r3, #10
 800f7a0:	e7ad      	b.n	800f6fe <_strtol_l.isra.0+0x5e>
 800f7a2:	bf00      	nop
 800f7a4:	08025edd 	.word	0x08025edd

0800f7a8 <_strtol_r>:
 800f7a8:	f7ff bf7a 	b.w	800f6a0 <_strtol_l.isra.0>

0800f7ac <strtol>:
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	460a      	mov	r2, r1
 800f7b0:	4601      	mov	r1, r0
 800f7b2:	4802      	ldr	r0, [pc, #8]	; (800f7bc <strtol+0x10>)
 800f7b4:	6800      	ldr	r0, [r0, #0]
 800f7b6:	f7ff bf73 	b.w	800f6a0 <_strtol_l.isra.0>
 800f7ba:	bf00      	nop
 800f7bc:	20000040 	.word	0x20000040

0800f7c0 <__assert_func>:
 800f7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7c2:	4614      	mov	r4, r2
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <__assert_func+0x2c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4605      	mov	r5, r0
 800f7cc:	68d8      	ldr	r0, [r3, #12]
 800f7ce:	b14c      	cbz	r4, 800f7e4 <__assert_func+0x24>
 800f7d0:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <__assert_func+0x30>)
 800f7d2:	9100      	str	r1, [sp, #0]
 800f7d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7d8:	4906      	ldr	r1, [pc, #24]	; (800f7f4 <__assert_func+0x34>)
 800f7da:	462b      	mov	r3, r5
 800f7dc:	f000 fe88 	bl	80104f0 <fiprintf>
 800f7e0:	f002 fb56 	bl	8011e90 <abort>
 800f7e4:	4b04      	ldr	r3, [pc, #16]	; (800f7f8 <__assert_func+0x38>)
 800f7e6:	461c      	mov	r4, r3
 800f7e8:	e7f3      	b.n	800f7d2 <__assert_func+0x12>
 800f7ea:	bf00      	nop
 800f7ec:	20000040 	.word	0x20000040
 800f7f0:	08025ea0 	.word	0x08025ea0
 800f7f4:	08025ead 	.word	0x08025ead
 800f7f8:	08025edb 	.word	0x08025edb

0800f7fc <quorem>:
 800f7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f800:	6903      	ldr	r3, [r0, #16]
 800f802:	690c      	ldr	r4, [r1, #16]
 800f804:	42a3      	cmp	r3, r4
 800f806:	4607      	mov	r7, r0
 800f808:	f2c0 8081 	blt.w	800f90e <quorem+0x112>
 800f80c:	3c01      	subs	r4, #1
 800f80e:	f101 0814 	add.w	r8, r1, #20
 800f812:	f100 0514 	add.w	r5, r0, #20
 800f816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f81a:	9301      	str	r3, [sp, #4]
 800f81c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f824:	3301      	adds	r3, #1
 800f826:	429a      	cmp	r2, r3
 800f828:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f82c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f830:	fbb2 f6f3 	udiv	r6, r2, r3
 800f834:	d331      	bcc.n	800f89a <quorem+0x9e>
 800f836:	f04f 0e00 	mov.w	lr, #0
 800f83a:	4640      	mov	r0, r8
 800f83c:	46ac      	mov	ip, r5
 800f83e:	46f2      	mov	sl, lr
 800f840:	f850 2b04 	ldr.w	r2, [r0], #4
 800f844:	b293      	uxth	r3, r2
 800f846:	fb06 e303 	mla	r3, r6, r3, lr
 800f84a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f84e:	b29b      	uxth	r3, r3
 800f850:	ebaa 0303 	sub.w	r3, sl, r3
 800f854:	0c12      	lsrs	r2, r2, #16
 800f856:	f8dc a000 	ldr.w	sl, [ip]
 800f85a:	fb06 e202 	mla	r2, r6, r2, lr
 800f85e:	fa13 f38a 	uxtah	r3, r3, sl
 800f862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f866:	fa1f fa82 	uxth.w	sl, r2
 800f86a:	f8dc 2000 	ldr.w	r2, [ip]
 800f86e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f876:	b29b      	uxth	r3, r3
 800f878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f87c:	4581      	cmp	r9, r0
 800f87e:	f84c 3b04 	str.w	r3, [ip], #4
 800f882:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f886:	d2db      	bcs.n	800f840 <quorem+0x44>
 800f888:	f855 300b 	ldr.w	r3, [r5, fp]
 800f88c:	b92b      	cbnz	r3, 800f89a <quorem+0x9e>
 800f88e:	9b01      	ldr	r3, [sp, #4]
 800f890:	3b04      	subs	r3, #4
 800f892:	429d      	cmp	r5, r3
 800f894:	461a      	mov	r2, r3
 800f896:	d32e      	bcc.n	800f8f6 <quorem+0xfa>
 800f898:	613c      	str	r4, [r7, #16]
 800f89a:	4638      	mov	r0, r7
 800f89c:	f001 fc9e 	bl	80111dc <__mcmp>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	db24      	blt.n	800f8ee <quorem+0xf2>
 800f8a4:	3601      	adds	r6, #1
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f04f 0c00 	mov.w	ip, #0
 800f8ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8b0:	f8d0 e000 	ldr.w	lr, [r0]
 800f8b4:	b293      	uxth	r3, r2
 800f8b6:	ebac 0303 	sub.w	r3, ip, r3
 800f8ba:	0c12      	lsrs	r2, r2, #16
 800f8bc:	fa13 f38e 	uxtah	r3, r3, lr
 800f8c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f8c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8ce:	45c1      	cmp	r9, r8
 800f8d0:	f840 3b04 	str.w	r3, [r0], #4
 800f8d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f8d8:	d2e8      	bcs.n	800f8ac <quorem+0xb0>
 800f8da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8e2:	b922      	cbnz	r2, 800f8ee <quorem+0xf2>
 800f8e4:	3b04      	subs	r3, #4
 800f8e6:	429d      	cmp	r5, r3
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	d30a      	bcc.n	800f902 <quorem+0x106>
 800f8ec:	613c      	str	r4, [r7, #16]
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	b003      	add	sp, #12
 800f8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f6:	6812      	ldr	r2, [r2, #0]
 800f8f8:	3b04      	subs	r3, #4
 800f8fa:	2a00      	cmp	r2, #0
 800f8fc:	d1cc      	bne.n	800f898 <quorem+0x9c>
 800f8fe:	3c01      	subs	r4, #1
 800f900:	e7c7      	b.n	800f892 <quorem+0x96>
 800f902:	6812      	ldr	r2, [r2, #0]
 800f904:	3b04      	subs	r3, #4
 800f906:	2a00      	cmp	r2, #0
 800f908:	d1f0      	bne.n	800f8ec <quorem+0xf0>
 800f90a:	3c01      	subs	r4, #1
 800f90c:	e7eb      	b.n	800f8e6 <quorem+0xea>
 800f90e:	2000      	movs	r0, #0
 800f910:	e7ee      	b.n	800f8f0 <quorem+0xf4>
 800f912:	0000      	movs	r0, r0
 800f914:	0000      	movs	r0, r0
	...

0800f918 <_dtoa_r>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	ed2d 8b02 	vpush	{d8}
 800f920:	ec57 6b10 	vmov	r6, r7, d0
 800f924:	b095      	sub	sp, #84	; 0x54
 800f926:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f928:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f92c:	9105      	str	r1, [sp, #20]
 800f92e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f932:	4604      	mov	r4, r0
 800f934:	9209      	str	r2, [sp, #36]	; 0x24
 800f936:	930f      	str	r3, [sp, #60]	; 0x3c
 800f938:	b975      	cbnz	r5, 800f958 <_dtoa_r+0x40>
 800f93a:	2010      	movs	r0, #16
 800f93c:	f001 f95e 	bl	8010bfc <malloc>
 800f940:	4602      	mov	r2, r0
 800f942:	6260      	str	r0, [r4, #36]	; 0x24
 800f944:	b920      	cbnz	r0, 800f950 <_dtoa_r+0x38>
 800f946:	4bb2      	ldr	r3, [pc, #712]	; (800fc10 <_dtoa_r+0x2f8>)
 800f948:	21ea      	movs	r1, #234	; 0xea
 800f94a:	48b2      	ldr	r0, [pc, #712]	; (800fc14 <_dtoa_r+0x2fc>)
 800f94c:	f7ff ff38 	bl	800f7c0 <__assert_func>
 800f950:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f954:	6005      	str	r5, [r0, #0]
 800f956:	60c5      	str	r5, [r0, #12]
 800f958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f95a:	6819      	ldr	r1, [r3, #0]
 800f95c:	b151      	cbz	r1, 800f974 <_dtoa_r+0x5c>
 800f95e:	685a      	ldr	r2, [r3, #4]
 800f960:	604a      	str	r2, [r1, #4]
 800f962:	2301      	movs	r3, #1
 800f964:	4093      	lsls	r3, r2
 800f966:	608b      	str	r3, [r1, #8]
 800f968:	4620      	mov	r0, r4
 800f96a:	f001 f9af 	bl	8010ccc <_Bfree>
 800f96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f970:	2200      	movs	r2, #0
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	1e3b      	subs	r3, r7, #0
 800f976:	bfb9      	ittee	lt
 800f978:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f97c:	9303      	strlt	r3, [sp, #12]
 800f97e:	2300      	movge	r3, #0
 800f980:	f8c8 3000 	strge.w	r3, [r8]
 800f984:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f988:	4ba3      	ldr	r3, [pc, #652]	; (800fc18 <_dtoa_r+0x300>)
 800f98a:	bfbc      	itt	lt
 800f98c:	2201      	movlt	r2, #1
 800f98e:	f8c8 2000 	strlt.w	r2, [r8]
 800f992:	ea33 0309 	bics.w	r3, r3, r9
 800f996:	d11b      	bne.n	800f9d0 <_dtoa_r+0xb8>
 800f998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f99a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f99e:	6013      	str	r3, [r2, #0]
 800f9a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9a4:	4333      	orrs	r3, r6
 800f9a6:	f000 857a 	beq.w	801049e <_dtoa_r+0xb86>
 800f9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9ac:	b963      	cbnz	r3, 800f9c8 <_dtoa_r+0xb0>
 800f9ae:	4b9b      	ldr	r3, [pc, #620]	; (800fc1c <_dtoa_r+0x304>)
 800f9b0:	e024      	b.n	800f9fc <_dtoa_r+0xe4>
 800f9b2:	4b9b      	ldr	r3, [pc, #620]	; (800fc20 <_dtoa_r+0x308>)
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	3308      	adds	r3, #8
 800f9b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9ba:	6013      	str	r3, [r2, #0]
 800f9bc:	9800      	ldr	r0, [sp, #0]
 800f9be:	b015      	add	sp, #84	; 0x54
 800f9c0:	ecbd 8b02 	vpop	{d8}
 800f9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c8:	4b94      	ldr	r3, [pc, #592]	; (800fc1c <_dtoa_r+0x304>)
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	3303      	adds	r3, #3
 800f9ce:	e7f3      	b.n	800f9b8 <_dtoa_r+0xa0>
 800f9d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	ec51 0b17 	vmov	r0, r1, d7
 800f9da:	2300      	movs	r3, #0
 800f9dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f9e0:	f7f1 f88a 	bl	8000af8 <__aeabi_dcmpeq>
 800f9e4:	4680      	mov	r8, r0
 800f9e6:	b158      	cbz	r0, 800fa00 <_dtoa_r+0xe8>
 800f9e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	6013      	str	r3, [r2, #0]
 800f9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 8551 	beq.w	8010498 <_dtoa_r+0xb80>
 800f9f6:	488b      	ldr	r0, [pc, #556]	; (800fc24 <_dtoa_r+0x30c>)
 800f9f8:	6018      	str	r0, [r3, #0]
 800f9fa:	1e43      	subs	r3, r0, #1
 800f9fc:	9300      	str	r3, [sp, #0]
 800f9fe:	e7dd      	b.n	800f9bc <_dtoa_r+0xa4>
 800fa00:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fa04:	aa12      	add	r2, sp, #72	; 0x48
 800fa06:	a913      	add	r1, sp, #76	; 0x4c
 800fa08:	4620      	mov	r0, r4
 800fa0a:	f001 fd07 	bl	801141c <__d2b>
 800fa0e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa12:	4683      	mov	fp, r0
 800fa14:	2d00      	cmp	r5, #0
 800fa16:	d07c      	beq.n	800fb12 <_dtoa_r+0x1fa>
 800fa18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fa1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fa26:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fa2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fa2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa32:	4b7d      	ldr	r3, [pc, #500]	; (800fc28 <_dtoa_r+0x310>)
 800fa34:	2200      	movs	r2, #0
 800fa36:	4630      	mov	r0, r6
 800fa38:	4639      	mov	r1, r7
 800fa3a:	f7f0 fc3d 	bl	80002b8 <__aeabi_dsub>
 800fa3e:	a36e      	add	r3, pc, #440	; (adr r3, 800fbf8 <_dtoa_r+0x2e0>)
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	f7f0 fdf0 	bl	8000628 <__aeabi_dmul>
 800fa48:	a36d      	add	r3, pc, #436	; (adr r3, 800fc00 <_dtoa_r+0x2e8>)
 800fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4e:	f7f0 fc35 	bl	80002bc <__adddf3>
 800fa52:	4606      	mov	r6, r0
 800fa54:	4628      	mov	r0, r5
 800fa56:	460f      	mov	r7, r1
 800fa58:	f7f0 fd7c 	bl	8000554 <__aeabi_i2d>
 800fa5c:	a36a      	add	r3, pc, #424	; (adr r3, 800fc08 <_dtoa_r+0x2f0>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	f7f0 fde1 	bl	8000628 <__aeabi_dmul>
 800fa66:	4602      	mov	r2, r0
 800fa68:	460b      	mov	r3, r1
 800fa6a:	4630      	mov	r0, r6
 800fa6c:	4639      	mov	r1, r7
 800fa6e:	f7f0 fc25 	bl	80002bc <__adddf3>
 800fa72:	4606      	mov	r6, r0
 800fa74:	460f      	mov	r7, r1
 800fa76:	f7f1 f887 	bl	8000b88 <__aeabi_d2iz>
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	4682      	mov	sl, r0
 800fa7e:	2300      	movs	r3, #0
 800fa80:	4630      	mov	r0, r6
 800fa82:	4639      	mov	r1, r7
 800fa84:	f7f1 f842 	bl	8000b0c <__aeabi_dcmplt>
 800fa88:	b148      	cbz	r0, 800fa9e <_dtoa_r+0x186>
 800fa8a:	4650      	mov	r0, sl
 800fa8c:	f7f0 fd62 	bl	8000554 <__aeabi_i2d>
 800fa90:	4632      	mov	r2, r6
 800fa92:	463b      	mov	r3, r7
 800fa94:	f7f1 f830 	bl	8000af8 <__aeabi_dcmpeq>
 800fa98:	b908      	cbnz	r0, 800fa9e <_dtoa_r+0x186>
 800fa9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa9e:	f1ba 0f16 	cmp.w	sl, #22
 800faa2:	d854      	bhi.n	800fb4e <_dtoa_r+0x236>
 800faa4:	4b61      	ldr	r3, [pc, #388]	; (800fc2c <_dtoa_r+0x314>)
 800faa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800faaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fab2:	f7f1 f82b 	bl	8000b0c <__aeabi_dcmplt>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d04b      	beq.n	800fb52 <_dtoa_r+0x23a>
 800faba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fabe:	2300      	movs	r3, #0
 800fac0:	930e      	str	r3, [sp, #56]	; 0x38
 800fac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fac4:	1b5d      	subs	r5, r3, r5
 800fac6:	1e6b      	subs	r3, r5, #1
 800fac8:	9304      	str	r3, [sp, #16]
 800faca:	bf43      	ittte	mi
 800facc:	2300      	movmi	r3, #0
 800face:	f1c5 0801 	rsbmi	r8, r5, #1
 800fad2:	9304      	strmi	r3, [sp, #16]
 800fad4:	f04f 0800 	movpl.w	r8, #0
 800fad8:	f1ba 0f00 	cmp.w	sl, #0
 800fadc:	db3b      	blt.n	800fb56 <_dtoa_r+0x23e>
 800fade:	9b04      	ldr	r3, [sp, #16]
 800fae0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fae4:	4453      	add	r3, sl
 800fae6:	9304      	str	r3, [sp, #16]
 800fae8:	2300      	movs	r3, #0
 800faea:	9306      	str	r3, [sp, #24]
 800faec:	9b05      	ldr	r3, [sp, #20]
 800faee:	2b09      	cmp	r3, #9
 800faf0:	d869      	bhi.n	800fbc6 <_dtoa_r+0x2ae>
 800faf2:	2b05      	cmp	r3, #5
 800faf4:	bfc4      	itt	gt
 800faf6:	3b04      	subgt	r3, #4
 800faf8:	9305      	strgt	r3, [sp, #20]
 800fafa:	9b05      	ldr	r3, [sp, #20]
 800fafc:	f1a3 0302 	sub.w	r3, r3, #2
 800fb00:	bfcc      	ite	gt
 800fb02:	2500      	movgt	r5, #0
 800fb04:	2501      	movle	r5, #1
 800fb06:	2b03      	cmp	r3, #3
 800fb08:	d869      	bhi.n	800fbde <_dtoa_r+0x2c6>
 800fb0a:	e8df f003 	tbb	[pc, r3]
 800fb0e:	4e2c      	.short	0x4e2c
 800fb10:	5a4c      	.short	0x5a4c
 800fb12:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fb16:	441d      	add	r5, r3
 800fb18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fb1c:	2b20      	cmp	r3, #32
 800fb1e:	bfc1      	itttt	gt
 800fb20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb24:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fb28:	fa09 f303 	lslgt.w	r3, r9, r3
 800fb2c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fb30:	bfda      	itte	le
 800fb32:	f1c3 0320 	rsble	r3, r3, #32
 800fb36:	fa06 f003 	lslle.w	r0, r6, r3
 800fb3a:	4318      	orrgt	r0, r3
 800fb3c:	f7f0 fcfa 	bl	8000534 <__aeabi_ui2d>
 800fb40:	2301      	movs	r3, #1
 800fb42:	4606      	mov	r6, r0
 800fb44:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fb48:	3d01      	subs	r5, #1
 800fb4a:	9310      	str	r3, [sp, #64]	; 0x40
 800fb4c:	e771      	b.n	800fa32 <_dtoa_r+0x11a>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e7b6      	b.n	800fac0 <_dtoa_r+0x1a8>
 800fb52:	900e      	str	r0, [sp, #56]	; 0x38
 800fb54:	e7b5      	b.n	800fac2 <_dtoa_r+0x1aa>
 800fb56:	f1ca 0300 	rsb	r3, sl, #0
 800fb5a:	9306      	str	r3, [sp, #24]
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	eba8 080a 	sub.w	r8, r8, sl
 800fb62:	930d      	str	r3, [sp, #52]	; 0x34
 800fb64:	e7c2      	b.n	800faec <_dtoa_r+0x1d4>
 800fb66:	2300      	movs	r3, #0
 800fb68:	9308      	str	r3, [sp, #32]
 800fb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	dc39      	bgt.n	800fbe4 <_dtoa_r+0x2cc>
 800fb70:	f04f 0901 	mov.w	r9, #1
 800fb74:	f8cd 9004 	str.w	r9, [sp, #4]
 800fb78:	464b      	mov	r3, r9
 800fb7a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fb80:	2200      	movs	r2, #0
 800fb82:	6042      	str	r2, [r0, #4]
 800fb84:	2204      	movs	r2, #4
 800fb86:	f102 0614 	add.w	r6, r2, #20
 800fb8a:	429e      	cmp	r6, r3
 800fb8c:	6841      	ldr	r1, [r0, #4]
 800fb8e:	d92f      	bls.n	800fbf0 <_dtoa_r+0x2d8>
 800fb90:	4620      	mov	r0, r4
 800fb92:	f001 f85b 	bl	8010c4c <_Balloc>
 800fb96:	9000      	str	r0, [sp, #0]
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	d14b      	bne.n	800fc34 <_dtoa_r+0x31c>
 800fb9c:	4b24      	ldr	r3, [pc, #144]	; (800fc30 <_dtoa_r+0x318>)
 800fb9e:	4602      	mov	r2, r0
 800fba0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fba4:	e6d1      	b.n	800f94a <_dtoa_r+0x32>
 800fba6:	2301      	movs	r3, #1
 800fba8:	e7de      	b.n	800fb68 <_dtoa_r+0x250>
 800fbaa:	2300      	movs	r3, #0
 800fbac:	9308      	str	r3, [sp, #32]
 800fbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb0:	eb0a 0903 	add.w	r9, sl, r3
 800fbb4:	f109 0301 	add.w	r3, r9, #1
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	bfb8      	it	lt
 800fbbe:	2301      	movlt	r3, #1
 800fbc0:	e7dd      	b.n	800fb7e <_dtoa_r+0x266>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	e7f2      	b.n	800fbac <_dtoa_r+0x294>
 800fbc6:	2501      	movs	r5, #1
 800fbc8:	2300      	movs	r3, #0
 800fbca:	9305      	str	r3, [sp, #20]
 800fbcc:	9508      	str	r5, [sp, #32]
 800fbce:	f04f 39ff 	mov.w	r9, #4294967295
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800fbd8:	2312      	movs	r3, #18
 800fbda:	9209      	str	r2, [sp, #36]	; 0x24
 800fbdc:	e7cf      	b.n	800fb7e <_dtoa_r+0x266>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	9308      	str	r3, [sp, #32]
 800fbe2:	e7f4      	b.n	800fbce <_dtoa_r+0x2b6>
 800fbe4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fbe8:	f8cd 9004 	str.w	r9, [sp, #4]
 800fbec:	464b      	mov	r3, r9
 800fbee:	e7c6      	b.n	800fb7e <_dtoa_r+0x266>
 800fbf0:	3101      	adds	r1, #1
 800fbf2:	6041      	str	r1, [r0, #4]
 800fbf4:	0052      	lsls	r2, r2, #1
 800fbf6:	e7c6      	b.n	800fb86 <_dtoa_r+0x26e>
 800fbf8:	636f4361 	.word	0x636f4361
 800fbfc:	3fd287a7 	.word	0x3fd287a7
 800fc00:	8b60c8b3 	.word	0x8b60c8b3
 800fc04:	3fc68a28 	.word	0x3fc68a28
 800fc08:	509f79fb 	.word	0x509f79fb
 800fc0c:	3fd34413 	.word	0x3fd34413
 800fc10:	08025e28 	.word	0x08025e28
 800fc14:	08025fea 	.word	0x08025fea
 800fc18:	7ff00000 	.word	0x7ff00000
 800fc1c:	08025fe6 	.word	0x08025fe6
 800fc20:	08025fdd 	.word	0x08025fdd
 800fc24:	08025da9 	.word	0x08025da9
 800fc28:	3ff80000 	.word	0x3ff80000
 800fc2c:	08026160 	.word	0x08026160
 800fc30:	08026049 	.word	0x08026049
 800fc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc36:	9a00      	ldr	r2, [sp, #0]
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	9b01      	ldr	r3, [sp, #4]
 800fc3c:	2b0e      	cmp	r3, #14
 800fc3e:	f200 80ad 	bhi.w	800fd9c <_dtoa_r+0x484>
 800fc42:	2d00      	cmp	r5, #0
 800fc44:	f000 80aa 	beq.w	800fd9c <_dtoa_r+0x484>
 800fc48:	f1ba 0f00 	cmp.w	sl, #0
 800fc4c:	dd36      	ble.n	800fcbc <_dtoa_r+0x3a4>
 800fc4e:	4ac3      	ldr	r2, [pc, #780]	; (800ff5c <_dtoa_r+0x644>)
 800fc50:	f00a 030f 	and.w	r3, sl, #15
 800fc54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fc58:	ed93 7b00 	vldr	d7, [r3]
 800fc5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fc60:	ea4f 172a 	mov.w	r7, sl, asr #4
 800fc64:	eeb0 8a47 	vmov.f32	s16, s14
 800fc68:	eef0 8a67 	vmov.f32	s17, s15
 800fc6c:	d016      	beq.n	800fc9c <_dtoa_r+0x384>
 800fc6e:	4bbc      	ldr	r3, [pc, #752]	; (800ff60 <_dtoa_r+0x648>)
 800fc70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fc74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc78:	f7f0 fe00 	bl	800087c <__aeabi_ddiv>
 800fc7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc80:	f007 070f 	and.w	r7, r7, #15
 800fc84:	2503      	movs	r5, #3
 800fc86:	4eb6      	ldr	r6, [pc, #728]	; (800ff60 <_dtoa_r+0x648>)
 800fc88:	b957      	cbnz	r7, 800fca0 <_dtoa_r+0x388>
 800fc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc8e:	ec53 2b18 	vmov	r2, r3, d8
 800fc92:	f7f0 fdf3 	bl	800087c <__aeabi_ddiv>
 800fc96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc9a:	e029      	b.n	800fcf0 <_dtoa_r+0x3d8>
 800fc9c:	2502      	movs	r5, #2
 800fc9e:	e7f2      	b.n	800fc86 <_dtoa_r+0x36e>
 800fca0:	07f9      	lsls	r1, r7, #31
 800fca2:	d508      	bpl.n	800fcb6 <_dtoa_r+0x39e>
 800fca4:	ec51 0b18 	vmov	r0, r1, d8
 800fca8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fcac:	f7f0 fcbc 	bl	8000628 <__aeabi_dmul>
 800fcb0:	ec41 0b18 	vmov	d8, r0, r1
 800fcb4:	3501      	adds	r5, #1
 800fcb6:	107f      	asrs	r7, r7, #1
 800fcb8:	3608      	adds	r6, #8
 800fcba:	e7e5      	b.n	800fc88 <_dtoa_r+0x370>
 800fcbc:	f000 80a6 	beq.w	800fe0c <_dtoa_r+0x4f4>
 800fcc0:	f1ca 0600 	rsb	r6, sl, #0
 800fcc4:	4ba5      	ldr	r3, [pc, #660]	; (800ff5c <_dtoa_r+0x644>)
 800fcc6:	4fa6      	ldr	r7, [pc, #664]	; (800ff60 <_dtoa_r+0x648>)
 800fcc8:	f006 020f 	and.w	r2, r6, #15
 800fccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fcd8:	f7f0 fca6 	bl	8000628 <__aeabi_dmul>
 800fcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce0:	1136      	asrs	r6, r6, #4
 800fce2:	2300      	movs	r3, #0
 800fce4:	2502      	movs	r5, #2
 800fce6:	2e00      	cmp	r6, #0
 800fce8:	f040 8085 	bne.w	800fdf6 <_dtoa_r+0x4de>
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d1d2      	bne.n	800fc96 <_dtoa_r+0x37e>
 800fcf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	f000 808c 	beq.w	800fe10 <_dtoa_r+0x4f8>
 800fcf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fcfc:	4b99      	ldr	r3, [pc, #612]	; (800ff64 <_dtoa_r+0x64c>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	4630      	mov	r0, r6
 800fd02:	4639      	mov	r1, r7
 800fd04:	f7f0 ff02 	bl	8000b0c <__aeabi_dcmplt>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	f000 8081 	beq.w	800fe10 <_dtoa_r+0x4f8>
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d07d      	beq.n	800fe10 <_dtoa_r+0x4f8>
 800fd14:	f1b9 0f00 	cmp.w	r9, #0
 800fd18:	dd3c      	ble.n	800fd94 <_dtoa_r+0x47c>
 800fd1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fd1e:	9307      	str	r3, [sp, #28]
 800fd20:	2200      	movs	r2, #0
 800fd22:	4b91      	ldr	r3, [pc, #580]	; (800ff68 <_dtoa_r+0x650>)
 800fd24:	4630      	mov	r0, r6
 800fd26:	4639      	mov	r1, r7
 800fd28:	f7f0 fc7e 	bl	8000628 <__aeabi_dmul>
 800fd2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd30:	3501      	adds	r5, #1
 800fd32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fd36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	f7f0 fc0a 	bl	8000554 <__aeabi_i2d>
 800fd40:	4632      	mov	r2, r6
 800fd42:	463b      	mov	r3, r7
 800fd44:	f7f0 fc70 	bl	8000628 <__aeabi_dmul>
 800fd48:	4b88      	ldr	r3, [pc, #544]	; (800ff6c <_dtoa_r+0x654>)
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f7f0 fab6 	bl	80002bc <__adddf3>
 800fd50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d15c      	bne.n	800fe1a <_dtoa_r+0x502>
 800fd60:	4b83      	ldr	r3, [pc, #524]	; (800ff70 <_dtoa_r+0x658>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	4630      	mov	r0, r6
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 faa6 	bl	80002b8 <__aeabi_dsub>
 800fd6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd70:	4606      	mov	r6, r0
 800fd72:	460f      	mov	r7, r1
 800fd74:	f7f0 fee8 	bl	8000b48 <__aeabi_dcmpgt>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	f040 8296 	bne.w	80102aa <_dtoa_r+0x992>
 800fd7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fd82:	4630      	mov	r0, r6
 800fd84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd88:	4639      	mov	r1, r7
 800fd8a:	f7f0 febf 	bl	8000b0c <__aeabi_dcmplt>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	f040 8288 	bne.w	80102a4 <_dtoa_r+0x98c>
 800fd94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fd98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f2c0 8158 	blt.w	8010054 <_dtoa_r+0x73c>
 800fda4:	f1ba 0f0e 	cmp.w	sl, #14
 800fda8:	f300 8154 	bgt.w	8010054 <_dtoa_r+0x73c>
 800fdac:	4b6b      	ldr	r3, [pc, #428]	; (800ff5c <_dtoa_r+0x644>)
 800fdae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fdb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f280 80e3 	bge.w	800ff84 <_dtoa_r+0x66c>
 800fdbe:	9b01      	ldr	r3, [sp, #4]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f300 80df 	bgt.w	800ff84 <_dtoa_r+0x66c>
 800fdc6:	f040 826d 	bne.w	80102a4 <_dtoa_r+0x98c>
 800fdca:	4b69      	ldr	r3, [pc, #420]	; (800ff70 <_dtoa_r+0x658>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4640      	mov	r0, r8
 800fdd0:	4649      	mov	r1, r9
 800fdd2:	f7f0 fc29 	bl	8000628 <__aeabi_dmul>
 800fdd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdda:	f7f0 feab 	bl	8000b34 <__aeabi_dcmpge>
 800fdde:	9e01      	ldr	r6, [sp, #4]
 800fde0:	4637      	mov	r7, r6
 800fde2:	2800      	cmp	r0, #0
 800fde4:	f040 8243 	bne.w	801026e <_dtoa_r+0x956>
 800fde8:	9d00      	ldr	r5, [sp, #0]
 800fdea:	2331      	movs	r3, #49	; 0x31
 800fdec:	f805 3b01 	strb.w	r3, [r5], #1
 800fdf0:	f10a 0a01 	add.w	sl, sl, #1
 800fdf4:	e23f      	b.n	8010276 <_dtoa_r+0x95e>
 800fdf6:	07f2      	lsls	r2, r6, #31
 800fdf8:	d505      	bpl.n	800fe06 <_dtoa_r+0x4ee>
 800fdfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdfe:	f7f0 fc13 	bl	8000628 <__aeabi_dmul>
 800fe02:	3501      	adds	r5, #1
 800fe04:	2301      	movs	r3, #1
 800fe06:	1076      	asrs	r6, r6, #1
 800fe08:	3708      	adds	r7, #8
 800fe0a:	e76c      	b.n	800fce6 <_dtoa_r+0x3ce>
 800fe0c:	2502      	movs	r5, #2
 800fe0e:	e76f      	b.n	800fcf0 <_dtoa_r+0x3d8>
 800fe10:	9b01      	ldr	r3, [sp, #4]
 800fe12:	f8cd a01c 	str.w	sl, [sp, #28]
 800fe16:	930c      	str	r3, [sp, #48]	; 0x30
 800fe18:	e78d      	b.n	800fd36 <_dtoa_r+0x41e>
 800fe1a:	9900      	ldr	r1, [sp, #0]
 800fe1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fe1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe20:	4b4e      	ldr	r3, [pc, #312]	; (800ff5c <_dtoa_r+0x644>)
 800fe22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe26:	4401      	add	r1, r0
 800fe28:	9102      	str	r1, [sp, #8]
 800fe2a:	9908      	ldr	r1, [sp, #32]
 800fe2c:	eeb0 8a47 	vmov.f32	s16, s14
 800fe30:	eef0 8a67 	vmov.f32	s17, s15
 800fe34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe3c:	2900      	cmp	r1, #0
 800fe3e:	d045      	beq.n	800fecc <_dtoa_r+0x5b4>
 800fe40:	494c      	ldr	r1, [pc, #304]	; (800ff74 <_dtoa_r+0x65c>)
 800fe42:	2000      	movs	r0, #0
 800fe44:	f7f0 fd1a 	bl	800087c <__aeabi_ddiv>
 800fe48:	ec53 2b18 	vmov	r2, r3, d8
 800fe4c:	f7f0 fa34 	bl	80002b8 <__aeabi_dsub>
 800fe50:	9d00      	ldr	r5, [sp, #0]
 800fe52:	ec41 0b18 	vmov	d8, r0, r1
 800fe56:	4639      	mov	r1, r7
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f7f0 fe95 	bl	8000b88 <__aeabi_d2iz>
 800fe5e:	900c      	str	r0, [sp, #48]	; 0x30
 800fe60:	f7f0 fb78 	bl	8000554 <__aeabi_i2d>
 800fe64:	4602      	mov	r2, r0
 800fe66:	460b      	mov	r3, r1
 800fe68:	4630      	mov	r0, r6
 800fe6a:	4639      	mov	r1, r7
 800fe6c:	f7f0 fa24 	bl	80002b8 <__aeabi_dsub>
 800fe70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe72:	3330      	adds	r3, #48	; 0x30
 800fe74:	f805 3b01 	strb.w	r3, [r5], #1
 800fe78:	ec53 2b18 	vmov	r2, r3, d8
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	460f      	mov	r7, r1
 800fe80:	f7f0 fe44 	bl	8000b0c <__aeabi_dcmplt>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d165      	bne.n	800ff54 <_dtoa_r+0x63c>
 800fe88:	4632      	mov	r2, r6
 800fe8a:	463b      	mov	r3, r7
 800fe8c:	4935      	ldr	r1, [pc, #212]	; (800ff64 <_dtoa_r+0x64c>)
 800fe8e:	2000      	movs	r0, #0
 800fe90:	f7f0 fa12 	bl	80002b8 <__aeabi_dsub>
 800fe94:	ec53 2b18 	vmov	r2, r3, d8
 800fe98:	f7f0 fe38 	bl	8000b0c <__aeabi_dcmplt>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f040 80b9 	bne.w	8010014 <_dtoa_r+0x6fc>
 800fea2:	9b02      	ldr	r3, [sp, #8]
 800fea4:	429d      	cmp	r5, r3
 800fea6:	f43f af75 	beq.w	800fd94 <_dtoa_r+0x47c>
 800feaa:	4b2f      	ldr	r3, [pc, #188]	; (800ff68 <_dtoa_r+0x650>)
 800feac:	ec51 0b18 	vmov	r0, r1, d8
 800feb0:	2200      	movs	r2, #0
 800feb2:	f7f0 fbb9 	bl	8000628 <__aeabi_dmul>
 800feb6:	4b2c      	ldr	r3, [pc, #176]	; (800ff68 <_dtoa_r+0x650>)
 800feb8:	ec41 0b18 	vmov	d8, r0, r1
 800febc:	2200      	movs	r2, #0
 800febe:	4630      	mov	r0, r6
 800fec0:	4639      	mov	r1, r7
 800fec2:	f7f0 fbb1 	bl	8000628 <__aeabi_dmul>
 800fec6:	4606      	mov	r6, r0
 800fec8:	460f      	mov	r7, r1
 800feca:	e7c4      	b.n	800fe56 <_dtoa_r+0x53e>
 800fecc:	ec51 0b17 	vmov	r0, r1, d7
 800fed0:	f7f0 fbaa 	bl	8000628 <__aeabi_dmul>
 800fed4:	9b02      	ldr	r3, [sp, #8]
 800fed6:	9d00      	ldr	r5, [sp, #0]
 800fed8:	930c      	str	r3, [sp, #48]	; 0x30
 800feda:	ec41 0b18 	vmov	d8, r0, r1
 800fede:	4639      	mov	r1, r7
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7f0 fe51 	bl	8000b88 <__aeabi_d2iz>
 800fee6:	9011      	str	r0, [sp, #68]	; 0x44
 800fee8:	f7f0 fb34 	bl	8000554 <__aeabi_i2d>
 800feec:	4602      	mov	r2, r0
 800feee:	460b      	mov	r3, r1
 800fef0:	4630      	mov	r0, r6
 800fef2:	4639      	mov	r1, r7
 800fef4:	f7f0 f9e0 	bl	80002b8 <__aeabi_dsub>
 800fef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fefa:	3330      	adds	r3, #48	; 0x30
 800fefc:	f805 3b01 	strb.w	r3, [r5], #1
 800ff00:	9b02      	ldr	r3, [sp, #8]
 800ff02:	429d      	cmp	r5, r3
 800ff04:	4606      	mov	r6, r0
 800ff06:	460f      	mov	r7, r1
 800ff08:	f04f 0200 	mov.w	r2, #0
 800ff0c:	d134      	bne.n	800ff78 <_dtoa_r+0x660>
 800ff0e:	4b19      	ldr	r3, [pc, #100]	; (800ff74 <_dtoa_r+0x65c>)
 800ff10:	ec51 0b18 	vmov	r0, r1, d8
 800ff14:	f7f0 f9d2 	bl	80002bc <__adddf3>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	4639      	mov	r1, r7
 800ff20:	f7f0 fe12 	bl	8000b48 <__aeabi_dcmpgt>
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d175      	bne.n	8010014 <_dtoa_r+0x6fc>
 800ff28:	ec53 2b18 	vmov	r2, r3, d8
 800ff2c:	4911      	ldr	r1, [pc, #68]	; (800ff74 <_dtoa_r+0x65c>)
 800ff2e:	2000      	movs	r0, #0
 800ff30:	f7f0 f9c2 	bl	80002b8 <__aeabi_dsub>
 800ff34:	4602      	mov	r2, r0
 800ff36:	460b      	mov	r3, r1
 800ff38:	4630      	mov	r0, r6
 800ff3a:	4639      	mov	r1, r7
 800ff3c:	f7f0 fde6 	bl	8000b0c <__aeabi_dcmplt>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f43f af27 	beq.w	800fd94 <_dtoa_r+0x47c>
 800ff46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff48:	1e6b      	subs	r3, r5, #1
 800ff4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ff4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff50:	2b30      	cmp	r3, #48	; 0x30
 800ff52:	d0f8      	beq.n	800ff46 <_dtoa_r+0x62e>
 800ff54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ff58:	e04a      	b.n	800fff0 <_dtoa_r+0x6d8>
 800ff5a:	bf00      	nop
 800ff5c:	08026160 	.word	0x08026160
 800ff60:	08026138 	.word	0x08026138
 800ff64:	3ff00000 	.word	0x3ff00000
 800ff68:	40240000 	.word	0x40240000
 800ff6c:	401c0000 	.word	0x401c0000
 800ff70:	40140000 	.word	0x40140000
 800ff74:	3fe00000 	.word	0x3fe00000
 800ff78:	4baf      	ldr	r3, [pc, #700]	; (8010238 <_dtoa_r+0x920>)
 800ff7a:	f7f0 fb55 	bl	8000628 <__aeabi_dmul>
 800ff7e:	4606      	mov	r6, r0
 800ff80:	460f      	mov	r7, r1
 800ff82:	e7ac      	b.n	800fede <_dtoa_r+0x5c6>
 800ff84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ff88:	9d00      	ldr	r5, [sp, #0]
 800ff8a:	4642      	mov	r2, r8
 800ff8c:	464b      	mov	r3, r9
 800ff8e:	4630      	mov	r0, r6
 800ff90:	4639      	mov	r1, r7
 800ff92:	f7f0 fc73 	bl	800087c <__aeabi_ddiv>
 800ff96:	f7f0 fdf7 	bl	8000b88 <__aeabi_d2iz>
 800ff9a:	9002      	str	r0, [sp, #8]
 800ff9c:	f7f0 fada 	bl	8000554 <__aeabi_i2d>
 800ffa0:	4642      	mov	r2, r8
 800ffa2:	464b      	mov	r3, r9
 800ffa4:	f7f0 fb40 	bl	8000628 <__aeabi_dmul>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4630      	mov	r0, r6
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f7f0 f982 	bl	80002b8 <__aeabi_dsub>
 800ffb4:	9e02      	ldr	r6, [sp, #8]
 800ffb6:	9f01      	ldr	r7, [sp, #4]
 800ffb8:	3630      	adds	r6, #48	; 0x30
 800ffba:	f805 6b01 	strb.w	r6, [r5], #1
 800ffbe:	9e00      	ldr	r6, [sp, #0]
 800ffc0:	1bae      	subs	r6, r5, r6
 800ffc2:	42b7      	cmp	r7, r6
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	460b      	mov	r3, r1
 800ffc8:	d137      	bne.n	801003a <_dtoa_r+0x722>
 800ffca:	f7f0 f977 	bl	80002bc <__adddf3>
 800ffce:	4642      	mov	r2, r8
 800ffd0:	464b      	mov	r3, r9
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	f7f0 fdb7 	bl	8000b48 <__aeabi_dcmpgt>
 800ffda:	b9c8      	cbnz	r0, 8010010 <_dtoa_r+0x6f8>
 800ffdc:	4642      	mov	r2, r8
 800ffde:	464b      	mov	r3, r9
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	4639      	mov	r1, r7
 800ffe4:	f7f0 fd88 	bl	8000af8 <__aeabi_dcmpeq>
 800ffe8:	b110      	cbz	r0, 800fff0 <_dtoa_r+0x6d8>
 800ffea:	9b02      	ldr	r3, [sp, #8]
 800ffec:	07d9      	lsls	r1, r3, #31
 800ffee:	d40f      	bmi.n	8010010 <_dtoa_r+0x6f8>
 800fff0:	4620      	mov	r0, r4
 800fff2:	4659      	mov	r1, fp
 800fff4:	f000 fe6a 	bl	8010ccc <_Bfree>
 800fff8:	2300      	movs	r3, #0
 800fffa:	702b      	strb	r3, [r5, #0]
 800fffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fffe:	f10a 0001 	add.w	r0, sl, #1
 8010002:	6018      	str	r0, [r3, #0]
 8010004:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010006:	2b00      	cmp	r3, #0
 8010008:	f43f acd8 	beq.w	800f9bc <_dtoa_r+0xa4>
 801000c:	601d      	str	r5, [r3, #0]
 801000e:	e4d5      	b.n	800f9bc <_dtoa_r+0xa4>
 8010010:	f8cd a01c 	str.w	sl, [sp, #28]
 8010014:	462b      	mov	r3, r5
 8010016:	461d      	mov	r5, r3
 8010018:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801001c:	2a39      	cmp	r2, #57	; 0x39
 801001e:	d108      	bne.n	8010032 <_dtoa_r+0x71a>
 8010020:	9a00      	ldr	r2, [sp, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d1f7      	bne.n	8010016 <_dtoa_r+0x6fe>
 8010026:	9a07      	ldr	r2, [sp, #28]
 8010028:	9900      	ldr	r1, [sp, #0]
 801002a:	3201      	adds	r2, #1
 801002c:	9207      	str	r2, [sp, #28]
 801002e:	2230      	movs	r2, #48	; 0x30
 8010030:	700a      	strb	r2, [r1, #0]
 8010032:	781a      	ldrb	r2, [r3, #0]
 8010034:	3201      	adds	r2, #1
 8010036:	701a      	strb	r2, [r3, #0]
 8010038:	e78c      	b.n	800ff54 <_dtoa_r+0x63c>
 801003a:	4b7f      	ldr	r3, [pc, #508]	; (8010238 <_dtoa_r+0x920>)
 801003c:	2200      	movs	r2, #0
 801003e:	f7f0 faf3 	bl	8000628 <__aeabi_dmul>
 8010042:	2200      	movs	r2, #0
 8010044:	2300      	movs	r3, #0
 8010046:	4606      	mov	r6, r0
 8010048:	460f      	mov	r7, r1
 801004a:	f7f0 fd55 	bl	8000af8 <__aeabi_dcmpeq>
 801004e:	2800      	cmp	r0, #0
 8010050:	d09b      	beq.n	800ff8a <_dtoa_r+0x672>
 8010052:	e7cd      	b.n	800fff0 <_dtoa_r+0x6d8>
 8010054:	9a08      	ldr	r2, [sp, #32]
 8010056:	2a00      	cmp	r2, #0
 8010058:	f000 80c4 	beq.w	80101e4 <_dtoa_r+0x8cc>
 801005c:	9a05      	ldr	r2, [sp, #20]
 801005e:	2a01      	cmp	r2, #1
 8010060:	f300 80a8 	bgt.w	80101b4 <_dtoa_r+0x89c>
 8010064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010066:	2a00      	cmp	r2, #0
 8010068:	f000 80a0 	beq.w	80101ac <_dtoa_r+0x894>
 801006c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010070:	9e06      	ldr	r6, [sp, #24]
 8010072:	4645      	mov	r5, r8
 8010074:	9a04      	ldr	r2, [sp, #16]
 8010076:	2101      	movs	r1, #1
 8010078:	441a      	add	r2, r3
 801007a:	4620      	mov	r0, r4
 801007c:	4498      	add	r8, r3
 801007e:	9204      	str	r2, [sp, #16]
 8010080:	f000 ff2a 	bl	8010ed8 <__i2b>
 8010084:	4607      	mov	r7, r0
 8010086:	2d00      	cmp	r5, #0
 8010088:	dd0b      	ble.n	80100a2 <_dtoa_r+0x78a>
 801008a:	9b04      	ldr	r3, [sp, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	dd08      	ble.n	80100a2 <_dtoa_r+0x78a>
 8010090:	42ab      	cmp	r3, r5
 8010092:	9a04      	ldr	r2, [sp, #16]
 8010094:	bfa8      	it	ge
 8010096:	462b      	movge	r3, r5
 8010098:	eba8 0803 	sub.w	r8, r8, r3
 801009c:	1aed      	subs	r5, r5, r3
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	9304      	str	r3, [sp, #16]
 80100a2:	9b06      	ldr	r3, [sp, #24]
 80100a4:	b1fb      	cbz	r3, 80100e6 <_dtoa_r+0x7ce>
 80100a6:	9b08      	ldr	r3, [sp, #32]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f000 809f 	beq.w	80101ec <_dtoa_r+0x8d4>
 80100ae:	2e00      	cmp	r6, #0
 80100b0:	dd11      	ble.n	80100d6 <_dtoa_r+0x7be>
 80100b2:	4639      	mov	r1, r7
 80100b4:	4632      	mov	r2, r6
 80100b6:	4620      	mov	r0, r4
 80100b8:	f000 ffca 	bl	8011050 <__pow5mult>
 80100bc:	465a      	mov	r2, fp
 80100be:	4601      	mov	r1, r0
 80100c0:	4607      	mov	r7, r0
 80100c2:	4620      	mov	r0, r4
 80100c4:	f000 ff1e 	bl	8010f04 <__multiply>
 80100c8:	4659      	mov	r1, fp
 80100ca:	9007      	str	r0, [sp, #28]
 80100cc:	4620      	mov	r0, r4
 80100ce:	f000 fdfd 	bl	8010ccc <_Bfree>
 80100d2:	9b07      	ldr	r3, [sp, #28]
 80100d4:	469b      	mov	fp, r3
 80100d6:	9b06      	ldr	r3, [sp, #24]
 80100d8:	1b9a      	subs	r2, r3, r6
 80100da:	d004      	beq.n	80100e6 <_dtoa_r+0x7ce>
 80100dc:	4659      	mov	r1, fp
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 ffb6 	bl	8011050 <__pow5mult>
 80100e4:	4683      	mov	fp, r0
 80100e6:	2101      	movs	r1, #1
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 fef5 	bl	8010ed8 <__i2b>
 80100ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	4606      	mov	r6, r0
 80100f4:	dd7c      	ble.n	80101f0 <_dtoa_r+0x8d8>
 80100f6:	461a      	mov	r2, r3
 80100f8:	4601      	mov	r1, r0
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 ffa8 	bl	8011050 <__pow5mult>
 8010100:	9b05      	ldr	r3, [sp, #20]
 8010102:	2b01      	cmp	r3, #1
 8010104:	4606      	mov	r6, r0
 8010106:	dd76      	ble.n	80101f6 <_dtoa_r+0x8de>
 8010108:	2300      	movs	r3, #0
 801010a:	9306      	str	r3, [sp, #24]
 801010c:	6933      	ldr	r3, [r6, #16]
 801010e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010112:	6918      	ldr	r0, [r3, #16]
 8010114:	f000 fe90 	bl	8010e38 <__hi0bits>
 8010118:	f1c0 0020 	rsb	r0, r0, #32
 801011c:	9b04      	ldr	r3, [sp, #16]
 801011e:	4418      	add	r0, r3
 8010120:	f010 001f 	ands.w	r0, r0, #31
 8010124:	f000 8086 	beq.w	8010234 <_dtoa_r+0x91c>
 8010128:	f1c0 0320 	rsb	r3, r0, #32
 801012c:	2b04      	cmp	r3, #4
 801012e:	dd7f      	ble.n	8010230 <_dtoa_r+0x918>
 8010130:	f1c0 001c 	rsb	r0, r0, #28
 8010134:	9b04      	ldr	r3, [sp, #16]
 8010136:	4403      	add	r3, r0
 8010138:	4480      	add	r8, r0
 801013a:	4405      	add	r5, r0
 801013c:	9304      	str	r3, [sp, #16]
 801013e:	f1b8 0f00 	cmp.w	r8, #0
 8010142:	dd05      	ble.n	8010150 <_dtoa_r+0x838>
 8010144:	4659      	mov	r1, fp
 8010146:	4642      	mov	r2, r8
 8010148:	4620      	mov	r0, r4
 801014a:	f000 ffdb 	bl	8011104 <__lshift>
 801014e:	4683      	mov	fp, r0
 8010150:	9b04      	ldr	r3, [sp, #16]
 8010152:	2b00      	cmp	r3, #0
 8010154:	dd05      	ble.n	8010162 <_dtoa_r+0x84a>
 8010156:	4631      	mov	r1, r6
 8010158:	461a      	mov	r2, r3
 801015a:	4620      	mov	r0, r4
 801015c:	f000 ffd2 	bl	8011104 <__lshift>
 8010160:	4606      	mov	r6, r0
 8010162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010164:	2b00      	cmp	r3, #0
 8010166:	d069      	beq.n	801023c <_dtoa_r+0x924>
 8010168:	4631      	mov	r1, r6
 801016a:	4658      	mov	r0, fp
 801016c:	f001 f836 	bl	80111dc <__mcmp>
 8010170:	2800      	cmp	r0, #0
 8010172:	da63      	bge.n	801023c <_dtoa_r+0x924>
 8010174:	2300      	movs	r3, #0
 8010176:	4659      	mov	r1, fp
 8010178:	220a      	movs	r2, #10
 801017a:	4620      	mov	r0, r4
 801017c:	f000 fdc8 	bl	8010d10 <__multadd>
 8010180:	9b08      	ldr	r3, [sp, #32]
 8010182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010186:	4683      	mov	fp, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 818f 	beq.w	80104ac <_dtoa_r+0xb94>
 801018e:	4639      	mov	r1, r7
 8010190:	2300      	movs	r3, #0
 8010192:	220a      	movs	r2, #10
 8010194:	4620      	mov	r0, r4
 8010196:	f000 fdbb 	bl	8010d10 <__multadd>
 801019a:	f1b9 0f00 	cmp.w	r9, #0
 801019e:	4607      	mov	r7, r0
 80101a0:	f300 808e 	bgt.w	80102c0 <_dtoa_r+0x9a8>
 80101a4:	9b05      	ldr	r3, [sp, #20]
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	dc50      	bgt.n	801024c <_dtoa_r+0x934>
 80101aa:	e089      	b.n	80102c0 <_dtoa_r+0x9a8>
 80101ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80101ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80101b2:	e75d      	b.n	8010070 <_dtoa_r+0x758>
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	1e5e      	subs	r6, r3, #1
 80101b8:	9b06      	ldr	r3, [sp, #24]
 80101ba:	42b3      	cmp	r3, r6
 80101bc:	bfbf      	itttt	lt
 80101be:	9b06      	ldrlt	r3, [sp, #24]
 80101c0:	9606      	strlt	r6, [sp, #24]
 80101c2:	1af2      	sublt	r2, r6, r3
 80101c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80101c6:	bfb6      	itet	lt
 80101c8:	189b      	addlt	r3, r3, r2
 80101ca:	1b9e      	subge	r6, r3, r6
 80101cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80101ce:	9b01      	ldr	r3, [sp, #4]
 80101d0:	bfb8      	it	lt
 80101d2:	2600      	movlt	r6, #0
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	bfb5      	itete	lt
 80101d8:	eba8 0503 	sublt.w	r5, r8, r3
 80101dc:	9b01      	ldrge	r3, [sp, #4]
 80101de:	2300      	movlt	r3, #0
 80101e0:	4645      	movge	r5, r8
 80101e2:	e747      	b.n	8010074 <_dtoa_r+0x75c>
 80101e4:	9e06      	ldr	r6, [sp, #24]
 80101e6:	9f08      	ldr	r7, [sp, #32]
 80101e8:	4645      	mov	r5, r8
 80101ea:	e74c      	b.n	8010086 <_dtoa_r+0x76e>
 80101ec:	9a06      	ldr	r2, [sp, #24]
 80101ee:	e775      	b.n	80100dc <_dtoa_r+0x7c4>
 80101f0:	9b05      	ldr	r3, [sp, #20]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	dc18      	bgt.n	8010228 <_dtoa_r+0x910>
 80101f6:	9b02      	ldr	r3, [sp, #8]
 80101f8:	b9b3      	cbnz	r3, 8010228 <_dtoa_r+0x910>
 80101fa:	9b03      	ldr	r3, [sp, #12]
 80101fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010200:	b9a3      	cbnz	r3, 801022c <_dtoa_r+0x914>
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010208:	0d1b      	lsrs	r3, r3, #20
 801020a:	051b      	lsls	r3, r3, #20
 801020c:	b12b      	cbz	r3, 801021a <_dtoa_r+0x902>
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	3301      	adds	r3, #1
 8010212:	9304      	str	r3, [sp, #16]
 8010214:	f108 0801 	add.w	r8, r8, #1
 8010218:	2301      	movs	r3, #1
 801021a:	9306      	str	r3, [sp, #24]
 801021c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801021e:	2b00      	cmp	r3, #0
 8010220:	f47f af74 	bne.w	801010c <_dtoa_r+0x7f4>
 8010224:	2001      	movs	r0, #1
 8010226:	e779      	b.n	801011c <_dtoa_r+0x804>
 8010228:	2300      	movs	r3, #0
 801022a:	e7f6      	b.n	801021a <_dtoa_r+0x902>
 801022c:	9b02      	ldr	r3, [sp, #8]
 801022e:	e7f4      	b.n	801021a <_dtoa_r+0x902>
 8010230:	d085      	beq.n	801013e <_dtoa_r+0x826>
 8010232:	4618      	mov	r0, r3
 8010234:	301c      	adds	r0, #28
 8010236:	e77d      	b.n	8010134 <_dtoa_r+0x81c>
 8010238:	40240000 	.word	0x40240000
 801023c:	9b01      	ldr	r3, [sp, #4]
 801023e:	2b00      	cmp	r3, #0
 8010240:	dc38      	bgt.n	80102b4 <_dtoa_r+0x99c>
 8010242:	9b05      	ldr	r3, [sp, #20]
 8010244:	2b02      	cmp	r3, #2
 8010246:	dd35      	ble.n	80102b4 <_dtoa_r+0x99c>
 8010248:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801024c:	f1b9 0f00 	cmp.w	r9, #0
 8010250:	d10d      	bne.n	801026e <_dtoa_r+0x956>
 8010252:	4631      	mov	r1, r6
 8010254:	464b      	mov	r3, r9
 8010256:	2205      	movs	r2, #5
 8010258:	4620      	mov	r0, r4
 801025a:	f000 fd59 	bl	8010d10 <__multadd>
 801025e:	4601      	mov	r1, r0
 8010260:	4606      	mov	r6, r0
 8010262:	4658      	mov	r0, fp
 8010264:	f000 ffba 	bl	80111dc <__mcmp>
 8010268:	2800      	cmp	r0, #0
 801026a:	f73f adbd 	bgt.w	800fde8 <_dtoa_r+0x4d0>
 801026e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010270:	9d00      	ldr	r5, [sp, #0]
 8010272:	ea6f 0a03 	mvn.w	sl, r3
 8010276:	f04f 0800 	mov.w	r8, #0
 801027a:	4631      	mov	r1, r6
 801027c:	4620      	mov	r0, r4
 801027e:	f000 fd25 	bl	8010ccc <_Bfree>
 8010282:	2f00      	cmp	r7, #0
 8010284:	f43f aeb4 	beq.w	800fff0 <_dtoa_r+0x6d8>
 8010288:	f1b8 0f00 	cmp.w	r8, #0
 801028c:	d005      	beq.n	801029a <_dtoa_r+0x982>
 801028e:	45b8      	cmp	r8, r7
 8010290:	d003      	beq.n	801029a <_dtoa_r+0x982>
 8010292:	4641      	mov	r1, r8
 8010294:	4620      	mov	r0, r4
 8010296:	f000 fd19 	bl	8010ccc <_Bfree>
 801029a:	4639      	mov	r1, r7
 801029c:	4620      	mov	r0, r4
 801029e:	f000 fd15 	bl	8010ccc <_Bfree>
 80102a2:	e6a5      	b.n	800fff0 <_dtoa_r+0x6d8>
 80102a4:	2600      	movs	r6, #0
 80102a6:	4637      	mov	r7, r6
 80102a8:	e7e1      	b.n	801026e <_dtoa_r+0x956>
 80102aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80102ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80102b0:	4637      	mov	r7, r6
 80102b2:	e599      	b.n	800fde8 <_dtoa_r+0x4d0>
 80102b4:	9b08      	ldr	r3, [sp, #32]
 80102b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	f000 80fd 	beq.w	80104ba <_dtoa_r+0xba2>
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	dd05      	ble.n	80102d0 <_dtoa_r+0x9b8>
 80102c4:	4639      	mov	r1, r7
 80102c6:	462a      	mov	r2, r5
 80102c8:	4620      	mov	r0, r4
 80102ca:	f000 ff1b 	bl	8011104 <__lshift>
 80102ce:	4607      	mov	r7, r0
 80102d0:	9b06      	ldr	r3, [sp, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d05c      	beq.n	8010390 <_dtoa_r+0xa78>
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 fcb7 	bl	8010c4c <_Balloc>
 80102de:	4605      	mov	r5, r0
 80102e0:	b928      	cbnz	r0, 80102ee <_dtoa_r+0x9d6>
 80102e2:	4b80      	ldr	r3, [pc, #512]	; (80104e4 <_dtoa_r+0xbcc>)
 80102e4:	4602      	mov	r2, r0
 80102e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80102ea:	f7ff bb2e 	b.w	800f94a <_dtoa_r+0x32>
 80102ee:	693a      	ldr	r2, [r7, #16]
 80102f0:	3202      	adds	r2, #2
 80102f2:	0092      	lsls	r2, r2, #2
 80102f4:	f107 010c 	add.w	r1, r7, #12
 80102f8:	300c      	adds	r0, #12
 80102fa:	f000 fc99 	bl	8010c30 <memcpy>
 80102fe:	2201      	movs	r2, #1
 8010300:	4629      	mov	r1, r5
 8010302:	4620      	mov	r0, r4
 8010304:	f000 fefe 	bl	8011104 <__lshift>
 8010308:	9b00      	ldr	r3, [sp, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	9301      	str	r3, [sp, #4]
 801030e:	9b00      	ldr	r3, [sp, #0]
 8010310:	444b      	add	r3, r9
 8010312:	9307      	str	r3, [sp, #28]
 8010314:	9b02      	ldr	r3, [sp, #8]
 8010316:	f003 0301 	and.w	r3, r3, #1
 801031a:	46b8      	mov	r8, r7
 801031c:	9306      	str	r3, [sp, #24]
 801031e:	4607      	mov	r7, r0
 8010320:	9b01      	ldr	r3, [sp, #4]
 8010322:	4631      	mov	r1, r6
 8010324:	3b01      	subs	r3, #1
 8010326:	4658      	mov	r0, fp
 8010328:	9302      	str	r3, [sp, #8]
 801032a:	f7ff fa67 	bl	800f7fc <quorem>
 801032e:	4603      	mov	r3, r0
 8010330:	3330      	adds	r3, #48	; 0x30
 8010332:	9004      	str	r0, [sp, #16]
 8010334:	4641      	mov	r1, r8
 8010336:	4658      	mov	r0, fp
 8010338:	9308      	str	r3, [sp, #32]
 801033a:	f000 ff4f 	bl	80111dc <__mcmp>
 801033e:	463a      	mov	r2, r7
 8010340:	4681      	mov	r9, r0
 8010342:	4631      	mov	r1, r6
 8010344:	4620      	mov	r0, r4
 8010346:	f000 ff65 	bl	8011214 <__mdiff>
 801034a:	68c2      	ldr	r2, [r0, #12]
 801034c:	9b08      	ldr	r3, [sp, #32]
 801034e:	4605      	mov	r5, r0
 8010350:	bb02      	cbnz	r2, 8010394 <_dtoa_r+0xa7c>
 8010352:	4601      	mov	r1, r0
 8010354:	4658      	mov	r0, fp
 8010356:	f000 ff41 	bl	80111dc <__mcmp>
 801035a:	9b08      	ldr	r3, [sp, #32]
 801035c:	4602      	mov	r2, r0
 801035e:	4629      	mov	r1, r5
 8010360:	4620      	mov	r0, r4
 8010362:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8010366:	f000 fcb1 	bl	8010ccc <_Bfree>
 801036a:	9b05      	ldr	r3, [sp, #20]
 801036c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801036e:	9d01      	ldr	r5, [sp, #4]
 8010370:	ea43 0102 	orr.w	r1, r3, r2
 8010374:	9b06      	ldr	r3, [sp, #24]
 8010376:	430b      	orrs	r3, r1
 8010378:	9b08      	ldr	r3, [sp, #32]
 801037a:	d10d      	bne.n	8010398 <_dtoa_r+0xa80>
 801037c:	2b39      	cmp	r3, #57	; 0x39
 801037e:	d029      	beq.n	80103d4 <_dtoa_r+0xabc>
 8010380:	f1b9 0f00 	cmp.w	r9, #0
 8010384:	dd01      	ble.n	801038a <_dtoa_r+0xa72>
 8010386:	9b04      	ldr	r3, [sp, #16]
 8010388:	3331      	adds	r3, #49	; 0x31
 801038a:	9a02      	ldr	r2, [sp, #8]
 801038c:	7013      	strb	r3, [r2, #0]
 801038e:	e774      	b.n	801027a <_dtoa_r+0x962>
 8010390:	4638      	mov	r0, r7
 8010392:	e7b9      	b.n	8010308 <_dtoa_r+0x9f0>
 8010394:	2201      	movs	r2, #1
 8010396:	e7e2      	b.n	801035e <_dtoa_r+0xa46>
 8010398:	f1b9 0f00 	cmp.w	r9, #0
 801039c:	db06      	blt.n	80103ac <_dtoa_r+0xa94>
 801039e:	9905      	ldr	r1, [sp, #20]
 80103a0:	ea41 0909 	orr.w	r9, r1, r9
 80103a4:	9906      	ldr	r1, [sp, #24]
 80103a6:	ea59 0101 	orrs.w	r1, r9, r1
 80103aa:	d120      	bne.n	80103ee <_dtoa_r+0xad6>
 80103ac:	2a00      	cmp	r2, #0
 80103ae:	ddec      	ble.n	801038a <_dtoa_r+0xa72>
 80103b0:	4659      	mov	r1, fp
 80103b2:	2201      	movs	r2, #1
 80103b4:	4620      	mov	r0, r4
 80103b6:	9301      	str	r3, [sp, #4]
 80103b8:	f000 fea4 	bl	8011104 <__lshift>
 80103bc:	4631      	mov	r1, r6
 80103be:	4683      	mov	fp, r0
 80103c0:	f000 ff0c 	bl	80111dc <__mcmp>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	9b01      	ldr	r3, [sp, #4]
 80103c8:	dc02      	bgt.n	80103d0 <_dtoa_r+0xab8>
 80103ca:	d1de      	bne.n	801038a <_dtoa_r+0xa72>
 80103cc:	07da      	lsls	r2, r3, #31
 80103ce:	d5dc      	bpl.n	801038a <_dtoa_r+0xa72>
 80103d0:	2b39      	cmp	r3, #57	; 0x39
 80103d2:	d1d8      	bne.n	8010386 <_dtoa_r+0xa6e>
 80103d4:	9a02      	ldr	r2, [sp, #8]
 80103d6:	2339      	movs	r3, #57	; 0x39
 80103d8:	7013      	strb	r3, [r2, #0]
 80103da:	462b      	mov	r3, r5
 80103dc:	461d      	mov	r5, r3
 80103de:	3b01      	subs	r3, #1
 80103e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80103e4:	2a39      	cmp	r2, #57	; 0x39
 80103e6:	d050      	beq.n	801048a <_dtoa_r+0xb72>
 80103e8:	3201      	adds	r2, #1
 80103ea:	701a      	strb	r2, [r3, #0]
 80103ec:	e745      	b.n	801027a <_dtoa_r+0x962>
 80103ee:	2a00      	cmp	r2, #0
 80103f0:	dd03      	ble.n	80103fa <_dtoa_r+0xae2>
 80103f2:	2b39      	cmp	r3, #57	; 0x39
 80103f4:	d0ee      	beq.n	80103d4 <_dtoa_r+0xabc>
 80103f6:	3301      	adds	r3, #1
 80103f8:	e7c7      	b.n	801038a <_dtoa_r+0xa72>
 80103fa:	9a01      	ldr	r2, [sp, #4]
 80103fc:	9907      	ldr	r1, [sp, #28]
 80103fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010402:	428a      	cmp	r2, r1
 8010404:	d02a      	beq.n	801045c <_dtoa_r+0xb44>
 8010406:	4659      	mov	r1, fp
 8010408:	2300      	movs	r3, #0
 801040a:	220a      	movs	r2, #10
 801040c:	4620      	mov	r0, r4
 801040e:	f000 fc7f 	bl	8010d10 <__multadd>
 8010412:	45b8      	cmp	r8, r7
 8010414:	4683      	mov	fp, r0
 8010416:	f04f 0300 	mov.w	r3, #0
 801041a:	f04f 020a 	mov.w	r2, #10
 801041e:	4641      	mov	r1, r8
 8010420:	4620      	mov	r0, r4
 8010422:	d107      	bne.n	8010434 <_dtoa_r+0xb1c>
 8010424:	f000 fc74 	bl	8010d10 <__multadd>
 8010428:	4680      	mov	r8, r0
 801042a:	4607      	mov	r7, r0
 801042c:	9b01      	ldr	r3, [sp, #4]
 801042e:	3301      	adds	r3, #1
 8010430:	9301      	str	r3, [sp, #4]
 8010432:	e775      	b.n	8010320 <_dtoa_r+0xa08>
 8010434:	f000 fc6c 	bl	8010d10 <__multadd>
 8010438:	4639      	mov	r1, r7
 801043a:	4680      	mov	r8, r0
 801043c:	2300      	movs	r3, #0
 801043e:	220a      	movs	r2, #10
 8010440:	4620      	mov	r0, r4
 8010442:	f000 fc65 	bl	8010d10 <__multadd>
 8010446:	4607      	mov	r7, r0
 8010448:	e7f0      	b.n	801042c <_dtoa_r+0xb14>
 801044a:	f1b9 0f00 	cmp.w	r9, #0
 801044e:	9a00      	ldr	r2, [sp, #0]
 8010450:	bfcc      	ite	gt
 8010452:	464d      	movgt	r5, r9
 8010454:	2501      	movle	r5, #1
 8010456:	4415      	add	r5, r2
 8010458:	f04f 0800 	mov.w	r8, #0
 801045c:	4659      	mov	r1, fp
 801045e:	2201      	movs	r2, #1
 8010460:	4620      	mov	r0, r4
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	f000 fe4e 	bl	8011104 <__lshift>
 8010468:	4631      	mov	r1, r6
 801046a:	4683      	mov	fp, r0
 801046c:	f000 feb6 	bl	80111dc <__mcmp>
 8010470:	2800      	cmp	r0, #0
 8010472:	dcb2      	bgt.n	80103da <_dtoa_r+0xac2>
 8010474:	d102      	bne.n	801047c <_dtoa_r+0xb64>
 8010476:	9b01      	ldr	r3, [sp, #4]
 8010478:	07db      	lsls	r3, r3, #31
 801047a:	d4ae      	bmi.n	80103da <_dtoa_r+0xac2>
 801047c:	462b      	mov	r3, r5
 801047e:	461d      	mov	r5, r3
 8010480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010484:	2a30      	cmp	r2, #48	; 0x30
 8010486:	d0fa      	beq.n	801047e <_dtoa_r+0xb66>
 8010488:	e6f7      	b.n	801027a <_dtoa_r+0x962>
 801048a:	9a00      	ldr	r2, [sp, #0]
 801048c:	429a      	cmp	r2, r3
 801048e:	d1a5      	bne.n	80103dc <_dtoa_r+0xac4>
 8010490:	f10a 0a01 	add.w	sl, sl, #1
 8010494:	2331      	movs	r3, #49	; 0x31
 8010496:	e779      	b.n	801038c <_dtoa_r+0xa74>
 8010498:	4b13      	ldr	r3, [pc, #76]	; (80104e8 <_dtoa_r+0xbd0>)
 801049a:	f7ff baaf 	b.w	800f9fc <_dtoa_r+0xe4>
 801049e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f47f aa86 	bne.w	800f9b2 <_dtoa_r+0x9a>
 80104a6:	4b11      	ldr	r3, [pc, #68]	; (80104ec <_dtoa_r+0xbd4>)
 80104a8:	f7ff baa8 	b.w	800f9fc <_dtoa_r+0xe4>
 80104ac:	f1b9 0f00 	cmp.w	r9, #0
 80104b0:	dc03      	bgt.n	80104ba <_dtoa_r+0xba2>
 80104b2:	9b05      	ldr	r3, [sp, #20]
 80104b4:	2b02      	cmp	r3, #2
 80104b6:	f73f aec9 	bgt.w	801024c <_dtoa_r+0x934>
 80104ba:	9d00      	ldr	r5, [sp, #0]
 80104bc:	4631      	mov	r1, r6
 80104be:	4658      	mov	r0, fp
 80104c0:	f7ff f99c 	bl	800f7fc <quorem>
 80104c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80104c8:	f805 3b01 	strb.w	r3, [r5], #1
 80104cc:	9a00      	ldr	r2, [sp, #0]
 80104ce:	1aaa      	subs	r2, r5, r2
 80104d0:	4591      	cmp	r9, r2
 80104d2:	ddba      	ble.n	801044a <_dtoa_r+0xb32>
 80104d4:	4659      	mov	r1, fp
 80104d6:	2300      	movs	r3, #0
 80104d8:	220a      	movs	r2, #10
 80104da:	4620      	mov	r0, r4
 80104dc:	f000 fc18 	bl	8010d10 <__multadd>
 80104e0:	4683      	mov	fp, r0
 80104e2:	e7eb      	b.n	80104bc <_dtoa_r+0xba4>
 80104e4:	08026049 	.word	0x08026049
 80104e8:	08025da8 	.word	0x08025da8
 80104ec:	08025fdd 	.word	0x08025fdd

080104f0 <fiprintf>:
 80104f0:	b40e      	push	{r1, r2, r3}
 80104f2:	b503      	push	{r0, r1, lr}
 80104f4:	4601      	mov	r1, r0
 80104f6:	ab03      	add	r3, sp, #12
 80104f8:	4805      	ldr	r0, [pc, #20]	; (8010510 <fiprintf+0x20>)
 80104fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80104fe:	6800      	ldr	r0, [r0, #0]
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	f001 fa9d 	bl	8011a40 <_vfiprintf_r>
 8010506:	b002      	add	sp, #8
 8010508:	f85d eb04 	ldr.w	lr, [sp], #4
 801050c:	b003      	add	sp, #12
 801050e:	4770      	bx	lr
 8010510:	20000040 	.word	0x20000040

08010514 <rshift>:
 8010514:	6903      	ldr	r3, [r0, #16]
 8010516:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801051a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801051e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010522:	f100 0414 	add.w	r4, r0, #20
 8010526:	dd45      	ble.n	80105b4 <rshift+0xa0>
 8010528:	f011 011f 	ands.w	r1, r1, #31
 801052c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010530:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010534:	d10c      	bne.n	8010550 <rshift+0x3c>
 8010536:	f100 0710 	add.w	r7, r0, #16
 801053a:	4629      	mov	r1, r5
 801053c:	42b1      	cmp	r1, r6
 801053e:	d334      	bcc.n	80105aa <rshift+0x96>
 8010540:	1a9b      	subs	r3, r3, r2
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	1eea      	subs	r2, r5, #3
 8010546:	4296      	cmp	r6, r2
 8010548:	bf38      	it	cc
 801054a:	2300      	movcc	r3, #0
 801054c:	4423      	add	r3, r4
 801054e:	e015      	b.n	801057c <rshift+0x68>
 8010550:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010554:	f1c1 0820 	rsb	r8, r1, #32
 8010558:	40cf      	lsrs	r7, r1
 801055a:	f105 0e04 	add.w	lr, r5, #4
 801055e:	46a1      	mov	r9, r4
 8010560:	4576      	cmp	r6, lr
 8010562:	46f4      	mov	ip, lr
 8010564:	d815      	bhi.n	8010592 <rshift+0x7e>
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	009a      	lsls	r2, r3, #2
 801056a:	3a04      	subs	r2, #4
 801056c:	3501      	adds	r5, #1
 801056e:	42ae      	cmp	r6, r5
 8010570:	bf38      	it	cc
 8010572:	2200      	movcc	r2, #0
 8010574:	18a3      	adds	r3, r4, r2
 8010576:	50a7      	str	r7, [r4, r2]
 8010578:	b107      	cbz	r7, 801057c <rshift+0x68>
 801057a:	3304      	adds	r3, #4
 801057c:	1b1a      	subs	r2, r3, r4
 801057e:	42a3      	cmp	r3, r4
 8010580:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010584:	bf08      	it	eq
 8010586:	2300      	moveq	r3, #0
 8010588:	6102      	str	r2, [r0, #16]
 801058a:	bf08      	it	eq
 801058c:	6143      	streq	r3, [r0, #20]
 801058e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010592:	f8dc c000 	ldr.w	ip, [ip]
 8010596:	fa0c fc08 	lsl.w	ip, ip, r8
 801059a:	ea4c 0707 	orr.w	r7, ip, r7
 801059e:	f849 7b04 	str.w	r7, [r9], #4
 80105a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80105a6:	40cf      	lsrs	r7, r1
 80105a8:	e7da      	b.n	8010560 <rshift+0x4c>
 80105aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80105ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80105b2:	e7c3      	b.n	801053c <rshift+0x28>
 80105b4:	4623      	mov	r3, r4
 80105b6:	e7e1      	b.n	801057c <rshift+0x68>

080105b8 <__hexdig_fun>:
 80105b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80105bc:	2b09      	cmp	r3, #9
 80105be:	d802      	bhi.n	80105c6 <__hexdig_fun+0xe>
 80105c0:	3820      	subs	r0, #32
 80105c2:	b2c0      	uxtb	r0, r0
 80105c4:	4770      	bx	lr
 80105c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80105ca:	2b05      	cmp	r3, #5
 80105cc:	d801      	bhi.n	80105d2 <__hexdig_fun+0x1a>
 80105ce:	3847      	subs	r0, #71	; 0x47
 80105d0:	e7f7      	b.n	80105c2 <__hexdig_fun+0xa>
 80105d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80105d6:	2b05      	cmp	r3, #5
 80105d8:	d801      	bhi.n	80105de <__hexdig_fun+0x26>
 80105da:	3827      	subs	r0, #39	; 0x27
 80105dc:	e7f1      	b.n	80105c2 <__hexdig_fun+0xa>
 80105de:	2000      	movs	r0, #0
 80105e0:	4770      	bx	lr
	...

080105e4 <__gethex>:
 80105e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	ed2d 8b02 	vpush	{d8}
 80105ec:	b089      	sub	sp, #36	; 0x24
 80105ee:	ee08 0a10 	vmov	s16, r0
 80105f2:	9304      	str	r3, [sp, #16]
 80105f4:	4bbc      	ldr	r3, [pc, #752]	; (80108e8 <__gethex+0x304>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	4618      	mov	r0, r3
 80105fc:	468b      	mov	fp, r1
 80105fe:	4690      	mov	r8, r2
 8010600:	f7ef fdf8 	bl	80001f4 <strlen>
 8010604:	9b01      	ldr	r3, [sp, #4]
 8010606:	f8db 2000 	ldr.w	r2, [fp]
 801060a:	4403      	add	r3, r0
 801060c:	4682      	mov	sl, r0
 801060e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010612:	9305      	str	r3, [sp, #20]
 8010614:	1c93      	adds	r3, r2, #2
 8010616:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801061a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801061e:	32fe      	adds	r2, #254	; 0xfe
 8010620:	18d1      	adds	r1, r2, r3
 8010622:	461f      	mov	r7, r3
 8010624:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010628:	9100      	str	r1, [sp, #0]
 801062a:	2830      	cmp	r0, #48	; 0x30
 801062c:	d0f8      	beq.n	8010620 <__gethex+0x3c>
 801062e:	f7ff ffc3 	bl	80105b8 <__hexdig_fun>
 8010632:	4604      	mov	r4, r0
 8010634:	2800      	cmp	r0, #0
 8010636:	d13a      	bne.n	80106ae <__gethex+0xca>
 8010638:	9901      	ldr	r1, [sp, #4]
 801063a:	4652      	mov	r2, sl
 801063c:	4638      	mov	r0, r7
 801063e:	f001 fb47 	bl	8011cd0 <strncmp>
 8010642:	4605      	mov	r5, r0
 8010644:	2800      	cmp	r0, #0
 8010646:	d168      	bne.n	801071a <__gethex+0x136>
 8010648:	f817 000a 	ldrb.w	r0, [r7, sl]
 801064c:	eb07 060a 	add.w	r6, r7, sl
 8010650:	f7ff ffb2 	bl	80105b8 <__hexdig_fun>
 8010654:	2800      	cmp	r0, #0
 8010656:	d062      	beq.n	801071e <__gethex+0x13a>
 8010658:	4633      	mov	r3, r6
 801065a:	7818      	ldrb	r0, [r3, #0]
 801065c:	2830      	cmp	r0, #48	; 0x30
 801065e:	461f      	mov	r7, r3
 8010660:	f103 0301 	add.w	r3, r3, #1
 8010664:	d0f9      	beq.n	801065a <__gethex+0x76>
 8010666:	f7ff ffa7 	bl	80105b8 <__hexdig_fun>
 801066a:	2301      	movs	r3, #1
 801066c:	fab0 f480 	clz	r4, r0
 8010670:	0964      	lsrs	r4, r4, #5
 8010672:	4635      	mov	r5, r6
 8010674:	9300      	str	r3, [sp, #0]
 8010676:	463a      	mov	r2, r7
 8010678:	4616      	mov	r6, r2
 801067a:	3201      	adds	r2, #1
 801067c:	7830      	ldrb	r0, [r6, #0]
 801067e:	f7ff ff9b 	bl	80105b8 <__hexdig_fun>
 8010682:	2800      	cmp	r0, #0
 8010684:	d1f8      	bne.n	8010678 <__gethex+0x94>
 8010686:	9901      	ldr	r1, [sp, #4]
 8010688:	4652      	mov	r2, sl
 801068a:	4630      	mov	r0, r6
 801068c:	f001 fb20 	bl	8011cd0 <strncmp>
 8010690:	b980      	cbnz	r0, 80106b4 <__gethex+0xd0>
 8010692:	b94d      	cbnz	r5, 80106a8 <__gethex+0xc4>
 8010694:	eb06 050a 	add.w	r5, r6, sl
 8010698:	462a      	mov	r2, r5
 801069a:	4616      	mov	r6, r2
 801069c:	3201      	adds	r2, #1
 801069e:	7830      	ldrb	r0, [r6, #0]
 80106a0:	f7ff ff8a 	bl	80105b8 <__hexdig_fun>
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d1f8      	bne.n	801069a <__gethex+0xb6>
 80106a8:	1bad      	subs	r5, r5, r6
 80106aa:	00ad      	lsls	r5, r5, #2
 80106ac:	e004      	b.n	80106b8 <__gethex+0xd4>
 80106ae:	2400      	movs	r4, #0
 80106b0:	4625      	mov	r5, r4
 80106b2:	e7e0      	b.n	8010676 <__gethex+0x92>
 80106b4:	2d00      	cmp	r5, #0
 80106b6:	d1f7      	bne.n	80106a8 <__gethex+0xc4>
 80106b8:	7833      	ldrb	r3, [r6, #0]
 80106ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106be:	2b50      	cmp	r3, #80	; 0x50
 80106c0:	d13b      	bne.n	801073a <__gethex+0x156>
 80106c2:	7873      	ldrb	r3, [r6, #1]
 80106c4:	2b2b      	cmp	r3, #43	; 0x2b
 80106c6:	d02c      	beq.n	8010722 <__gethex+0x13e>
 80106c8:	2b2d      	cmp	r3, #45	; 0x2d
 80106ca:	d02e      	beq.n	801072a <__gethex+0x146>
 80106cc:	1c71      	adds	r1, r6, #1
 80106ce:	f04f 0900 	mov.w	r9, #0
 80106d2:	7808      	ldrb	r0, [r1, #0]
 80106d4:	f7ff ff70 	bl	80105b8 <__hexdig_fun>
 80106d8:	1e43      	subs	r3, r0, #1
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	2b18      	cmp	r3, #24
 80106de:	d82c      	bhi.n	801073a <__gethex+0x156>
 80106e0:	f1a0 0210 	sub.w	r2, r0, #16
 80106e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80106e8:	f7ff ff66 	bl	80105b8 <__hexdig_fun>
 80106ec:	1e43      	subs	r3, r0, #1
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b18      	cmp	r3, #24
 80106f2:	d91d      	bls.n	8010730 <__gethex+0x14c>
 80106f4:	f1b9 0f00 	cmp.w	r9, #0
 80106f8:	d000      	beq.n	80106fc <__gethex+0x118>
 80106fa:	4252      	negs	r2, r2
 80106fc:	4415      	add	r5, r2
 80106fe:	f8cb 1000 	str.w	r1, [fp]
 8010702:	b1e4      	cbz	r4, 801073e <__gethex+0x15a>
 8010704:	9b00      	ldr	r3, [sp, #0]
 8010706:	2b00      	cmp	r3, #0
 8010708:	bf14      	ite	ne
 801070a:	2700      	movne	r7, #0
 801070c:	2706      	moveq	r7, #6
 801070e:	4638      	mov	r0, r7
 8010710:	b009      	add	sp, #36	; 0x24
 8010712:	ecbd 8b02 	vpop	{d8}
 8010716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071a:	463e      	mov	r6, r7
 801071c:	4625      	mov	r5, r4
 801071e:	2401      	movs	r4, #1
 8010720:	e7ca      	b.n	80106b8 <__gethex+0xd4>
 8010722:	f04f 0900 	mov.w	r9, #0
 8010726:	1cb1      	adds	r1, r6, #2
 8010728:	e7d3      	b.n	80106d2 <__gethex+0xee>
 801072a:	f04f 0901 	mov.w	r9, #1
 801072e:	e7fa      	b.n	8010726 <__gethex+0x142>
 8010730:	230a      	movs	r3, #10
 8010732:	fb03 0202 	mla	r2, r3, r2, r0
 8010736:	3a10      	subs	r2, #16
 8010738:	e7d4      	b.n	80106e4 <__gethex+0x100>
 801073a:	4631      	mov	r1, r6
 801073c:	e7df      	b.n	80106fe <__gethex+0x11a>
 801073e:	1bf3      	subs	r3, r6, r7
 8010740:	3b01      	subs	r3, #1
 8010742:	4621      	mov	r1, r4
 8010744:	2b07      	cmp	r3, #7
 8010746:	dc0b      	bgt.n	8010760 <__gethex+0x17c>
 8010748:	ee18 0a10 	vmov	r0, s16
 801074c:	f000 fa7e 	bl	8010c4c <_Balloc>
 8010750:	4604      	mov	r4, r0
 8010752:	b940      	cbnz	r0, 8010766 <__gethex+0x182>
 8010754:	4b65      	ldr	r3, [pc, #404]	; (80108ec <__gethex+0x308>)
 8010756:	4602      	mov	r2, r0
 8010758:	21de      	movs	r1, #222	; 0xde
 801075a:	4865      	ldr	r0, [pc, #404]	; (80108f0 <__gethex+0x30c>)
 801075c:	f7ff f830 	bl	800f7c0 <__assert_func>
 8010760:	3101      	adds	r1, #1
 8010762:	105b      	asrs	r3, r3, #1
 8010764:	e7ee      	b.n	8010744 <__gethex+0x160>
 8010766:	f100 0914 	add.w	r9, r0, #20
 801076a:	f04f 0b00 	mov.w	fp, #0
 801076e:	f1ca 0301 	rsb	r3, sl, #1
 8010772:	f8cd 9008 	str.w	r9, [sp, #8]
 8010776:	f8cd b000 	str.w	fp, [sp]
 801077a:	9306      	str	r3, [sp, #24]
 801077c:	42b7      	cmp	r7, r6
 801077e:	d340      	bcc.n	8010802 <__gethex+0x21e>
 8010780:	9802      	ldr	r0, [sp, #8]
 8010782:	9b00      	ldr	r3, [sp, #0]
 8010784:	f840 3b04 	str.w	r3, [r0], #4
 8010788:	eba0 0009 	sub.w	r0, r0, r9
 801078c:	1080      	asrs	r0, r0, #2
 801078e:	0146      	lsls	r6, r0, #5
 8010790:	6120      	str	r0, [r4, #16]
 8010792:	4618      	mov	r0, r3
 8010794:	f000 fb50 	bl	8010e38 <__hi0bits>
 8010798:	1a30      	subs	r0, r6, r0
 801079a:	f8d8 6000 	ldr.w	r6, [r8]
 801079e:	42b0      	cmp	r0, r6
 80107a0:	dd63      	ble.n	801086a <__gethex+0x286>
 80107a2:	1b87      	subs	r7, r0, r6
 80107a4:	4639      	mov	r1, r7
 80107a6:	4620      	mov	r0, r4
 80107a8:	f000 feea 	bl	8011580 <__any_on>
 80107ac:	4682      	mov	sl, r0
 80107ae:	b1a8      	cbz	r0, 80107dc <__gethex+0x1f8>
 80107b0:	1e7b      	subs	r3, r7, #1
 80107b2:	1159      	asrs	r1, r3, #5
 80107b4:	f003 021f 	and.w	r2, r3, #31
 80107b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80107bc:	f04f 0a01 	mov.w	sl, #1
 80107c0:	fa0a f202 	lsl.w	r2, sl, r2
 80107c4:	420a      	tst	r2, r1
 80107c6:	d009      	beq.n	80107dc <__gethex+0x1f8>
 80107c8:	4553      	cmp	r3, sl
 80107ca:	dd05      	ble.n	80107d8 <__gethex+0x1f4>
 80107cc:	1eb9      	subs	r1, r7, #2
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 fed6 	bl	8011580 <__any_on>
 80107d4:	2800      	cmp	r0, #0
 80107d6:	d145      	bne.n	8010864 <__gethex+0x280>
 80107d8:	f04f 0a02 	mov.w	sl, #2
 80107dc:	4639      	mov	r1, r7
 80107de:	4620      	mov	r0, r4
 80107e0:	f7ff fe98 	bl	8010514 <rshift>
 80107e4:	443d      	add	r5, r7
 80107e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107ea:	42ab      	cmp	r3, r5
 80107ec:	da4c      	bge.n	8010888 <__gethex+0x2a4>
 80107ee:	ee18 0a10 	vmov	r0, s16
 80107f2:	4621      	mov	r1, r4
 80107f4:	f000 fa6a 	bl	8010ccc <_Bfree>
 80107f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80107fa:	2300      	movs	r3, #0
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	27a3      	movs	r7, #163	; 0xa3
 8010800:	e785      	b.n	801070e <__gethex+0x12a>
 8010802:	1e73      	subs	r3, r6, #1
 8010804:	9a05      	ldr	r2, [sp, #20]
 8010806:	9303      	str	r3, [sp, #12]
 8010808:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801080c:	4293      	cmp	r3, r2
 801080e:	d019      	beq.n	8010844 <__gethex+0x260>
 8010810:	f1bb 0f20 	cmp.w	fp, #32
 8010814:	d107      	bne.n	8010826 <__gethex+0x242>
 8010816:	9b02      	ldr	r3, [sp, #8]
 8010818:	9a00      	ldr	r2, [sp, #0]
 801081a:	f843 2b04 	str.w	r2, [r3], #4
 801081e:	9302      	str	r3, [sp, #8]
 8010820:	2300      	movs	r3, #0
 8010822:	9300      	str	r3, [sp, #0]
 8010824:	469b      	mov	fp, r3
 8010826:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801082a:	f7ff fec5 	bl	80105b8 <__hexdig_fun>
 801082e:	9b00      	ldr	r3, [sp, #0]
 8010830:	f000 000f 	and.w	r0, r0, #15
 8010834:	fa00 f00b 	lsl.w	r0, r0, fp
 8010838:	4303      	orrs	r3, r0
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	f10b 0b04 	add.w	fp, fp, #4
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	e00d      	b.n	8010860 <__gethex+0x27c>
 8010844:	9b03      	ldr	r3, [sp, #12]
 8010846:	9a06      	ldr	r2, [sp, #24]
 8010848:	4413      	add	r3, r2
 801084a:	42bb      	cmp	r3, r7
 801084c:	d3e0      	bcc.n	8010810 <__gethex+0x22c>
 801084e:	4618      	mov	r0, r3
 8010850:	9901      	ldr	r1, [sp, #4]
 8010852:	9307      	str	r3, [sp, #28]
 8010854:	4652      	mov	r2, sl
 8010856:	f001 fa3b 	bl	8011cd0 <strncmp>
 801085a:	9b07      	ldr	r3, [sp, #28]
 801085c:	2800      	cmp	r0, #0
 801085e:	d1d7      	bne.n	8010810 <__gethex+0x22c>
 8010860:	461e      	mov	r6, r3
 8010862:	e78b      	b.n	801077c <__gethex+0x198>
 8010864:	f04f 0a03 	mov.w	sl, #3
 8010868:	e7b8      	b.n	80107dc <__gethex+0x1f8>
 801086a:	da0a      	bge.n	8010882 <__gethex+0x29e>
 801086c:	1a37      	subs	r7, r6, r0
 801086e:	4621      	mov	r1, r4
 8010870:	ee18 0a10 	vmov	r0, s16
 8010874:	463a      	mov	r2, r7
 8010876:	f000 fc45 	bl	8011104 <__lshift>
 801087a:	1bed      	subs	r5, r5, r7
 801087c:	4604      	mov	r4, r0
 801087e:	f100 0914 	add.w	r9, r0, #20
 8010882:	f04f 0a00 	mov.w	sl, #0
 8010886:	e7ae      	b.n	80107e6 <__gethex+0x202>
 8010888:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801088c:	42a8      	cmp	r0, r5
 801088e:	dd72      	ble.n	8010976 <__gethex+0x392>
 8010890:	1b45      	subs	r5, r0, r5
 8010892:	42ae      	cmp	r6, r5
 8010894:	dc36      	bgt.n	8010904 <__gethex+0x320>
 8010896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d02a      	beq.n	80108f4 <__gethex+0x310>
 801089e:	2b03      	cmp	r3, #3
 80108a0:	d02c      	beq.n	80108fc <__gethex+0x318>
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d115      	bne.n	80108d2 <__gethex+0x2ee>
 80108a6:	42ae      	cmp	r6, r5
 80108a8:	d113      	bne.n	80108d2 <__gethex+0x2ee>
 80108aa:	2e01      	cmp	r6, #1
 80108ac:	d10b      	bne.n	80108c6 <__gethex+0x2e2>
 80108ae:	9a04      	ldr	r2, [sp, #16]
 80108b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108b4:	6013      	str	r3, [r2, #0]
 80108b6:	2301      	movs	r3, #1
 80108b8:	6123      	str	r3, [r4, #16]
 80108ba:	f8c9 3000 	str.w	r3, [r9]
 80108be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108c0:	2762      	movs	r7, #98	; 0x62
 80108c2:	601c      	str	r4, [r3, #0]
 80108c4:	e723      	b.n	801070e <__gethex+0x12a>
 80108c6:	1e71      	subs	r1, r6, #1
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 fe59 	bl	8011580 <__any_on>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	d1ed      	bne.n	80108ae <__gethex+0x2ca>
 80108d2:	ee18 0a10 	vmov	r0, s16
 80108d6:	4621      	mov	r1, r4
 80108d8:	f000 f9f8 	bl	8010ccc <_Bfree>
 80108dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108de:	2300      	movs	r3, #0
 80108e0:	6013      	str	r3, [r2, #0]
 80108e2:	2750      	movs	r7, #80	; 0x50
 80108e4:	e713      	b.n	801070e <__gethex+0x12a>
 80108e6:	bf00      	nop
 80108e8:	080260c4 	.word	0x080260c4
 80108ec:	08026049 	.word	0x08026049
 80108f0:	0802605a 	.word	0x0802605a
 80108f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1eb      	bne.n	80108d2 <__gethex+0x2ee>
 80108fa:	e7d8      	b.n	80108ae <__gethex+0x2ca>
 80108fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1d5      	bne.n	80108ae <__gethex+0x2ca>
 8010902:	e7e6      	b.n	80108d2 <__gethex+0x2ee>
 8010904:	1e6f      	subs	r7, r5, #1
 8010906:	f1ba 0f00 	cmp.w	sl, #0
 801090a:	d131      	bne.n	8010970 <__gethex+0x38c>
 801090c:	b127      	cbz	r7, 8010918 <__gethex+0x334>
 801090e:	4639      	mov	r1, r7
 8010910:	4620      	mov	r0, r4
 8010912:	f000 fe35 	bl	8011580 <__any_on>
 8010916:	4682      	mov	sl, r0
 8010918:	117b      	asrs	r3, r7, #5
 801091a:	2101      	movs	r1, #1
 801091c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010920:	f007 071f 	and.w	r7, r7, #31
 8010924:	fa01 f707 	lsl.w	r7, r1, r7
 8010928:	421f      	tst	r7, r3
 801092a:	4629      	mov	r1, r5
 801092c:	4620      	mov	r0, r4
 801092e:	bf18      	it	ne
 8010930:	f04a 0a02 	orrne.w	sl, sl, #2
 8010934:	1b76      	subs	r6, r6, r5
 8010936:	f7ff fded 	bl	8010514 <rshift>
 801093a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801093e:	2702      	movs	r7, #2
 8010940:	f1ba 0f00 	cmp.w	sl, #0
 8010944:	d048      	beq.n	80109d8 <__gethex+0x3f4>
 8010946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801094a:	2b02      	cmp	r3, #2
 801094c:	d015      	beq.n	801097a <__gethex+0x396>
 801094e:	2b03      	cmp	r3, #3
 8010950:	d017      	beq.n	8010982 <__gethex+0x39e>
 8010952:	2b01      	cmp	r3, #1
 8010954:	d109      	bne.n	801096a <__gethex+0x386>
 8010956:	f01a 0f02 	tst.w	sl, #2
 801095a:	d006      	beq.n	801096a <__gethex+0x386>
 801095c:	f8d9 0000 	ldr.w	r0, [r9]
 8010960:	ea4a 0a00 	orr.w	sl, sl, r0
 8010964:	f01a 0f01 	tst.w	sl, #1
 8010968:	d10e      	bne.n	8010988 <__gethex+0x3a4>
 801096a:	f047 0710 	orr.w	r7, r7, #16
 801096e:	e033      	b.n	80109d8 <__gethex+0x3f4>
 8010970:	f04f 0a01 	mov.w	sl, #1
 8010974:	e7d0      	b.n	8010918 <__gethex+0x334>
 8010976:	2701      	movs	r7, #1
 8010978:	e7e2      	b.n	8010940 <__gethex+0x35c>
 801097a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801097c:	f1c3 0301 	rsb	r3, r3, #1
 8010980:	9315      	str	r3, [sp, #84]	; 0x54
 8010982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010984:	2b00      	cmp	r3, #0
 8010986:	d0f0      	beq.n	801096a <__gethex+0x386>
 8010988:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801098c:	f104 0314 	add.w	r3, r4, #20
 8010990:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010994:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010998:	f04f 0c00 	mov.w	ip, #0
 801099c:	4618      	mov	r0, r3
 801099e:	f853 2b04 	ldr.w	r2, [r3], #4
 80109a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80109a6:	d01c      	beq.n	80109e2 <__gethex+0x3fe>
 80109a8:	3201      	adds	r2, #1
 80109aa:	6002      	str	r2, [r0, #0]
 80109ac:	2f02      	cmp	r7, #2
 80109ae:	f104 0314 	add.w	r3, r4, #20
 80109b2:	d13f      	bne.n	8010a34 <__gethex+0x450>
 80109b4:	f8d8 2000 	ldr.w	r2, [r8]
 80109b8:	3a01      	subs	r2, #1
 80109ba:	42b2      	cmp	r2, r6
 80109bc:	d10a      	bne.n	80109d4 <__gethex+0x3f0>
 80109be:	1171      	asrs	r1, r6, #5
 80109c0:	2201      	movs	r2, #1
 80109c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109c6:	f006 061f 	and.w	r6, r6, #31
 80109ca:	fa02 f606 	lsl.w	r6, r2, r6
 80109ce:	421e      	tst	r6, r3
 80109d0:	bf18      	it	ne
 80109d2:	4617      	movne	r7, r2
 80109d4:	f047 0720 	orr.w	r7, r7, #32
 80109d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109da:	601c      	str	r4, [r3, #0]
 80109dc:	9b04      	ldr	r3, [sp, #16]
 80109de:	601d      	str	r5, [r3, #0]
 80109e0:	e695      	b.n	801070e <__gethex+0x12a>
 80109e2:	4299      	cmp	r1, r3
 80109e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80109e8:	d8d8      	bhi.n	801099c <__gethex+0x3b8>
 80109ea:	68a3      	ldr	r3, [r4, #8]
 80109ec:	459b      	cmp	fp, r3
 80109ee:	db19      	blt.n	8010a24 <__gethex+0x440>
 80109f0:	6861      	ldr	r1, [r4, #4]
 80109f2:	ee18 0a10 	vmov	r0, s16
 80109f6:	3101      	adds	r1, #1
 80109f8:	f000 f928 	bl	8010c4c <_Balloc>
 80109fc:	4681      	mov	r9, r0
 80109fe:	b918      	cbnz	r0, 8010a08 <__gethex+0x424>
 8010a00:	4b1a      	ldr	r3, [pc, #104]	; (8010a6c <__gethex+0x488>)
 8010a02:	4602      	mov	r2, r0
 8010a04:	2184      	movs	r1, #132	; 0x84
 8010a06:	e6a8      	b.n	801075a <__gethex+0x176>
 8010a08:	6922      	ldr	r2, [r4, #16]
 8010a0a:	3202      	adds	r2, #2
 8010a0c:	f104 010c 	add.w	r1, r4, #12
 8010a10:	0092      	lsls	r2, r2, #2
 8010a12:	300c      	adds	r0, #12
 8010a14:	f000 f90c 	bl	8010c30 <memcpy>
 8010a18:	4621      	mov	r1, r4
 8010a1a:	ee18 0a10 	vmov	r0, s16
 8010a1e:	f000 f955 	bl	8010ccc <_Bfree>
 8010a22:	464c      	mov	r4, r9
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010a2c:	6122      	str	r2, [r4, #16]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	615a      	str	r2, [r3, #20]
 8010a32:	e7bb      	b.n	80109ac <__gethex+0x3c8>
 8010a34:	6922      	ldr	r2, [r4, #16]
 8010a36:	455a      	cmp	r2, fp
 8010a38:	dd0b      	ble.n	8010a52 <__gethex+0x46e>
 8010a3a:	2101      	movs	r1, #1
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7ff fd69 	bl	8010514 <rshift>
 8010a42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a46:	3501      	adds	r5, #1
 8010a48:	42ab      	cmp	r3, r5
 8010a4a:	f6ff aed0 	blt.w	80107ee <__gethex+0x20a>
 8010a4e:	2701      	movs	r7, #1
 8010a50:	e7c0      	b.n	80109d4 <__gethex+0x3f0>
 8010a52:	f016 061f 	ands.w	r6, r6, #31
 8010a56:	d0fa      	beq.n	8010a4e <__gethex+0x46a>
 8010a58:	449a      	add	sl, r3
 8010a5a:	f1c6 0620 	rsb	r6, r6, #32
 8010a5e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010a62:	f000 f9e9 	bl	8010e38 <__hi0bits>
 8010a66:	42b0      	cmp	r0, r6
 8010a68:	dbe7      	blt.n	8010a3a <__gethex+0x456>
 8010a6a:	e7f0      	b.n	8010a4e <__gethex+0x46a>
 8010a6c:	08026049 	.word	0x08026049

08010a70 <L_shift>:
 8010a70:	f1c2 0208 	rsb	r2, r2, #8
 8010a74:	0092      	lsls	r2, r2, #2
 8010a76:	b570      	push	{r4, r5, r6, lr}
 8010a78:	f1c2 0620 	rsb	r6, r2, #32
 8010a7c:	6843      	ldr	r3, [r0, #4]
 8010a7e:	6804      	ldr	r4, [r0, #0]
 8010a80:	fa03 f506 	lsl.w	r5, r3, r6
 8010a84:	432c      	orrs	r4, r5
 8010a86:	40d3      	lsrs	r3, r2
 8010a88:	6004      	str	r4, [r0, #0]
 8010a8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8010a8e:	4288      	cmp	r0, r1
 8010a90:	d3f4      	bcc.n	8010a7c <L_shift+0xc>
 8010a92:	bd70      	pop	{r4, r5, r6, pc}

08010a94 <__match>:
 8010a94:	b530      	push	{r4, r5, lr}
 8010a96:	6803      	ldr	r3, [r0, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a9e:	b914      	cbnz	r4, 8010aa6 <__match+0x12>
 8010aa0:	6003      	str	r3, [r0, #0]
 8010aa2:	2001      	movs	r0, #1
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010aae:	2d19      	cmp	r5, #25
 8010ab0:	bf98      	it	ls
 8010ab2:	3220      	addls	r2, #32
 8010ab4:	42a2      	cmp	r2, r4
 8010ab6:	d0f0      	beq.n	8010a9a <__match+0x6>
 8010ab8:	2000      	movs	r0, #0
 8010aba:	e7f3      	b.n	8010aa4 <__match+0x10>

08010abc <__hexnan>:
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	680b      	ldr	r3, [r1, #0]
 8010ac2:	6801      	ldr	r1, [r0, #0]
 8010ac4:	115e      	asrs	r6, r3, #5
 8010ac6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010aca:	f013 031f 	ands.w	r3, r3, #31
 8010ace:	b087      	sub	sp, #28
 8010ad0:	bf18      	it	ne
 8010ad2:	3604      	addne	r6, #4
 8010ad4:	2500      	movs	r5, #0
 8010ad6:	1f37      	subs	r7, r6, #4
 8010ad8:	4682      	mov	sl, r0
 8010ada:	4690      	mov	r8, r2
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	f846 5c04 	str.w	r5, [r6, #-4]
 8010ae2:	46b9      	mov	r9, r7
 8010ae4:	463c      	mov	r4, r7
 8010ae6:	9502      	str	r5, [sp, #8]
 8010ae8:	46ab      	mov	fp, r5
 8010aea:	784a      	ldrb	r2, [r1, #1]
 8010aec:	1c4b      	adds	r3, r1, #1
 8010aee:	9303      	str	r3, [sp, #12]
 8010af0:	b342      	cbz	r2, 8010b44 <__hexnan+0x88>
 8010af2:	4610      	mov	r0, r2
 8010af4:	9105      	str	r1, [sp, #20]
 8010af6:	9204      	str	r2, [sp, #16]
 8010af8:	f7ff fd5e 	bl	80105b8 <__hexdig_fun>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d14f      	bne.n	8010ba0 <__hexnan+0xe4>
 8010b00:	9a04      	ldr	r2, [sp, #16]
 8010b02:	9905      	ldr	r1, [sp, #20]
 8010b04:	2a20      	cmp	r2, #32
 8010b06:	d818      	bhi.n	8010b3a <__hexnan+0x7e>
 8010b08:	9b02      	ldr	r3, [sp, #8]
 8010b0a:	459b      	cmp	fp, r3
 8010b0c:	dd13      	ble.n	8010b36 <__hexnan+0x7a>
 8010b0e:	454c      	cmp	r4, r9
 8010b10:	d206      	bcs.n	8010b20 <__hexnan+0x64>
 8010b12:	2d07      	cmp	r5, #7
 8010b14:	dc04      	bgt.n	8010b20 <__hexnan+0x64>
 8010b16:	462a      	mov	r2, r5
 8010b18:	4649      	mov	r1, r9
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f7ff ffa8 	bl	8010a70 <L_shift>
 8010b20:	4544      	cmp	r4, r8
 8010b22:	d950      	bls.n	8010bc6 <__hexnan+0x10a>
 8010b24:	2300      	movs	r3, #0
 8010b26:	f1a4 0904 	sub.w	r9, r4, #4
 8010b2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b2e:	f8cd b008 	str.w	fp, [sp, #8]
 8010b32:	464c      	mov	r4, r9
 8010b34:	461d      	mov	r5, r3
 8010b36:	9903      	ldr	r1, [sp, #12]
 8010b38:	e7d7      	b.n	8010aea <__hexnan+0x2e>
 8010b3a:	2a29      	cmp	r2, #41	; 0x29
 8010b3c:	d156      	bne.n	8010bec <__hexnan+0x130>
 8010b3e:	3102      	adds	r1, #2
 8010b40:	f8ca 1000 	str.w	r1, [sl]
 8010b44:	f1bb 0f00 	cmp.w	fp, #0
 8010b48:	d050      	beq.n	8010bec <__hexnan+0x130>
 8010b4a:	454c      	cmp	r4, r9
 8010b4c:	d206      	bcs.n	8010b5c <__hexnan+0xa0>
 8010b4e:	2d07      	cmp	r5, #7
 8010b50:	dc04      	bgt.n	8010b5c <__hexnan+0xa0>
 8010b52:	462a      	mov	r2, r5
 8010b54:	4649      	mov	r1, r9
 8010b56:	4620      	mov	r0, r4
 8010b58:	f7ff ff8a 	bl	8010a70 <L_shift>
 8010b5c:	4544      	cmp	r4, r8
 8010b5e:	d934      	bls.n	8010bca <__hexnan+0x10e>
 8010b60:	f1a8 0204 	sub.w	r2, r8, #4
 8010b64:	4623      	mov	r3, r4
 8010b66:	f853 1b04 	ldr.w	r1, [r3], #4
 8010b6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8010b6e:	429f      	cmp	r7, r3
 8010b70:	d2f9      	bcs.n	8010b66 <__hexnan+0xaa>
 8010b72:	1b3b      	subs	r3, r7, r4
 8010b74:	f023 0303 	bic.w	r3, r3, #3
 8010b78:	3304      	adds	r3, #4
 8010b7a:	3401      	adds	r4, #1
 8010b7c:	3e03      	subs	r6, #3
 8010b7e:	42b4      	cmp	r4, r6
 8010b80:	bf88      	it	hi
 8010b82:	2304      	movhi	r3, #4
 8010b84:	4443      	add	r3, r8
 8010b86:	2200      	movs	r2, #0
 8010b88:	f843 2b04 	str.w	r2, [r3], #4
 8010b8c:	429f      	cmp	r7, r3
 8010b8e:	d2fb      	bcs.n	8010b88 <__hexnan+0xcc>
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	b91b      	cbnz	r3, 8010b9c <__hexnan+0xe0>
 8010b94:	4547      	cmp	r7, r8
 8010b96:	d127      	bne.n	8010be8 <__hexnan+0x12c>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	603b      	str	r3, [r7, #0]
 8010b9c:	2005      	movs	r0, #5
 8010b9e:	e026      	b.n	8010bee <__hexnan+0x132>
 8010ba0:	3501      	adds	r5, #1
 8010ba2:	2d08      	cmp	r5, #8
 8010ba4:	f10b 0b01 	add.w	fp, fp, #1
 8010ba8:	dd06      	ble.n	8010bb8 <__hexnan+0xfc>
 8010baa:	4544      	cmp	r4, r8
 8010bac:	d9c3      	bls.n	8010b36 <__hexnan+0x7a>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bb4:	2501      	movs	r5, #1
 8010bb6:	3c04      	subs	r4, #4
 8010bb8:	6822      	ldr	r2, [r4, #0]
 8010bba:	f000 000f 	and.w	r0, r0, #15
 8010bbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010bc2:	6022      	str	r2, [r4, #0]
 8010bc4:	e7b7      	b.n	8010b36 <__hexnan+0x7a>
 8010bc6:	2508      	movs	r5, #8
 8010bc8:	e7b5      	b.n	8010b36 <__hexnan+0x7a>
 8010bca:	9b01      	ldr	r3, [sp, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d0df      	beq.n	8010b90 <__hexnan+0xd4>
 8010bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd4:	f1c3 0320 	rsb	r3, r3, #32
 8010bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8010bdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010be0:	401a      	ands	r2, r3
 8010be2:	f846 2c04 	str.w	r2, [r6, #-4]
 8010be6:	e7d3      	b.n	8010b90 <__hexnan+0xd4>
 8010be8:	3f04      	subs	r7, #4
 8010bea:	e7d1      	b.n	8010b90 <__hexnan+0xd4>
 8010bec:	2004      	movs	r0, #4
 8010bee:	b007      	add	sp, #28
 8010bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bf4 <_localeconv_r>:
 8010bf4:	4800      	ldr	r0, [pc, #0]	; (8010bf8 <_localeconv_r+0x4>)
 8010bf6:	4770      	bx	lr
 8010bf8:	20000198 	.word	0x20000198

08010bfc <malloc>:
 8010bfc:	4b02      	ldr	r3, [pc, #8]	; (8010c08 <malloc+0xc>)
 8010bfe:	4601      	mov	r1, r0
 8010c00:	6818      	ldr	r0, [r3, #0]
 8010c02:	f000 bd3d 	b.w	8011680 <_malloc_r>
 8010c06:	bf00      	nop
 8010c08:	20000040 	.word	0x20000040

08010c0c <__ascii_mbtowc>:
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	b901      	cbnz	r1, 8010c12 <__ascii_mbtowc+0x6>
 8010c10:	a901      	add	r1, sp, #4
 8010c12:	b142      	cbz	r2, 8010c26 <__ascii_mbtowc+0x1a>
 8010c14:	b14b      	cbz	r3, 8010c2a <__ascii_mbtowc+0x1e>
 8010c16:	7813      	ldrb	r3, [r2, #0]
 8010c18:	600b      	str	r3, [r1, #0]
 8010c1a:	7812      	ldrb	r2, [r2, #0]
 8010c1c:	1e10      	subs	r0, r2, #0
 8010c1e:	bf18      	it	ne
 8010c20:	2001      	movne	r0, #1
 8010c22:	b002      	add	sp, #8
 8010c24:	4770      	bx	lr
 8010c26:	4610      	mov	r0, r2
 8010c28:	e7fb      	b.n	8010c22 <__ascii_mbtowc+0x16>
 8010c2a:	f06f 0001 	mvn.w	r0, #1
 8010c2e:	e7f8      	b.n	8010c22 <__ascii_mbtowc+0x16>

08010c30 <memcpy>:
 8010c30:	440a      	add	r2, r1
 8010c32:	4291      	cmp	r1, r2
 8010c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c38:	d100      	bne.n	8010c3c <memcpy+0xc>
 8010c3a:	4770      	bx	lr
 8010c3c:	b510      	push	{r4, lr}
 8010c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c46:	4291      	cmp	r1, r2
 8010c48:	d1f9      	bne.n	8010c3e <memcpy+0xe>
 8010c4a:	bd10      	pop	{r4, pc}

08010c4c <_Balloc>:
 8010c4c:	b570      	push	{r4, r5, r6, lr}
 8010c4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010c50:	4604      	mov	r4, r0
 8010c52:	460d      	mov	r5, r1
 8010c54:	b976      	cbnz	r6, 8010c74 <_Balloc+0x28>
 8010c56:	2010      	movs	r0, #16
 8010c58:	f7ff ffd0 	bl	8010bfc <malloc>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8010c60:	b920      	cbnz	r0, 8010c6c <_Balloc+0x20>
 8010c62:	4b18      	ldr	r3, [pc, #96]	; (8010cc4 <_Balloc+0x78>)
 8010c64:	4818      	ldr	r0, [pc, #96]	; (8010cc8 <_Balloc+0x7c>)
 8010c66:	2166      	movs	r1, #102	; 0x66
 8010c68:	f7fe fdaa 	bl	800f7c0 <__assert_func>
 8010c6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c70:	6006      	str	r6, [r0, #0]
 8010c72:	60c6      	str	r6, [r0, #12]
 8010c74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010c76:	68f3      	ldr	r3, [r6, #12]
 8010c78:	b183      	cbz	r3, 8010c9c <_Balloc+0x50>
 8010c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c82:	b9b8      	cbnz	r0, 8010cb4 <_Balloc+0x68>
 8010c84:	2101      	movs	r1, #1
 8010c86:	fa01 f605 	lsl.w	r6, r1, r5
 8010c8a:	1d72      	adds	r2, r6, #5
 8010c8c:	0092      	lsls	r2, r2, #2
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f000 fc97 	bl	80115c2 <_calloc_r>
 8010c94:	b160      	cbz	r0, 8010cb0 <_Balloc+0x64>
 8010c96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c9a:	e00e      	b.n	8010cba <_Balloc+0x6e>
 8010c9c:	2221      	movs	r2, #33	; 0x21
 8010c9e:	2104      	movs	r1, #4
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f000 fc8e 	bl	80115c2 <_calloc_r>
 8010ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ca8:	60f0      	str	r0, [r6, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d1e4      	bne.n	8010c7a <_Balloc+0x2e>
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	6802      	ldr	r2, [r0, #0]
 8010cb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cba:	2300      	movs	r3, #0
 8010cbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010cc0:	e7f7      	b.n	8010cb2 <_Balloc+0x66>
 8010cc2:	bf00      	nop
 8010cc4:	08025e28 	.word	0x08025e28
 8010cc8:	080260d8 	.word	0x080260d8

08010ccc <_Bfree>:
 8010ccc:	b570      	push	{r4, r5, r6, lr}
 8010cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010cd0:	4605      	mov	r5, r0
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	b976      	cbnz	r6, 8010cf4 <_Bfree+0x28>
 8010cd6:	2010      	movs	r0, #16
 8010cd8:	f7ff ff90 	bl	8010bfc <malloc>
 8010cdc:	4602      	mov	r2, r0
 8010cde:	6268      	str	r0, [r5, #36]	; 0x24
 8010ce0:	b920      	cbnz	r0, 8010cec <_Bfree+0x20>
 8010ce2:	4b09      	ldr	r3, [pc, #36]	; (8010d08 <_Bfree+0x3c>)
 8010ce4:	4809      	ldr	r0, [pc, #36]	; (8010d0c <_Bfree+0x40>)
 8010ce6:	218a      	movs	r1, #138	; 0x8a
 8010ce8:	f7fe fd6a 	bl	800f7c0 <__assert_func>
 8010cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cf0:	6006      	str	r6, [r0, #0]
 8010cf2:	60c6      	str	r6, [r0, #12]
 8010cf4:	b13c      	cbz	r4, 8010d06 <_Bfree+0x3a>
 8010cf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010cf8:	6862      	ldr	r2, [r4, #4]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010d00:	6021      	str	r1, [r4, #0]
 8010d02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010d06:	bd70      	pop	{r4, r5, r6, pc}
 8010d08:	08025e28 	.word	0x08025e28
 8010d0c:	080260d8 	.word	0x080260d8

08010d10 <__multadd>:
 8010d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d14:	690e      	ldr	r6, [r1, #16]
 8010d16:	4607      	mov	r7, r0
 8010d18:	4698      	mov	r8, r3
 8010d1a:	460c      	mov	r4, r1
 8010d1c:	f101 0014 	add.w	r0, r1, #20
 8010d20:	2300      	movs	r3, #0
 8010d22:	6805      	ldr	r5, [r0, #0]
 8010d24:	b2a9      	uxth	r1, r5
 8010d26:	fb02 8101 	mla	r1, r2, r1, r8
 8010d2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010d2e:	0c2d      	lsrs	r5, r5, #16
 8010d30:	fb02 c505 	mla	r5, r2, r5, ip
 8010d34:	b289      	uxth	r1, r1
 8010d36:	3301      	adds	r3, #1
 8010d38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010d3c:	429e      	cmp	r6, r3
 8010d3e:	f840 1b04 	str.w	r1, [r0], #4
 8010d42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010d46:	dcec      	bgt.n	8010d22 <__multadd+0x12>
 8010d48:	f1b8 0f00 	cmp.w	r8, #0
 8010d4c:	d022      	beq.n	8010d94 <__multadd+0x84>
 8010d4e:	68a3      	ldr	r3, [r4, #8]
 8010d50:	42b3      	cmp	r3, r6
 8010d52:	dc19      	bgt.n	8010d88 <__multadd+0x78>
 8010d54:	6861      	ldr	r1, [r4, #4]
 8010d56:	4638      	mov	r0, r7
 8010d58:	3101      	adds	r1, #1
 8010d5a:	f7ff ff77 	bl	8010c4c <_Balloc>
 8010d5e:	4605      	mov	r5, r0
 8010d60:	b928      	cbnz	r0, 8010d6e <__multadd+0x5e>
 8010d62:	4602      	mov	r2, r0
 8010d64:	4b0d      	ldr	r3, [pc, #52]	; (8010d9c <__multadd+0x8c>)
 8010d66:	480e      	ldr	r0, [pc, #56]	; (8010da0 <__multadd+0x90>)
 8010d68:	21b5      	movs	r1, #181	; 0xb5
 8010d6a:	f7fe fd29 	bl	800f7c0 <__assert_func>
 8010d6e:	6922      	ldr	r2, [r4, #16]
 8010d70:	3202      	adds	r2, #2
 8010d72:	f104 010c 	add.w	r1, r4, #12
 8010d76:	0092      	lsls	r2, r2, #2
 8010d78:	300c      	adds	r0, #12
 8010d7a:	f7ff ff59 	bl	8010c30 <memcpy>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4638      	mov	r0, r7
 8010d82:	f7ff ffa3 	bl	8010ccc <_Bfree>
 8010d86:	462c      	mov	r4, r5
 8010d88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010d8c:	3601      	adds	r6, #1
 8010d8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010d92:	6126      	str	r6, [r4, #16]
 8010d94:	4620      	mov	r0, r4
 8010d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08026049 	.word	0x08026049
 8010da0:	080260d8 	.word	0x080260d8

08010da4 <__s2b>:
 8010da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010da8:	460c      	mov	r4, r1
 8010daa:	4615      	mov	r5, r2
 8010dac:	461f      	mov	r7, r3
 8010dae:	2209      	movs	r2, #9
 8010db0:	3308      	adds	r3, #8
 8010db2:	4606      	mov	r6, r0
 8010db4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010db8:	2100      	movs	r1, #0
 8010dba:	2201      	movs	r2, #1
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	db09      	blt.n	8010dd4 <__s2b+0x30>
 8010dc0:	4630      	mov	r0, r6
 8010dc2:	f7ff ff43 	bl	8010c4c <_Balloc>
 8010dc6:	b940      	cbnz	r0, 8010dda <__s2b+0x36>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	4b19      	ldr	r3, [pc, #100]	; (8010e30 <__s2b+0x8c>)
 8010dcc:	4819      	ldr	r0, [pc, #100]	; (8010e34 <__s2b+0x90>)
 8010dce:	21ce      	movs	r1, #206	; 0xce
 8010dd0:	f7fe fcf6 	bl	800f7c0 <__assert_func>
 8010dd4:	0052      	lsls	r2, r2, #1
 8010dd6:	3101      	adds	r1, #1
 8010dd8:	e7f0      	b.n	8010dbc <__s2b+0x18>
 8010dda:	9b08      	ldr	r3, [sp, #32]
 8010ddc:	6143      	str	r3, [r0, #20]
 8010dde:	2d09      	cmp	r5, #9
 8010de0:	f04f 0301 	mov.w	r3, #1
 8010de4:	6103      	str	r3, [r0, #16]
 8010de6:	dd16      	ble.n	8010e16 <__s2b+0x72>
 8010de8:	f104 0909 	add.w	r9, r4, #9
 8010dec:	46c8      	mov	r8, r9
 8010dee:	442c      	add	r4, r5
 8010df0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010df4:	4601      	mov	r1, r0
 8010df6:	3b30      	subs	r3, #48	; 0x30
 8010df8:	220a      	movs	r2, #10
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7ff ff88 	bl	8010d10 <__multadd>
 8010e00:	45a0      	cmp	r8, r4
 8010e02:	d1f5      	bne.n	8010df0 <__s2b+0x4c>
 8010e04:	f1a5 0408 	sub.w	r4, r5, #8
 8010e08:	444c      	add	r4, r9
 8010e0a:	1b2d      	subs	r5, r5, r4
 8010e0c:	1963      	adds	r3, r4, r5
 8010e0e:	42bb      	cmp	r3, r7
 8010e10:	db04      	blt.n	8010e1c <__s2b+0x78>
 8010e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e16:	340a      	adds	r4, #10
 8010e18:	2509      	movs	r5, #9
 8010e1a:	e7f6      	b.n	8010e0a <__s2b+0x66>
 8010e1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010e20:	4601      	mov	r1, r0
 8010e22:	3b30      	subs	r3, #48	; 0x30
 8010e24:	220a      	movs	r2, #10
 8010e26:	4630      	mov	r0, r6
 8010e28:	f7ff ff72 	bl	8010d10 <__multadd>
 8010e2c:	e7ee      	b.n	8010e0c <__s2b+0x68>
 8010e2e:	bf00      	nop
 8010e30:	08026049 	.word	0x08026049
 8010e34:	080260d8 	.word	0x080260d8

08010e38 <__hi0bits>:
 8010e38:	0c03      	lsrs	r3, r0, #16
 8010e3a:	041b      	lsls	r3, r3, #16
 8010e3c:	b9d3      	cbnz	r3, 8010e74 <__hi0bits+0x3c>
 8010e3e:	0400      	lsls	r0, r0, #16
 8010e40:	2310      	movs	r3, #16
 8010e42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010e46:	bf04      	itt	eq
 8010e48:	0200      	lsleq	r0, r0, #8
 8010e4a:	3308      	addeq	r3, #8
 8010e4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010e50:	bf04      	itt	eq
 8010e52:	0100      	lsleq	r0, r0, #4
 8010e54:	3304      	addeq	r3, #4
 8010e56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010e5a:	bf04      	itt	eq
 8010e5c:	0080      	lsleq	r0, r0, #2
 8010e5e:	3302      	addeq	r3, #2
 8010e60:	2800      	cmp	r0, #0
 8010e62:	db05      	blt.n	8010e70 <__hi0bits+0x38>
 8010e64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010e68:	f103 0301 	add.w	r3, r3, #1
 8010e6c:	bf08      	it	eq
 8010e6e:	2320      	moveq	r3, #32
 8010e70:	4618      	mov	r0, r3
 8010e72:	4770      	bx	lr
 8010e74:	2300      	movs	r3, #0
 8010e76:	e7e4      	b.n	8010e42 <__hi0bits+0xa>

08010e78 <__lo0bits>:
 8010e78:	6803      	ldr	r3, [r0, #0]
 8010e7a:	f013 0207 	ands.w	r2, r3, #7
 8010e7e:	4601      	mov	r1, r0
 8010e80:	d00b      	beq.n	8010e9a <__lo0bits+0x22>
 8010e82:	07da      	lsls	r2, r3, #31
 8010e84:	d424      	bmi.n	8010ed0 <__lo0bits+0x58>
 8010e86:	0798      	lsls	r0, r3, #30
 8010e88:	bf49      	itett	mi
 8010e8a:	085b      	lsrmi	r3, r3, #1
 8010e8c:	089b      	lsrpl	r3, r3, #2
 8010e8e:	2001      	movmi	r0, #1
 8010e90:	600b      	strmi	r3, [r1, #0]
 8010e92:	bf5c      	itt	pl
 8010e94:	600b      	strpl	r3, [r1, #0]
 8010e96:	2002      	movpl	r0, #2
 8010e98:	4770      	bx	lr
 8010e9a:	b298      	uxth	r0, r3
 8010e9c:	b9b0      	cbnz	r0, 8010ecc <__lo0bits+0x54>
 8010e9e:	0c1b      	lsrs	r3, r3, #16
 8010ea0:	2010      	movs	r0, #16
 8010ea2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010ea6:	bf04      	itt	eq
 8010ea8:	0a1b      	lsreq	r3, r3, #8
 8010eaa:	3008      	addeq	r0, #8
 8010eac:	071a      	lsls	r2, r3, #28
 8010eae:	bf04      	itt	eq
 8010eb0:	091b      	lsreq	r3, r3, #4
 8010eb2:	3004      	addeq	r0, #4
 8010eb4:	079a      	lsls	r2, r3, #30
 8010eb6:	bf04      	itt	eq
 8010eb8:	089b      	lsreq	r3, r3, #2
 8010eba:	3002      	addeq	r0, #2
 8010ebc:	07da      	lsls	r2, r3, #31
 8010ebe:	d403      	bmi.n	8010ec8 <__lo0bits+0x50>
 8010ec0:	085b      	lsrs	r3, r3, #1
 8010ec2:	f100 0001 	add.w	r0, r0, #1
 8010ec6:	d005      	beq.n	8010ed4 <__lo0bits+0x5c>
 8010ec8:	600b      	str	r3, [r1, #0]
 8010eca:	4770      	bx	lr
 8010ecc:	4610      	mov	r0, r2
 8010ece:	e7e8      	b.n	8010ea2 <__lo0bits+0x2a>
 8010ed0:	2000      	movs	r0, #0
 8010ed2:	4770      	bx	lr
 8010ed4:	2020      	movs	r0, #32
 8010ed6:	4770      	bx	lr

08010ed8 <__i2b>:
 8010ed8:	b510      	push	{r4, lr}
 8010eda:	460c      	mov	r4, r1
 8010edc:	2101      	movs	r1, #1
 8010ede:	f7ff feb5 	bl	8010c4c <_Balloc>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	b928      	cbnz	r0, 8010ef2 <__i2b+0x1a>
 8010ee6:	4b05      	ldr	r3, [pc, #20]	; (8010efc <__i2b+0x24>)
 8010ee8:	4805      	ldr	r0, [pc, #20]	; (8010f00 <__i2b+0x28>)
 8010eea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010eee:	f7fe fc67 	bl	800f7c0 <__assert_func>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	6144      	str	r4, [r0, #20]
 8010ef6:	6103      	str	r3, [r0, #16]
 8010ef8:	bd10      	pop	{r4, pc}
 8010efa:	bf00      	nop
 8010efc:	08026049 	.word	0x08026049
 8010f00:	080260d8 	.word	0x080260d8

08010f04 <__multiply>:
 8010f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f08:	4614      	mov	r4, r2
 8010f0a:	690a      	ldr	r2, [r1, #16]
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	bfb8      	it	lt
 8010f12:	460b      	movlt	r3, r1
 8010f14:	460d      	mov	r5, r1
 8010f16:	bfbc      	itt	lt
 8010f18:	4625      	movlt	r5, r4
 8010f1a:	461c      	movlt	r4, r3
 8010f1c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010f20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010f24:	68ab      	ldr	r3, [r5, #8]
 8010f26:	6869      	ldr	r1, [r5, #4]
 8010f28:	eb0a 0709 	add.w	r7, sl, r9
 8010f2c:	42bb      	cmp	r3, r7
 8010f2e:	b085      	sub	sp, #20
 8010f30:	bfb8      	it	lt
 8010f32:	3101      	addlt	r1, #1
 8010f34:	f7ff fe8a 	bl	8010c4c <_Balloc>
 8010f38:	b930      	cbnz	r0, 8010f48 <__multiply+0x44>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	4b42      	ldr	r3, [pc, #264]	; (8011048 <__multiply+0x144>)
 8010f3e:	4843      	ldr	r0, [pc, #268]	; (801104c <__multiply+0x148>)
 8010f40:	f240 115d 	movw	r1, #349	; 0x15d
 8010f44:	f7fe fc3c 	bl	800f7c0 <__assert_func>
 8010f48:	f100 0614 	add.w	r6, r0, #20
 8010f4c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010f50:	4633      	mov	r3, r6
 8010f52:	2200      	movs	r2, #0
 8010f54:	4543      	cmp	r3, r8
 8010f56:	d31e      	bcc.n	8010f96 <__multiply+0x92>
 8010f58:	f105 0c14 	add.w	ip, r5, #20
 8010f5c:	f104 0314 	add.w	r3, r4, #20
 8010f60:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010f64:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010f68:	9202      	str	r2, [sp, #8]
 8010f6a:	ebac 0205 	sub.w	r2, ip, r5
 8010f6e:	3a15      	subs	r2, #21
 8010f70:	f022 0203 	bic.w	r2, r2, #3
 8010f74:	3204      	adds	r2, #4
 8010f76:	f105 0115 	add.w	r1, r5, #21
 8010f7a:	458c      	cmp	ip, r1
 8010f7c:	bf38      	it	cc
 8010f7e:	2204      	movcc	r2, #4
 8010f80:	9201      	str	r2, [sp, #4]
 8010f82:	9a02      	ldr	r2, [sp, #8]
 8010f84:	9303      	str	r3, [sp, #12]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d808      	bhi.n	8010f9c <__multiply+0x98>
 8010f8a:	2f00      	cmp	r7, #0
 8010f8c:	dc55      	bgt.n	801103a <__multiply+0x136>
 8010f8e:	6107      	str	r7, [r0, #16]
 8010f90:	b005      	add	sp, #20
 8010f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f96:	f843 2b04 	str.w	r2, [r3], #4
 8010f9a:	e7db      	b.n	8010f54 <__multiply+0x50>
 8010f9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010fa0:	f1ba 0f00 	cmp.w	sl, #0
 8010fa4:	d020      	beq.n	8010fe8 <__multiply+0xe4>
 8010fa6:	f105 0e14 	add.w	lr, r5, #20
 8010faa:	46b1      	mov	r9, r6
 8010fac:	2200      	movs	r2, #0
 8010fae:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010fb2:	f8d9 b000 	ldr.w	fp, [r9]
 8010fb6:	b2a1      	uxth	r1, r4
 8010fb8:	fa1f fb8b 	uxth.w	fp, fp
 8010fbc:	fb0a b101 	mla	r1, sl, r1, fp
 8010fc0:	4411      	add	r1, r2
 8010fc2:	f8d9 2000 	ldr.w	r2, [r9]
 8010fc6:	0c24      	lsrs	r4, r4, #16
 8010fc8:	0c12      	lsrs	r2, r2, #16
 8010fca:	fb0a 2404 	mla	r4, sl, r4, r2
 8010fce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010fd2:	b289      	uxth	r1, r1
 8010fd4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010fd8:	45f4      	cmp	ip, lr
 8010fda:	f849 1b04 	str.w	r1, [r9], #4
 8010fde:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010fe2:	d8e4      	bhi.n	8010fae <__multiply+0xaa>
 8010fe4:	9901      	ldr	r1, [sp, #4]
 8010fe6:	5072      	str	r2, [r6, r1]
 8010fe8:	9a03      	ldr	r2, [sp, #12]
 8010fea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	f1b9 0f00 	cmp.w	r9, #0
 8010ff4:	d01f      	beq.n	8011036 <__multiply+0x132>
 8010ff6:	6834      	ldr	r4, [r6, #0]
 8010ff8:	f105 0114 	add.w	r1, r5, #20
 8010ffc:	46b6      	mov	lr, r6
 8010ffe:	f04f 0a00 	mov.w	sl, #0
 8011002:	880a      	ldrh	r2, [r1, #0]
 8011004:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011008:	fb09 b202 	mla	r2, r9, r2, fp
 801100c:	4492      	add	sl, r2
 801100e:	b2a4      	uxth	r4, r4
 8011010:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011014:	f84e 4b04 	str.w	r4, [lr], #4
 8011018:	f851 4b04 	ldr.w	r4, [r1], #4
 801101c:	f8be 2000 	ldrh.w	r2, [lr]
 8011020:	0c24      	lsrs	r4, r4, #16
 8011022:	fb09 2404 	mla	r4, r9, r4, r2
 8011026:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801102a:	458c      	cmp	ip, r1
 801102c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011030:	d8e7      	bhi.n	8011002 <__multiply+0xfe>
 8011032:	9a01      	ldr	r2, [sp, #4]
 8011034:	50b4      	str	r4, [r6, r2]
 8011036:	3604      	adds	r6, #4
 8011038:	e7a3      	b.n	8010f82 <__multiply+0x7e>
 801103a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1a5      	bne.n	8010f8e <__multiply+0x8a>
 8011042:	3f01      	subs	r7, #1
 8011044:	e7a1      	b.n	8010f8a <__multiply+0x86>
 8011046:	bf00      	nop
 8011048:	08026049 	.word	0x08026049
 801104c:	080260d8 	.word	0x080260d8

08011050 <__pow5mult>:
 8011050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011054:	4615      	mov	r5, r2
 8011056:	f012 0203 	ands.w	r2, r2, #3
 801105a:	4606      	mov	r6, r0
 801105c:	460f      	mov	r7, r1
 801105e:	d007      	beq.n	8011070 <__pow5mult+0x20>
 8011060:	4c25      	ldr	r4, [pc, #148]	; (80110f8 <__pow5mult+0xa8>)
 8011062:	3a01      	subs	r2, #1
 8011064:	2300      	movs	r3, #0
 8011066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801106a:	f7ff fe51 	bl	8010d10 <__multadd>
 801106e:	4607      	mov	r7, r0
 8011070:	10ad      	asrs	r5, r5, #2
 8011072:	d03d      	beq.n	80110f0 <__pow5mult+0xa0>
 8011074:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011076:	b97c      	cbnz	r4, 8011098 <__pow5mult+0x48>
 8011078:	2010      	movs	r0, #16
 801107a:	f7ff fdbf 	bl	8010bfc <malloc>
 801107e:	4602      	mov	r2, r0
 8011080:	6270      	str	r0, [r6, #36]	; 0x24
 8011082:	b928      	cbnz	r0, 8011090 <__pow5mult+0x40>
 8011084:	4b1d      	ldr	r3, [pc, #116]	; (80110fc <__pow5mult+0xac>)
 8011086:	481e      	ldr	r0, [pc, #120]	; (8011100 <__pow5mult+0xb0>)
 8011088:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801108c:	f7fe fb98 	bl	800f7c0 <__assert_func>
 8011090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011094:	6004      	str	r4, [r0, #0]
 8011096:	60c4      	str	r4, [r0, #12]
 8011098:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801109c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80110a0:	b94c      	cbnz	r4, 80110b6 <__pow5mult+0x66>
 80110a2:	f240 2171 	movw	r1, #625	; 0x271
 80110a6:	4630      	mov	r0, r6
 80110a8:	f7ff ff16 	bl	8010ed8 <__i2b>
 80110ac:	2300      	movs	r3, #0
 80110ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80110b2:	4604      	mov	r4, r0
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	f04f 0900 	mov.w	r9, #0
 80110ba:	07eb      	lsls	r3, r5, #31
 80110bc:	d50a      	bpl.n	80110d4 <__pow5mult+0x84>
 80110be:	4639      	mov	r1, r7
 80110c0:	4622      	mov	r2, r4
 80110c2:	4630      	mov	r0, r6
 80110c4:	f7ff ff1e 	bl	8010f04 <__multiply>
 80110c8:	4639      	mov	r1, r7
 80110ca:	4680      	mov	r8, r0
 80110cc:	4630      	mov	r0, r6
 80110ce:	f7ff fdfd 	bl	8010ccc <_Bfree>
 80110d2:	4647      	mov	r7, r8
 80110d4:	106d      	asrs	r5, r5, #1
 80110d6:	d00b      	beq.n	80110f0 <__pow5mult+0xa0>
 80110d8:	6820      	ldr	r0, [r4, #0]
 80110da:	b938      	cbnz	r0, 80110ec <__pow5mult+0x9c>
 80110dc:	4622      	mov	r2, r4
 80110de:	4621      	mov	r1, r4
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7ff ff0f 	bl	8010f04 <__multiply>
 80110e6:	6020      	str	r0, [r4, #0]
 80110e8:	f8c0 9000 	str.w	r9, [r0]
 80110ec:	4604      	mov	r4, r0
 80110ee:	e7e4      	b.n	80110ba <__pow5mult+0x6a>
 80110f0:	4638      	mov	r0, r7
 80110f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f6:	bf00      	nop
 80110f8:	08026228 	.word	0x08026228
 80110fc:	08025e28 	.word	0x08025e28
 8011100:	080260d8 	.word	0x080260d8

08011104 <__lshift>:
 8011104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011108:	460c      	mov	r4, r1
 801110a:	6849      	ldr	r1, [r1, #4]
 801110c:	6923      	ldr	r3, [r4, #16]
 801110e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011112:	68a3      	ldr	r3, [r4, #8]
 8011114:	4607      	mov	r7, r0
 8011116:	4691      	mov	r9, r2
 8011118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801111c:	f108 0601 	add.w	r6, r8, #1
 8011120:	42b3      	cmp	r3, r6
 8011122:	db0b      	blt.n	801113c <__lshift+0x38>
 8011124:	4638      	mov	r0, r7
 8011126:	f7ff fd91 	bl	8010c4c <_Balloc>
 801112a:	4605      	mov	r5, r0
 801112c:	b948      	cbnz	r0, 8011142 <__lshift+0x3e>
 801112e:	4602      	mov	r2, r0
 8011130:	4b28      	ldr	r3, [pc, #160]	; (80111d4 <__lshift+0xd0>)
 8011132:	4829      	ldr	r0, [pc, #164]	; (80111d8 <__lshift+0xd4>)
 8011134:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011138:	f7fe fb42 	bl	800f7c0 <__assert_func>
 801113c:	3101      	adds	r1, #1
 801113e:	005b      	lsls	r3, r3, #1
 8011140:	e7ee      	b.n	8011120 <__lshift+0x1c>
 8011142:	2300      	movs	r3, #0
 8011144:	f100 0114 	add.w	r1, r0, #20
 8011148:	f100 0210 	add.w	r2, r0, #16
 801114c:	4618      	mov	r0, r3
 801114e:	4553      	cmp	r3, sl
 8011150:	db33      	blt.n	80111ba <__lshift+0xb6>
 8011152:	6920      	ldr	r0, [r4, #16]
 8011154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011158:	f104 0314 	add.w	r3, r4, #20
 801115c:	f019 091f 	ands.w	r9, r9, #31
 8011160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011168:	d02b      	beq.n	80111c2 <__lshift+0xbe>
 801116a:	f1c9 0e20 	rsb	lr, r9, #32
 801116e:	468a      	mov	sl, r1
 8011170:	2200      	movs	r2, #0
 8011172:	6818      	ldr	r0, [r3, #0]
 8011174:	fa00 f009 	lsl.w	r0, r0, r9
 8011178:	4302      	orrs	r2, r0
 801117a:	f84a 2b04 	str.w	r2, [sl], #4
 801117e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011182:	459c      	cmp	ip, r3
 8011184:	fa22 f20e 	lsr.w	r2, r2, lr
 8011188:	d8f3      	bhi.n	8011172 <__lshift+0x6e>
 801118a:	ebac 0304 	sub.w	r3, ip, r4
 801118e:	3b15      	subs	r3, #21
 8011190:	f023 0303 	bic.w	r3, r3, #3
 8011194:	3304      	adds	r3, #4
 8011196:	f104 0015 	add.w	r0, r4, #21
 801119a:	4584      	cmp	ip, r0
 801119c:	bf38      	it	cc
 801119e:	2304      	movcc	r3, #4
 80111a0:	50ca      	str	r2, [r1, r3]
 80111a2:	b10a      	cbz	r2, 80111a8 <__lshift+0xa4>
 80111a4:	f108 0602 	add.w	r6, r8, #2
 80111a8:	3e01      	subs	r6, #1
 80111aa:	4638      	mov	r0, r7
 80111ac:	612e      	str	r6, [r5, #16]
 80111ae:	4621      	mov	r1, r4
 80111b0:	f7ff fd8c 	bl	8010ccc <_Bfree>
 80111b4:	4628      	mov	r0, r5
 80111b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80111be:	3301      	adds	r3, #1
 80111c0:	e7c5      	b.n	801114e <__lshift+0x4a>
 80111c2:	3904      	subs	r1, #4
 80111c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80111c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80111cc:	459c      	cmp	ip, r3
 80111ce:	d8f9      	bhi.n	80111c4 <__lshift+0xc0>
 80111d0:	e7ea      	b.n	80111a8 <__lshift+0xa4>
 80111d2:	bf00      	nop
 80111d4:	08026049 	.word	0x08026049
 80111d8:	080260d8 	.word	0x080260d8

080111dc <__mcmp>:
 80111dc:	b530      	push	{r4, r5, lr}
 80111de:	6902      	ldr	r2, [r0, #16]
 80111e0:	690c      	ldr	r4, [r1, #16]
 80111e2:	1b12      	subs	r2, r2, r4
 80111e4:	d10e      	bne.n	8011204 <__mcmp+0x28>
 80111e6:	f100 0314 	add.w	r3, r0, #20
 80111ea:	3114      	adds	r1, #20
 80111ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80111f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80111f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80111f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80111fc:	42a5      	cmp	r5, r4
 80111fe:	d003      	beq.n	8011208 <__mcmp+0x2c>
 8011200:	d305      	bcc.n	801120e <__mcmp+0x32>
 8011202:	2201      	movs	r2, #1
 8011204:	4610      	mov	r0, r2
 8011206:	bd30      	pop	{r4, r5, pc}
 8011208:	4283      	cmp	r3, r0
 801120a:	d3f3      	bcc.n	80111f4 <__mcmp+0x18>
 801120c:	e7fa      	b.n	8011204 <__mcmp+0x28>
 801120e:	f04f 32ff 	mov.w	r2, #4294967295
 8011212:	e7f7      	b.n	8011204 <__mcmp+0x28>

08011214 <__mdiff>:
 8011214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011218:	460c      	mov	r4, r1
 801121a:	4606      	mov	r6, r0
 801121c:	4611      	mov	r1, r2
 801121e:	4620      	mov	r0, r4
 8011220:	4617      	mov	r7, r2
 8011222:	f7ff ffdb 	bl	80111dc <__mcmp>
 8011226:	1e05      	subs	r5, r0, #0
 8011228:	d110      	bne.n	801124c <__mdiff+0x38>
 801122a:	4629      	mov	r1, r5
 801122c:	4630      	mov	r0, r6
 801122e:	f7ff fd0d 	bl	8010c4c <_Balloc>
 8011232:	b930      	cbnz	r0, 8011242 <__mdiff+0x2e>
 8011234:	4b39      	ldr	r3, [pc, #228]	; (801131c <__mdiff+0x108>)
 8011236:	4602      	mov	r2, r0
 8011238:	f240 2132 	movw	r1, #562	; 0x232
 801123c:	4838      	ldr	r0, [pc, #224]	; (8011320 <__mdiff+0x10c>)
 801123e:	f7fe fabf 	bl	800f7c0 <__assert_func>
 8011242:	2301      	movs	r3, #1
 8011244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124c:	bfa4      	itt	ge
 801124e:	463b      	movge	r3, r7
 8011250:	4627      	movge	r7, r4
 8011252:	4630      	mov	r0, r6
 8011254:	6879      	ldr	r1, [r7, #4]
 8011256:	bfa6      	itte	ge
 8011258:	461c      	movge	r4, r3
 801125a:	2500      	movge	r5, #0
 801125c:	2501      	movlt	r5, #1
 801125e:	f7ff fcf5 	bl	8010c4c <_Balloc>
 8011262:	b920      	cbnz	r0, 801126e <__mdiff+0x5a>
 8011264:	4b2d      	ldr	r3, [pc, #180]	; (801131c <__mdiff+0x108>)
 8011266:	4602      	mov	r2, r0
 8011268:	f44f 7110 	mov.w	r1, #576	; 0x240
 801126c:	e7e6      	b.n	801123c <__mdiff+0x28>
 801126e:	693e      	ldr	r6, [r7, #16]
 8011270:	60c5      	str	r5, [r0, #12]
 8011272:	6925      	ldr	r5, [r4, #16]
 8011274:	f107 0114 	add.w	r1, r7, #20
 8011278:	f104 0914 	add.w	r9, r4, #20
 801127c:	f100 0e14 	add.w	lr, r0, #20
 8011280:	f107 0210 	add.w	r2, r7, #16
 8011284:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011288:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801128c:	46f2      	mov	sl, lr
 801128e:	2700      	movs	r7, #0
 8011290:	f859 3b04 	ldr.w	r3, [r9], #4
 8011294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011298:	fa1f f883 	uxth.w	r8, r3
 801129c:	fa17 f78b 	uxtah	r7, r7, fp
 80112a0:	0c1b      	lsrs	r3, r3, #16
 80112a2:	eba7 0808 	sub.w	r8, r7, r8
 80112a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80112aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80112ae:	fa1f f888 	uxth.w	r8, r8
 80112b2:	141f      	asrs	r7, r3, #16
 80112b4:	454d      	cmp	r5, r9
 80112b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80112ba:	f84a 3b04 	str.w	r3, [sl], #4
 80112be:	d8e7      	bhi.n	8011290 <__mdiff+0x7c>
 80112c0:	1b2b      	subs	r3, r5, r4
 80112c2:	3b15      	subs	r3, #21
 80112c4:	f023 0303 	bic.w	r3, r3, #3
 80112c8:	3304      	adds	r3, #4
 80112ca:	3415      	adds	r4, #21
 80112cc:	42a5      	cmp	r5, r4
 80112ce:	bf38      	it	cc
 80112d0:	2304      	movcc	r3, #4
 80112d2:	4419      	add	r1, r3
 80112d4:	4473      	add	r3, lr
 80112d6:	469e      	mov	lr, r3
 80112d8:	460d      	mov	r5, r1
 80112da:	4565      	cmp	r5, ip
 80112dc:	d30e      	bcc.n	80112fc <__mdiff+0xe8>
 80112de:	f10c 0203 	add.w	r2, ip, #3
 80112e2:	1a52      	subs	r2, r2, r1
 80112e4:	f022 0203 	bic.w	r2, r2, #3
 80112e8:	3903      	subs	r1, #3
 80112ea:	458c      	cmp	ip, r1
 80112ec:	bf38      	it	cc
 80112ee:	2200      	movcc	r2, #0
 80112f0:	441a      	add	r2, r3
 80112f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80112f6:	b17b      	cbz	r3, 8011318 <__mdiff+0x104>
 80112f8:	6106      	str	r6, [r0, #16]
 80112fa:	e7a5      	b.n	8011248 <__mdiff+0x34>
 80112fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8011300:	fa17 f488 	uxtah	r4, r7, r8
 8011304:	1422      	asrs	r2, r4, #16
 8011306:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801130a:	b2a4      	uxth	r4, r4
 801130c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011310:	f84e 4b04 	str.w	r4, [lr], #4
 8011314:	1417      	asrs	r7, r2, #16
 8011316:	e7e0      	b.n	80112da <__mdiff+0xc6>
 8011318:	3e01      	subs	r6, #1
 801131a:	e7ea      	b.n	80112f2 <__mdiff+0xde>
 801131c:	08026049 	.word	0x08026049
 8011320:	080260d8 	.word	0x080260d8

08011324 <__ulp>:
 8011324:	b082      	sub	sp, #8
 8011326:	ed8d 0b00 	vstr	d0, [sp]
 801132a:	9b01      	ldr	r3, [sp, #4]
 801132c:	4912      	ldr	r1, [pc, #72]	; (8011378 <__ulp+0x54>)
 801132e:	4019      	ands	r1, r3
 8011330:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011334:	2900      	cmp	r1, #0
 8011336:	dd05      	ble.n	8011344 <__ulp+0x20>
 8011338:	2200      	movs	r2, #0
 801133a:	460b      	mov	r3, r1
 801133c:	ec43 2b10 	vmov	d0, r2, r3
 8011340:	b002      	add	sp, #8
 8011342:	4770      	bx	lr
 8011344:	4249      	negs	r1, r1
 8011346:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801134a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801134e:	f04f 0200 	mov.w	r2, #0
 8011352:	f04f 0300 	mov.w	r3, #0
 8011356:	da04      	bge.n	8011362 <__ulp+0x3e>
 8011358:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801135c:	fa41 f300 	asr.w	r3, r1, r0
 8011360:	e7ec      	b.n	801133c <__ulp+0x18>
 8011362:	f1a0 0114 	sub.w	r1, r0, #20
 8011366:	291e      	cmp	r1, #30
 8011368:	bfda      	itte	le
 801136a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801136e:	fa20 f101 	lsrle.w	r1, r0, r1
 8011372:	2101      	movgt	r1, #1
 8011374:	460a      	mov	r2, r1
 8011376:	e7e1      	b.n	801133c <__ulp+0x18>
 8011378:	7ff00000 	.word	0x7ff00000

0801137c <__b2d>:
 801137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137e:	6905      	ldr	r5, [r0, #16]
 8011380:	f100 0714 	add.w	r7, r0, #20
 8011384:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011388:	1f2e      	subs	r6, r5, #4
 801138a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801138e:	4620      	mov	r0, r4
 8011390:	f7ff fd52 	bl	8010e38 <__hi0bits>
 8011394:	f1c0 0320 	rsb	r3, r0, #32
 8011398:	280a      	cmp	r0, #10
 801139a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011418 <__b2d+0x9c>
 801139e:	600b      	str	r3, [r1, #0]
 80113a0:	dc14      	bgt.n	80113cc <__b2d+0x50>
 80113a2:	f1c0 0e0b 	rsb	lr, r0, #11
 80113a6:	fa24 f10e 	lsr.w	r1, r4, lr
 80113aa:	42b7      	cmp	r7, r6
 80113ac:	ea41 030c 	orr.w	r3, r1, ip
 80113b0:	bf34      	ite	cc
 80113b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113b6:	2100      	movcs	r1, #0
 80113b8:	3015      	adds	r0, #21
 80113ba:	fa04 f000 	lsl.w	r0, r4, r0
 80113be:	fa21 f10e 	lsr.w	r1, r1, lr
 80113c2:	ea40 0201 	orr.w	r2, r0, r1
 80113c6:	ec43 2b10 	vmov	d0, r2, r3
 80113ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113cc:	42b7      	cmp	r7, r6
 80113ce:	bf3a      	itte	cc
 80113d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113d4:	f1a5 0608 	subcc.w	r6, r5, #8
 80113d8:	2100      	movcs	r1, #0
 80113da:	380b      	subs	r0, #11
 80113dc:	d017      	beq.n	801140e <__b2d+0x92>
 80113de:	f1c0 0c20 	rsb	ip, r0, #32
 80113e2:	fa04 f500 	lsl.w	r5, r4, r0
 80113e6:	42be      	cmp	r6, r7
 80113e8:	fa21 f40c 	lsr.w	r4, r1, ip
 80113ec:	ea45 0504 	orr.w	r5, r5, r4
 80113f0:	bf8c      	ite	hi
 80113f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80113f6:	2400      	movls	r4, #0
 80113f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80113fc:	fa01 f000 	lsl.w	r0, r1, r0
 8011400:	fa24 f40c 	lsr.w	r4, r4, ip
 8011404:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011408:	ea40 0204 	orr.w	r2, r0, r4
 801140c:	e7db      	b.n	80113c6 <__b2d+0x4a>
 801140e:	ea44 030c 	orr.w	r3, r4, ip
 8011412:	460a      	mov	r2, r1
 8011414:	e7d7      	b.n	80113c6 <__b2d+0x4a>
 8011416:	bf00      	nop
 8011418:	3ff00000 	.word	0x3ff00000

0801141c <__d2b>:
 801141c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011420:	4689      	mov	r9, r1
 8011422:	2101      	movs	r1, #1
 8011424:	ec57 6b10 	vmov	r6, r7, d0
 8011428:	4690      	mov	r8, r2
 801142a:	f7ff fc0f 	bl	8010c4c <_Balloc>
 801142e:	4604      	mov	r4, r0
 8011430:	b930      	cbnz	r0, 8011440 <__d2b+0x24>
 8011432:	4602      	mov	r2, r0
 8011434:	4b25      	ldr	r3, [pc, #148]	; (80114cc <__d2b+0xb0>)
 8011436:	4826      	ldr	r0, [pc, #152]	; (80114d0 <__d2b+0xb4>)
 8011438:	f240 310a 	movw	r1, #778	; 0x30a
 801143c:	f7fe f9c0 	bl	800f7c0 <__assert_func>
 8011440:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011448:	bb35      	cbnz	r5, 8011498 <__d2b+0x7c>
 801144a:	2e00      	cmp	r6, #0
 801144c:	9301      	str	r3, [sp, #4]
 801144e:	d028      	beq.n	80114a2 <__d2b+0x86>
 8011450:	4668      	mov	r0, sp
 8011452:	9600      	str	r6, [sp, #0]
 8011454:	f7ff fd10 	bl	8010e78 <__lo0bits>
 8011458:	9900      	ldr	r1, [sp, #0]
 801145a:	b300      	cbz	r0, 801149e <__d2b+0x82>
 801145c:	9a01      	ldr	r2, [sp, #4]
 801145e:	f1c0 0320 	rsb	r3, r0, #32
 8011462:	fa02 f303 	lsl.w	r3, r2, r3
 8011466:	430b      	orrs	r3, r1
 8011468:	40c2      	lsrs	r2, r0
 801146a:	6163      	str	r3, [r4, #20]
 801146c:	9201      	str	r2, [sp, #4]
 801146e:	9b01      	ldr	r3, [sp, #4]
 8011470:	61a3      	str	r3, [r4, #24]
 8011472:	2b00      	cmp	r3, #0
 8011474:	bf14      	ite	ne
 8011476:	2202      	movne	r2, #2
 8011478:	2201      	moveq	r2, #1
 801147a:	6122      	str	r2, [r4, #16]
 801147c:	b1d5      	cbz	r5, 80114b4 <__d2b+0x98>
 801147e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011482:	4405      	add	r5, r0
 8011484:	f8c9 5000 	str.w	r5, [r9]
 8011488:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801148c:	f8c8 0000 	str.w	r0, [r8]
 8011490:	4620      	mov	r0, r4
 8011492:	b003      	add	sp, #12
 8011494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801149c:	e7d5      	b.n	801144a <__d2b+0x2e>
 801149e:	6161      	str	r1, [r4, #20]
 80114a0:	e7e5      	b.n	801146e <__d2b+0x52>
 80114a2:	a801      	add	r0, sp, #4
 80114a4:	f7ff fce8 	bl	8010e78 <__lo0bits>
 80114a8:	9b01      	ldr	r3, [sp, #4]
 80114aa:	6163      	str	r3, [r4, #20]
 80114ac:	2201      	movs	r2, #1
 80114ae:	6122      	str	r2, [r4, #16]
 80114b0:	3020      	adds	r0, #32
 80114b2:	e7e3      	b.n	801147c <__d2b+0x60>
 80114b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80114bc:	f8c9 0000 	str.w	r0, [r9]
 80114c0:	6918      	ldr	r0, [r3, #16]
 80114c2:	f7ff fcb9 	bl	8010e38 <__hi0bits>
 80114c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114ca:	e7df      	b.n	801148c <__d2b+0x70>
 80114cc:	08026049 	.word	0x08026049
 80114d0:	080260d8 	.word	0x080260d8

080114d4 <__ratio>:
 80114d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d8:	4688      	mov	r8, r1
 80114da:	4669      	mov	r1, sp
 80114dc:	4681      	mov	r9, r0
 80114de:	f7ff ff4d 	bl	801137c <__b2d>
 80114e2:	a901      	add	r1, sp, #4
 80114e4:	4640      	mov	r0, r8
 80114e6:	ec55 4b10 	vmov	r4, r5, d0
 80114ea:	f7ff ff47 	bl	801137c <__b2d>
 80114ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80114f6:	eba3 0c02 	sub.w	ip, r3, r2
 80114fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011504:	ec51 0b10 	vmov	r0, r1, d0
 8011508:	2b00      	cmp	r3, #0
 801150a:	bfd6      	itet	le
 801150c:	460a      	movle	r2, r1
 801150e:	462a      	movgt	r2, r5
 8011510:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011514:	468b      	mov	fp, r1
 8011516:	462f      	mov	r7, r5
 8011518:	bfd4      	ite	le
 801151a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801151e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011522:	4620      	mov	r0, r4
 8011524:	ee10 2a10 	vmov	r2, s0
 8011528:	465b      	mov	r3, fp
 801152a:	4639      	mov	r1, r7
 801152c:	f7ef f9a6 	bl	800087c <__aeabi_ddiv>
 8011530:	ec41 0b10 	vmov	d0, r0, r1
 8011534:	b003      	add	sp, #12
 8011536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801153a <__copybits>:
 801153a:	3901      	subs	r1, #1
 801153c:	b570      	push	{r4, r5, r6, lr}
 801153e:	1149      	asrs	r1, r1, #5
 8011540:	6914      	ldr	r4, [r2, #16]
 8011542:	3101      	adds	r1, #1
 8011544:	f102 0314 	add.w	r3, r2, #20
 8011548:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801154c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011550:	1f05      	subs	r5, r0, #4
 8011552:	42a3      	cmp	r3, r4
 8011554:	d30c      	bcc.n	8011570 <__copybits+0x36>
 8011556:	1aa3      	subs	r3, r4, r2
 8011558:	3b11      	subs	r3, #17
 801155a:	f023 0303 	bic.w	r3, r3, #3
 801155e:	3211      	adds	r2, #17
 8011560:	42a2      	cmp	r2, r4
 8011562:	bf88      	it	hi
 8011564:	2300      	movhi	r3, #0
 8011566:	4418      	add	r0, r3
 8011568:	2300      	movs	r3, #0
 801156a:	4288      	cmp	r0, r1
 801156c:	d305      	bcc.n	801157a <__copybits+0x40>
 801156e:	bd70      	pop	{r4, r5, r6, pc}
 8011570:	f853 6b04 	ldr.w	r6, [r3], #4
 8011574:	f845 6f04 	str.w	r6, [r5, #4]!
 8011578:	e7eb      	b.n	8011552 <__copybits+0x18>
 801157a:	f840 3b04 	str.w	r3, [r0], #4
 801157e:	e7f4      	b.n	801156a <__copybits+0x30>

08011580 <__any_on>:
 8011580:	f100 0214 	add.w	r2, r0, #20
 8011584:	6900      	ldr	r0, [r0, #16]
 8011586:	114b      	asrs	r3, r1, #5
 8011588:	4298      	cmp	r0, r3
 801158a:	b510      	push	{r4, lr}
 801158c:	db11      	blt.n	80115b2 <__any_on+0x32>
 801158e:	dd0a      	ble.n	80115a6 <__any_on+0x26>
 8011590:	f011 011f 	ands.w	r1, r1, #31
 8011594:	d007      	beq.n	80115a6 <__any_on+0x26>
 8011596:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801159a:	fa24 f001 	lsr.w	r0, r4, r1
 801159e:	fa00 f101 	lsl.w	r1, r0, r1
 80115a2:	428c      	cmp	r4, r1
 80115a4:	d10b      	bne.n	80115be <__any_on+0x3e>
 80115a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d803      	bhi.n	80115b6 <__any_on+0x36>
 80115ae:	2000      	movs	r0, #0
 80115b0:	bd10      	pop	{r4, pc}
 80115b2:	4603      	mov	r3, r0
 80115b4:	e7f7      	b.n	80115a6 <__any_on+0x26>
 80115b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80115ba:	2900      	cmp	r1, #0
 80115bc:	d0f5      	beq.n	80115aa <__any_on+0x2a>
 80115be:	2001      	movs	r0, #1
 80115c0:	e7f6      	b.n	80115b0 <__any_on+0x30>

080115c2 <_calloc_r>:
 80115c2:	b513      	push	{r0, r1, r4, lr}
 80115c4:	434a      	muls	r2, r1
 80115c6:	4611      	mov	r1, r2
 80115c8:	9201      	str	r2, [sp, #4]
 80115ca:	f000 f859 	bl	8011680 <_malloc_r>
 80115ce:	4604      	mov	r4, r0
 80115d0:	b118      	cbz	r0, 80115da <_calloc_r+0x18>
 80115d2:	9a01      	ldr	r2, [sp, #4]
 80115d4:	2100      	movs	r1, #0
 80115d6:	f7fc fb25 	bl	800dc24 <memset>
 80115da:	4620      	mov	r0, r4
 80115dc:	b002      	add	sp, #8
 80115de:	bd10      	pop	{r4, pc}

080115e0 <_free_r>:
 80115e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115e2:	2900      	cmp	r1, #0
 80115e4:	d048      	beq.n	8011678 <_free_r+0x98>
 80115e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ea:	9001      	str	r0, [sp, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	f1a1 0404 	sub.w	r4, r1, #4
 80115f2:	bfb8      	it	lt
 80115f4:	18e4      	addlt	r4, r4, r3
 80115f6:	f000 fe8b 	bl	8012310 <__malloc_lock>
 80115fa:	4a20      	ldr	r2, [pc, #128]	; (801167c <_free_r+0x9c>)
 80115fc:	9801      	ldr	r0, [sp, #4]
 80115fe:	6813      	ldr	r3, [r2, #0]
 8011600:	4615      	mov	r5, r2
 8011602:	b933      	cbnz	r3, 8011612 <_free_r+0x32>
 8011604:	6063      	str	r3, [r4, #4]
 8011606:	6014      	str	r4, [r2, #0]
 8011608:	b003      	add	sp, #12
 801160a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801160e:	f000 be85 	b.w	801231c <__malloc_unlock>
 8011612:	42a3      	cmp	r3, r4
 8011614:	d90b      	bls.n	801162e <_free_r+0x4e>
 8011616:	6821      	ldr	r1, [r4, #0]
 8011618:	1862      	adds	r2, r4, r1
 801161a:	4293      	cmp	r3, r2
 801161c:	bf04      	itt	eq
 801161e:	681a      	ldreq	r2, [r3, #0]
 8011620:	685b      	ldreq	r3, [r3, #4]
 8011622:	6063      	str	r3, [r4, #4]
 8011624:	bf04      	itt	eq
 8011626:	1852      	addeq	r2, r2, r1
 8011628:	6022      	streq	r2, [r4, #0]
 801162a:	602c      	str	r4, [r5, #0]
 801162c:	e7ec      	b.n	8011608 <_free_r+0x28>
 801162e:	461a      	mov	r2, r3
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	b10b      	cbz	r3, 8011638 <_free_r+0x58>
 8011634:	42a3      	cmp	r3, r4
 8011636:	d9fa      	bls.n	801162e <_free_r+0x4e>
 8011638:	6811      	ldr	r1, [r2, #0]
 801163a:	1855      	adds	r5, r2, r1
 801163c:	42a5      	cmp	r5, r4
 801163e:	d10b      	bne.n	8011658 <_free_r+0x78>
 8011640:	6824      	ldr	r4, [r4, #0]
 8011642:	4421      	add	r1, r4
 8011644:	1854      	adds	r4, r2, r1
 8011646:	42a3      	cmp	r3, r4
 8011648:	6011      	str	r1, [r2, #0]
 801164a:	d1dd      	bne.n	8011608 <_free_r+0x28>
 801164c:	681c      	ldr	r4, [r3, #0]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	6053      	str	r3, [r2, #4]
 8011652:	4421      	add	r1, r4
 8011654:	6011      	str	r1, [r2, #0]
 8011656:	e7d7      	b.n	8011608 <_free_r+0x28>
 8011658:	d902      	bls.n	8011660 <_free_r+0x80>
 801165a:	230c      	movs	r3, #12
 801165c:	6003      	str	r3, [r0, #0]
 801165e:	e7d3      	b.n	8011608 <_free_r+0x28>
 8011660:	6825      	ldr	r5, [r4, #0]
 8011662:	1961      	adds	r1, r4, r5
 8011664:	428b      	cmp	r3, r1
 8011666:	bf04      	itt	eq
 8011668:	6819      	ldreq	r1, [r3, #0]
 801166a:	685b      	ldreq	r3, [r3, #4]
 801166c:	6063      	str	r3, [r4, #4]
 801166e:	bf04      	itt	eq
 8011670:	1949      	addeq	r1, r1, r5
 8011672:	6021      	streq	r1, [r4, #0]
 8011674:	6054      	str	r4, [r2, #4]
 8011676:	e7c7      	b.n	8011608 <_free_r+0x28>
 8011678:	b003      	add	sp, #12
 801167a:	bd30      	pop	{r4, r5, pc}
 801167c:	20000284 	.word	0x20000284

08011680 <_malloc_r>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	1ccd      	adds	r5, r1, #3
 8011684:	f025 0503 	bic.w	r5, r5, #3
 8011688:	3508      	adds	r5, #8
 801168a:	2d0c      	cmp	r5, #12
 801168c:	bf38      	it	cc
 801168e:	250c      	movcc	r5, #12
 8011690:	2d00      	cmp	r5, #0
 8011692:	4606      	mov	r6, r0
 8011694:	db01      	blt.n	801169a <_malloc_r+0x1a>
 8011696:	42a9      	cmp	r1, r5
 8011698:	d903      	bls.n	80116a2 <_malloc_r+0x22>
 801169a:	230c      	movs	r3, #12
 801169c:	6033      	str	r3, [r6, #0]
 801169e:	2000      	movs	r0, #0
 80116a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116a2:	f000 fe35 	bl	8012310 <__malloc_lock>
 80116a6:	4921      	ldr	r1, [pc, #132]	; (801172c <_malloc_r+0xac>)
 80116a8:	680a      	ldr	r2, [r1, #0]
 80116aa:	4614      	mov	r4, r2
 80116ac:	b99c      	cbnz	r4, 80116d6 <_malloc_r+0x56>
 80116ae:	4f20      	ldr	r7, [pc, #128]	; (8011730 <_malloc_r+0xb0>)
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	b923      	cbnz	r3, 80116be <_malloc_r+0x3e>
 80116b4:	4621      	mov	r1, r4
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 fafa 	bl	8011cb0 <_sbrk_r>
 80116bc:	6038      	str	r0, [r7, #0]
 80116be:	4629      	mov	r1, r5
 80116c0:	4630      	mov	r0, r6
 80116c2:	f000 faf5 	bl	8011cb0 <_sbrk_r>
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d123      	bne.n	8011712 <_malloc_r+0x92>
 80116ca:	230c      	movs	r3, #12
 80116cc:	6033      	str	r3, [r6, #0]
 80116ce:	4630      	mov	r0, r6
 80116d0:	f000 fe24 	bl	801231c <__malloc_unlock>
 80116d4:	e7e3      	b.n	801169e <_malloc_r+0x1e>
 80116d6:	6823      	ldr	r3, [r4, #0]
 80116d8:	1b5b      	subs	r3, r3, r5
 80116da:	d417      	bmi.n	801170c <_malloc_r+0x8c>
 80116dc:	2b0b      	cmp	r3, #11
 80116de:	d903      	bls.n	80116e8 <_malloc_r+0x68>
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	441c      	add	r4, r3
 80116e4:	6025      	str	r5, [r4, #0]
 80116e6:	e004      	b.n	80116f2 <_malloc_r+0x72>
 80116e8:	6863      	ldr	r3, [r4, #4]
 80116ea:	42a2      	cmp	r2, r4
 80116ec:	bf0c      	ite	eq
 80116ee:	600b      	streq	r3, [r1, #0]
 80116f0:	6053      	strne	r3, [r2, #4]
 80116f2:	4630      	mov	r0, r6
 80116f4:	f000 fe12 	bl	801231c <__malloc_unlock>
 80116f8:	f104 000b 	add.w	r0, r4, #11
 80116fc:	1d23      	adds	r3, r4, #4
 80116fe:	f020 0007 	bic.w	r0, r0, #7
 8011702:	1ac2      	subs	r2, r0, r3
 8011704:	d0cc      	beq.n	80116a0 <_malloc_r+0x20>
 8011706:	1a1b      	subs	r3, r3, r0
 8011708:	50a3      	str	r3, [r4, r2]
 801170a:	e7c9      	b.n	80116a0 <_malloc_r+0x20>
 801170c:	4622      	mov	r2, r4
 801170e:	6864      	ldr	r4, [r4, #4]
 8011710:	e7cc      	b.n	80116ac <_malloc_r+0x2c>
 8011712:	1cc4      	adds	r4, r0, #3
 8011714:	f024 0403 	bic.w	r4, r4, #3
 8011718:	42a0      	cmp	r0, r4
 801171a:	d0e3      	beq.n	80116e4 <_malloc_r+0x64>
 801171c:	1a21      	subs	r1, r4, r0
 801171e:	4630      	mov	r0, r6
 8011720:	f000 fac6 	bl	8011cb0 <_sbrk_r>
 8011724:	3001      	adds	r0, #1
 8011726:	d1dd      	bne.n	80116e4 <_malloc_r+0x64>
 8011728:	e7cf      	b.n	80116ca <_malloc_r+0x4a>
 801172a:	bf00      	nop
 801172c:	20000284 	.word	0x20000284
 8011730:	20000288 	.word	0x20000288

08011734 <__ssputs_r>:
 8011734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011738:	688e      	ldr	r6, [r1, #8]
 801173a:	429e      	cmp	r6, r3
 801173c:	4682      	mov	sl, r0
 801173e:	460c      	mov	r4, r1
 8011740:	4690      	mov	r8, r2
 8011742:	461f      	mov	r7, r3
 8011744:	d838      	bhi.n	80117b8 <__ssputs_r+0x84>
 8011746:	898a      	ldrh	r2, [r1, #12]
 8011748:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801174c:	d032      	beq.n	80117b4 <__ssputs_r+0x80>
 801174e:	6825      	ldr	r5, [r4, #0]
 8011750:	6909      	ldr	r1, [r1, #16]
 8011752:	eba5 0901 	sub.w	r9, r5, r1
 8011756:	6965      	ldr	r5, [r4, #20]
 8011758:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801175c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011760:	3301      	adds	r3, #1
 8011762:	444b      	add	r3, r9
 8011764:	106d      	asrs	r5, r5, #1
 8011766:	429d      	cmp	r5, r3
 8011768:	bf38      	it	cc
 801176a:	461d      	movcc	r5, r3
 801176c:	0553      	lsls	r3, r2, #21
 801176e:	d531      	bpl.n	80117d4 <__ssputs_r+0xa0>
 8011770:	4629      	mov	r1, r5
 8011772:	f7ff ff85 	bl	8011680 <_malloc_r>
 8011776:	4606      	mov	r6, r0
 8011778:	b950      	cbnz	r0, 8011790 <__ssputs_r+0x5c>
 801177a:	230c      	movs	r3, #12
 801177c:	f8ca 3000 	str.w	r3, [sl]
 8011780:	89a3      	ldrh	r3, [r4, #12]
 8011782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011786:	81a3      	strh	r3, [r4, #12]
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011790:	6921      	ldr	r1, [r4, #16]
 8011792:	464a      	mov	r2, r9
 8011794:	f7ff fa4c 	bl	8010c30 <memcpy>
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a2:	81a3      	strh	r3, [r4, #12]
 80117a4:	6126      	str	r6, [r4, #16]
 80117a6:	6165      	str	r5, [r4, #20]
 80117a8:	444e      	add	r6, r9
 80117aa:	eba5 0509 	sub.w	r5, r5, r9
 80117ae:	6026      	str	r6, [r4, #0]
 80117b0:	60a5      	str	r5, [r4, #8]
 80117b2:	463e      	mov	r6, r7
 80117b4:	42be      	cmp	r6, r7
 80117b6:	d900      	bls.n	80117ba <__ssputs_r+0x86>
 80117b8:	463e      	mov	r6, r7
 80117ba:	4632      	mov	r2, r6
 80117bc:	6820      	ldr	r0, [r4, #0]
 80117be:	4641      	mov	r1, r8
 80117c0:	f000 fd8c 	bl	80122dc <memmove>
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	6822      	ldr	r2, [r4, #0]
 80117c8:	1b9b      	subs	r3, r3, r6
 80117ca:	4432      	add	r2, r6
 80117cc:	60a3      	str	r3, [r4, #8]
 80117ce:	6022      	str	r2, [r4, #0]
 80117d0:	2000      	movs	r0, #0
 80117d2:	e7db      	b.n	801178c <__ssputs_r+0x58>
 80117d4:	462a      	mov	r2, r5
 80117d6:	f000 fda7 	bl	8012328 <_realloc_r>
 80117da:	4606      	mov	r6, r0
 80117dc:	2800      	cmp	r0, #0
 80117de:	d1e1      	bne.n	80117a4 <__ssputs_r+0x70>
 80117e0:	6921      	ldr	r1, [r4, #16]
 80117e2:	4650      	mov	r0, sl
 80117e4:	f7ff fefc 	bl	80115e0 <_free_r>
 80117e8:	e7c7      	b.n	801177a <__ssputs_r+0x46>
	...

080117ec <_svfiprintf_r>:
 80117ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f0:	4698      	mov	r8, r3
 80117f2:	898b      	ldrh	r3, [r1, #12]
 80117f4:	061b      	lsls	r3, r3, #24
 80117f6:	b09d      	sub	sp, #116	; 0x74
 80117f8:	4607      	mov	r7, r0
 80117fa:	460d      	mov	r5, r1
 80117fc:	4614      	mov	r4, r2
 80117fe:	d50e      	bpl.n	801181e <_svfiprintf_r+0x32>
 8011800:	690b      	ldr	r3, [r1, #16]
 8011802:	b963      	cbnz	r3, 801181e <_svfiprintf_r+0x32>
 8011804:	2140      	movs	r1, #64	; 0x40
 8011806:	f7ff ff3b 	bl	8011680 <_malloc_r>
 801180a:	6028      	str	r0, [r5, #0]
 801180c:	6128      	str	r0, [r5, #16]
 801180e:	b920      	cbnz	r0, 801181a <_svfiprintf_r+0x2e>
 8011810:	230c      	movs	r3, #12
 8011812:	603b      	str	r3, [r7, #0]
 8011814:	f04f 30ff 	mov.w	r0, #4294967295
 8011818:	e0d1      	b.n	80119be <_svfiprintf_r+0x1d2>
 801181a:	2340      	movs	r3, #64	; 0x40
 801181c:	616b      	str	r3, [r5, #20]
 801181e:	2300      	movs	r3, #0
 8011820:	9309      	str	r3, [sp, #36]	; 0x24
 8011822:	2320      	movs	r3, #32
 8011824:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011828:	f8cd 800c 	str.w	r8, [sp, #12]
 801182c:	2330      	movs	r3, #48	; 0x30
 801182e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80119d8 <_svfiprintf_r+0x1ec>
 8011832:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011836:	f04f 0901 	mov.w	r9, #1
 801183a:	4623      	mov	r3, r4
 801183c:	469a      	mov	sl, r3
 801183e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011842:	b10a      	cbz	r2, 8011848 <_svfiprintf_r+0x5c>
 8011844:	2a25      	cmp	r2, #37	; 0x25
 8011846:	d1f9      	bne.n	801183c <_svfiprintf_r+0x50>
 8011848:	ebba 0b04 	subs.w	fp, sl, r4
 801184c:	d00b      	beq.n	8011866 <_svfiprintf_r+0x7a>
 801184e:	465b      	mov	r3, fp
 8011850:	4622      	mov	r2, r4
 8011852:	4629      	mov	r1, r5
 8011854:	4638      	mov	r0, r7
 8011856:	f7ff ff6d 	bl	8011734 <__ssputs_r>
 801185a:	3001      	adds	r0, #1
 801185c:	f000 80aa 	beq.w	80119b4 <_svfiprintf_r+0x1c8>
 8011860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011862:	445a      	add	r2, fp
 8011864:	9209      	str	r2, [sp, #36]	; 0x24
 8011866:	f89a 3000 	ldrb.w	r3, [sl]
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 80a2 	beq.w	80119b4 <_svfiprintf_r+0x1c8>
 8011870:	2300      	movs	r3, #0
 8011872:	f04f 32ff 	mov.w	r2, #4294967295
 8011876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801187a:	f10a 0a01 	add.w	sl, sl, #1
 801187e:	9304      	str	r3, [sp, #16]
 8011880:	9307      	str	r3, [sp, #28]
 8011882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011886:	931a      	str	r3, [sp, #104]	; 0x68
 8011888:	4654      	mov	r4, sl
 801188a:	2205      	movs	r2, #5
 801188c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011890:	4851      	ldr	r0, [pc, #324]	; (80119d8 <_svfiprintf_r+0x1ec>)
 8011892:	f7ee fcbd 	bl	8000210 <memchr>
 8011896:	9a04      	ldr	r2, [sp, #16]
 8011898:	b9d8      	cbnz	r0, 80118d2 <_svfiprintf_r+0xe6>
 801189a:	06d0      	lsls	r0, r2, #27
 801189c:	bf44      	itt	mi
 801189e:	2320      	movmi	r3, #32
 80118a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118a4:	0711      	lsls	r1, r2, #28
 80118a6:	bf44      	itt	mi
 80118a8:	232b      	movmi	r3, #43	; 0x2b
 80118aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118ae:	f89a 3000 	ldrb.w	r3, [sl]
 80118b2:	2b2a      	cmp	r3, #42	; 0x2a
 80118b4:	d015      	beq.n	80118e2 <_svfiprintf_r+0xf6>
 80118b6:	9a07      	ldr	r2, [sp, #28]
 80118b8:	4654      	mov	r4, sl
 80118ba:	2000      	movs	r0, #0
 80118bc:	f04f 0c0a 	mov.w	ip, #10
 80118c0:	4621      	mov	r1, r4
 80118c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118c6:	3b30      	subs	r3, #48	; 0x30
 80118c8:	2b09      	cmp	r3, #9
 80118ca:	d94e      	bls.n	801196a <_svfiprintf_r+0x17e>
 80118cc:	b1b0      	cbz	r0, 80118fc <_svfiprintf_r+0x110>
 80118ce:	9207      	str	r2, [sp, #28]
 80118d0:	e014      	b.n	80118fc <_svfiprintf_r+0x110>
 80118d2:	eba0 0308 	sub.w	r3, r0, r8
 80118d6:	fa09 f303 	lsl.w	r3, r9, r3
 80118da:	4313      	orrs	r3, r2
 80118dc:	9304      	str	r3, [sp, #16]
 80118de:	46a2      	mov	sl, r4
 80118e0:	e7d2      	b.n	8011888 <_svfiprintf_r+0x9c>
 80118e2:	9b03      	ldr	r3, [sp, #12]
 80118e4:	1d19      	adds	r1, r3, #4
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	9103      	str	r1, [sp, #12]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	bfbb      	ittet	lt
 80118ee:	425b      	neglt	r3, r3
 80118f0:	f042 0202 	orrlt.w	r2, r2, #2
 80118f4:	9307      	strge	r3, [sp, #28]
 80118f6:	9307      	strlt	r3, [sp, #28]
 80118f8:	bfb8      	it	lt
 80118fa:	9204      	strlt	r2, [sp, #16]
 80118fc:	7823      	ldrb	r3, [r4, #0]
 80118fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011900:	d10c      	bne.n	801191c <_svfiprintf_r+0x130>
 8011902:	7863      	ldrb	r3, [r4, #1]
 8011904:	2b2a      	cmp	r3, #42	; 0x2a
 8011906:	d135      	bne.n	8011974 <_svfiprintf_r+0x188>
 8011908:	9b03      	ldr	r3, [sp, #12]
 801190a:	1d1a      	adds	r2, r3, #4
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	9203      	str	r2, [sp, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	bfb8      	it	lt
 8011914:	f04f 33ff 	movlt.w	r3, #4294967295
 8011918:	3402      	adds	r4, #2
 801191a:	9305      	str	r3, [sp, #20]
 801191c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80119e8 <_svfiprintf_r+0x1fc>
 8011920:	7821      	ldrb	r1, [r4, #0]
 8011922:	2203      	movs	r2, #3
 8011924:	4650      	mov	r0, sl
 8011926:	f7ee fc73 	bl	8000210 <memchr>
 801192a:	b140      	cbz	r0, 801193e <_svfiprintf_r+0x152>
 801192c:	2340      	movs	r3, #64	; 0x40
 801192e:	eba0 000a 	sub.w	r0, r0, sl
 8011932:	fa03 f000 	lsl.w	r0, r3, r0
 8011936:	9b04      	ldr	r3, [sp, #16]
 8011938:	4303      	orrs	r3, r0
 801193a:	3401      	adds	r4, #1
 801193c:	9304      	str	r3, [sp, #16]
 801193e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011942:	4826      	ldr	r0, [pc, #152]	; (80119dc <_svfiprintf_r+0x1f0>)
 8011944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011948:	2206      	movs	r2, #6
 801194a:	f7ee fc61 	bl	8000210 <memchr>
 801194e:	2800      	cmp	r0, #0
 8011950:	d038      	beq.n	80119c4 <_svfiprintf_r+0x1d8>
 8011952:	4b23      	ldr	r3, [pc, #140]	; (80119e0 <_svfiprintf_r+0x1f4>)
 8011954:	bb1b      	cbnz	r3, 801199e <_svfiprintf_r+0x1b2>
 8011956:	9b03      	ldr	r3, [sp, #12]
 8011958:	3307      	adds	r3, #7
 801195a:	f023 0307 	bic.w	r3, r3, #7
 801195e:	3308      	adds	r3, #8
 8011960:	9303      	str	r3, [sp, #12]
 8011962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011964:	4433      	add	r3, r6
 8011966:	9309      	str	r3, [sp, #36]	; 0x24
 8011968:	e767      	b.n	801183a <_svfiprintf_r+0x4e>
 801196a:	fb0c 3202 	mla	r2, ip, r2, r3
 801196e:	460c      	mov	r4, r1
 8011970:	2001      	movs	r0, #1
 8011972:	e7a5      	b.n	80118c0 <_svfiprintf_r+0xd4>
 8011974:	2300      	movs	r3, #0
 8011976:	3401      	adds	r4, #1
 8011978:	9305      	str	r3, [sp, #20]
 801197a:	4619      	mov	r1, r3
 801197c:	f04f 0c0a 	mov.w	ip, #10
 8011980:	4620      	mov	r0, r4
 8011982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011986:	3a30      	subs	r2, #48	; 0x30
 8011988:	2a09      	cmp	r2, #9
 801198a:	d903      	bls.n	8011994 <_svfiprintf_r+0x1a8>
 801198c:	2b00      	cmp	r3, #0
 801198e:	d0c5      	beq.n	801191c <_svfiprintf_r+0x130>
 8011990:	9105      	str	r1, [sp, #20]
 8011992:	e7c3      	b.n	801191c <_svfiprintf_r+0x130>
 8011994:	fb0c 2101 	mla	r1, ip, r1, r2
 8011998:	4604      	mov	r4, r0
 801199a:	2301      	movs	r3, #1
 801199c:	e7f0      	b.n	8011980 <_svfiprintf_r+0x194>
 801199e:	ab03      	add	r3, sp, #12
 80119a0:	9300      	str	r3, [sp, #0]
 80119a2:	462a      	mov	r2, r5
 80119a4:	4b0f      	ldr	r3, [pc, #60]	; (80119e4 <_svfiprintf_r+0x1f8>)
 80119a6:	a904      	add	r1, sp, #16
 80119a8:	4638      	mov	r0, r7
 80119aa:	f7fc f9e3 	bl	800dd74 <_printf_float>
 80119ae:	1c42      	adds	r2, r0, #1
 80119b0:	4606      	mov	r6, r0
 80119b2:	d1d6      	bne.n	8011962 <_svfiprintf_r+0x176>
 80119b4:	89ab      	ldrh	r3, [r5, #12]
 80119b6:	065b      	lsls	r3, r3, #25
 80119b8:	f53f af2c 	bmi.w	8011814 <_svfiprintf_r+0x28>
 80119bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119be:	b01d      	add	sp, #116	; 0x74
 80119c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c4:	ab03      	add	r3, sp, #12
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	462a      	mov	r2, r5
 80119ca:	4b06      	ldr	r3, [pc, #24]	; (80119e4 <_svfiprintf_r+0x1f8>)
 80119cc:	a904      	add	r1, sp, #16
 80119ce:	4638      	mov	r0, r7
 80119d0:	f7fc fc74 	bl	800e2bc <_printf_i>
 80119d4:	e7eb      	b.n	80119ae <_svfiprintf_r+0x1c2>
 80119d6:	bf00      	nop
 80119d8:	08026234 	.word	0x08026234
 80119dc:	0802623e 	.word	0x0802623e
 80119e0:	0800dd75 	.word	0x0800dd75
 80119e4:	08011735 	.word	0x08011735
 80119e8:	0802623a 	.word	0x0802623a

080119ec <__sfputc_r>:
 80119ec:	6893      	ldr	r3, [r2, #8]
 80119ee:	3b01      	subs	r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	b410      	push	{r4}
 80119f4:	6093      	str	r3, [r2, #8]
 80119f6:	da08      	bge.n	8011a0a <__sfputc_r+0x1e>
 80119f8:	6994      	ldr	r4, [r2, #24]
 80119fa:	42a3      	cmp	r3, r4
 80119fc:	db01      	blt.n	8011a02 <__sfputc_r+0x16>
 80119fe:	290a      	cmp	r1, #10
 8011a00:	d103      	bne.n	8011a0a <__sfputc_r+0x1e>
 8011a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a06:	f000 b975 	b.w	8011cf4 <__swbuf_r>
 8011a0a:	6813      	ldr	r3, [r2, #0]
 8011a0c:	1c58      	adds	r0, r3, #1
 8011a0e:	6010      	str	r0, [r2, #0]
 8011a10:	7019      	strb	r1, [r3, #0]
 8011a12:	4608      	mov	r0, r1
 8011a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a18:	4770      	bx	lr

08011a1a <__sfputs_r>:
 8011a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	460f      	mov	r7, r1
 8011a20:	4614      	mov	r4, r2
 8011a22:	18d5      	adds	r5, r2, r3
 8011a24:	42ac      	cmp	r4, r5
 8011a26:	d101      	bne.n	8011a2c <__sfputs_r+0x12>
 8011a28:	2000      	movs	r0, #0
 8011a2a:	e007      	b.n	8011a3c <__sfputs_r+0x22>
 8011a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a30:	463a      	mov	r2, r7
 8011a32:	4630      	mov	r0, r6
 8011a34:	f7ff ffda 	bl	80119ec <__sfputc_r>
 8011a38:	1c43      	adds	r3, r0, #1
 8011a3a:	d1f3      	bne.n	8011a24 <__sfputs_r+0xa>
 8011a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a40 <_vfiprintf_r>:
 8011a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a44:	460d      	mov	r5, r1
 8011a46:	b09d      	sub	sp, #116	; 0x74
 8011a48:	4614      	mov	r4, r2
 8011a4a:	4698      	mov	r8, r3
 8011a4c:	4606      	mov	r6, r0
 8011a4e:	b118      	cbz	r0, 8011a58 <_vfiprintf_r+0x18>
 8011a50:	6983      	ldr	r3, [r0, #24]
 8011a52:	b90b      	cbnz	r3, 8011a58 <_vfiprintf_r+0x18>
 8011a54:	f000 fb3e 	bl	80120d4 <__sinit>
 8011a58:	4b89      	ldr	r3, [pc, #548]	; (8011c80 <_vfiprintf_r+0x240>)
 8011a5a:	429d      	cmp	r5, r3
 8011a5c:	d11b      	bne.n	8011a96 <_vfiprintf_r+0x56>
 8011a5e:	6875      	ldr	r5, [r6, #4]
 8011a60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a62:	07d9      	lsls	r1, r3, #31
 8011a64:	d405      	bmi.n	8011a72 <_vfiprintf_r+0x32>
 8011a66:	89ab      	ldrh	r3, [r5, #12]
 8011a68:	059a      	lsls	r2, r3, #22
 8011a6a:	d402      	bmi.n	8011a72 <_vfiprintf_r+0x32>
 8011a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a6e:	f000 fbcf 	bl	8012210 <__retarget_lock_acquire_recursive>
 8011a72:	89ab      	ldrh	r3, [r5, #12]
 8011a74:	071b      	lsls	r3, r3, #28
 8011a76:	d501      	bpl.n	8011a7c <_vfiprintf_r+0x3c>
 8011a78:	692b      	ldr	r3, [r5, #16]
 8011a7a:	b9eb      	cbnz	r3, 8011ab8 <_vfiprintf_r+0x78>
 8011a7c:	4629      	mov	r1, r5
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f000 f998 	bl	8011db4 <__swsetup_r>
 8011a84:	b1c0      	cbz	r0, 8011ab8 <_vfiprintf_r+0x78>
 8011a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a88:	07dc      	lsls	r4, r3, #31
 8011a8a:	d50e      	bpl.n	8011aaa <_vfiprintf_r+0x6a>
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	b01d      	add	sp, #116	; 0x74
 8011a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a96:	4b7b      	ldr	r3, [pc, #492]	; (8011c84 <_vfiprintf_r+0x244>)
 8011a98:	429d      	cmp	r5, r3
 8011a9a:	d101      	bne.n	8011aa0 <_vfiprintf_r+0x60>
 8011a9c:	68b5      	ldr	r5, [r6, #8]
 8011a9e:	e7df      	b.n	8011a60 <_vfiprintf_r+0x20>
 8011aa0:	4b79      	ldr	r3, [pc, #484]	; (8011c88 <_vfiprintf_r+0x248>)
 8011aa2:	429d      	cmp	r5, r3
 8011aa4:	bf08      	it	eq
 8011aa6:	68f5      	ldreq	r5, [r6, #12]
 8011aa8:	e7da      	b.n	8011a60 <_vfiprintf_r+0x20>
 8011aaa:	89ab      	ldrh	r3, [r5, #12]
 8011aac:	0598      	lsls	r0, r3, #22
 8011aae:	d4ed      	bmi.n	8011a8c <_vfiprintf_r+0x4c>
 8011ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ab2:	f000 fbae 	bl	8012212 <__retarget_lock_release_recursive>
 8011ab6:	e7e9      	b.n	8011a8c <_vfiprintf_r+0x4c>
 8011ab8:	2300      	movs	r3, #0
 8011aba:	9309      	str	r3, [sp, #36]	; 0x24
 8011abc:	2320      	movs	r3, #32
 8011abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ac6:	2330      	movs	r3, #48	; 0x30
 8011ac8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c8c <_vfiprintf_r+0x24c>
 8011acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ad0:	f04f 0901 	mov.w	r9, #1
 8011ad4:	4623      	mov	r3, r4
 8011ad6:	469a      	mov	sl, r3
 8011ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011adc:	b10a      	cbz	r2, 8011ae2 <_vfiprintf_r+0xa2>
 8011ade:	2a25      	cmp	r2, #37	; 0x25
 8011ae0:	d1f9      	bne.n	8011ad6 <_vfiprintf_r+0x96>
 8011ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8011ae6:	d00b      	beq.n	8011b00 <_vfiprintf_r+0xc0>
 8011ae8:	465b      	mov	r3, fp
 8011aea:	4622      	mov	r2, r4
 8011aec:	4629      	mov	r1, r5
 8011aee:	4630      	mov	r0, r6
 8011af0:	f7ff ff93 	bl	8011a1a <__sfputs_r>
 8011af4:	3001      	adds	r0, #1
 8011af6:	f000 80aa 	beq.w	8011c4e <_vfiprintf_r+0x20e>
 8011afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011afc:	445a      	add	r2, fp
 8011afe:	9209      	str	r2, [sp, #36]	; 0x24
 8011b00:	f89a 3000 	ldrb.w	r3, [sl]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	f000 80a2 	beq.w	8011c4e <_vfiprintf_r+0x20e>
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b14:	f10a 0a01 	add.w	sl, sl, #1
 8011b18:	9304      	str	r3, [sp, #16]
 8011b1a:	9307      	str	r3, [sp, #28]
 8011b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b20:	931a      	str	r3, [sp, #104]	; 0x68
 8011b22:	4654      	mov	r4, sl
 8011b24:	2205      	movs	r2, #5
 8011b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b2a:	4858      	ldr	r0, [pc, #352]	; (8011c8c <_vfiprintf_r+0x24c>)
 8011b2c:	f7ee fb70 	bl	8000210 <memchr>
 8011b30:	9a04      	ldr	r2, [sp, #16]
 8011b32:	b9d8      	cbnz	r0, 8011b6c <_vfiprintf_r+0x12c>
 8011b34:	06d1      	lsls	r1, r2, #27
 8011b36:	bf44      	itt	mi
 8011b38:	2320      	movmi	r3, #32
 8011b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b3e:	0713      	lsls	r3, r2, #28
 8011b40:	bf44      	itt	mi
 8011b42:	232b      	movmi	r3, #43	; 0x2b
 8011b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b48:	f89a 3000 	ldrb.w	r3, [sl]
 8011b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b4e:	d015      	beq.n	8011b7c <_vfiprintf_r+0x13c>
 8011b50:	9a07      	ldr	r2, [sp, #28]
 8011b52:	4654      	mov	r4, sl
 8011b54:	2000      	movs	r0, #0
 8011b56:	f04f 0c0a 	mov.w	ip, #10
 8011b5a:	4621      	mov	r1, r4
 8011b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b60:	3b30      	subs	r3, #48	; 0x30
 8011b62:	2b09      	cmp	r3, #9
 8011b64:	d94e      	bls.n	8011c04 <_vfiprintf_r+0x1c4>
 8011b66:	b1b0      	cbz	r0, 8011b96 <_vfiprintf_r+0x156>
 8011b68:	9207      	str	r2, [sp, #28]
 8011b6a:	e014      	b.n	8011b96 <_vfiprintf_r+0x156>
 8011b6c:	eba0 0308 	sub.w	r3, r0, r8
 8011b70:	fa09 f303 	lsl.w	r3, r9, r3
 8011b74:	4313      	orrs	r3, r2
 8011b76:	9304      	str	r3, [sp, #16]
 8011b78:	46a2      	mov	sl, r4
 8011b7a:	e7d2      	b.n	8011b22 <_vfiprintf_r+0xe2>
 8011b7c:	9b03      	ldr	r3, [sp, #12]
 8011b7e:	1d19      	adds	r1, r3, #4
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	9103      	str	r1, [sp, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	bfbb      	ittet	lt
 8011b88:	425b      	neglt	r3, r3
 8011b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b8e:	9307      	strge	r3, [sp, #28]
 8011b90:	9307      	strlt	r3, [sp, #28]
 8011b92:	bfb8      	it	lt
 8011b94:	9204      	strlt	r2, [sp, #16]
 8011b96:	7823      	ldrb	r3, [r4, #0]
 8011b98:	2b2e      	cmp	r3, #46	; 0x2e
 8011b9a:	d10c      	bne.n	8011bb6 <_vfiprintf_r+0x176>
 8011b9c:	7863      	ldrb	r3, [r4, #1]
 8011b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8011ba0:	d135      	bne.n	8011c0e <_vfiprintf_r+0x1ce>
 8011ba2:	9b03      	ldr	r3, [sp, #12]
 8011ba4:	1d1a      	adds	r2, r3, #4
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	9203      	str	r2, [sp, #12]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	bfb8      	it	lt
 8011bae:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bb2:	3402      	adds	r4, #2
 8011bb4:	9305      	str	r3, [sp, #20]
 8011bb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c9c <_vfiprintf_r+0x25c>
 8011bba:	7821      	ldrb	r1, [r4, #0]
 8011bbc:	2203      	movs	r2, #3
 8011bbe:	4650      	mov	r0, sl
 8011bc0:	f7ee fb26 	bl	8000210 <memchr>
 8011bc4:	b140      	cbz	r0, 8011bd8 <_vfiprintf_r+0x198>
 8011bc6:	2340      	movs	r3, #64	; 0x40
 8011bc8:	eba0 000a 	sub.w	r0, r0, sl
 8011bcc:	fa03 f000 	lsl.w	r0, r3, r0
 8011bd0:	9b04      	ldr	r3, [sp, #16]
 8011bd2:	4303      	orrs	r3, r0
 8011bd4:	3401      	adds	r4, #1
 8011bd6:	9304      	str	r3, [sp, #16]
 8011bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bdc:	482c      	ldr	r0, [pc, #176]	; (8011c90 <_vfiprintf_r+0x250>)
 8011bde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011be2:	2206      	movs	r2, #6
 8011be4:	f7ee fb14 	bl	8000210 <memchr>
 8011be8:	2800      	cmp	r0, #0
 8011bea:	d03f      	beq.n	8011c6c <_vfiprintf_r+0x22c>
 8011bec:	4b29      	ldr	r3, [pc, #164]	; (8011c94 <_vfiprintf_r+0x254>)
 8011bee:	bb1b      	cbnz	r3, 8011c38 <_vfiprintf_r+0x1f8>
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	3307      	adds	r3, #7
 8011bf4:	f023 0307 	bic.w	r3, r3, #7
 8011bf8:	3308      	adds	r3, #8
 8011bfa:	9303      	str	r3, [sp, #12]
 8011bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bfe:	443b      	add	r3, r7
 8011c00:	9309      	str	r3, [sp, #36]	; 0x24
 8011c02:	e767      	b.n	8011ad4 <_vfiprintf_r+0x94>
 8011c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c08:	460c      	mov	r4, r1
 8011c0a:	2001      	movs	r0, #1
 8011c0c:	e7a5      	b.n	8011b5a <_vfiprintf_r+0x11a>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	3401      	adds	r4, #1
 8011c12:	9305      	str	r3, [sp, #20]
 8011c14:	4619      	mov	r1, r3
 8011c16:	f04f 0c0a 	mov.w	ip, #10
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c20:	3a30      	subs	r2, #48	; 0x30
 8011c22:	2a09      	cmp	r2, #9
 8011c24:	d903      	bls.n	8011c2e <_vfiprintf_r+0x1ee>
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d0c5      	beq.n	8011bb6 <_vfiprintf_r+0x176>
 8011c2a:	9105      	str	r1, [sp, #20]
 8011c2c:	e7c3      	b.n	8011bb6 <_vfiprintf_r+0x176>
 8011c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c32:	4604      	mov	r4, r0
 8011c34:	2301      	movs	r3, #1
 8011c36:	e7f0      	b.n	8011c1a <_vfiprintf_r+0x1da>
 8011c38:	ab03      	add	r3, sp, #12
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	4b16      	ldr	r3, [pc, #88]	; (8011c98 <_vfiprintf_r+0x258>)
 8011c40:	a904      	add	r1, sp, #16
 8011c42:	4630      	mov	r0, r6
 8011c44:	f7fc f896 	bl	800dd74 <_printf_float>
 8011c48:	4607      	mov	r7, r0
 8011c4a:	1c78      	adds	r0, r7, #1
 8011c4c:	d1d6      	bne.n	8011bfc <_vfiprintf_r+0x1bc>
 8011c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c50:	07d9      	lsls	r1, r3, #31
 8011c52:	d405      	bmi.n	8011c60 <_vfiprintf_r+0x220>
 8011c54:	89ab      	ldrh	r3, [r5, #12]
 8011c56:	059a      	lsls	r2, r3, #22
 8011c58:	d402      	bmi.n	8011c60 <_vfiprintf_r+0x220>
 8011c5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c5c:	f000 fad9 	bl	8012212 <__retarget_lock_release_recursive>
 8011c60:	89ab      	ldrh	r3, [r5, #12]
 8011c62:	065b      	lsls	r3, r3, #25
 8011c64:	f53f af12 	bmi.w	8011a8c <_vfiprintf_r+0x4c>
 8011c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c6a:	e711      	b.n	8011a90 <_vfiprintf_r+0x50>
 8011c6c:	ab03      	add	r3, sp, #12
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	462a      	mov	r2, r5
 8011c72:	4b09      	ldr	r3, [pc, #36]	; (8011c98 <_vfiprintf_r+0x258>)
 8011c74:	a904      	add	r1, sp, #16
 8011c76:	4630      	mov	r0, r6
 8011c78:	f7fc fb20 	bl	800e2bc <_printf_i>
 8011c7c:	e7e4      	b.n	8011c48 <_vfiprintf_r+0x208>
 8011c7e:	bf00      	nop
 8011c80:	08026268 	.word	0x08026268
 8011c84:	08026288 	.word	0x08026288
 8011c88:	08026248 	.word	0x08026248
 8011c8c:	08026234 	.word	0x08026234
 8011c90:	0802623e 	.word	0x0802623e
 8011c94:	0800dd75 	.word	0x0800dd75
 8011c98:	08011a1b 	.word	0x08011a1b
 8011c9c:	0802623a 	.word	0x0802623a

08011ca0 <nan>:
 8011ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011ca8 <nan+0x8>
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop
 8011ca8:	00000000 	.word	0x00000000
 8011cac:	7ff80000 	.word	0x7ff80000

08011cb0 <_sbrk_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	4d06      	ldr	r5, [pc, #24]	; (8011ccc <_sbrk_r+0x1c>)
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	4608      	mov	r0, r1
 8011cba:	602b      	str	r3, [r5, #0]
 8011cbc:	f7f4 fe92 	bl	80069e4 <_sbrk>
 8011cc0:	1c43      	adds	r3, r0, #1
 8011cc2:	d102      	bne.n	8011cca <_sbrk_r+0x1a>
 8011cc4:	682b      	ldr	r3, [r5, #0]
 8011cc6:	b103      	cbz	r3, 8011cca <_sbrk_r+0x1a>
 8011cc8:	6023      	str	r3, [r4, #0]
 8011cca:	bd38      	pop	{r3, r4, r5, pc}
 8011ccc:	200008b8 	.word	0x200008b8

08011cd0 <strncmp>:
 8011cd0:	b510      	push	{r4, lr}
 8011cd2:	b16a      	cbz	r2, 8011cf0 <strncmp+0x20>
 8011cd4:	3901      	subs	r1, #1
 8011cd6:	1884      	adds	r4, r0, r2
 8011cd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011cdc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d103      	bne.n	8011cec <strncmp+0x1c>
 8011ce4:	42a0      	cmp	r0, r4
 8011ce6:	d001      	beq.n	8011cec <strncmp+0x1c>
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1f5      	bne.n	8011cd8 <strncmp+0x8>
 8011cec:	1a98      	subs	r0, r3, r2
 8011cee:	bd10      	pop	{r4, pc}
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	e7fc      	b.n	8011cee <strncmp+0x1e>

08011cf4 <__swbuf_r>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	460e      	mov	r6, r1
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	b118      	cbz	r0, 8011d06 <__swbuf_r+0x12>
 8011cfe:	6983      	ldr	r3, [r0, #24]
 8011d00:	b90b      	cbnz	r3, 8011d06 <__swbuf_r+0x12>
 8011d02:	f000 f9e7 	bl	80120d4 <__sinit>
 8011d06:	4b21      	ldr	r3, [pc, #132]	; (8011d8c <__swbuf_r+0x98>)
 8011d08:	429c      	cmp	r4, r3
 8011d0a:	d12b      	bne.n	8011d64 <__swbuf_r+0x70>
 8011d0c:	686c      	ldr	r4, [r5, #4]
 8011d0e:	69a3      	ldr	r3, [r4, #24]
 8011d10:	60a3      	str	r3, [r4, #8]
 8011d12:	89a3      	ldrh	r3, [r4, #12]
 8011d14:	071a      	lsls	r2, r3, #28
 8011d16:	d52f      	bpl.n	8011d78 <__swbuf_r+0x84>
 8011d18:	6923      	ldr	r3, [r4, #16]
 8011d1a:	b36b      	cbz	r3, 8011d78 <__swbuf_r+0x84>
 8011d1c:	6923      	ldr	r3, [r4, #16]
 8011d1e:	6820      	ldr	r0, [r4, #0]
 8011d20:	1ac0      	subs	r0, r0, r3
 8011d22:	6963      	ldr	r3, [r4, #20]
 8011d24:	b2f6      	uxtb	r6, r6
 8011d26:	4283      	cmp	r3, r0
 8011d28:	4637      	mov	r7, r6
 8011d2a:	dc04      	bgt.n	8011d36 <__swbuf_r+0x42>
 8011d2c:	4621      	mov	r1, r4
 8011d2e:	4628      	mov	r0, r5
 8011d30:	f000 f93c 	bl	8011fac <_fflush_r>
 8011d34:	bb30      	cbnz	r0, 8011d84 <__swbuf_r+0x90>
 8011d36:	68a3      	ldr	r3, [r4, #8]
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	60a3      	str	r3, [r4, #8]
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	1c5a      	adds	r2, r3, #1
 8011d40:	6022      	str	r2, [r4, #0]
 8011d42:	701e      	strb	r6, [r3, #0]
 8011d44:	6963      	ldr	r3, [r4, #20]
 8011d46:	3001      	adds	r0, #1
 8011d48:	4283      	cmp	r3, r0
 8011d4a:	d004      	beq.n	8011d56 <__swbuf_r+0x62>
 8011d4c:	89a3      	ldrh	r3, [r4, #12]
 8011d4e:	07db      	lsls	r3, r3, #31
 8011d50:	d506      	bpl.n	8011d60 <__swbuf_r+0x6c>
 8011d52:	2e0a      	cmp	r6, #10
 8011d54:	d104      	bne.n	8011d60 <__swbuf_r+0x6c>
 8011d56:	4621      	mov	r1, r4
 8011d58:	4628      	mov	r0, r5
 8011d5a:	f000 f927 	bl	8011fac <_fflush_r>
 8011d5e:	b988      	cbnz	r0, 8011d84 <__swbuf_r+0x90>
 8011d60:	4638      	mov	r0, r7
 8011d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d64:	4b0a      	ldr	r3, [pc, #40]	; (8011d90 <__swbuf_r+0x9c>)
 8011d66:	429c      	cmp	r4, r3
 8011d68:	d101      	bne.n	8011d6e <__swbuf_r+0x7a>
 8011d6a:	68ac      	ldr	r4, [r5, #8]
 8011d6c:	e7cf      	b.n	8011d0e <__swbuf_r+0x1a>
 8011d6e:	4b09      	ldr	r3, [pc, #36]	; (8011d94 <__swbuf_r+0xa0>)
 8011d70:	429c      	cmp	r4, r3
 8011d72:	bf08      	it	eq
 8011d74:	68ec      	ldreq	r4, [r5, #12]
 8011d76:	e7ca      	b.n	8011d0e <__swbuf_r+0x1a>
 8011d78:	4621      	mov	r1, r4
 8011d7a:	4628      	mov	r0, r5
 8011d7c:	f000 f81a 	bl	8011db4 <__swsetup_r>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d0cb      	beq.n	8011d1c <__swbuf_r+0x28>
 8011d84:	f04f 37ff 	mov.w	r7, #4294967295
 8011d88:	e7ea      	b.n	8011d60 <__swbuf_r+0x6c>
 8011d8a:	bf00      	nop
 8011d8c:	08026268 	.word	0x08026268
 8011d90:	08026288 	.word	0x08026288
 8011d94:	08026248 	.word	0x08026248

08011d98 <__ascii_wctomb>:
 8011d98:	b149      	cbz	r1, 8011dae <__ascii_wctomb+0x16>
 8011d9a:	2aff      	cmp	r2, #255	; 0xff
 8011d9c:	bf85      	ittet	hi
 8011d9e:	238a      	movhi	r3, #138	; 0x8a
 8011da0:	6003      	strhi	r3, [r0, #0]
 8011da2:	700a      	strbls	r2, [r1, #0]
 8011da4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011da8:	bf98      	it	ls
 8011daa:	2001      	movls	r0, #1
 8011dac:	4770      	bx	lr
 8011dae:	4608      	mov	r0, r1
 8011db0:	4770      	bx	lr
	...

08011db4 <__swsetup_r>:
 8011db4:	4b32      	ldr	r3, [pc, #200]	; (8011e80 <__swsetup_r+0xcc>)
 8011db6:	b570      	push	{r4, r5, r6, lr}
 8011db8:	681d      	ldr	r5, [r3, #0]
 8011dba:	4606      	mov	r6, r0
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	b125      	cbz	r5, 8011dca <__swsetup_r+0x16>
 8011dc0:	69ab      	ldr	r3, [r5, #24]
 8011dc2:	b913      	cbnz	r3, 8011dca <__swsetup_r+0x16>
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	f000 f985 	bl	80120d4 <__sinit>
 8011dca:	4b2e      	ldr	r3, [pc, #184]	; (8011e84 <__swsetup_r+0xd0>)
 8011dcc:	429c      	cmp	r4, r3
 8011dce:	d10f      	bne.n	8011df0 <__swsetup_r+0x3c>
 8011dd0:	686c      	ldr	r4, [r5, #4]
 8011dd2:	89a3      	ldrh	r3, [r4, #12]
 8011dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dd8:	0719      	lsls	r1, r3, #28
 8011dda:	d42c      	bmi.n	8011e36 <__swsetup_r+0x82>
 8011ddc:	06dd      	lsls	r5, r3, #27
 8011dde:	d411      	bmi.n	8011e04 <__swsetup_r+0x50>
 8011de0:	2309      	movs	r3, #9
 8011de2:	6033      	str	r3, [r6, #0]
 8011de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	f04f 30ff 	mov.w	r0, #4294967295
 8011dee:	e03e      	b.n	8011e6e <__swsetup_r+0xba>
 8011df0:	4b25      	ldr	r3, [pc, #148]	; (8011e88 <__swsetup_r+0xd4>)
 8011df2:	429c      	cmp	r4, r3
 8011df4:	d101      	bne.n	8011dfa <__swsetup_r+0x46>
 8011df6:	68ac      	ldr	r4, [r5, #8]
 8011df8:	e7eb      	b.n	8011dd2 <__swsetup_r+0x1e>
 8011dfa:	4b24      	ldr	r3, [pc, #144]	; (8011e8c <__swsetup_r+0xd8>)
 8011dfc:	429c      	cmp	r4, r3
 8011dfe:	bf08      	it	eq
 8011e00:	68ec      	ldreq	r4, [r5, #12]
 8011e02:	e7e6      	b.n	8011dd2 <__swsetup_r+0x1e>
 8011e04:	0758      	lsls	r0, r3, #29
 8011e06:	d512      	bpl.n	8011e2e <__swsetup_r+0x7a>
 8011e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e0a:	b141      	cbz	r1, 8011e1e <__swsetup_r+0x6a>
 8011e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e10:	4299      	cmp	r1, r3
 8011e12:	d002      	beq.n	8011e1a <__swsetup_r+0x66>
 8011e14:	4630      	mov	r0, r6
 8011e16:	f7ff fbe3 	bl	80115e0 <_free_r>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e24:	81a3      	strh	r3, [r4, #12]
 8011e26:	2300      	movs	r3, #0
 8011e28:	6063      	str	r3, [r4, #4]
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	6023      	str	r3, [r4, #0]
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	f043 0308 	orr.w	r3, r3, #8
 8011e34:	81a3      	strh	r3, [r4, #12]
 8011e36:	6923      	ldr	r3, [r4, #16]
 8011e38:	b94b      	cbnz	r3, 8011e4e <__swsetup_r+0x9a>
 8011e3a:	89a3      	ldrh	r3, [r4, #12]
 8011e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e44:	d003      	beq.n	8011e4e <__swsetup_r+0x9a>
 8011e46:	4621      	mov	r1, r4
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f000 fa07 	bl	801225c <__smakebuf_r>
 8011e4e:	89a0      	ldrh	r0, [r4, #12]
 8011e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e54:	f010 0301 	ands.w	r3, r0, #1
 8011e58:	d00a      	beq.n	8011e70 <__swsetup_r+0xbc>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	60a3      	str	r3, [r4, #8]
 8011e5e:	6963      	ldr	r3, [r4, #20]
 8011e60:	425b      	negs	r3, r3
 8011e62:	61a3      	str	r3, [r4, #24]
 8011e64:	6923      	ldr	r3, [r4, #16]
 8011e66:	b943      	cbnz	r3, 8011e7a <__swsetup_r+0xc6>
 8011e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e6c:	d1ba      	bne.n	8011de4 <__swsetup_r+0x30>
 8011e6e:	bd70      	pop	{r4, r5, r6, pc}
 8011e70:	0781      	lsls	r1, r0, #30
 8011e72:	bf58      	it	pl
 8011e74:	6963      	ldrpl	r3, [r4, #20]
 8011e76:	60a3      	str	r3, [r4, #8]
 8011e78:	e7f4      	b.n	8011e64 <__swsetup_r+0xb0>
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	e7f7      	b.n	8011e6e <__swsetup_r+0xba>
 8011e7e:	bf00      	nop
 8011e80:	20000040 	.word	0x20000040
 8011e84:	08026268 	.word	0x08026268
 8011e88:	08026288 	.word	0x08026288
 8011e8c:	08026248 	.word	0x08026248

08011e90 <abort>:
 8011e90:	b508      	push	{r3, lr}
 8011e92:	2006      	movs	r0, #6
 8011e94:	f000 fa96 	bl	80123c4 <raise>
 8011e98:	2001      	movs	r0, #1
 8011e9a:	f7f4 fd2b 	bl	80068f4 <_exit>
	...

08011ea0 <__sflush_r>:
 8011ea0:	898a      	ldrh	r2, [r1, #12]
 8011ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	0710      	lsls	r0, r2, #28
 8011eaa:	460c      	mov	r4, r1
 8011eac:	d458      	bmi.n	8011f60 <__sflush_r+0xc0>
 8011eae:	684b      	ldr	r3, [r1, #4]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	dc05      	bgt.n	8011ec0 <__sflush_r+0x20>
 8011eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	dc02      	bgt.n	8011ec0 <__sflush_r+0x20>
 8011eba:	2000      	movs	r0, #0
 8011ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ec2:	2e00      	cmp	r6, #0
 8011ec4:	d0f9      	beq.n	8011eba <__sflush_r+0x1a>
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ecc:	682f      	ldr	r7, [r5, #0]
 8011ece:	602b      	str	r3, [r5, #0]
 8011ed0:	d032      	beq.n	8011f38 <__sflush_r+0x98>
 8011ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ed4:	89a3      	ldrh	r3, [r4, #12]
 8011ed6:	075a      	lsls	r2, r3, #29
 8011ed8:	d505      	bpl.n	8011ee6 <__sflush_r+0x46>
 8011eda:	6863      	ldr	r3, [r4, #4]
 8011edc:	1ac0      	subs	r0, r0, r3
 8011ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ee0:	b10b      	cbz	r3, 8011ee6 <__sflush_r+0x46>
 8011ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ee4:	1ac0      	subs	r0, r0, r3
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	4602      	mov	r2, r0
 8011eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011eec:	6a21      	ldr	r1, [r4, #32]
 8011eee:	4628      	mov	r0, r5
 8011ef0:	47b0      	blx	r6
 8011ef2:	1c43      	adds	r3, r0, #1
 8011ef4:	89a3      	ldrh	r3, [r4, #12]
 8011ef6:	d106      	bne.n	8011f06 <__sflush_r+0x66>
 8011ef8:	6829      	ldr	r1, [r5, #0]
 8011efa:	291d      	cmp	r1, #29
 8011efc:	d82c      	bhi.n	8011f58 <__sflush_r+0xb8>
 8011efe:	4a2a      	ldr	r2, [pc, #168]	; (8011fa8 <__sflush_r+0x108>)
 8011f00:	40ca      	lsrs	r2, r1
 8011f02:	07d6      	lsls	r6, r2, #31
 8011f04:	d528      	bpl.n	8011f58 <__sflush_r+0xb8>
 8011f06:	2200      	movs	r2, #0
 8011f08:	6062      	str	r2, [r4, #4]
 8011f0a:	04d9      	lsls	r1, r3, #19
 8011f0c:	6922      	ldr	r2, [r4, #16]
 8011f0e:	6022      	str	r2, [r4, #0]
 8011f10:	d504      	bpl.n	8011f1c <__sflush_r+0x7c>
 8011f12:	1c42      	adds	r2, r0, #1
 8011f14:	d101      	bne.n	8011f1a <__sflush_r+0x7a>
 8011f16:	682b      	ldr	r3, [r5, #0]
 8011f18:	b903      	cbnz	r3, 8011f1c <__sflush_r+0x7c>
 8011f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8011f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f1e:	602f      	str	r7, [r5, #0]
 8011f20:	2900      	cmp	r1, #0
 8011f22:	d0ca      	beq.n	8011eba <__sflush_r+0x1a>
 8011f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f28:	4299      	cmp	r1, r3
 8011f2a:	d002      	beq.n	8011f32 <__sflush_r+0x92>
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f7ff fb57 	bl	80115e0 <_free_r>
 8011f32:	2000      	movs	r0, #0
 8011f34:	6360      	str	r0, [r4, #52]	; 0x34
 8011f36:	e7c1      	b.n	8011ebc <__sflush_r+0x1c>
 8011f38:	6a21      	ldr	r1, [r4, #32]
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	47b0      	blx	r6
 8011f40:	1c41      	adds	r1, r0, #1
 8011f42:	d1c7      	bne.n	8011ed4 <__sflush_r+0x34>
 8011f44:	682b      	ldr	r3, [r5, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0c4      	beq.n	8011ed4 <__sflush_r+0x34>
 8011f4a:	2b1d      	cmp	r3, #29
 8011f4c:	d001      	beq.n	8011f52 <__sflush_r+0xb2>
 8011f4e:	2b16      	cmp	r3, #22
 8011f50:	d101      	bne.n	8011f56 <__sflush_r+0xb6>
 8011f52:	602f      	str	r7, [r5, #0]
 8011f54:	e7b1      	b.n	8011eba <__sflush_r+0x1a>
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f5c:	81a3      	strh	r3, [r4, #12]
 8011f5e:	e7ad      	b.n	8011ebc <__sflush_r+0x1c>
 8011f60:	690f      	ldr	r7, [r1, #16]
 8011f62:	2f00      	cmp	r7, #0
 8011f64:	d0a9      	beq.n	8011eba <__sflush_r+0x1a>
 8011f66:	0793      	lsls	r3, r2, #30
 8011f68:	680e      	ldr	r6, [r1, #0]
 8011f6a:	bf08      	it	eq
 8011f6c:	694b      	ldreq	r3, [r1, #20]
 8011f6e:	600f      	str	r7, [r1, #0]
 8011f70:	bf18      	it	ne
 8011f72:	2300      	movne	r3, #0
 8011f74:	eba6 0807 	sub.w	r8, r6, r7
 8011f78:	608b      	str	r3, [r1, #8]
 8011f7a:	f1b8 0f00 	cmp.w	r8, #0
 8011f7e:	dd9c      	ble.n	8011eba <__sflush_r+0x1a>
 8011f80:	6a21      	ldr	r1, [r4, #32]
 8011f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f84:	4643      	mov	r3, r8
 8011f86:	463a      	mov	r2, r7
 8011f88:	4628      	mov	r0, r5
 8011f8a:	47b0      	blx	r6
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	dc06      	bgt.n	8011f9e <__sflush_r+0xfe>
 8011f90:	89a3      	ldrh	r3, [r4, #12]
 8011f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f96:	81a3      	strh	r3, [r4, #12]
 8011f98:	f04f 30ff 	mov.w	r0, #4294967295
 8011f9c:	e78e      	b.n	8011ebc <__sflush_r+0x1c>
 8011f9e:	4407      	add	r7, r0
 8011fa0:	eba8 0800 	sub.w	r8, r8, r0
 8011fa4:	e7e9      	b.n	8011f7a <__sflush_r+0xda>
 8011fa6:	bf00      	nop
 8011fa8:	20400001 	.word	0x20400001

08011fac <_fflush_r>:
 8011fac:	b538      	push	{r3, r4, r5, lr}
 8011fae:	690b      	ldr	r3, [r1, #16]
 8011fb0:	4605      	mov	r5, r0
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	b913      	cbnz	r3, 8011fbc <_fflush_r+0x10>
 8011fb6:	2500      	movs	r5, #0
 8011fb8:	4628      	mov	r0, r5
 8011fba:	bd38      	pop	{r3, r4, r5, pc}
 8011fbc:	b118      	cbz	r0, 8011fc6 <_fflush_r+0x1a>
 8011fbe:	6983      	ldr	r3, [r0, #24]
 8011fc0:	b90b      	cbnz	r3, 8011fc6 <_fflush_r+0x1a>
 8011fc2:	f000 f887 	bl	80120d4 <__sinit>
 8011fc6:	4b14      	ldr	r3, [pc, #80]	; (8012018 <_fflush_r+0x6c>)
 8011fc8:	429c      	cmp	r4, r3
 8011fca:	d11b      	bne.n	8012004 <_fflush_r+0x58>
 8011fcc:	686c      	ldr	r4, [r5, #4]
 8011fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d0ef      	beq.n	8011fb6 <_fflush_r+0xa>
 8011fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011fd8:	07d0      	lsls	r0, r2, #31
 8011fda:	d404      	bmi.n	8011fe6 <_fflush_r+0x3a>
 8011fdc:	0599      	lsls	r1, r3, #22
 8011fde:	d402      	bmi.n	8011fe6 <_fflush_r+0x3a>
 8011fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fe2:	f000 f915 	bl	8012210 <__retarget_lock_acquire_recursive>
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	4621      	mov	r1, r4
 8011fea:	f7ff ff59 	bl	8011ea0 <__sflush_r>
 8011fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ff0:	07da      	lsls	r2, r3, #31
 8011ff2:	4605      	mov	r5, r0
 8011ff4:	d4e0      	bmi.n	8011fb8 <_fflush_r+0xc>
 8011ff6:	89a3      	ldrh	r3, [r4, #12]
 8011ff8:	059b      	lsls	r3, r3, #22
 8011ffa:	d4dd      	bmi.n	8011fb8 <_fflush_r+0xc>
 8011ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ffe:	f000 f908 	bl	8012212 <__retarget_lock_release_recursive>
 8012002:	e7d9      	b.n	8011fb8 <_fflush_r+0xc>
 8012004:	4b05      	ldr	r3, [pc, #20]	; (801201c <_fflush_r+0x70>)
 8012006:	429c      	cmp	r4, r3
 8012008:	d101      	bne.n	801200e <_fflush_r+0x62>
 801200a:	68ac      	ldr	r4, [r5, #8]
 801200c:	e7df      	b.n	8011fce <_fflush_r+0x22>
 801200e:	4b04      	ldr	r3, [pc, #16]	; (8012020 <_fflush_r+0x74>)
 8012010:	429c      	cmp	r4, r3
 8012012:	bf08      	it	eq
 8012014:	68ec      	ldreq	r4, [r5, #12]
 8012016:	e7da      	b.n	8011fce <_fflush_r+0x22>
 8012018:	08026268 	.word	0x08026268
 801201c:	08026288 	.word	0x08026288
 8012020:	08026248 	.word	0x08026248

08012024 <std>:
 8012024:	2300      	movs	r3, #0
 8012026:	b510      	push	{r4, lr}
 8012028:	4604      	mov	r4, r0
 801202a:	e9c0 3300 	strd	r3, r3, [r0]
 801202e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012032:	6083      	str	r3, [r0, #8]
 8012034:	8181      	strh	r1, [r0, #12]
 8012036:	6643      	str	r3, [r0, #100]	; 0x64
 8012038:	81c2      	strh	r2, [r0, #14]
 801203a:	6183      	str	r3, [r0, #24]
 801203c:	4619      	mov	r1, r3
 801203e:	2208      	movs	r2, #8
 8012040:	305c      	adds	r0, #92	; 0x5c
 8012042:	f7fb fdef 	bl	800dc24 <memset>
 8012046:	4b05      	ldr	r3, [pc, #20]	; (801205c <std+0x38>)
 8012048:	6263      	str	r3, [r4, #36]	; 0x24
 801204a:	4b05      	ldr	r3, [pc, #20]	; (8012060 <std+0x3c>)
 801204c:	62a3      	str	r3, [r4, #40]	; 0x28
 801204e:	4b05      	ldr	r3, [pc, #20]	; (8012064 <std+0x40>)
 8012050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012052:	4b05      	ldr	r3, [pc, #20]	; (8012068 <std+0x44>)
 8012054:	6224      	str	r4, [r4, #32]
 8012056:	6323      	str	r3, [r4, #48]	; 0x30
 8012058:	bd10      	pop	{r4, pc}
 801205a:	bf00      	nop
 801205c:	080123fd 	.word	0x080123fd
 8012060:	0801241f 	.word	0x0801241f
 8012064:	08012457 	.word	0x08012457
 8012068:	0801247b 	.word	0x0801247b

0801206c <_cleanup_r>:
 801206c:	4901      	ldr	r1, [pc, #4]	; (8012074 <_cleanup_r+0x8>)
 801206e:	f000 b8af 	b.w	80121d0 <_fwalk_reent>
 8012072:	bf00      	nop
 8012074:	08011fad 	.word	0x08011fad

08012078 <__sfmoreglue>:
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	1e4a      	subs	r2, r1, #1
 801207c:	2568      	movs	r5, #104	; 0x68
 801207e:	4355      	muls	r5, r2
 8012080:	460e      	mov	r6, r1
 8012082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012086:	f7ff fafb 	bl	8011680 <_malloc_r>
 801208a:	4604      	mov	r4, r0
 801208c:	b140      	cbz	r0, 80120a0 <__sfmoreglue+0x28>
 801208e:	2100      	movs	r1, #0
 8012090:	e9c0 1600 	strd	r1, r6, [r0]
 8012094:	300c      	adds	r0, #12
 8012096:	60a0      	str	r0, [r4, #8]
 8012098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801209c:	f7fb fdc2 	bl	800dc24 <memset>
 80120a0:	4620      	mov	r0, r4
 80120a2:	bd70      	pop	{r4, r5, r6, pc}

080120a4 <__sfp_lock_acquire>:
 80120a4:	4801      	ldr	r0, [pc, #4]	; (80120ac <__sfp_lock_acquire+0x8>)
 80120a6:	f000 b8b3 	b.w	8012210 <__retarget_lock_acquire_recursive>
 80120aa:	bf00      	nop
 80120ac:	200008b4 	.word	0x200008b4

080120b0 <__sfp_lock_release>:
 80120b0:	4801      	ldr	r0, [pc, #4]	; (80120b8 <__sfp_lock_release+0x8>)
 80120b2:	f000 b8ae 	b.w	8012212 <__retarget_lock_release_recursive>
 80120b6:	bf00      	nop
 80120b8:	200008b4 	.word	0x200008b4

080120bc <__sinit_lock_acquire>:
 80120bc:	4801      	ldr	r0, [pc, #4]	; (80120c4 <__sinit_lock_acquire+0x8>)
 80120be:	f000 b8a7 	b.w	8012210 <__retarget_lock_acquire_recursive>
 80120c2:	bf00      	nop
 80120c4:	200008af 	.word	0x200008af

080120c8 <__sinit_lock_release>:
 80120c8:	4801      	ldr	r0, [pc, #4]	; (80120d0 <__sinit_lock_release+0x8>)
 80120ca:	f000 b8a2 	b.w	8012212 <__retarget_lock_release_recursive>
 80120ce:	bf00      	nop
 80120d0:	200008af 	.word	0x200008af

080120d4 <__sinit>:
 80120d4:	b510      	push	{r4, lr}
 80120d6:	4604      	mov	r4, r0
 80120d8:	f7ff fff0 	bl	80120bc <__sinit_lock_acquire>
 80120dc:	69a3      	ldr	r3, [r4, #24]
 80120de:	b11b      	cbz	r3, 80120e8 <__sinit+0x14>
 80120e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120e4:	f7ff bff0 	b.w	80120c8 <__sinit_lock_release>
 80120e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120ec:	6523      	str	r3, [r4, #80]	; 0x50
 80120ee:	4b13      	ldr	r3, [pc, #76]	; (801213c <__sinit+0x68>)
 80120f0:	4a13      	ldr	r2, [pc, #76]	; (8012140 <__sinit+0x6c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80120f6:	42a3      	cmp	r3, r4
 80120f8:	bf04      	itt	eq
 80120fa:	2301      	moveq	r3, #1
 80120fc:	61a3      	streq	r3, [r4, #24]
 80120fe:	4620      	mov	r0, r4
 8012100:	f000 f820 	bl	8012144 <__sfp>
 8012104:	6060      	str	r0, [r4, #4]
 8012106:	4620      	mov	r0, r4
 8012108:	f000 f81c 	bl	8012144 <__sfp>
 801210c:	60a0      	str	r0, [r4, #8]
 801210e:	4620      	mov	r0, r4
 8012110:	f000 f818 	bl	8012144 <__sfp>
 8012114:	2200      	movs	r2, #0
 8012116:	60e0      	str	r0, [r4, #12]
 8012118:	2104      	movs	r1, #4
 801211a:	6860      	ldr	r0, [r4, #4]
 801211c:	f7ff ff82 	bl	8012024 <std>
 8012120:	68a0      	ldr	r0, [r4, #8]
 8012122:	2201      	movs	r2, #1
 8012124:	2109      	movs	r1, #9
 8012126:	f7ff ff7d 	bl	8012024 <std>
 801212a:	68e0      	ldr	r0, [r4, #12]
 801212c:	2202      	movs	r2, #2
 801212e:	2112      	movs	r1, #18
 8012130:	f7ff ff78 	bl	8012024 <std>
 8012134:	2301      	movs	r3, #1
 8012136:	61a3      	str	r3, [r4, #24]
 8012138:	e7d2      	b.n	80120e0 <__sinit+0xc>
 801213a:	bf00      	nop
 801213c:	08025d94 	.word	0x08025d94
 8012140:	0801206d 	.word	0x0801206d

08012144 <__sfp>:
 8012144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012146:	4607      	mov	r7, r0
 8012148:	f7ff ffac 	bl	80120a4 <__sfp_lock_acquire>
 801214c:	4b1e      	ldr	r3, [pc, #120]	; (80121c8 <__sfp+0x84>)
 801214e:	681e      	ldr	r6, [r3, #0]
 8012150:	69b3      	ldr	r3, [r6, #24]
 8012152:	b913      	cbnz	r3, 801215a <__sfp+0x16>
 8012154:	4630      	mov	r0, r6
 8012156:	f7ff ffbd 	bl	80120d4 <__sinit>
 801215a:	3648      	adds	r6, #72	; 0x48
 801215c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012160:	3b01      	subs	r3, #1
 8012162:	d503      	bpl.n	801216c <__sfp+0x28>
 8012164:	6833      	ldr	r3, [r6, #0]
 8012166:	b30b      	cbz	r3, 80121ac <__sfp+0x68>
 8012168:	6836      	ldr	r6, [r6, #0]
 801216a:	e7f7      	b.n	801215c <__sfp+0x18>
 801216c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012170:	b9d5      	cbnz	r5, 80121a8 <__sfp+0x64>
 8012172:	4b16      	ldr	r3, [pc, #88]	; (80121cc <__sfp+0x88>)
 8012174:	60e3      	str	r3, [r4, #12]
 8012176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801217a:	6665      	str	r5, [r4, #100]	; 0x64
 801217c:	f000 f847 	bl	801220e <__retarget_lock_init_recursive>
 8012180:	f7ff ff96 	bl	80120b0 <__sfp_lock_release>
 8012184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801218c:	6025      	str	r5, [r4, #0]
 801218e:	61a5      	str	r5, [r4, #24]
 8012190:	2208      	movs	r2, #8
 8012192:	4629      	mov	r1, r5
 8012194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012198:	f7fb fd44 	bl	800dc24 <memset>
 801219c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80121a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80121a4:	4620      	mov	r0, r4
 80121a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a8:	3468      	adds	r4, #104	; 0x68
 80121aa:	e7d9      	b.n	8012160 <__sfp+0x1c>
 80121ac:	2104      	movs	r1, #4
 80121ae:	4638      	mov	r0, r7
 80121b0:	f7ff ff62 	bl	8012078 <__sfmoreglue>
 80121b4:	4604      	mov	r4, r0
 80121b6:	6030      	str	r0, [r6, #0]
 80121b8:	2800      	cmp	r0, #0
 80121ba:	d1d5      	bne.n	8012168 <__sfp+0x24>
 80121bc:	f7ff ff78 	bl	80120b0 <__sfp_lock_release>
 80121c0:	230c      	movs	r3, #12
 80121c2:	603b      	str	r3, [r7, #0]
 80121c4:	e7ee      	b.n	80121a4 <__sfp+0x60>
 80121c6:	bf00      	nop
 80121c8:	08025d94 	.word	0x08025d94
 80121cc:	ffff0001 	.word	0xffff0001

080121d0 <_fwalk_reent>:
 80121d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121d4:	4606      	mov	r6, r0
 80121d6:	4688      	mov	r8, r1
 80121d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121dc:	2700      	movs	r7, #0
 80121de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121e2:	f1b9 0901 	subs.w	r9, r9, #1
 80121e6:	d505      	bpl.n	80121f4 <_fwalk_reent+0x24>
 80121e8:	6824      	ldr	r4, [r4, #0]
 80121ea:	2c00      	cmp	r4, #0
 80121ec:	d1f7      	bne.n	80121de <_fwalk_reent+0xe>
 80121ee:	4638      	mov	r0, r7
 80121f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121f4:	89ab      	ldrh	r3, [r5, #12]
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d907      	bls.n	801220a <_fwalk_reent+0x3a>
 80121fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121fe:	3301      	adds	r3, #1
 8012200:	d003      	beq.n	801220a <_fwalk_reent+0x3a>
 8012202:	4629      	mov	r1, r5
 8012204:	4630      	mov	r0, r6
 8012206:	47c0      	blx	r8
 8012208:	4307      	orrs	r7, r0
 801220a:	3568      	adds	r5, #104	; 0x68
 801220c:	e7e9      	b.n	80121e2 <_fwalk_reent+0x12>

0801220e <__retarget_lock_init_recursive>:
 801220e:	4770      	bx	lr

08012210 <__retarget_lock_acquire_recursive>:
 8012210:	4770      	bx	lr

08012212 <__retarget_lock_release_recursive>:
 8012212:	4770      	bx	lr

08012214 <__swhatbuf_r>:
 8012214:	b570      	push	{r4, r5, r6, lr}
 8012216:	460e      	mov	r6, r1
 8012218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801221c:	2900      	cmp	r1, #0
 801221e:	b096      	sub	sp, #88	; 0x58
 8012220:	4614      	mov	r4, r2
 8012222:	461d      	mov	r5, r3
 8012224:	da07      	bge.n	8012236 <__swhatbuf_r+0x22>
 8012226:	2300      	movs	r3, #0
 8012228:	602b      	str	r3, [r5, #0]
 801222a:	89b3      	ldrh	r3, [r6, #12]
 801222c:	061a      	lsls	r2, r3, #24
 801222e:	d410      	bmi.n	8012252 <__swhatbuf_r+0x3e>
 8012230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012234:	e00e      	b.n	8012254 <__swhatbuf_r+0x40>
 8012236:	466a      	mov	r2, sp
 8012238:	f000 f946 	bl	80124c8 <_fstat_r>
 801223c:	2800      	cmp	r0, #0
 801223e:	dbf2      	blt.n	8012226 <__swhatbuf_r+0x12>
 8012240:	9a01      	ldr	r2, [sp, #4]
 8012242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801224a:	425a      	negs	r2, r3
 801224c:	415a      	adcs	r2, r3
 801224e:	602a      	str	r2, [r5, #0]
 8012250:	e7ee      	b.n	8012230 <__swhatbuf_r+0x1c>
 8012252:	2340      	movs	r3, #64	; 0x40
 8012254:	2000      	movs	r0, #0
 8012256:	6023      	str	r3, [r4, #0]
 8012258:	b016      	add	sp, #88	; 0x58
 801225a:	bd70      	pop	{r4, r5, r6, pc}

0801225c <__smakebuf_r>:
 801225c:	898b      	ldrh	r3, [r1, #12]
 801225e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012260:	079d      	lsls	r5, r3, #30
 8012262:	4606      	mov	r6, r0
 8012264:	460c      	mov	r4, r1
 8012266:	d507      	bpl.n	8012278 <__smakebuf_r+0x1c>
 8012268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	6123      	str	r3, [r4, #16]
 8012270:	2301      	movs	r3, #1
 8012272:	6163      	str	r3, [r4, #20]
 8012274:	b002      	add	sp, #8
 8012276:	bd70      	pop	{r4, r5, r6, pc}
 8012278:	ab01      	add	r3, sp, #4
 801227a:	466a      	mov	r2, sp
 801227c:	f7ff ffca 	bl	8012214 <__swhatbuf_r>
 8012280:	9900      	ldr	r1, [sp, #0]
 8012282:	4605      	mov	r5, r0
 8012284:	4630      	mov	r0, r6
 8012286:	f7ff f9fb 	bl	8011680 <_malloc_r>
 801228a:	b948      	cbnz	r0, 80122a0 <__smakebuf_r+0x44>
 801228c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012290:	059a      	lsls	r2, r3, #22
 8012292:	d4ef      	bmi.n	8012274 <__smakebuf_r+0x18>
 8012294:	f023 0303 	bic.w	r3, r3, #3
 8012298:	f043 0302 	orr.w	r3, r3, #2
 801229c:	81a3      	strh	r3, [r4, #12]
 801229e:	e7e3      	b.n	8012268 <__smakebuf_r+0xc>
 80122a0:	4b0d      	ldr	r3, [pc, #52]	; (80122d8 <__smakebuf_r+0x7c>)
 80122a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80122a4:	89a3      	ldrh	r3, [r4, #12]
 80122a6:	6020      	str	r0, [r4, #0]
 80122a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ac:	81a3      	strh	r3, [r4, #12]
 80122ae:	9b00      	ldr	r3, [sp, #0]
 80122b0:	6163      	str	r3, [r4, #20]
 80122b2:	9b01      	ldr	r3, [sp, #4]
 80122b4:	6120      	str	r0, [r4, #16]
 80122b6:	b15b      	cbz	r3, 80122d0 <__smakebuf_r+0x74>
 80122b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122bc:	4630      	mov	r0, r6
 80122be:	f000 f915 	bl	80124ec <_isatty_r>
 80122c2:	b128      	cbz	r0, 80122d0 <__smakebuf_r+0x74>
 80122c4:	89a3      	ldrh	r3, [r4, #12]
 80122c6:	f023 0303 	bic.w	r3, r3, #3
 80122ca:	f043 0301 	orr.w	r3, r3, #1
 80122ce:	81a3      	strh	r3, [r4, #12]
 80122d0:	89a0      	ldrh	r0, [r4, #12]
 80122d2:	4305      	orrs	r5, r0
 80122d4:	81a5      	strh	r5, [r4, #12]
 80122d6:	e7cd      	b.n	8012274 <__smakebuf_r+0x18>
 80122d8:	0801206d 	.word	0x0801206d

080122dc <memmove>:
 80122dc:	4288      	cmp	r0, r1
 80122de:	b510      	push	{r4, lr}
 80122e0:	eb01 0402 	add.w	r4, r1, r2
 80122e4:	d902      	bls.n	80122ec <memmove+0x10>
 80122e6:	4284      	cmp	r4, r0
 80122e8:	4623      	mov	r3, r4
 80122ea:	d807      	bhi.n	80122fc <memmove+0x20>
 80122ec:	1e43      	subs	r3, r0, #1
 80122ee:	42a1      	cmp	r1, r4
 80122f0:	d008      	beq.n	8012304 <memmove+0x28>
 80122f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122fa:	e7f8      	b.n	80122ee <memmove+0x12>
 80122fc:	4402      	add	r2, r0
 80122fe:	4601      	mov	r1, r0
 8012300:	428a      	cmp	r2, r1
 8012302:	d100      	bne.n	8012306 <memmove+0x2a>
 8012304:	bd10      	pop	{r4, pc}
 8012306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801230a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801230e:	e7f7      	b.n	8012300 <memmove+0x24>

08012310 <__malloc_lock>:
 8012310:	4801      	ldr	r0, [pc, #4]	; (8012318 <__malloc_lock+0x8>)
 8012312:	f7ff bf7d 	b.w	8012210 <__retarget_lock_acquire_recursive>
 8012316:	bf00      	nop
 8012318:	200008b0 	.word	0x200008b0

0801231c <__malloc_unlock>:
 801231c:	4801      	ldr	r0, [pc, #4]	; (8012324 <__malloc_unlock+0x8>)
 801231e:	f7ff bf78 	b.w	8012212 <__retarget_lock_release_recursive>
 8012322:	bf00      	nop
 8012324:	200008b0 	.word	0x200008b0

08012328 <_realloc_r>:
 8012328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232a:	4607      	mov	r7, r0
 801232c:	4614      	mov	r4, r2
 801232e:	460e      	mov	r6, r1
 8012330:	b921      	cbnz	r1, 801233c <_realloc_r+0x14>
 8012332:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012336:	4611      	mov	r1, r2
 8012338:	f7ff b9a2 	b.w	8011680 <_malloc_r>
 801233c:	b922      	cbnz	r2, 8012348 <_realloc_r+0x20>
 801233e:	f7ff f94f 	bl	80115e0 <_free_r>
 8012342:	4625      	mov	r5, r4
 8012344:	4628      	mov	r0, r5
 8012346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012348:	f000 f8f2 	bl	8012530 <_malloc_usable_size_r>
 801234c:	42a0      	cmp	r0, r4
 801234e:	d20f      	bcs.n	8012370 <_realloc_r+0x48>
 8012350:	4621      	mov	r1, r4
 8012352:	4638      	mov	r0, r7
 8012354:	f7ff f994 	bl	8011680 <_malloc_r>
 8012358:	4605      	mov	r5, r0
 801235a:	2800      	cmp	r0, #0
 801235c:	d0f2      	beq.n	8012344 <_realloc_r+0x1c>
 801235e:	4631      	mov	r1, r6
 8012360:	4622      	mov	r2, r4
 8012362:	f7fe fc65 	bl	8010c30 <memcpy>
 8012366:	4631      	mov	r1, r6
 8012368:	4638      	mov	r0, r7
 801236a:	f7ff f939 	bl	80115e0 <_free_r>
 801236e:	e7e9      	b.n	8012344 <_realloc_r+0x1c>
 8012370:	4635      	mov	r5, r6
 8012372:	e7e7      	b.n	8012344 <_realloc_r+0x1c>

08012374 <_raise_r>:
 8012374:	291f      	cmp	r1, #31
 8012376:	b538      	push	{r3, r4, r5, lr}
 8012378:	4604      	mov	r4, r0
 801237a:	460d      	mov	r5, r1
 801237c:	d904      	bls.n	8012388 <_raise_r+0x14>
 801237e:	2316      	movs	r3, #22
 8012380:	6003      	str	r3, [r0, #0]
 8012382:	f04f 30ff 	mov.w	r0, #4294967295
 8012386:	bd38      	pop	{r3, r4, r5, pc}
 8012388:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801238a:	b112      	cbz	r2, 8012392 <_raise_r+0x1e>
 801238c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012390:	b94b      	cbnz	r3, 80123a6 <_raise_r+0x32>
 8012392:	4620      	mov	r0, r4
 8012394:	f000 f830 	bl	80123f8 <_getpid_r>
 8012398:	462a      	mov	r2, r5
 801239a:	4601      	mov	r1, r0
 801239c:	4620      	mov	r0, r4
 801239e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123a2:	f000 b817 	b.w	80123d4 <_kill_r>
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d00a      	beq.n	80123c0 <_raise_r+0x4c>
 80123aa:	1c59      	adds	r1, r3, #1
 80123ac:	d103      	bne.n	80123b6 <_raise_r+0x42>
 80123ae:	2316      	movs	r3, #22
 80123b0:	6003      	str	r3, [r0, #0]
 80123b2:	2001      	movs	r0, #1
 80123b4:	e7e7      	b.n	8012386 <_raise_r+0x12>
 80123b6:	2400      	movs	r4, #0
 80123b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80123bc:	4628      	mov	r0, r5
 80123be:	4798      	blx	r3
 80123c0:	2000      	movs	r0, #0
 80123c2:	e7e0      	b.n	8012386 <_raise_r+0x12>

080123c4 <raise>:
 80123c4:	4b02      	ldr	r3, [pc, #8]	; (80123d0 <raise+0xc>)
 80123c6:	4601      	mov	r1, r0
 80123c8:	6818      	ldr	r0, [r3, #0]
 80123ca:	f7ff bfd3 	b.w	8012374 <_raise_r>
 80123ce:	bf00      	nop
 80123d0:	20000040 	.word	0x20000040

080123d4 <_kill_r>:
 80123d4:	b538      	push	{r3, r4, r5, lr}
 80123d6:	4d07      	ldr	r5, [pc, #28]	; (80123f4 <_kill_r+0x20>)
 80123d8:	2300      	movs	r3, #0
 80123da:	4604      	mov	r4, r0
 80123dc:	4608      	mov	r0, r1
 80123de:	4611      	mov	r1, r2
 80123e0:	602b      	str	r3, [r5, #0]
 80123e2:	f7f4 fa77 	bl	80068d4 <_kill>
 80123e6:	1c43      	adds	r3, r0, #1
 80123e8:	d102      	bne.n	80123f0 <_kill_r+0x1c>
 80123ea:	682b      	ldr	r3, [r5, #0]
 80123ec:	b103      	cbz	r3, 80123f0 <_kill_r+0x1c>
 80123ee:	6023      	str	r3, [r4, #0]
 80123f0:	bd38      	pop	{r3, r4, r5, pc}
 80123f2:	bf00      	nop
 80123f4:	200008b8 	.word	0x200008b8

080123f8 <_getpid_r>:
 80123f8:	f7f4 ba64 	b.w	80068c4 <_getpid>

080123fc <__sread>:
 80123fc:	b510      	push	{r4, lr}
 80123fe:	460c      	mov	r4, r1
 8012400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012404:	f000 f89c 	bl	8012540 <_read_r>
 8012408:	2800      	cmp	r0, #0
 801240a:	bfab      	itete	ge
 801240c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801240e:	89a3      	ldrhlt	r3, [r4, #12]
 8012410:	181b      	addge	r3, r3, r0
 8012412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012416:	bfac      	ite	ge
 8012418:	6563      	strge	r3, [r4, #84]	; 0x54
 801241a:	81a3      	strhlt	r3, [r4, #12]
 801241c:	bd10      	pop	{r4, pc}

0801241e <__swrite>:
 801241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012422:	461f      	mov	r7, r3
 8012424:	898b      	ldrh	r3, [r1, #12]
 8012426:	05db      	lsls	r3, r3, #23
 8012428:	4605      	mov	r5, r0
 801242a:	460c      	mov	r4, r1
 801242c:	4616      	mov	r6, r2
 801242e:	d505      	bpl.n	801243c <__swrite+0x1e>
 8012430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012434:	2302      	movs	r3, #2
 8012436:	2200      	movs	r2, #0
 8012438:	f000 f868 	bl	801250c <_lseek_r>
 801243c:	89a3      	ldrh	r3, [r4, #12]
 801243e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012446:	81a3      	strh	r3, [r4, #12]
 8012448:	4632      	mov	r2, r6
 801244a:	463b      	mov	r3, r7
 801244c:	4628      	mov	r0, r5
 801244e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012452:	f000 b817 	b.w	8012484 <_write_r>

08012456 <__sseek>:
 8012456:	b510      	push	{r4, lr}
 8012458:	460c      	mov	r4, r1
 801245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801245e:	f000 f855 	bl	801250c <_lseek_r>
 8012462:	1c43      	adds	r3, r0, #1
 8012464:	89a3      	ldrh	r3, [r4, #12]
 8012466:	bf15      	itete	ne
 8012468:	6560      	strne	r0, [r4, #84]	; 0x54
 801246a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801246e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012472:	81a3      	strheq	r3, [r4, #12]
 8012474:	bf18      	it	ne
 8012476:	81a3      	strhne	r3, [r4, #12]
 8012478:	bd10      	pop	{r4, pc}

0801247a <__sclose>:
 801247a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801247e:	f000 b813 	b.w	80124a8 <_close_r>
	...

08012484 <_write_r>:
 8012484:	b538      	push	{r3, r4, r5, lr}
 8012486:	4d07      	ldr	r5, [pc, #28]	; (80124a4 <_write_r+0x20>)
 8012488:	4604      	mov	r4, r0
 801248a:	4608      	mov	r0, r1
 801248c:	4611      	mov	r1, r2
 801248e:	2200      	movs	r2, #0
 8012490:	602a      	str	r2, [r5, #0]
 8012492:	461a      	mov	r2, r3
 8012494:	f7f4 fa55 	bl	8006942 <_write>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d102      	bne.n	80124a2 <_write_r+0x1e>
 801249c:	682b      	ldr	r3, [r5, #0]
 801249e:	b103      	cbz	r3, 80124a2 <_write_r+0x1e>
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	bd38      	pop	{r3, r4, r5, pc}
 80124a4:	200008b8 	.word	0x200008b8

080124a8 <_close_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4d06      	ldr	r5, [pc, #24]	; (80124c4 <_close_r+0x1c>)
 80124ac:	2300      	movs	r3, #0
 80124ae:	4604      	mov	r4, r0
 80124b0:	4608      	mov	r0, r1
 80124b2:	602b      	str	r3, [r5, #0]
 80124b4:	f7f4 fa61 	bl	800697a <_close>
 80124b8:	1c43      	adds	r3, r0, #1
 80124ba:	d102      	bne.n	80124c2 <_close_r+0x1a>
 80124bc:	682b      	ldr	r3, [r5, #0]
 80124be:	b103      	cbz	r3, 80124c2 <_close_r+0x1a>
 80124c0:	6023      	str	r3, [r4, #0]
 80124c2:	bd38      	pop	{r3, r4, r5, pc}
 80124c4:	200008b8 	.word	0x200008b8

080124c8 <_fstat_r>:
 80124c8:	b538      	push	{r3, r4, r5, lr}
 80124ca:	4d07      	ldr	r5, [pc, #28]	; (80124e8 <_fstat_r+0x20>)
 80124cc:	2300      	movs	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	4608      	mov	r0, r1
 80124d2:	4611      	mov	r1, r2
 80124d4:	602b      	str	r3, [r5, #0]
 80124d6:	f7f4 fa5c 	bl	8006992 <_fstat>
 80124da:	1c43      	adds	r3, r0, #1
 80124dc:	d102      	bne.n	80124e4 <_fstat_r+0x1c>
 80124de:	682b      	ldr	r3, [r5, #0]
 80124e0:	b103      	cbz	r3, 80124e4 <_fstat_r+0x1c>
 80124e2:	6023      	str	r3, [r4, #0]
 80124e4:	bd38      	pop	{r3, r4, r5, pc}
 80124e6:	bf00      	nop
 80124e8:	200008b8 	.word	0x200008b8

080124ec <_isatty_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d06      	ldr	r5, [pc, #24]	; (8012508 <_isatty_r+0x1c>)
 80124f0:	2300      	movs	r3, #0
 80124f2:	4604      	mov	r4, r0
 80124f4:	4608      	mov	r0, r1
 80124f6:	602b      	str	r3, [r5, #0]
 80124f8:	f7f4 fa5b 	bl	80069b2 <_isatty>
 80124fc:	1c43      	adds	r3, r0, #1
 80124fe:	d102      	bne.n	8012506 <_isatty_r+0x1a>
 8012500:	682b      	ldr	r3, [r5, #0]
 8012502:	b103      	cbz	r3, 8012506 <_isatty_r+0x1a>
 8012504:	6023      	str	r3, [r4, #0]
 8012506:	bd38      	pop	{r3, r4, r5, pc}
 8012508:	200008b8 	.word	0x200008b8

0801250c <_lseek_r>:
 801250c:	b538      	push	{r3, r4, r5, lr}
 801250e:	4d07      	ldr	r5, [pc, #28]	; (801252c <_lseek_r+0x20>)
 8012510:	4604      	mov	r4, r0
 8012512:	4608      	mov	r0, r1
 8012514:	4611      	mov	r1, r2
 8012516:	2200      	movs	r2, #0
 8012518:	602a      	str	r2, [r5, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	f7f4 fa54 	bl	80069c8 <_lseek>
 8012520:	1c43      	adds	r3, r0, #1
 8012522:	d102      	bne.n	801252a <_lseek_r+0x1e>
 8012524:	682b      	ldr	r3, [r5, #0]
 8012526:	b103      	cbz	r3, 801252a <_lseek_r+0x1e>
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	bd38      	pop	{r3, r4, r5, pc}
 801252c:	200008b8 	.word	0x200008b8

08012530 <_malloc_usable_size_r>:
 8012530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012534:	1f18      	subs	r0, r3, #4
 8012536:	2b00      	cmp	r3, #0
 8012538:	bfbc      	itt	lt
 801253a:	580b      	ldrlt	r3, [r1, r0]
 801253c:	18c0      	addlt	r0, r0, r3
 801253e:	4770      	bx	lr

08012540 <_read_r>:
 8012540:	b538      	push	{r3, r4, r5, lr}
 8012542:	4d07      	ldr	r5, [pc, #28]	; (8012560 <_read_r+0x20>)
 8012544:	4604      	mov	r4, r0
 8012546:	4608      	mov	r0, r1
 8012548:	4611      	mov	r1, r2
 801254a:	2200      	movs	r2, #0
 801254c:	602a      	str	r2, [r5, #0]
 801254e:	461a      	mov	r2, r3
 8012550:	f7f4 f9da 	bl	8006908 <_read>
 8012554:	1c43      	adds	r3, r0, #1
 8012556:	d102      	bne.n	801255e <_read_r+0x1e>
 8012558:	682b      	ldr	r3, [r5, #0]
 801255a:	b103      	cbz	r3, 801255e <_read_r+0x1e>
 801255c:	6023      	str	r3, [r4, #0]
 801255e:	bd38      	pop	{r3, r4, r5, pc}
 8012560:	200008b8 	.word	0x200008b8

08012564 <_init>:
 8012564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012566:	bf00      	nop
 8012568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801256a:	bc08      	pop	{r3}
 801256c:	469e      	mov	lr, r3
 801256e:	4770      	bx	lr

08012570 <_fini>:
 8012570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012572:	bf00      	nop
 8012574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012576:	bc08      	pop	{r3}
 8012578:	469e      	mov	lr, r3
 801257a:	4770      	bx	lr
