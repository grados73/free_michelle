
TFT_01_controller_TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013f60  08014d48  08014d48  00024d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028ca8  08028ca8  00040214  2**0
                  CONTENTS
  4 .ARM          00000008  08028ca8  08028ca8  00038ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028cb0  08028cb0  00040214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028cb0  08028cb0  00038cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028cb4  08028cb4  00038cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08028cb8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000214  08028ecc  00040214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08028ecc  00040910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023699  00000000  00000000  00040244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b08  00000000  00000000  000638dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  000683e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000078dc  00000000  00000000  00069d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025b87  00000000  00000000  00071614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00098db3  00000000  00000000  0009719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012ff4e  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000017b0  00000000  00000000  0012ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d9c  00000000  00000000  00131758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000214 	.word	0x20000214
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014d2c 	.word	0x08014d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000218 	.word	0x20000218
 80001dc:	08014d2c 	.word	0x08014d2c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001034:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	bfb8      	it	lt
 8001042:	425b      	neglt	r3, r3
 8001044:	429a      	cmp	r2, r3
 8001046:	bfcc      	ite	gt
 8001048:	2301      	movgt	r3, #1
 800104a:	2300      	movle	r3, #0
 800104c:	b2db      	uxtb	r3, r3
 800104e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001050:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	429a      	cmp	r2, r3
 8001076:	dd0b      	ble.n	8001090 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	61fb      	str	r3, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80010ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b0:	0fda      	lsrs	r2, r3, #31
 80010b2:	4413      	add	r3, r2
 80010b4:	105b      	asrs	r3, r3, #1
 80010b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010c4:	e02e      	b.n	8001124 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80010cc:	e02a      	b.n	8001124 <GFX_WriteLine+0x108>
	        if (steep) {
 80010ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	b211      	sxth	r1, r2
 80010de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 feab 	bl	8001e3c <ILI9341_WritePixel>
 80010e6:	e007      	b.n	80010f8 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	b211      	sxth	r1, r2
 80010f0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 fea2 	bl	8001e3c <ILI9341_WritePixel>
	        }
	        err -= dy;
 80010f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	da09      	bge.n	800111e <GFX_WriteLine+0x102>
	            y_start += ystep;
 800110a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001116:	8afb      	ldrh	r3, [r7, #22]
 8001118:	4413      	add	r3, r2
 800111a:	b29b      	uxth	r3, r3
 800111c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	ddd0      	ble.n	80010ce <GFX_WriteLine+0xb2>
	        }
	    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	; 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af02      	add	r7, sp, #8
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	1e5a      	subs	r2, r3, #1
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	4613      	mov	r3, r2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff ff60 	bl	800101c <GFX_WriteLine>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f7ff ff4a 	bl	800101c <GFX_WriteLine>
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <GFX_DrawLine>:

void GFX_DrawLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	if(x_start == x_end){
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d113      	bne.n	80011ce <GFX_DrawLine+0x3e>
	        if(y_start > y_end) _swap_int(y_start, y_end);
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd05      	ble.n	80011ba <GFX_DrawLine+0x2a>
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	603b      	str	r3, [r7, #0]
	        GFX_DrawFastVLine(x_start, y_start, y_end - y_start + 1, color);
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	8c3b      	ldrh	r3, [r7, #32]
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ffb5 	bl	8001136 <GFX_DrawFastVLine>
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
	    } else {

	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
	    }
}
 80011cc:	e01f      	b.n	800120e <GFX_DrawLine+0x7e>
	    } else if(y_start == y_end){
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <GFX_DrawLine+0x6e>
	        if(x_start > x_end) _swap_int(x_start, x_end);
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	dd05      	ble.n	80011ea <GFX_DrawLine+0x5a>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	607b      	str	r3, [r7, #4]
	        GFX_DrawFastHLine(x_start, y_start, x_end - x_start + 1, color);
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	8c3b      	ldrh	r3, [r7, #32]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ffb4 	bl	8001164 <GFX_DrawFastHLine>
}
 80011fc:	e007      	b.n	800120e <GFX_DrawLine+0x7e>
	    	GFX_WriteLine(x_start, y_start, x_end, y_end, color);
 80011fe:	8c3b      	ldrh	r3, [r7, #32]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff07 	bl	800101c <GFX_WriteLine>
}
 800120e:	bf00      	nop
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	4611      	mov	r1, r2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	80fb      	strh	r3, [r7, #6]
 8001228:	4613      	mov	r3, r2
 800122a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e008      	b.n	8001244 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8001232:	88ba      	ldrh	r2, [r7, #4]
 8001234:	8c3b      	ldrh	r3, [r7, #32]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	6978      	ldr	r0, [r7, #20]
 800123a:	f7ff ff7c 	bl	8001136 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	dbf0      	blt.n	8001232 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <GFX_DrawCircleHelper>:

}
#endif
#ifdef CIRCLE_HELPER
void GFX_DrawCircleHelper( int x0, int y0, uint16_t r, uint8_t cornername, ColorType color)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b088      	sub	sp, #32
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	717b      	strb	r3, [r7, #5]
    int16_t f     = 1 - r;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	f1c3 0301 	rsb	r3, r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	461a      	mov	r2, r3
 8001282:	03d2      	lsls	r2, r2, #15
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001294:	e0b5      	b.n	8001402 <GFX_DrawCircleHelper+0x1a8>
        if (f >= 0) {
 8001296:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0e      	blt.n	80012bc <GFX_DrawCircleHelper+0x62>
            y--;
 800129e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80012aa:	8b7b      	ldrh	r3, [r7, #26]
 80012ac:	3302      	adds	r3, #2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 80012b2:	8bfa      	ldrh	r2, [r7, #30]
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80012bc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80012c8:	8bbb      	ldrh	r3, [r7, #28]
 80012ca:	3302      	adds	r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 80012d0:	8bfa      	ldrh	r2, [r7, #30]
 80012d2:	8bbb      	ldrh	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	83fb      	strh	r3, [r7, #30]
        if (cornername & 0x4) {
 80012da:	797b      	ldrb	r3, [r7, #5]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01f      	beq.n	8001324 <GFX_DrawCircleHelper+0xca>
            GFX_DrawPixel(x0 + x, y0 + y, color);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8b3b      	ldrh	r3, [r7, #24]
 80012ea:	4413      	add	r3, r2
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	b218      	sxth	r0, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	8afb      	ldrh	r3, [r7, #22]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	f000 fd9c 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 + x, color);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29a      	uxth	r2, r3
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	b218      	sxth	r0, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29a      	uxth	r2, r3
 8001314:	8b3b      	ldrh	r3, [r7, #24]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21b      	sxth	r3, r3
 800131c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800131e:	4619      	mov	r1, r3
 8001320:	f000 fd8c 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x2) {
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01f      	beq.n	800136e <GFX_DrawCircleHelper+0x114>
            GFX_DrawPixel(x0 + x, y0 - y, color);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8b3b      	ldrh	r3, [r7, #24]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b218      	sxth	r0, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	b29a      	uxth	r2, r3
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b21b      	sxth	r3, r3
 8001346:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd77 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 + y, y0 - x, color);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	b29a      	uxth	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	b218      	sxth	r0, r3
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	b29a      	uxth	r2, r3
 800135e:	8b3b      	ldrh	r3, [r7, #24]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	b21b      	sxth	r3, r3
 8001366:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001368:	4619      	mov	r1, r3
 800136a:	f000 fd67 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x8) {
 800136e:	797b      	ldrb	r3, [r7, #5]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d01f      	beq.n	80013b8 <GFX_DrawCircleHelper+0x15e>
            GFX_DrawPixel(x0 - y, y0 + x, color);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	b29a      	uxth	r2, r3
 800137c:	8afb      	ldrh	r3, [r7, #22]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b29a      	uxth	r2, r3
 8001388:	8b3b      	ldrh	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001392:	4619      	mov	r1, r3
 8001394:	f000 fd52 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 + y, color);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	8b3b      	ldrh	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f000 fd42 	bl	8001e3c <ILI9341_WritePixel>
        }
        if (cornername & 0x1) {
 80013b8:	797b      	ldrb	r3, [r7, #5]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d01f      	beq.n	8001402 <GFX_DrawCircleHelper+0x1a8>
            GFX_DrawPixel(x0 - y, y0 - x, color);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	8afb      	ldrh	r3, [r7, #22]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b218      	sxth	r0, r3
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8b3b      	ldrh	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013dc:	4619      	mov	r1, r3
 80013de:	f000 fd2d 	bl	8001e3c <ILI9341_WritePixel>
            GFX_DrawPixel(x0 - x, y0 - y, color);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8b3b      	ldrh	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b218      	sxth	r0, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8afb      	ldrh	r3, [r7, #22]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013fc:	4619      	mov	r1, r3
 80013fe:	f000 fd1d 	bl	8001e3c <ILI9341_WritePixel>
    while (x<y) {
 8001402:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800140a:	429a      	cmp	r2, r3
 800140c:	f6ff af43 	blt.w	8001296 <GFX_DrawCircleHelper+0x3c>
        }
    }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <GFX_DrawFillCircleHelper>:
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	4611      	mov	r1, r2
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f1c3 0301 	rsb	r3, r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	461a      	mov	r2, r3
 8001442:	03d2      	lsls	r2, r2, #15
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001454:	e073      	b.n	800153e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8001456:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0e      	blt.n	800147c <GFX_DrawFillCircleHelper+0x62>
            y--;
 800145e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001462:	b29b      	uxth	r3, r3
 8001464:	3b01      	subs	r3, #1
 8001466:	b29b      	uxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800146a:	8b7b      	ldrh	r3, [r7, #26]
 800146c:	3302      	adds	r3, #2
 800146e:	b29b      	uxth	r3, r3
 8001470:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001472:	8bfa      	ldrh	r2, [r7, #30]
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800147c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001488:	8bbb      	ldrh	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
 800148c:	b29b      	uxth	r3, r3
 800148e:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001490:	8bfa      	ldrh	r2, [r7, #30]
 8001492:	8bbb      	ldrh	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 800149a:	797b      	ldrb	r3, [r7, #5]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 80014a4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	18d0      	adds	r0, r2, r3
 80014ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad1      	subs	r1, r2, r3
 80014b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014c0:	441a      	add	r2, r3
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f7ff fe37 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 80014c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80014e4:	441a      	add	r2, r3
 80014e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e8:	f7ff fe25 	bl	8001136 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1ad1      	subs	r1, r2, r3
 8001506:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001512:	441a      	add	r2, r3
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	f7ff fe0e 	bl	8001136 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800151a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	1ad0      	subs	r0, r2, r3
 8001522:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001536:	441a      	add	r2, r3
 8001538:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800153a:	f7ff fdfc 	bl	8001136 <GFX_DrawFastVLine>
    while (x<y) {
 800153e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001542:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001546:	429a      	cmp	r2, r3
 8001548:	db85      	blt.n	8001456 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <GFX_DrawRoundRectangle>:
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
}
#endif
#if USING_ROUND_RECTANGLE == 1
void GFX_DrawRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	460b      	mov	r3, r1
 8001564:	80fb      	strh	r3, [r7, #6]
 8001566:	4613      	mov	r3, r2
 8001568:	80bb      	strh	r3, [r7, #4]
	GFX_DrawFastHLine(x+r  , y    , w-2*r, color); // Top
 800156a:	8b3a      	ldrh	r2, [r7, #24]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	18d0      	adds	r0, r2, r3
 8001570:	88fa      	ldrh	r2, [r7, #6]
 8001572:	8b3b      	ldrh	r3, [r7, #24]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	f7ff fdf2 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8001580:	8b3a      	ldrh	r2, [r7, #24]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	18d0      	adds	r0, r2, r3
 8001586:	88ba      	ldrh	r2, [r7, #4]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4413      	add	r3, r2
 800158c:	1e59      	subs	r1, r3, #1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	8bbb      	ldrh	r3, [r7, #28]
 8001598:	f7ff fde4 	bl	8001164 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x    , y+r  , h-2*r, color); // Left
 800159c:	8b3a      	ldrh	r2, [r7, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	18d1      	adds	r1, r2, r3
 80015a2:	88ba      	ldrh	r2, [r7, #4]
 80015a4:	8b3b      	ldrh	r3, [r7, #24]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff fdc2 	bl	8001136 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	8b3a      	ldrh	r2, [r7, #24]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	18d1      	adds	r1, r2, r3
 80015c0:	88ba      	ldrh	r2, [r7, #4]
 80015c2:	8b3b      	ldrh	r3, [r7, #24]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	1ad2      	subs	r2, r2, r3
 80015c8:	8bbb      	ldrh	r3, [r7, #28]
 80015ca:	f7ff fdb4 	bl	8001136 <GFX_DrawFastVLine>
    // draw four corners
    GFX_DrawCircleHelper(x+r    , y+r    , r, 1, color);
 80015ce:	8b3a      	ldrh	r2, [r7, #24]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	8b3a      	ldrh	r2, [r7, #24]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	8b3a      	ldrh	r2, [r7, #24]
 80015dc:	8bbb      	ldrh	r3, [r7, #28]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	f7ff fe3a 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	441a      	add	r2, r3
 80015ec:	8b3b      	ldrh	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	1e58      	subs	r0, r3, #1
 80015f2:	8b3a      	ldrh	r2, [r7, #24]
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	18d1      	adds	r1, r2, r3
 80015f8:	8b3a      	ldrh	r2, [r7, #24]
 80015fa:	8bbb      	ldrh	r3, [r7, #28]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	f7ff fe2b 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8001604:	88fa      	ldrh	r2, [r7, #6]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	8b3b      	ldrh	r3, [r7, #24]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	88ba      	ldrh	r2, [r7, #4]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	8b3b      	ldrh	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	8b3a      	ldrh	r2, [r7, #24]
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2304      	movs	r3, #4
 8001624:	f7ff fe19 	bl	800125a <GFX_DrawCircleHelper>
    GFX_DrawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8001628:	8b3a      	ldrh	r2, [r7, #24]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	18d0      	adds	r0, r2, r3
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	441a      	add	r2, r3
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	1e59      	subs	r1, r3, #1
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	8bbb      	ldrh	r3, [r7, #28]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2308      	movs	r3, #8
 8001642:	f7ff fe0a 	bl	800125a <GFX_DrawCircleHelper>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <GFX_DrawFillRoundRectangle>:
#endif
#if USING_FILL_ROUND_RECTANGLE == 1
void GFX_DrawFillRoundRectangle(int x, int y, uint16_t w, uint16_t h, uint16_t r, ColorType color)
{
 800164e:	b590      	push	{r4, r7, lr}
 8001650:	b087      	sub	sp, #28
 8001652:	af02      	add	r7, sp, #8
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	460b      	mov	r3, r1
 800165e:	80fb      	strh	r3, [r7, #6]
 8001660:	4613      	mov	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
    // smarter version

	GFX_DrawFillRectangle(x+r, y, w-2*r, h, color);
 8001664:	8c3a      	ldrh	r2, [r7, #32]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d0      	adds	r0, r2, r3
 800166a:	8c3b      	ldrh	r3, [r7, #32]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	88fa      	ldrh	r2, [r7, #6]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	88b9      	ldrh	r1, [r7, #4]
 8001678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	460b      	mov	r3, r1
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	f7ff fdc9 	bl	8001216 <GFX_DrawFillRectangle>

    // draw four corners
	GFX_DrawFillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	441a      	add	r2, r3
 800168a:	8c3b      	ldrh	r3, [r7, #32]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	8c3a      	ldrh	r2, [r7, #32]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	18d1      	adds	r1, r2, r3
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	88ba      	ldrh	r2, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	8c3c      	ldrh	r4, [r7, #32]
 80016aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4622      	mov	r2, r4
 80016b4:	f7ff feb1 	bl	800141a <GFX_DrawFillCircleHelper>
	GFX_DrawFillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 80016b8:	8c3a      	ldrh	r2, [r7, #32]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d0      	adds	r0, r2, r3
 80016be:	8c3a      	ldrh	r2, [r7, #32]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	18d1      	adds	r1, r2, r3
 80016c4:	8c3b      	ldrh	r3, [r7, #32]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	8c3c      	ldrh	r4, [r7, #32]
 80016d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016da:	9201      	str	r2, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2302      	movs	r3, #2
 80016e0:	4622      	mov	r2, r4
 80016e2:	f7ff fe9a 	bl	800141a <GFX_DrawFillCircleHelper>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <EF_SetFont+0x1c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002c0 	.word	0x200002c0

08001710 <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <EF_GetFontHeight+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002c0 	.word	0x200002c0

08001728 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <EF_GetFontStartChar+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	785b      	ldrb	r3, [r3, #1]
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200002c0 	.word	0x200002c0

08001740 <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <EF_GetFontEndChar+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	789b      	ldrb	r3, [r3, #2]
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	200002c0 	.word	0x200002c0

08001758 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <EF_GetFontSpaceWidth+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	78db      	ldrb	r3, [r3, #3]
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200002c0 	.word	0x200002c0

08001770 <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	460a      	mov	r2, r1
 800177a:	71fb      	strb	r3, [r7, #7]
 800177c:	4613      	mov	r3, r2
 800177e:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2bc5      	cmp	r3, #197	; 0xc5
 8001784:	d052      	beq.n	800182c <EF_DecodePolish+0xbc>
 8001786:	2bc5      	cmp	r3, #197	; 0xc5
 8001788:	f300 80e7 	bgt.w	800195a <EF_DecodePolish+0x1ea>
 800178c:	2bc3      	cmp	r3, #195	; 0xc3
 800178e:	d002      	beq.n	8001796 <EF_DecodePolish+0x26>
 8001790:	2bc4      	cmp	r3, #196	; 0xc4
 8001792:	d00a      	beq.n	80017aa <EF_DecodePolish+0x3a>
 8001794:	e0e1      	b.n	800195a <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b93      	cmp	r3, #147	; 0x93
 800179a:	d002      	beq.n	80017a2 <EF_DecodePolish+0x32>
 800179c:	2bb3      	cmp	r3, #179	; 0xb3
 800179e:	d002      	beq.n	80017a6 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 80017a0:	e0db      	b.n	800195a <EF_DecodePolish+0x1ea>
			return 0x84;
 80017a2:	2384      	movs	r3, #132	; 0x84
 80017a4:	e0da      	b.n	800195c <EF_DecodePolish+0x1ec>
			return 0x8D;
 80017a6:	238d      	movs	r3, #141	; 0x8d
 80017a8:	e0d8      	b.n	800195c <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	3b84      	subs	r3, #132	; 0x84
 80017ae:	2b15      	cmp	r3, #21
 80017b0:	f200 80d0 	bhi.w	8001954 <EF_DecodePolish+0x1e4>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <EF_DecodePolish+0x4c>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001815 	.word	0x08001815
 80017c0:	08001821 	.word	0x08001821
 80017c4:	0800181d 	.word	0x0800181d
 80017c8:	08001829 	.word	0x08001829
 80017cc:	08001955 	.word	0x08001955
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	08001955 	.word	0x08001955
 80017f4:	08001955 	.word	0x08001955
 80017f8:	08001955 	.word	0x08001955
 80017fc:	08001955 	.word	0x08001955
 8001800:	08001955 	.word	0x08001955
 8001804:	08001955 	.word	0x08001955
 8001808:	08001955 	.word	0x08001955
 800180c:	08001819 	.word	0x08001819
 8001810:	08001825 	.word	0x08001825
		{
		case 0x84: // Ą
			return 0x7F;
 8001814:	237f      	movs	r3, #127	; 0x7f
 8001816:	e0a1      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8001818:	2381      	movs	r3, #129	; 0x81
 800181a:	e09f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	e09d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8001820:	2388      	movs	r3, #136	; 0x88
 8001822:	e09b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001824:	238a      	movs	r3, #138	; 0x8a
 8001826:	e099      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001828:	2389      	movs	r3, #137	; 0x89
 800182a:	e097      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	3b81      	subs	r3, #129	; 0x81
 8001830:	2b3b      	cmp	r3, #59	; 0x3b
 8001832:	f200 8091 	bhi.w	8001958 <EF_DecodePolish+0x1e8>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <EF_DecodePolish+0xcc>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	0800192d 	.word	0x0800192d
 8001840:	08001941 	.word	0x08001941
 8001844:	08001931 	.word	0x08001931
 8001848:	08001945 	.word	0x08001945
 800184c:	08001959 	.word	0x08001959
 8001850:	08001959 	.word	0x08001959
 8001854:	08001959 	.word	0x08001959
 8001858:	08001959 	.word	0x08001959
 800185c:	08001959 	.word	0x08001959
 8001860:	08001959 	.word	0x08001959
 8001864:	08001959 	.word	0x08001959
 8001868:	08001959 	.word	0x08001959
 800186c:	08001959 	.word	0x08001959
 8001870:	08001959 	.word	0x08001959
 8001874:	08001959 	.word	0x08001959
 8001878:	08001959 	.word	0x08001959
 800187c:	08001959 	.word	0x08001959
 8001880:	08001959 	.word	0x08001959
 8001884:	08001959 	.word	0x08001959
 8001888:	08001959 	.word	0x08001959
 800188c:	08001959 	.word	0x08001959
 8001890:	08001959 	.word	0x08001959
 8001894:	08001959 	.word	0x08001959
 8001898:	08001959 	.word	0x08001959
 800189c:	08001959 	.word	0x08001959
 80018a0:	08001935 	.word	0x08001935
 80018a4:	08001949 	.word	0x08001949
 80018a8:	08001959 	.word	0x08001959
 80018ac:	08001959 	.word	0x08001959
 80018b0:	08001959 	.word	0x08001959
 80018b4:	08001959 	.word	0x08001959
 80018b8:	08001959 	.word	0x08001959
 80018bc:	08001959 	.word	0x08001959
 80018c0:	08001959 	.word	0x08001959
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001959 	.word	0x08001959
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001959 	.word	0x08001959
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001959 	.word	0x08001959
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001959 	.word	0x08001959
 8001904:	08001959 	.word	0x08001959
 8001908:	08001959 	.word	0x08001959
 800190c:	08001959 	.word	0x08001959
 8001910:	08001959 	.word	0x08001959
 8001914:	08001959 	.word	0x08001959
 8001918:	08001959 	.word	0x08001959
 800191c:	08001939 	.word	0x08001939
 8001920:	0800194d 	.word	0x0800194d
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
		{
		case 0x81: // Ł
			return 0x82;
 800192c:	2382      	movs	r3, #130	; 0x82
 800192e:	e015      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 8001930:	2383      	movs	r3, #131	; 0x83
 8001932:	e013      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001934:	2385      	movs	r3, #133	; 0x85
 8001936:	e011      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001938:	2386      	movs	r3, #134	; 0x86
 800193a:	e00f      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 800193c:	2387      	movs	r3, #135	; 0x87
 800193e:	e00d      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 8001940:	238b      	movs	r3, #139	; 0x8b
 8001942:	e00b      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001944:	238c      	movs	r3, #140	; 0x8c
 8001946:	e009      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001948:	238e      	movs	r3, #142	; 0x8e
 800194a:	e007      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 800194c:	238f      	movs	r3, #143	; 0x8f
 800194e:	e005      	b.n	800195c <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 8001950:	2390      	movs	r3, #144	; 0x90
 8001952:	e003      	b.n	800195c <EF_DecodePolish+0x1ec>
		break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001958:	bf00      	nop
	}

	return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af02      	add	r7, sp, #8
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001986:	f7ff fecf 	bl	8001728 <EF_GetFontStartChar>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b20      	cmp	r3, #32
 8001998:	d120      	bne.n	80019dc <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d114      	bne.n	80019cc <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 80019a2:	88bc      	ldrh	r4, [r7, #4]
 80019a4:	887d      	ldrh	r5, [r7, #2]
 80019a6:	f7ff fed7 	bl	8001758 <EF_GetFontSpaceWidth>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	0052      	lsls	r2, r2, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <EF_PutChar+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b299      	uxth	r1, r3
 80019be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	460b      	mov	r3, r1
 80019c4:	4629      	mov	r1, r5
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7ff fc25 	bl	8001216 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80019cc:	f7ff fec4 	bl	8001758 <EF_GetFontSpaceWidth>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	0052      	lsls	r2, r2, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	e09c      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80019dc:	f7ff fea4 	bl	8001728 <EF_GetFontStartChar>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d201      	bcs.n	80019ee <EF_PutChar+0x86>
	{
		return 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e093      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if(CharNumber > EF_GetFontEndChar())
 80019ee:	f7ff fea7 	bl	8001740 <EF_GetFontEndChar>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	7c7b      	ldrb	r3, [r7, #17]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <EF_PutChar+0x98>
	{
		return 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e08a      	b.n	8001b16 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	7c7b      	ldrb	r3, [r7, #17]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 8001a0e:	4b44      	ldr	r3, [pc, #272]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a42      	ldr	r2, [pc, #264]	; (8001b20 <EF_PutChar+0x1b8>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	6851      	ldr	r1, [r2, #4]
 8001a1a:	7c7a      	ldrb	r2, [r7, #17]
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	440a      	add	r2, r1
 8001a20:	8852      	ldrh	r2, [r2, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	83fb      	strh	r3, [r7, #30]
 8001a2a:	e066      	b.n	8001afa <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	777b      	strb	r3, [r7, #29]
 8001a36:	e053      	b.n	8001ae0 <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	74fb      	strb	r3, [r7, #19]
			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 8001a3e:	7efb      	ldrb	r3, [r7, #27]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d905      	bls.n	8001a50 <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001a44:	2308      	movs	r3, #8
 8001a46:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001a48:	7efb      	ldrb	r3, [r7, #27]
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	76fb      	strb	r3, [r7, #27]
 8001a4e:	e001      	b.n	8001a54 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 8001a50:	7efb      	ldrb	r3, [r7, #27]
 8001a52:	773b      	strb	r3, [r7, #28]
			}

			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001a54:	2300      	movs	r3, #0
 8001a56:	74bb      	strb	r3, [r7, #18]
 8001a58:	e038      	b.n	8001acc <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001a5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	da15      	bge.n	8001a8e <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i,  PosY + PixelHeight, Fcolor);
 8001a62:	7f7b      	ldrb	r3, [r7, #29]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	7cbb      	ldrb	r3, [r7, #18]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	b218      	sxth	r0, r3
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	8bfb      	ldrh	r3, [r7, #30]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f000 f9d8 	bl	8001e3c <ILI9341_WritePixel>
 8001a8c:	e018      	b.n	8001ac0 <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR) // Check if we want to draw background
 8001a8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d114      	bne.n	8001ac0 <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001a96:	7f7b      	ldrb	r3, [r7, #29]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	7cbb      	ldrb	r3, [r7, #18]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b218      	sxth	r0, r3
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	8bfb      	ldrh	r3, [r7, #30]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001aba:	4619      	mov	r1, r3
 8001abc:	f000 f9be 	bl	8001e3c <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	74bb      	strb	r3, [r7, #18]
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	74fb      	strb	r3, [r7, #19]
 8001acc:	7cba      	ldrb	r2, [r7, #18]
 8001ace:	7f3b      	ldrb	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3c2      	bcc.n	8001a5a <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 8001ada:	7f7b      	ldrb	r3, [r7, #29]
 8001adc:	3301      	adds	r3, #1
 8001ade:	777b      	strb	r3, [r7, #29]
 8001ae0:	7f7a      	ldrb	r2, [r7, #29]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da00      	bge.n	8001aee <EF_PutChar+0x186>
 8001aec:	3307      	adds	r3, #7
 8001aee:	10db      	asrs	r3, r3, #3
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dda1      	ble.n	8001a38 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83fb      	strh	r3, [r7, #30]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <EF_PutChar+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	8bfa      	ldrh	r2, [r7, #30]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d391      	bcc.n	8001a2c <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <EF_PutChar+0x1b8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002c0 	.word	0x200002c0

08001b24 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
	uint8_t Lenght = strlen((char*)pStr); // Take a string length in bytes
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7fe fb58 	bl	80001f4 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74bb      	strb	r3, [r7, #18]

	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing - przesunięcie
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	e05a      	b.n	8001c08 <EF_PutString+0xe4>
	{

		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2bc5      	cmp	r3, #197	; 0xc5
 8001b5c:	d817      	bhi.n	8001b8e <EF_PutString+0x6a>
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2bc2      	cmp	r3, #194	; 0xc2
 8001b68:	d911      	bls.n	8001b8e <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	7818      	ldrb	r0, [r3, #0]
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f7ff fdf7 	bl	8001770 <EF_DecodePolish>
 8001b82:	4603      	mov	r3, r0
 8001b84:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e004      	b.n	8001b98 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	74fb      	strb	r3, [r7, #19]
		}

		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001b98:	897a      	ldrh	r2, [r7, #10]
 8001b9a:	8abb      	ldrh	r3, [r7, #20]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	b299      	uxth	r1, r3
 8001ba0:	88fc      	ldrh	r4, [r7, #6]
 8001ba2:	893a      	ldrh	r2, [r7, #8]
 8001ba4:	7cf8      	ldrb	r0, [r7, #19]
 8001ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	f7ff fed9 	bl	8001968 <EF_PutChar>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift = Shift + CharWidth;
 8001bba:	7c7b      	ldrb	r3, [r7, #17]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	8abb      	ldrh	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 8001bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d113      	bne.n	8001bf4 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 8001bcc:	897a      	ldrh	r2, [r7, #10]
 8001bce:	8abb      	ldrh	r3, [r7, #20]
 8001bd0:	18d4      	adds	r4, r2, r3
 8001bd2:	893d      	ldrh	r5, [r7, #8]
 8001bd4:	f7ff fdc0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29e      	uxth	r6, r3
 8001bdc:	f7ff fd98 	bl	8001710 <EF_GetFontHeight>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	4632      	mov	r2, r6
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f7ff fb11 	bl	8001216 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift = Shift + EF_GetFontSpaceWidth();
 8001bf4:	f7ff fdb0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	4413      	add	r3, r2
 8001c00:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Lenght; Loop++) // Go threw each char
 8001c02:	7dfb      	ldrb	r3, [r7, #23]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
 8001c08:	7dfa      	ldrb	r2, [r7, #23]
 8001c0a:	7cbb      	ldrb	r3, [r7, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3a0      	bcc.n	8001b52 <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 8001c10:	8abb      	ldrh	r3, [r7, #20]
 8001c12:	b2dc      	uxtb	r4, r3
 8001c14:	f7ff fda0 	bl	8001758 <EF_GetFontSpaceWidth>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	1ae3      	subs	r3, r4, r3
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c26 <ILI9341_Delay>:
//Basic Function - napisz je dla swojego mikrokontrolera (write those for your MCU)
//
////////////////////////////////////////////////////////////////////////////////////

static void ILI9341_Delay(uint32_t ms)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f007 fea8 	bl	8009984 <HAL_Delay>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	// That is taken from HAL Transmit function
    while (Length > 0U)
 8001c46:	e014      	b.n	8001c72 <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE)) // TXE -flaga tranfer ready
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d10c      	bne.n	8001c72 <ILI9341_SendToTFT+0x36>
      {
    	//Fill Data Register in SPI
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
        // Next byte
        Byte++;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
        // Length decrement
        Length--;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e7      	bne.n	8001c48 <ILI9341_SendToTFT+0xc>
      }
    }

    // Wait for Transfer end
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001c78:	bf00      	nop
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <ILI9341_SendToTFT+0x5c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d0f7      	beq.n	8001c7a <ILI9341_SendToTFT+0x3e>

	}
#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT); 	// Send the command byte
#endif
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	200002c4 	.word	0x200002c4

08001c9c <ILI9341_SendComand>:



static void ILI9341_SendComand(uint8_t Command)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480b      	ldr	r0, [pc, #44]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cae:	f008 fdd9 	bl	800a864 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cb8:	4808      	ldr	r0, [pc, #32]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cba:	f008 fdd3 	bl	800a864 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte
	ILI9341_SendToTFT(&Command, 1);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff ffba 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4803      	ldr	r0, [pc, #12]	; (8001cdc <ILI9341_SendComand+0x40>)
 8001cd0:	f008 fdc8 	bl	800a864 <HAL_GPIO_WritePin>
#endif
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <ILI9341_SendCommandAndData>:


static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	73fb      	strb	r3, [r7, #15]
	// CS LOW
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001cf6:	f008 fdb5 	bl	800a864 <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to LOW
	ILI9341_DC_LOW;
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d02:	f008 fdaf 	bl	800a864 <HAL_GPIO_WritePin>

	// Sent to TFT by SPI 1byte - wysylamy 1 bajt danych
	ILI9341_SendToTFT(&Command, 1);
 8001d06:	f107 030f 	add.w	r3, r7, #15
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff95 	bl	8001c3c <ILI9341_SendToTFT>

	// DC to Data - DC to HIGH
	ILI9341_DC_HIGH;
 8001d12:	2201      	movs	r2, #1
 8001d14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d1a:	f008 fda3 	bl	800a864 <HAL_GPIO_WritePin>

	//Send to TFT Length byte - wysylamy "Length" ilosci danych
	ILI9341_SendToTFT(Data, Length);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff ff8b 	bl	8001c3c <ILI9341_SendToTFT>

	// CS HIGH
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <ILI9341_SendCommandAndData+0x5c>)
 8001d2e:	f008 fd99 	bl	800a864 <HAL_GPIO_WritePin>
#endif

}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40020400 	.word	0x40020400

08001d40 <ILI9341_SetRotation>:
// TFT Functions
//
////////////////////////////////////////////////////////////////////////////////////

void ILI9341_SetRotation(uint8_t Rotation)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d820      	bhi.n	8001d92 <ILI9341_SetRotation+0x52>
		return;

	//
	// Set appropriate bits for Rotation
	//
	switch(Rotation)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d816      	bhi.n	8001d84 <ILI9341_SetRotation+0x44>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ILI9341_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d79 	.word	0x08001d79
 8001d68:	08001d7f 	.word	0x08001d7f
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001d6c:	2348      	movs	r3, #72	; 0x48
 8001d6e:	71fb      	strb	r3, [r7, #7]
		break;
 8001d70:	e008      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 8001d72:	2328      	movs	r3, #40	; 0x28
 8001d74:	71fb      	strb	r3, [r7, #7]
		break;
 8001d76:	e005      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001d78:	2388      	movs	r3, #136	; 0x88
 8001d7a:	71fb      	strb	r3, [r7, #7]
		break;
 8001d7c:	e002      	b.n	8001d84 <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001d7e:	23e8      	movs	r3, #232	; 0xe8
 8001d80:	71fb      	strb	r3, [r7, #7]
		break;
 8001d82:	bf00      	nop
	}

	// Write indo MAD Control register our Rotation data
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f7ff ffa8 	bl	8001ce0 <ILI9341_SendCommandAndData>
 8001d90:	e000      	b.n	8001d94 <ILI9341_SetRotation+0x54>
		return;
 8001d92:	bf00      	nop
}
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <ILI9341_SetAddrWindow>:


// ustawienie adresu obszaru rysowania
void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	80fb      	strh	r3, [r7, #6]
 8001dae:	4603      	mov	r3, r0
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
 8001db6:	4613      	mov	r3, r2
 8001db8:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];
	// Calculate end ranges
	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001dba:	88fa      	ldrh	r2, [r7, #6]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	81fb      	strh	r3, [r7, #14]
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	81bb      	strh	r3, [r7, #12]

	// Fulfill X's buffer
	DataToTransfer[0] = x1 >> 8;
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = x1 & 0xFF;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = x2 >> 8;
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = x2 & 0xFF;
 8001dec:	89fb      	ldrh	r3, [r7, #14]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	72fb      	strb	r3, [r7, #11]
	// Push X's buffer
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4); // Ustawienie adresu kolumny
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	202a      	movs	r0, #42	; 0x2a
 8001dfc:	f7ff ff70 	bl	8001ce0 <ILI9341_SendCommandAndData>

	// Fulfill Y's buffer
	DataToTransfer[0] = y1 >> 8;
 8001e00:	88bb      	ldrh	r3, [r7, #4]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = y1 & 0xFF;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = y2 >> 8;
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = y2 & 0xFF;
 8001e1a:	89bb      	ldrh	r3, [r7, #12]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	72fb      	strb	r3, [r7, #11]
	// Push Y's buffer
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4); // Ustawienie adresu wiersza
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	202b      	movs	r0, #43	; 0x2b
 8001e2a:	f7ff ff59 	bl	8001ce0 <ILI9341_SendCommandAndData>

	ILI9341_SendComand(ILI9341_RAMWR); // zapisujemy to do RAMu
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f7ff ff34 	bl	8001c9c <ILI9341_SendComand>

}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}

08001e3c <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	460b      	mov	r3, r1
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT)) // sprawdza czy nie wyszlismy poza podzakres
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db21      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5e:	da1c      	bge.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db18      	blt.n	8001e9a <ILI9341_WritePixel+0x5e>
 8001e68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6c:	2bef      	cmp	r3, #239	; 0xef
 8001e6e:	dc14      	bgt.n	8001e9a <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2201      	movs	r2, #1
 8001e78:	f7ff ff90 	bl	8001d9c <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2202      	movs	r2, #2
 8001e92:	4619      	mov	r1, r3
 8001e94:	202c      	movs	r0, #44	; 0x2c
 8001e96:	f7ff ff23 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, const uint8_t *img, uint16_t w, uint16_t h)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	81bb      	strh	r3, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80fb      	strh	r3, [r7, #6]
	// Check if image will fit into screen - cannot make it outside by hardware
	if ((x >= 0) && ((x + w) <= ILI9341_TFTWIDTH) && (y >= 0) && ((y + h) <= ILI9341_TFTHEIGHT))
 8001eb8:	89fa      	ldrh	r2, [r7, #14]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ec2:	dc14      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2bf0      	cmp	r3, #240	; 0xf0
 8001ecc:	dc0f      	bgt.n	8001eee <ILI9341_DrawImage+0x4c>
	{
		// Set window for image
		ILI9341_SetAddrWindow(x, y, w, h);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	89b9      	ldrh	r1, [r7, #12]
 8001ed4:	89f8      	ldrh	r0, [r7, #14]
 8001ed6:	f7ff ff61 	bl	8001d9c <ILI9341_SetAddrWindow>
		// Push image to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w*h*2));
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	8b3a      	ldrh	r2, [r7, #24]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f7ff fef9 	bl	8001ce0 <ILI9341_SendCommandAndData>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <ILI9341_ClearDisplay>:


void ILI9341_ClearDisplay(uint16_t Color)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	// Set window for whole screen
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 8001f02:	23f0      	movs	r3, #240	; 0xf0
 8001f04:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff ff46 	bl	8001d9c <ILI9341_SetAddrWindow>
	// Set RAM writing
	ILI9341_SendComand(ILI9341_RAMWR);
 8001f10:	202c      	movs	r0, #44	; 0x2c
 8001f12:	f7ff fec3 	bl	8001c9c <ILI9341_SendComand>

#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001f16:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001f1a:	60fb      	str	r3, [r7, #12]

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f22:	4822      	ldr	r0, [pc, #136]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f24:	f008 fc9e 	bl	800a864 <HAL_GPIO_WritePin>
#endif
	ILI9341_DC_HIGH;	// Data mode
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f30:	f008 fc98 	bl	800a864 <HAL_GPIO_WritePin>

    while (Length > 0U)
 8001f34:	e023      	b.n	8001f7e <ILI9341_ClearDisplay+0x86>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d11b      	bne.n	8001f7e <ILI9341_ClearDisplay+0x86>
      {
    	  // Write higher byte of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	330c      	adds	r3, #12
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
        // Wait for transfer
        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 8001f58:	bf00      	nop
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d1f7      	bne.n	8001f5a <ILI9341_ClearDisplay+0x62>
        {}
        // Write lower byt of color to DR
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	330c      	adds	r3, #12
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]
        // Decrease Lenght
        Length--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1d8      	bne.n	8001f36 <ILI9341_ClearDisplay+0x3e>
      }
    }

    // Wait for the end of transfer
	while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001f84:	bf00      	nop
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <ILI9341_ClearDisplay+0xb8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d0f7      	beq.n	8001f86 <ILI9341_ClearDisplay+0x8e>
	{

	}

#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ILI9341_ClearDisplay+0xb4>)
 8001f9e:	f008 fc61 	bl	800a864 <HAL_GPIO_WritePin>
		ILI9341_SendData16(Color);
	}
#endif


}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	200002c4 	.word	0x200002c4

08001fb4 <ILI9341_Init>:
  0x00                                   // End of list
};


void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <ILI9341_Init+0x9c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
	uint8_t cmd, x, numArgs;
	const uint8_t *addr = initcmd;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <ILI9341_Init+0xa0>)
 8001fc4:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SP1 == 1)
	__HAL_SPI_ENABLE(hspi);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	601a      	str	r2, [r3, #0]
#endif

	//Resetowanie kontrolera TFT
#if (ILI9341_USE_HW_RESET == 1) // uzywamy hardwer resetu
	ILI9341_RST_LOW;
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	481e      	ldr	r0, [pc, #120]	; (8002058 <ILI9341_Init+0xa4>)
 8001fde:	f008 fc41 	bl	800a864 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fe1f 	bl	8001c26 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <ILI9341_Init+0xa4>)
 8001ff0:	f008 fc38 	bl	800a864 <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fe16 	bl	8001c26 <ILI9341_Delay>
	ILI9341_SendCommand(ILI9341_SWRESET); // wyslij komende softwerowego resetu
	ILI9341_Delay(150); // oczekiwanie na inicjalizacje
#endif


	while ((cmd = *(addr++)) > 0)
 8001ffa:	e019      	b.n	8002030 <ILI9341_Init+0x7c>
	    {
	      x = *(addr++);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	72bb      	strb	r3, [r7, #10]
	      numArgs = x & 0x7F;
 8002006:	7abb      	ldrb	r3, [r7, #10]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	727b      	strb	r3, [r7, #9]
	      // Push Init data
	      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs); // (komenda, wskaznik na dane z tablicy initcmd ^^, i
 800200e:	7a7a      	ldrb	r2, [r7, #9]
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fe63 	bl	8001ce0 <ILI9341_SendCommandAndData>
	      	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 //ilosc danych do wyslania

	      addr += numArgs;
 800201a:	7a7b      	ldrb	r3, [r7, #9]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

	      if (x & 0x80) // po komendzie sleep out trzeba odczekac 150ms
 8002022:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da02      	bge.n	8002030 <ILI9341_Init+0x7c>
	      {
	    	  ILI9341_Delay(150);
 800202a:	2096      	movs	r0, #150	; 0x96
 800202c:	f7ff fdfb 	bl	8001c26 <ILI9341_Delay>
	while ((cmd = *(addr++)) > 0)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60fa      	str	r2, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	72fb      	strb	r3, [r7, #11]
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1dd      	bne.n	8001ffc <ILI9341_Init+0x48>
	      }
	    }
	ILI9341_SetRotation(ILI9341_ROTATION);
 8002040:	2003      	movs	r0, #3
 8002042:	f7ff fe7d 	bl	8001d40 <ILI9341_SetRotation>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200002c4 	.word	0x200002c4
 8002054:	08018074 	.word	0x08018074
 8002058:	40020400 	.word	0x40020400

0800205c <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	480a      	ldr	r0, [pc, #40]	; (8002094 <XPT2046_GetRawData+0x38>)
 800206a:	f008 fbfb 	bl	800a864 <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <XPT2046_GetRawData+0x3c>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2305      	movs	r3, #5
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <XPT2046_GetRawData+0x40>)
 800207c:	4908      	ldr	r1, [pc, #32]	; (80020a0 <XPT2046_GetRawData+0x44>)
 800207e:	f00c fa12 	bl	800e4a6 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002082:	2201      	movs	r2, #1
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <XPT2046_GetRawData+0x38>)
 800208a:	f008 fbeb 	bl	800a864 <HAL_GPIO_WritePin>
#endif
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40020400 	.word	0x40020400
 8002098:	20000230 	.word	0x20000230
 800209c:	20000240 	.word	0x20000240
 80020a0:	20000238 	.word	0x20000238

080020a4 <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <XPT2046_ReadRawData+0x48>)
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	801a      	strh	r2, [r3, #0]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000240 	.word	0x20000240

080020f0 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 80020fc:	f107 020c 	add.w	r2, r7, #12
 8002100:	f107 030e 	add.w	r3, r7, #14
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffcc 	bl	80020a4 <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 800210c:	4b3e      	ldr	r3, [pc, #248]	; (8002208 <XPT2046_ReadTouchPoint+0x118>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d16e      	bne.n	80021f2 <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002116:	e9d3 4500 	ldrd	r4, r5, [r3]
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fa19 	bl	8000554 <__aeabi_i2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fa7d 	bl	8000628 <__aeabi_dmul>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002138:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800213c:	89bb      	ldrh	r3, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa08 	bl	8000554 <__aeabi_i2d>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4620      	mov	r0, r4
 800214a:	4629      	mov	r1, r5
 800214c:	f7fe fa6c 	bl	8000628 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4640      	mov	r0, r8
 8002156:	4649      	mov	r1, r9
 8002158:	f7fe f8b0 	bl	80002bc <__adddf3>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002166:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd2f 	bl	8000bd8 <__aeabi_d2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 8002184:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9e2 	bl	8000554 <__aeabi_i2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fa46 	bl	8000628 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4690      	mov	r8, r2
 80021a2:	4699      	mov	r9, r3
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021a6:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80021aa:	89bb      	ldrh	r3, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9d1 	bl	8000554 <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4620      	mov	r0, r4
 80021b8:	4629      	mov	r1, r5
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4640      	mov	r0, r8
 80021c4:	4649      	mov	r1, r9
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <XPT2046_ReadTouchPoint+0x11c>)
 80021d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcf8 	bl	8000bd8 <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 80021f0:	e005      	b.n	80021fe <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 80021f2:	89fa      	ldrh	r2, [r7, #14]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 80021f8:	89ba      	ldrh	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	801a      	strh	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002208:	20000245 	.word	0x20000245
 800220c:	20000000 	.word	0x20000000

08002210 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	e013      	b.n	8002250 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800222c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002230:	461a      	mov	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <XPT2046_GetTouchPoint+0x74>)
 800223c:	330a      	adds	r3, #10
 800223e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002242:	461a      	mov	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d9e8      	bls.n	8002228 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <XPT2046_GetTouchPoint+0x78>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	08db      	lsrs	r3, r3, #3
 8002270:	b29a      	uxth	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	801a      	strh	r2, [r3, #0]
}
 8002276:	bf00      	nop
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200002c8 	.word	0x200002c8
 8002288:	cccccccd 	.word	0xcccccccd

0800228c <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <XPT2046_IsTouched+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d101      	bne.n	800229e <XPT2046_IsTouched+0x12>
		return 1;
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <XPT2046_IsTouched+0x14>

	return 0;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200002f1 	.word	0x200002f1

080022b0 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	  switch(TouchState)
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <XPT2046_Task+0x16c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80ab 	bhi.w	8002416 <XPT2046_Task+0x166>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <XPT2046_Task+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	0800240d 	.word	0x0800240d
 80022cc:	080022d9 	.word	0x080022d9
 80022d0:	0800234f 	.word	0x0800234f
 80022d4:	080023cb 	.word	0x080023cb
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 80022d8:	f007 fb48 	bl	800996c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b50      	ldr	r3, [pc, #320]	; (8002420 <XPT2046_Task+0x170>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	f240 8093 	bls.w	8002410 <XPT2046_Task+0x160>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 80022ea:	f7ff feb7 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <XPT2046_Task+0x174>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4a4c      	ldr	r2, [pc, #304]	; (8002428 <XPT2046_Task+0x178>)
 80022f6:	441a      	add	r2, r3
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <XPT2046_Task+0x174>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	330a      	adds	r3, #10
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4949      	ldr	r1, [pc, #292]	; (8002428 <XPT2046_Task+0x178>)
 8002302:	440b      	add	r3, r1
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f7ff fef2 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <XPT2046_Task+0x174>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <XPT2046_Task+0x174>)
 8002316:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <XPT2046_Task+0x174>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b0a      	cmp	r3, #10
 800231e:	d105      	bne.n	800232c <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8002320:	4b40      	ldr	r3, [pc, #256]	; (8002424 <XPT2046_Task+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <XPT2046_Task+0x16c>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	483e      	ldr	r0, [pc, #248]	; (800242c <XPT2046_Task+0x17c>)
 8002332:	f008 fa7f 	bl	800a834 <HAL_GPIO_ReadPin>
 8002336:	4603      	mov	r3, r0
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <XPT2046_Task+0x16c>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8002342:	f007 fb13 	bl	800996c <HAL_GetTick>
 8002346:	4603      	mov	r3, r0
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <XPT2046_Task+0x170>)
 800234a:	6013      	str	r3, [r2, #0]
		  }

		  break;
 800234c:	e060      	b.n	8002410 <XPT2046_Task+0x160>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 800234e:	f007 fb0d 	bl	800996c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <XPT2046_Task+0x170>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b05      	cmp	r3, #5
 800235c:	d95a      	bls.n	8002414 <XPT2046_Task+0x164>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 800235e:	f7ff fe7d 	bl	800205c <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <XPT2046_Task+0x174>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <XPT2046_Task+0x178>)
 800236a:	441a      	add	r2, r3
 800236c:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <XPT2046_Task+0x174>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	330a      	adds	r3, #10
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	492c      	ldr	r1, [pc, #176]	; (8002428 <XPT2046_Task+0x178>)
 8002376:	440b      	add	r3, r1
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7ff feb8 	bl	80020f0 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <XPT2046_Task+0x174>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <XPT2046_Task+0x174>)
 800238a:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <XPT2046_Task+0x174>)
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <XPT2046_Task+0x180>)
 8002392:	fba3 1302 	umull	r1, r3, r3, r2
 8002396:	08d9      	lsrs	r1, r3, #3
 8002398:	460b      	mov	r3, r1
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <XPT2046_Task+0x174>)
 80023a6:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 80023a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <XPT2046_Task+0x17c>)
 80023ae:	f008 fa41 	bl	800a834 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d102      	bne.n	80023be <XPT2046_Task+0x10e>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <XPT2046_Task+0x16c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 80023be:	f007 fad5 	bl	800996c <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <XPT2046_Task+0x170>)
 80023c6:	6013      	str	r3, [r2, #0]
		  }

		  break;
 80023c8:	e024      	b.n	8002414 <XPT2046_Task+0x164>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 80023ca:	4b14      	ldr	r3, [pc, #80]	; (800241c <XPT2046_Task+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <XPT2046_Task+0x174>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023d6:	e009      	b.n	80023ec <XPT2046_Task+0x13c>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <XPT2046_Task+0x184>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <XPT2046_Task+0x188>)
 80023e2:	f993 3000 	ldrsb.w	r3, [r3]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f007 fc82 	bl	8009cf0 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <XPT2046_Task+0x188>)
 80023ee:	f993 3000 	ldrsb.w	r3, [r3]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f007 fc6d 	bl	8009cd2 <HAL_NVIC_GetPendingIRQ>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ec      	bne.n	80023d8 <XPT2046_Task+0x128>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <XPT2046_Task+0x188>)
 8002400:	f993 3000 	ldrsb.w	r3, [r3]
 8002404:	4618      	mov	r0, r3
 8002406:	f007 fc3c 	bl	8009c82 <HAL_NVIC_EnableIRQ>
		  break;
 800240a:	e004      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <XPT2046_Task+0x166>
		  break;
 8002414:	bf00      	nop

	  }
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002f1 	.word	0x200002f1
 8002420:	200002f4 	.word	0x200002f4
 8002424:	200002f0 	.word	0x200002f0
 8002428:	200002c8 	.word	0x200002c8
 800242c:	40020000 	.word	0x40020000
 8002430:	cccccccd 	.word	0xcccccccd
 8002434:	40013c00 	.word	0x40013c00
 8002438:	20000234 	.word	0x20000234

0800243c <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f007 fc2c 	bl	8009c9e <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8002446:	4b02      	ldr	r3, [pc, #8]	; (8002450 <XPT2046_IRQ+0x14>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200002f1 	.word	0x200002f1

08002454 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8002460:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <XPT2046_Init+0x84>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8002466:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <XPT2046_Init+0x88>)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <XPT2046_Init+0x8c>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <XPT2046_Init+0x90>)
 800247a:	f008 f9f3 	bl	800a864 <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <XPT2046_Init+0x94>)
 8002480:	2290      	movs	r2, #144	; 0x90
 8002482:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <XPT2046_Init+0x98>)
 8002486:	22d0      	movs	r2, #208	; 0xd0
 8002488:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <XPT2046_Init+0x9c>)
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8002490:	f7ff fde4 	bl	800205c <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8002494:	2001      	movs	r0, #1
 8002496:	f007 fa75 	bl	8009984 <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <XPT2046_Init+0x94>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	08db      	lsrs	r3, r3, #3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <XPT2046_Init+0x9c>)
 80024a4:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <XPT2046_Init+0x94>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	015b      	lsls	r3, r3, #5
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <XPT2046_Init+0x9c>)
 80024b0:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <XPT2046_Init+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	08db      	lsrs	r3, r3, #3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <XPT2046_Init+0x9c>)
 80024bc:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <XPT2046_Init+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	015b      	lsls	r3, r3, #5
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <XPT2046_Init+0x9c>)
 80024c8:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <XPT2046_Init+0x9c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	711a      	strb	r2, [r3, #4]
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000230 	.word	0x20000230
 80024dc:	20000234 	.word	0x20000234
 80024e0:	200002f1 	.word	0x200002f1
 80024e4:	40020400 	.word	0x40020400
 80024e8:	20000235 	.word	0x20000235
 80024ec:	20000236 	.word	0x20000236
 80024f0:	20000238 	.word	0x20000238

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_DMA_Init+0x6c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_DMA_Init+0x6c>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_DMA_Init+0x6c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	200b      	movs	r0, #11
 800251c:	f007 fb95 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002520:	200b      	movs	r0, #11
 8002522:	f007 fbae 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	200c      	movs	r0, #12
 800252c:	f007 fb8d 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002530:	200c      	movs	r0, #12
 8002532:	f007 fba6 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2010      	movs	r0, #16
 800253c:	f007 fb85 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002540:	2010      	movs	r0, #16
 8002542:	f007 fb9e 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2011      	movs	r0, #17
 800254c:	f007 fb7d 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002550:	2011      	movs	r0, #17
 8002552:	f007 fb96 	bl	8009c82 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 800256c:	4a09      	ldr	r2, [pc, #36]	; (8002594 <DS3231_Init+0x30>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8ca 	bl	800270c <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f88e 	bl	800269a <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800257e:	f000 f8e7 	bl	8002750 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8002582:	f000 f8ad 	bl	80026e0 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002586:	2001      	movs	r0, #1
 8002588:	f000 f846 	bl	8002618 <DS3231_SetInterruptMode>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	200002f8 	.word	0x200002f8

08002598 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af02      	add	r7, sp, #8
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	733b      	strb	r3, [r7, #12]
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <DS3231_SetRegByte+0x38>)
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	f107 020c 	add.w	r2, r7, #12
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2302      	movs	r3, #2
 80025c0:	21d0      	movs	r1, #208	; 0xd0
 80025c2:	f008 fadf 	bl	800ab84 <HAL_I2C_Master_Transmit>
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200002f8 	.word	0x200002f8

080025d4 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	1dfa      	adds	r2, r7, #7
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2301      	movs	r3, #1
 80025ec:	21d0      	movs	r1, #208	; 0xd0
 80025ee:	f008 fac9 	bl	800ab84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <DS3231_GetRegByte+0x40>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	f107 020f 	add.w	r2, r7, #15
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21d0      	movs	r1, #208	; 0xd0
 8002604:	f008 fbbc 	bl	800ad80 <HAL_I2C_Master_Receive>
	return val;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002f8 	.word	0x200002f8

08002618 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002622:	200e      	movs	r0, #14
 8002624:	f7ff ffd6 	bl	80025d4 <DS3231_GetRegByte>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	b25a      	sxtb	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	b25b      	sxtb	r3, r3
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	b25b      	sxtb	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	200e      	movs	r0, #14
 800264c:	f7ff ffa4 	bl	8002598 <DS3231_SetRegByte>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <DS3231_EnableOscillator>:

/**
 * @brief Enables clock oscillator.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableOscillator(DS3231_State enable){
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002662:	200e      	movs	r0, #14
 8002664:	f7ff ffb6 	bl	80025d4 <DS3231_GetRegByte>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0x7f) | ((!enable & 0x01) << DS3231_EOSC));
 800266c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002674:	b25b      	sxtb	r3, r3
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <DS3231_EnableOscillator+0x2a>
 800267c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002680:	e000      	b.n	8002684 <DS3231_EnableOscillator+0x2c>
 8002682:	2200      	movs	r2, #0
 8002684:	4313      	orrs	r3, r2
 8002686:	b25b      	sxtb	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	200e      	movs	r0, #14
 800268e:	f7ff ff83 	bl	8002598 <DS3231_SetRegByte>
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80026a4:	200e      	movs	r0, #14
 80026a6:	f7ff ff95 	bl	80025d4 <DS3231_GetRegByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80026ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	200e      	movs	r0, #14
 80026ce:	f7ff ff63 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff ffa0 	bl	8002618 <DS3231_SetInterruptMode>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 80026e6:	200f      	movs	r0, #15
 80026e8:	f7ff ff74 	bl	80025d4 <DS3231_GetRegByte>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	f023 0302 	bic.w	r3, r3, #2
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	200f      	movs	r0, #15
 8002700:	f7ff ff4a 	bl	8002598 <DS3231_SetRegByte>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8002716:	200e      	movs	r0, #14
 8002718:	f7ff ff5c 	bl	80025d4 <DS3231_GetRegByte>
 800271c:	4603      	mov	r3, r0
 800271e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8002720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	b25a      	sxtb	r2, r3
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	b25b      	sxtb	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	b25b      	sxtb	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	4619      	mov	r1, r3
 800273c:	200e      	movs	r0, #14
 800273e:	f7ff ff2b 	bl	8002598 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff ff68 	bl	8002618 <DS3231_SetInterruptMode>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8002756:	200f      	movs	r0, #15
 8002758:	f7ff ff3c 	bl	80025d4 <DS3231_GetRegByte>
 800275c:	4603      	mov	r3, r0
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	200f      	movs	r0, #15
 8002770:	f7ff ff12 	bl	8002598 <DS3231_SetRegByte>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8002780:	2003      	movs	r0, #3
 8002782:	f7ff ff27 	bl	80025d4 <DS3231_GetRegByte>
 8002786:	4603      	mov	r3, r0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f866 	bl	800285a <DS3231_DecodeBCD>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff ff1b 	bl	80025d4 <DS3231_GetRegByte>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f85a 	bl	800285a <DS3231_DecodeBCD>
 80027a6:	4603      	mov	r3, r0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80027b0:	2001      	movs	r0, #1
 80027b2:	f7ff ff0f 	bl	80025d4 <DS3231_GetRegByte>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f84e 	bl	800285a <DS3231_DecodeBCD>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f85b 	bl	800288c <DS3231_EncodeBCD>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4619      	mov	r1, r3
 80027da:	2003      	movs	r0, #3
 80027dc:	f7ff fedc 	bl	8002598 <DS3231_SetRegByte>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f846 	bl	800288c <DS3231_EncodeBCD>
 8002800:	4603      	mov	r3, r0
 8002802:	4619      	mov	r1, r3
 8002804:	2002      	movs	r0, #2
 8002806:	f7ff fec7 	bl	8002598 <DS3231_SetRegByte>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f834 	bl	800288c <DS3231_EncodeBCD>
 8002824:	4603      	mov	r3, r0
 8002826:	4619      	mov	r1, r3
 8002828:	2001      	movs	r0, #1
 800282a:	f7ff feb5 	bl	8002598 <DS3231_SetRegByte>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f822 	bl	800288c <DS3231_EncodeBCD>
 8002848:	4603      	mov	r3, r0
 800284a:	4619      	mov	r1, r3
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fea3 	bl	8002598 <DS3231_SetRegByte>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	4603      	mov	r3, r0
 8002862:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	b2da      	uxtb	r2, r3
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	b2db      	uxtb	r3, r3
 800287c:	4413      	add	r3, r2
 800287e:	b2db      	uxtb	r3, r3
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <DS3231_EncodeBCD+0x40>)
 800289a:	fba3 1302 	umull	r1, r3, r3, r2
 800289e:	08d9      	lsrs	r1, r3, #3
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <DS3231_EncodeBCD+0x40>)
 80028b0:	fba1 1303 	umull	r1, r3, r1, r3
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	cccccccd 	.word	0xcccccccd

080028d0 <eeprom_wait>:
static uint32_t last_write;

//
// Basic function to work with I2C EEPROM
void eeprom_wait(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
    while (HAL_GetTick() - last_write <= WRITE_TIMEOUT)
 80028d4:	bf00      	nop
 80028d6:	f007 f849 	bl	800996c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <eeprom_wait+0x1c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d9f7      	bls.n	80028d6 <eeprom_wait+0x6>
    {
    }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000248 	.word	0x20000248

080028f0 <eeprom_read>:

HAL_StatusTypeDef eeprom_read(uint32_t addr, void* data, uint32_t size)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af04      	add	r7, sp, #16
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
    eeprom_wait();
 80028fc:	f7ff ffe8 	bl	80028d0 <eeprom_wait>
    return HAL_I2C_Mem_Read(&hi2c3, EEPROM_ADDR, addr, 1, data, size, HAL_MAX_DELAY);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9301      	str	r3, [sp, #4]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2301      	movs	r3, #1
 8002916:	21a0      	movs	r1, #160	; 0xa0
 8002918:	4803      	ldr	r0, [pc, #12]	; (8002928 <eeprom_read+0x38>)
 800291a:	f008 fd51 	bl	800b3c0 <HAL_I2C_Mem_Read>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000033c 	.word	0x2000033c

0800292c <eeprom_write>:

HAL_StatusTypeDef eeprom_write(uint32_t addr, const void* data, uint32_t size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af04      	add	r7, sp, #16
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef rc;

    eeprom_wait();
 8002938:	f7ff ffca 	bl	80028d0 <eeprom_wait>
    rc = HAL_I2C_Mem_Write(&hi2c3, EEPROM_ADDR, addr, 1, (void*)data, size, HAL_MAX_DELAY);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	b29b      	uxth	r3, r3
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	9102      	str	r1, [sp, #8]
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2301      	movs	r3, #1
 8002952:	21a0      	movs	r1, #160	; 0xa0
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <eeprom_write+0x48>)
 8002956:	f008 fc39 	bl	800b1cc <HAL_I2C_Mem_Write>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]
    last_write = HAL_GetTick();
 800295e:	f007 f805 	bl	800996c <HAL_GetTick>
 8002962:	4603      	mov	r3, r0
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <eeprom_write+0x4c>)
 8002966:	6013      	str	r3, [r2, #0]

    return rc;
 8002968:	7dfb      	ldrb	r3, [r7, #23]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000033c 	.word	0x2000033c
 8002978:	20000248 	.word	0x20000248

0800297c <EEPROM_RelayStateUpdate>:
//
// Function to Read, Update and Restore from EEPROM memory last state of Relay and Lights after lack of energy
//
// Function to update in EEPROM current state of all Relay
void EEPROM_RelayStateUpdate(uint8_t RelayNumber, uint8_t NewState)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_write(EEPROM_ADR_RELAY_1_STATE, &State, sizeof(State));
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <EEPROM_RelayStateUpdate+0x2a>
 8002996:	f107 030f 	add.w	r3, r7, #15
 800299a:	2201      	movs	r2, #1
 800299c:	4619      	mov	r1, r3
 800299e:	202e      	movs	r0, #46	; 0x2e
 80029a0:	f7ff ffc4 	bl	800292c <eeprom_write>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
}
 80029a4:	e01f      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 2) eeprom_write(EEPROM_ADR_RELAY_2_STATE, &State, sizeof(State));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d107      	bne.n	80029bc <EEPROM_RelayStateUpdate+0x40>
 80029ac:	f107 030f 	add.w	r3, r7, #15
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	202f      	movs	r0, #47	; 0x2f
 80029b6:	f7ff ffb9 	bl	800292c <eeprom_write>
}
 80029ba:	e014      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 3) eeprom_write(EEPROM_ADR_RELAY_3_STATE, &State, sizeof(State));
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <EEPROM_RelayStateUpdate+0x56>
 80029c2:	f107 030f 	add.w	r3, r7, #15
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	2030      	movs	r0, #48	; 0x30
 80029cc:	f7ff ffae 	bl	800292c <eeprom_write>
}
 80029d0:	e009      	b.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
	else if(RelayNumber == 4) eeprom_write(EEPROM_ADR_RELAY_4_STATE, &State, sizeof(State));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d106      	bne.n	80029e6 <EEPROM_RelayStateUpdate+0x6a>
 80029d8:	f107 030f 	add.w	r3, r7, #15
 80029dc:	2201      	movs	r2, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	2031      	movs	r0, #49	; 0x31
 80029e2:	f7ff ffa3 	bl	800292c <eeprom_write>
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <EEPROM_LightStateUpdate>:

//
// Function to update in EEPROM current state of all Lights
void EEPROM_LightStateUpdate(uint8_t LightNumber, uint8_t NewState)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	460a      	mov	r2, r1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	4613      	mov	r3, r2
 80029fc:	71bb      	strb	r3, [r7, #6]
	uint8_t State = NewState;
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_write(EEPROM_ADR_LIGHT_1_STATE, &State, sizeof(State));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <EEPROM_LightStateUpdate+0x2a>
 8002a08:	f107 030f 	add.w	r3, r7, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f7ff ff8b 	bl	800292c <eeprom_write>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
}
 8002a16:	e01f      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 2) eeprom_write(EEPROM_ADR_LIGHT_2_STATE, &State, sizeof(State));
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <EEPROM_LightStateUpdate+0x40>
 8002a1e:	f107 030f 	add.w	r3, r7, #15
 8002a22:	2201      	movs	r2, #1
 8002a24:	4619      	mov	r1, r3
 8002a26:	2034      	movs	r0, #52	; 0x34
 8002a28:	f7ff ff80 	bl	800292c <eeprom_write>
}
 8002a2c:	e014      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 3) eeprom_write(EEPROM_ADR_LIGHT_3_STATE, &State, sizeof(State));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d107      	bne.n	8002a44 <EEPROM_LightStateUpdate+0x56>
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	2035      	movs	r0, #53	; 0x35
 8002a3e:	f7ff ff75 	bl	800292c <eeprom_write>
}
 8002a42:	e009      	b.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
	else if(LightNumber == 4) eeprom_write(EEPROM_ADR_LIGHT_4_STATE, &State, sizeof(State));
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <EEPROM_LightStateUpdate+0x6a>
 8002a4a:	f107 030f 	add.w	r3, r7, #15
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	2036      	movs	r0, #54	; 0x36
 8002a54:	f7ff ff6a 	bl	800292c <eeprom_write>
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EEPROM_RelayStateRead>:

//
// Function to read in EEPROM current state of all Relay
uint8_t EEPROM_RelayStateRead(uint8_t RelayNumber)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	uint8_t RelayStan = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
	if(RelayNumber == 1) eeprom_read(EEPROM_ADR_RELAY_1_STATE, &RelayStan, sizeof(RelayStan));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <EEPROM_RelayStateRead+0x24>
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	202e      	movs	r0, #46	; 0x2e
 8002a7e:	f7ff ff37 	bl	80028f0 <eeprom_read>
 8002a82:	e01f      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 2) eeprom_read(EEPROM_ADR_RELAY_2_STATE, &RelayStan, sizeof(RelayStan));
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d107      	bne.n	8002a9a <EEPROM_RelayStateRead+0x3a>
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	202f      	movs	r0, #47	; 0x2f
 8002a94:	f7ff ff2c 	bl	80028f0 <eeprom_read>
 8002a98:	e014      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 3) eeprom_read(EEPROM_ADR_RELAY_3_STATE, &RelayStan, sizeof(RelayStan));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <EEPROM_RelayStateRead+0x50>
 8002aa0:	f107 030f 	add.w	r3, r7, #15
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff ff21 	bl	80028f0 <eeprom_read>
 8002aae:	e009      	b.n	8002ac4 <EEPROM_RelayStateRead+0x64>
	else if(RelayNumber == 4) eeprom_read(EEPROM_ADR_RELAY_4_STATE, &RelayStan, sizeof(RelayStan));
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d106      	bne.n	8002ac4 <EEPROM_RelayStateRead+0x64>
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	2201      	movs	r2, #1
 8002abc:	4619      	mov	r1, r3
 8002abe:	2031      	movs	r0, #49	; 0x31
 8002ac0:	f7ff ff16 	bl	80028f0 <eeprom_read>

	return RelayStan;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <EEPROM_LightStateRead>:

//
// Function to read in EEPROM current state of all Lights
uint8_t EEPROM_LightStateRead(uint8_t LightNumber)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	uint8_t AktualnyStan = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
	if(LightNumber == 1) eeprom_read(EEPROM_ADR_LIGHT_1_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <EEPROM_LightStateRead+0x24>
 8002ae2:	f107 030f 	add.w	r3, r7, #15
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2033      	movs	r0, #51	; 0x33
 8002aec:	f7ff ff00 	bl	80028f0 <eeprom_read>
 8002af0:	e01f      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 2) eeprom_read(EEPROM_ADR_LIGHT_2_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d107      	bne.n	8002b08 <EEPROM_LightStateRead+0x3a>
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	2201      	movs	r2, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	2034      	movs	r0, #52	; 0x34
 8002b02:	f7ff fef5 	bl	80028f0 <eeprom_read>
 8002b06:	e014      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 3) eeprom_read(EEPROM_ADR_LIGHT_3_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <EEPROM_LightStateRead+0x50>
 8002b0e:	f107 030f 	add.w	r3, r7, #15
 8002b12:	2201      	movs	r2, #1
 8002b14:	4619      	mov	r1, r3
 8002b16:	2035      	movs	r0, #53	; 0x35
 8002b18:	f7ff feea 	bl	80028f0 <eeprom_read>
 8002b1c:	e009      	b.n	8002b32 <EEPROM_LightStateRead+0x64>
	else if(LightNumber == 4) eeprom_read(EEPROM_ADR_LIGHT_4_STATE, &AktualnyStan, sizeof(AktualnyStan));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d106      	bne.n	8002b32 <EEPROM_LightStateRead+0x64>
 8002b24:	f107 030f 	add.w	r3, r7, #15
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	2036      	movs	r0, #54	; 0x36
 8002b2e:	f7ff fedf 	bl	80028f0 <eeprom_read>

	return AktualnyStan;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <EEPROM_RelayStateRestore>:

//
// Function to restore from EEPROM memory last state of all Relay
void EEPROM_RelayStateRestore(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	if(EEPROM_RelayStateRead(1)) SendComand(UCMD_RELAY_1_ON);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ff8d 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <EEPROM_RelayStateRestore+0x18>
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f005 ff07 	bl	8008960 <SendComand>
 8002b52:	e002      	b.n	8002b5a <EEPROM_RelayStateRestore+0x1e>
	else SendComand(UCMD_RELAY_1_OFF);
 8002b54:	2006      	movs	r0, #6
 8002b56:	f005 ff03 	bl	8008960 <SendComand>
	if(EEPROM_RelayStateRead(2)) SendComand(UCMD_RELAY_2_ON);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7ff ff80 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <EEPROM_RelayStateRestore+0x32>
 8002b66:	2007      	movs	r0, #7
 8002b68:	f005 fefa 	bl	8008960 <SendComand>
 8002b6c:	e002      	b.n	8002b74 <EEPROM_RelayStateRestore+0x38>
	else SendComand(UCMD_RELAY_2_OFF);
 8002b6e:	2008      	movs	r0, #8
 8002b70:	f005 fef6 	bl	8008960 <SendComand>
	if(EEPROM_RelayStateRead(3)) SendComand(UCMD_RELAY_3_ON);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff ff73 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <EEPROM_RelayStateRestore+0x4c>
 8002b80:	2009      	movs	r0, #9
 8002b82:	f005 feed 	bl	8008960 <SendComand>
 8002b86:	e002      	b.n	8002b8e <EEPROM_RelayStateRestore+0x52>
	else SendComand(UCMD_RELAY_3_OFF);
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f005 fee9 	bl	8008960 <SendComand>
	if(EEPROM_RelayStateRead(4)) SendComand(UCMD_RELAY_4_ON);
 8002b8e:	2004      	movs	r0, #4
 8002b90:	f7ff ff66 	bl	8002a60 <EEPROM_RelayStateRead>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <EEPROM_RelayStateRestore+0x66>
 8002b9a:	200b      	movs	r0, #11
 8002b9c:	f005 fee0 	bl	8008960 <SendComand>
	else SendComand(UCMD_RELAY_4_OFF);

}
 8002ba0:	e002      	b.n	8002ba8 <EEPROM_RelayStateRestore+0x6c>
	else SendComand(UCMD_RELAY_4_OFF);
 8002ba2:	200c      	movs	r0, #12
 8002ba4:	f005 fedc 	bl	8008960 <SendComand>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}

08002bac <EEPROM_LightStateRestore>:

//
// Function to restore from EEPROM memory last state of all Lights
void EEPROM_LightStateRestore(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if(EEPROM_LightStateRead(1)) SendComand(UCMD_LIGHT_1_ON);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7ff ff8c 	bl	8002ace <EEPROM_LightStateRead>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <EEPROM_LightStateRestore+0x18>
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f005 fecf 	bl	8008960 <SendComand>
 8002bc2:	e002      	b.n	8002bca <EEPROM_LightStateRestore+0x1e>
	else SendComand(UCMD_LIGHT_1_OFF);
 8002bc4:	200e      	movs	r0, #14
 8002bc6:	f005 fecb 	bl	8008960 <SendComand>
	if(EEPROM_LightStateRead(2)) SendComand(UCMD_LIGHT_2_ON);
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f7ff ff7f 	bl	8002ace <EEPROM_LightStateRead>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <EEPROM_LightStateRestore+0x32>
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f005 fec2 	bl	8008960 <SendComand>
 8002bdc:	e002      	b.n	8002be4 <EEPROM_LightStateRestore+0x38>
	else SendComand(UCMD_LIGHT_2_OFF);
 8002bde:	2010      	movs	r0, #16
 8002be0:	f005 febe 	bl	8008960 <SendComand>
	if(EEPROM_LightStateRead(3)) SendComand(UCMD_LIGHT_3_ON);
 8002be4:	2003      	movs	r0, #3
 8002be6:	f7ff ff72 	bl	8002ace <EEPROM_LightStateRead>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <EEPROM_LightStateRestore+0x4c>
 8002bf0:	2011      	movs	r0, #17
 8002bf2:	f005 feb5 	bl	8008960 <SendComand>
 8002bf6:	e002      	b.n	8002bfe <EEPROM_LightStateRestore+0x52>
	else SendComand(UCMD_LIGHT_3_OFF);
 8002bf8:	2012      	movs	r0, #18
 8002bfa:	f005 feb1 	bl	8008960 <SendComand>
	if(EEPROM_LightStateRead(4)) SendComand(UCMD_LIGHT_4_ON);
 8002bfe:	2004      	movs	r0, #4
 8002c00:	f7ff ff65 	bl	8002ace <EEPROM_LightStateRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <EEPROM_LightStateRestore+0x66>
 8002c0a:	2013      	movs	r0, #19
 8002c0c:	f005 fea8 	bl	8008960 <SendComand>
	else SendComand(UCMD_LIGHT_4_OFF);
}
 8002c10:	e002      	b.n	8002c18 <EEPROM_LightStateRestore+0x6c>
	else SendComand(UCMD_LIGHT_4_OFF);
 8002c12:	2014      	movs	r0, #20
 8002c14:	f005 fea4 	bl	8008960 <SendComand>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <EEPROM_ScheduleDayInWeekRead>:
//
// Function to Read, Update and Restore from EEPROM memory day of week which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleDayInWeekRead(uint8_t NrOfSchedule, uint8_t * scheduleDayInWeekTab)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayInWeek = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72bb      	strb	r3, [r7, #10]

	if(1 == NrOfSchedule)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <EEPROM_ScheduleDayInWeekRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c32:	f107 030a 	add.w	r3, r7, #10
 8002c36:	2201      	movs	r2, #1
 8002c38:	4619      	mov	r1, r3
 8002c3a:	2005      	movs	r0, #5
 8002c3c:	f7ff fe58 	bl	80028f0 <eeprom_read>
 8002c40:	e009      	b.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	}
	else if(2 == NrOfSchedule)
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d106      	bne.n	8002c56 <EEPROM_ScheduleDayInWeekRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002c48:	f107 030a 	add.w	r3, r7, #10
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	200c      	movs	r0, #12
 8002c52:	f7ff fe4d 	bl	80028f0 <eeprom_read>
	}

	uint32_t a = 0x01;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	e016      	b.n	8002c8e <EEPROM_ScheduleDayInWeekRead+0x72>
	{
		if(TempDayInWeek & a) // check every bit in TempDayInWeek (EEPROM) if is 1
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <EEPROM_ScheduleDayInWeekRead+0x5c>
		{
			scheduleDayInWeekTab[i] = 1;
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	4413      	add	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e004      	b.n	8002c82 <EEPROM_ScheduleDayInWeekRead+0x66>
		}
		else // or is 0
		{
			scheduleDayInWeekTab[i] = 0;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		a = a << 1; // Mask bit shift
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 7 ; i++)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	72fb      	strb	r3, [r7, #11]
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	2b06      	cmp	r3, #6
 8002c92:	d9e5      	bls.n	8002c60 <EEPROM_ScheduleDayInWeekRead+0x44>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EEPROM_ScheduleDayInWeekUpdate>:

//
// Function to update to EEPROM day which apply this schedule
void EEPROM_ScheduleDayInWeekUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleDayInWeekTab)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	6039      	str	r1, [r7, #0]
 8002ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t TempDayInWeek = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	72bb      	strb	r3, [r7, #10]
	uint32_t a = 0x01;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	72fb      	strb	r3, [r7, #11]
 8002cb6:	e011      	b.n	8002cdc <EEPROM_ScheduleDayInWeekUpdate+0x3e>
	{
		if(scheduleDayInWeekTab[i])
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <EEPROM_ScheduleDayInWeekUpdate+0x32>
		{
			TempDayInWeek = TempDayInWeek | a;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	7abb      	ldrb	r3, [r7, #10]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72bb      	strb	r3, [r7, #10]
		}
		a = a << 1; // Mask bit shift
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 7 ; i++)
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	72fb      	strb	r3, [r7, #11]
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d9ea      	bls.n	8002cb8 <EEPROM_ScheduleDayInWeekUpdate+0x1a>
	}

	if(1 == NrOfSchedule)
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <EEPROM_ScheduleDayInWeekUpdate+0x5a>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002ce8:	f107 030a 	add.w	r3, r7, #10
 8002cec:	2201      	movs	r2, #1
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2005      	movs	r0, #5
 8002cf2:	f7ff fe1b 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
	}

}
 8002cf6:	e009      	b.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
	else if(2 == NrOfSchedule)
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d106      	bne.n	8002d0c <EEPROM_ScheduleDayInWeekUpdate+0x6e>
		eeprom_write(EEPROM_ADR_SHEDULE_2_DAYS, &TempDayInWeek, sizeof(TempDayInWeek));
 8002cfe:	f107 030a 	add.w	r3, r7, #10
 8002d02:	2201      	movs	r2, #1
 8002d04:	4619      	mov	r1, r3
 8002d06:	200c      	movs	r0, #12
 8002d08:	f7ff fe10 	bl	800292c <eeprom_write>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>:
//
// Function to Read, Update and Restore from EEPROM memory Relays and Lights which schedule apply
//
// Function to read saved day which apply this schedule
void EEPROM_ScheduleRelayAndSwitchTabRead(uint8_t NrOfSchedule, uint8_t * scheduleRelayAndSwitchTab)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelays = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	727b      	strb	r3, [r7, #9]
	uint8_t TempLights = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	723b      	strb	r3, [r7, #8]

		if(1 == NrOfSchedule)
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <EEPROM_ScheduleRelayAndSwitchTabRead+0x38>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d2e:	f107 0309 	add.w	r3, r7, #9
 8002d32:	2201      	movs	r2, #1
 8002d34:	4619      	mov	r1, r3
 8002d36:	2006      	movs	r0, #6
 8002d38:	f7ff fdda 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLights, sizeof(TempLights));
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	2201      	movs	r2, #1
 8002d42:	4619      	mov	r1, r3
 8002d44:	2007      	movs	r0, #7
 8002d46:	f7ff fdd3 	bl	80028f0 <eeprom_read>
 8002d4a:	e010      	b.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>

		}
		else if(2 == NrOfSchedule)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d10d      	bne.n	8002d6e <EEPROM_ScheduleRelayAndSwitchTabRead+0x5a>
		{
			eeprom_read(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelays, sizeof(TempRelays));
 8002d52:	f107 0309 	add.w	r3, r7, #9
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	200d      	movs	r0, #13
 8002d5c:	f7ff fdc8 	bl	80028f0 <eeprom_read>
			eeprom_read(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLights, sizeof(TempLights));
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	2201      	movs	r2, #1
 8002d66:	4619      	mov	r1, r3
 8002d68:	200e      	movs	r0, #14
 8002d6a:	f7ff fdc1 	bl	80028f0 <eeprom_read>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 =	 =	 =	 =
		uint32_t a = 0x01;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	72fb      	strb	r3, [r7, #11]
 8002d76:	e016      	b.n	8002da6 <EEPROM_ScheduleRelayAndSwitchTabRead+0x92>
		{
			if(TempRelays & a) // check every bit in TempRelays (EEPROM) if is 1
 8002d78:	7a7b      	ldrb	r3, [r7, #9]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <EEPROM_ScheduleRelayAndSwitchTabRead+0x7c>
			{
				scheduleRelayAndSwitchTab[i] = 1;
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e004      	b.n	8002d9a <EEPROM_ScheduleRelayAndSwitchTabRead+0x86>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[i] = 0;
 8002d90:	7afb      	ldrb	r3, [r7, #11]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
		for(uint8_t i = 0; i < 4 ; i++)
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	3301      	adds	r3, #1
 8002da4:	72fb      	strb	r3, [r7, #11]
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d9e5      	bls.n	8002d78 <EEPROM_ScheduleRelayAndSwitchTabRead+0x64>
		}
		//
		// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
		//								 				  =	  =	  =	  =	 =
		a = 0x01; // reseting Mask to check from first bit in TempLights
 8002dac:	2301      	movs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002db0:	2304      	movs	r3, #4
 8002db2:	72bb      	strb	r3, [r7, #10]
 8002db4:	e016      	b.n	8002de4 <EEPROM_ScheduleRelayAndSwitchTabRead+0xd0>
		{
			if(TempLights & a) // check every bit in TempRelays (EEPROM) if is 1
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <EEPROM_ScheduleRelayAndSwitchTabRead+0xba>
			{
				scheduleRelayAndSwitchTab[j] = 1;
 8002dc2:	7abb      	ldrb	r3, [r7, #10]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <EEPROM_ScheduleRelayAndSwitchTabRead+0xc4>
			}
			else // or is 0
			{
				scheduleRelayAndSwitchTab[j] = 0;
 8002dce:	7abb      	ldrb	r3, [r7, #10]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
			}
			a = a << 1; // Mask bit shift
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
		for(uint8_t j = 4; j < 9 ; j++)
 8002dde:	7abb      	ldrb	r3, [r7, #10]
 8002de0:	3301      	adds	r3, #1
 8002de2:	72bb      	strb	r3, [r7, #10]
 8002de4:	7abb      	ldrb	r3, [r7, #10]
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d9e5      	bls.n	8002db6 <EEPROM_ScheduleRelayAndSwitchTabRead+0xa2>
		}

}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>:
//
// Function to update saved day which apply this schedule
//
// scheduleRelayAndSwitchTab = { R1, R2, R3, R4, WS, L1, L2, L3, L4}
void EEPROM_ScheduleRelayAndSwitchTabUpdate(uint8_t NrOfSchedule, const uint8_t * scheduleRelayAndSwitchTab)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelay = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	727b      	strb	r3, [r7, #9]
	uint8_t TempLight = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	723b      	strb	r3, [r7, #8]
	uint32_t a = 0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	72fb      	strb	r3, [r7, #11]
 8002e10:	e011      	b.n	8002e36 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x42>
	{
		if(scheduleRelayAndSwitchTab[i])
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x36>
		{
			TempRelay = TempRelay | a;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	7a7b      	ldrb	r3, [r7, #9]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	727b      	strb	r3, [r7, #9]
		}
		a = a << 1; // Mask bit shift
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0 ; i < 4 ; i++)
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	3301      	adds	r3, #1
 8002e34:	72fb      	strb	r3, [r7, #11]
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9ea      	bls.n	8002e12 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x1e>
	}
	a = 0x01;  // reseting Mask to check from first bit in TempLights
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e40:	2304      	movs	r3, #4
 8002e42:	72bb      	strb	r3, [r7, #10]
 8002e44:	e011      	b.n	8002e6a <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x76>
	{
		if(scheduleRelayAndSwitchTab[j])
 8002e46:	7abb      	ldrb	r3, [r7, #10]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x6a>
		{
			TempLight = TempLight | a;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7a3b      	ldrb	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	723b      	strb	r3, [r7, #8]
		}
		a = a << 1; // Mask bit shift
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
	for(uint8_t j = 4 ; j < 9 ; j++)
 8002e64:	7abb      	ldrb	r3, [r7, #10]
 8002e66:	3301      	adds	r3, #1
 8002e68:	72bb      	strb	r3, [r7, #10]
 8002e6a:	7abb      	ldrb	r3, [r7, #10]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d9ea      	bls.n	8002e46 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0x52>
	}

	if(1 == NrOfSchedule)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10e      	bne.n	8002e94 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xa0>
	{
		eeprom_write(EEPROM_ADR_SHEDULE_1_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e76:	f107 0309 	add.w	r3, r7, #9
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2006      	movs	r0, #6
 8002e80:	f7ff fd54 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_1_LIGHTS, &TempLight, sizeof(TempLight));
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	2007      	movs	r0, #7
 8002e8e:	f7ff fd4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule)
	{
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
	}
}
 8002e92:	e010      	b.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
	else if(2 == NrOfSchedule)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10d      	bne.n	8002eb6 <EEPROM_ScheduleRelayAndSwitchTabUpdate+0xc2>
		eeprom_write(EEPROM_ADR_SHEDULE_2_RELAYS, &TempRelay, sizeof(TempRelay));
 8002e9a:	f107 0309 	add.w	r3, r7, #9
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f7ff fd42 	bl	800292c <eeprom_write>
		eeprom_write(EEPROM_ADR_SHEDULE_2_LIGHTS, &TempLight, sizeof(TempLight));
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	200e      	movs	r0, #14
 8002eb2:	f7ff fd3b 	bl	800292c <eeprom_write>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <EEPROM_ScheduleHourOnRead>:
//
// Function to Read and Update from EEPROM memory Hours and Minutes ON / OFF which schedule apply
//
// ON READ
void EEPROM_ScheduleHourOnRead(uint8_t NrOfSchedule, uint8_t * hourOn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6039      	str	r1, [r7, #0]
 8002ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <EEPROM_ScheduleHourOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_ON, &TempHour, sizeof(TempHour));
 8002ed4:	f107 030f 	add.w	r3, r7, #15
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	2008      	movs	r0, #8
 8002ede:	f7ff fd07 	bl	80028f0 <eeprom_read>
 8002ee2:	e009      	b.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d106      	bne.n	8002ef8 <EEPROM_ScheduleHourOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_ON, &TempHour, sizeof(TempHour));
 8002eea:	f107 030f 	add.w	r3, r7, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	200f      	movs	r0, #15
 8002ef4:	f7ff fcfc 	bl	80028f0 <eeprom_read>
	}

	*hourOn = TempHour;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	701a      	strb	r2, [r3, #0]
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <EEPROM_ScheduleMinuteOnRead>:

void EEPROM_ScheduleMinuteOnRead(uint8_t NrOfSchedule, uint8_t * minuteOn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	6039      	str	r1, [r7, #0]
 8002f10:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <EEPROM_ScheduleMinuteOnRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f1c:	f107 030f 	add.w	r3, r7, #15
 8002f20:	2201      	movs	r2, #1
 8002f22:	4619      	mov	r1, r3
 8002f24:	2009      	movs	r0, #9
 8002f26:	f7ff fce3 	bl	80028f0 <eeprom_read>
 8002f2a:	e009      	b.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d106      	bne.n	8002f40 <EEPROM_ScheduleMinuteOnRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &TempMinute, sizeof(TempMinute));
 8002f32:	f107 030f 	add.w	r3, r7, #15
 8002f36:	2201      	movs	r2, #1
 8002f38:	4619      	mov	r1, r3
 8002f3a:	2010      	movs	r0, #16
 8002f3c:	f7ff fcd8 	bl	80028f0 <eeprom_read>
	}
	*minuteOn = TempMinute;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	701a      	strb	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <EEPROM_ScheduleHourOffRead>:

//
// OFF READ
void EEPROM_ScheduleHourOffRead(uint8_t NrOfSchedule, uint8_t * hourOff)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	6039      	str	r1, [r7, #0]
 8002f58:	71fb      	strb	r3, [r7, #7]
	uint8_t TempHour = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <EEPROM_ScheduleHourOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f64:	f107 030f 	add.w	r3, r7, #15
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	f7ff fcbf 	bl	80028f0 <eeprom_read>
 8002f72:	e009      	b.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d106      	bne.n	8002f88 <EEPROM_ScheduleHourOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &TempHour, sizeof(TempHour));
 8002f7a:	f107 030f 	add.w	r3, r7, #15
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	2011      	movs	r0, #17
 8002f84:	f7ff fcb4 	bl	80028f0 <eeprom_read>
	}

	*hourOff = TempHour;
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]

}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <EEPROM_ScheduleMinuteOffRead>:
void EEPROM_ScheduleMinuteOffRead(uint8_t NrOfSchedule, uint8_t * minuteOff)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	71fb      	strb	r3, [r7, #7]
	uint8_t TempMinute = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]

	if(1 == NrOfSchedule)
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <EEPROM_ScheduleMinuteOffRead+0x26>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fac:	f107 030f 	add.w	r3, r7, #15
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	200b      	movs	r0, #11
 8002fb6:	f7ff fc9b 	bl	80028f0 <eeprom_read>
 8002fba:	e009      	b.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	}
	else if (2 == NrOfSchedule)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d106      	bne.n	8002fd0 <EEPROM_ScheduleMinuteOffRead+0x3a>
	{
		eeprom_read(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &TempMinute, sizeof(TempMinute));
 8002fc2:	f107 030f 	add.w	r3, r7, #15
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2012      	movs	r0, #18
 8002fcc:	f7ff fc90 	bl	80028f0 <eeprom_read>
	}
	*minuteOff = TempMinute;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <EEPROM_ScheduleHourOnUpdate>:

//
// ON UPDATE
void EEPROM_ScheduleHourOnUpdate(uint8_t NrOfSchedule, uint8_t hourOn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOn;
 8002fee:	79bb      	ldrb	r3, [r7, #6]
 8002ff0:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_ON, &NewHour, sizeof(NewHour));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <EEPROM_ScheduleHourOnUpdate+0x2a>
 8002ff8:	f107 030f 	add.w	r3, r7, #15
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4619      	mov	r1, r3
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fc93 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
}
 8003006:	e009      	b.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_ON, &NewHour, sizeof(NewHour));
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d106      	bne.n	800301c <EEPROM_ScheduleHourOnUpdate+0x3e>
 800300e:	f107 030f 	add.w	r3, r7, #15
 8003012:	2201      	movs	r2, #1
 8003014:	4619      	mov	r1, r3
 8003016:	200f      	movs	r0, #15
 8003018:	f7ff fc88 	bl	800292c <eeprom_write>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <EEPROM_ScheduleMinuteOnUpdate>:
void EEPROM_ScheduleMinuteOnUpdate(uint8_t NrOfSchedule, uint8_t minuteOn)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	460a      	mov	r2, r1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	4613      	mov	r3, r2
 8003032:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOn;
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d107      	bne.n	800304e <EEPROM_ScheduleMinuteOnUpdate+0x2a>
 800303e:	f107 030f 	add.w	r3, r7, #15
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	2009      	movs	r0, #9
 8003048:	f7ff fc70 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
}
 800304c:	e009      	b.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_ON, &NewMinute, sizeof(NewMinute));
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d106      	bne.n	8003062 <EEPROM_ScheduleMinuteOnUpdate+0x3e>
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	2201      	movs	r2, #1
 800305a:	4619      	mov	r1, r3
 800305c:	2010      	movs	r0, #16
 800305e:	f7ff fc65 	bl	800292c <eeprom_write>
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <EEPROM_ScheduleHourOffUpdate>:

//
// OFF UPDATE
void EEPROM_ScheduleHourOffUpdate(uint8_t NrOfSchedule, uint8_t hourOff)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	460a      	mov	r2, r1
 8003074:	71fb      	strb	r3, [r7, #7]
 8003076:	4613      	mov	r3, r2
 8003078:	71bb      	strb	r3, [r7, #6]
	uint8_t NewHour = hourOff;
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_HOUR_OFF, &NewHour, sizeof(NewHour));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <EEPROM_ScheduleHourOffUpdate+0x2a>
 8003084:	f107 030f 	add.w	r3, r7, #15
 8003088:	2201      	movs	r2, #1
 800308a:	4619      	mov	r1, r3
 800308c:	200a      	movs	r0, #10
 800308e:	f7ff fc4d 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));

}
 8003092:	e009      	b.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_HOUR_OFF, &NewHour, sizeof(NewHour));
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d106      	bne.n	80030a8 <EEPROM_ScheduleHourOffUpdate+0x3e>
 800309a:	f107 030f 	add.w	r3, r7, #15
 800309e:	2201      	movs	r2, #1
 80030a0:	4619      	mov	r1, r3
 80030a2:	2011      	movs	r0, #17
 80030a4:	f7ff fc42 	bl	800292c <eeprom_write>
}
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <EEPROM_ScheduleMinuteOffUpdate>:
void EEPROM_ScheduleMinuteOffUpdate(uint8_t NrOfSchedule, uint8_t minuteOff)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	460a      	mov	r2, r1
 80030ba:	71fb      	strb	r3, [r7, #7]
 80030bc:	4613      	mov	r3, r2
 80030be:	71bb      	strb	r3, [r7, #6]
	uint8_t NewMinute = minuteOff;
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	73fb      	strb	r3, [r7, #15]
	if(1 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_1_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <EEPROM_ScheduleMinuteOffUpdate+0x2a>
 80030ca:	f107 030f 	add.w	r3, r7, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	4619      	mov	r1, r3
 80030d2:	200b      	movs	r0, #11
 80030d4:	f7ff fc2a 	bl	800292c <eeprom_write>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));

}
 80030d8:	e009      	b.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
	else if(2 == NrOfSchedule) eeprom_write(EEPROM_ADR_SHEDULE_2_MINUTE_OFF, &NewMinute, sizeof(NewMinute));
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d106      	bne.n	80030ee <EEPROM_ScheduleMinuteOffUpdate+0x3e>
 80030e0:	f107 030f 	add.w	r3, r7, #15
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	2012      	movs	r0, #18
 80030ea:	f7ff fc1f 	bl	800292c <eeprom_write>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <system_init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Display INITIALIZATION screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t system_init(){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80030fe:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003102:	f7fe fef9 	bl	8001ef8 <ILI9341_ClearDisplay>
	  //
	  // Draw Image with LOGO
	  ILI9341_DrawImage(30, 50, logo, 240, 140);
 8003106:	238c      	movs	r3, #140	; 0x8c
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23f0      	movs	r3, #240	; 0xf0
 800310c:	4aab      	ldr	r2, [pc, #684]	; (80033bc <system_init+0x2c4>)
 800310e:	2132      	movs	r1, #50	; 0x32
 8003110:	201e      	movs	r0, #30
 8003112:	f7fe fec6 	bl	8001ea2 <ILI9341_DrawImage>

	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003116:	48aa      	ldr	r0, [pc, #680]	; (80033c0 <system_init+0x2c8>)
 8003118:	f7fe faea 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "Inicjalizacja...");
 800311c:	49a9      	ldr	r1, [pc, #676]	; (80033c4 <system_init+0x2cc>)
 800311e:	48aa      	ldr	r0, [pc, #680]	; (80033c8 <system_init+0x2d0>)
 8003120:	f00d ffec 	bl	80110fc <siprintf>
	  EF_PutString(Msg, 60, 10, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003124:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	220a      	movs	r2, #10
 8003132:	213c      	movs	r1, #60	; 0x3c
 8003134:	48a4      	ldr	r0, [pc, #656]	; (80033c8 <system_init+0x2d0>)
 8003136:	f7fe fcf5 	bl	8001b24 <EF_PutString>

	  //
	  // Draw Rectangle to indicate progress of INITIALIZATION
	  LastTime = HAL_GetTick();
 800313a:	f006 fc17 	bl	800996c <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	4aa2      	ldr	r2, [pc, #648]	; (80033cc <system_init+0x2d4>)
 8003142:	6013      	str	r3, [r2, #0]
	  GFX_DrawRoundRectangle(60, 190, 20, 20, 5, ILI9341_RED);
 8003144:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2305      	movs	r3, #5
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2314      	movs	r3, #20
 8003150:	2214      	movs	r2, #20
 8003152:	21be      	movs	r1, #190	; 0xbe
 8003154:	203c      	movs	r0, #60	; 0x3c
 8003156:	f7fe f9fd 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(90, 190, 20, 20, 5, ILI9341_RED);
 800315a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2305      	movs	r3, #5
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2314      	movs	r3, #20
 8003166:	2214      	movs	r2, #20
 8003168:	21be      	movs	r1, #190	; 0xbe
 800316a:	205a      	movs	r0, #90	; 0x5a
 800316c:	f7fe f9f2 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(120, 190, 20, 20, 5, ILI9341_RED);
 8003170:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2305      	movs	r3, #5
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2314      	movs	r3, #20
 800317c:	2214      	movs	r2, #20
 800317e:	21be      	movs	r1, #190	; 0xbe
 8003180:	2078      	movs	r0, #120	; 0x78
 8003182:	f7fe f9e7 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(150, 190, 20, 20, 5, ILI9341_RED);
 8003186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2305      	movs	r3, #5
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2314      	movs	r3, #20
 8003192:	2214      	movs	r2, #20
 8003194:	21be      	movs	r1, #190	; 0xbe
 8003196:	2096      	movs	r0, #150	; 0x96
 8003198:	f7fe f9dc 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(180, 190, 20, 20, 5, ILI9341_RED);
 800319c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2305      	movs	r3, #5
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2314      	movs	r3, #20
 80031a8:	2214      	movs	r2, #20
 80031aa:	21be      	movs	r1, #190	; 0xbe
 80031ac:	20b4      	movs	r0, #180	; 0xb4
 80031ae:	f7fe f9d1 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(210, 190, 20, 20, 5, ILI9341_RED);
 80031b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2305      	movs	r3, #5
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2314      	movs	r3, #20
 80031be:	2214      	movs	r2, #20
 80031c0:	21be      	movs	r1, #190	; 0xbe
 80031c2:	20d2      	movs	r0, #210	; 0xd2
 80031c4:	f7fe f9c6 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(240, 190, 20, 20, 5, ILI9341_RED);
 80031c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2305      	movs	r3, #5
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2314      	movs	r3, #20
 80031d4:	2214      	movs	r2, #20
 80031d6:	21be      	movs	r1, #190	; 0xbe
 80031d8:	20f0      	movs	r0, #240	; 0xf0
 80031da:	f7fe f9bb 	bl	8001554 <GFX_DrawRoundRectangle>
	  LastTime = HAL_GetTick();
 80031de:	f006 fbc5 	bl	800996c <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a79      	ldr	r2, [pc, #484]	; (80033cc <system_init+0x2d4>)
 80031e6:	6013      	str	r3, [r2, #0]
	  EF_SetFont(&arial_11ptFontInfo);
 80031e8:	4879      	ldr	r0, [pc, #484]	; (80033d0 <system_init+0x2d8>)
 80031ea:	f7fe fa81 	bl	80016f0 <EF_SetFont>
	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80031ee:	20c8      	movs	r0, #200	; 0xc8
 80031f0:	f002 f8e0 	bl	80053b4 <initWait>
	  	  LastTime = HAL_GetTick();
 80031f4:	f006 fbba 	bl	800996c <HAL_GetTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a74      	ldr	r2, [pc, #464]	; (80033cc <system_init+0x2d4>)
 80031fc:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//First step of initialization
//
	  GFX_DrawFillRoundRectangle(60, 190, 20, 20, 5, ILI9341_GREEN);
 80031fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2305      	movs	r3, #5
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	2314      	movs	r3, #20
 800320a:	2214      	movs	r2, #20
 800320c:	21be      	movs	r1, #190	; 0xbe
 800320e:	203c      	movs	r0, #60	; 0x3c
 8003210:	f7fe fa1d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)); // read number of leds
 8003214:	2201      	movs	r2, #1
 8003216:	496f      	ldr	r1, [pc, #444]	; (80033d4 <system_init+0x2dc>)
 8003218:	2001      	movs	r0, #1
 800321a:	f7ff fb69 	bl	80028f0 <eeprom_read>
	  	  SendComand(UCMD_WS_NUMBER_LED); // Send number of LEDs
 800321e:	2025      	movs	r0, #37	; 0x25
 8003220:	f005 fb9e 	bl	8008960 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003224:	486c      	ldr	r0, [pc, #432]	; (80033d8 <system_init+0x2e0>)
 8003226:	f006 f9b1 	bl	800958c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o ledach...    ");
 800322a:	496c      	ldr	r1, [pc, #432]	; (80033dc <system_init+0x2e4>)
 800322c:	4866      	ldr	r0, [pc, #408]	; (80033c8 <system_init+0x2d0>)
 800322e:	f00d ff65 	bl	80110fc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003232:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	2301      	movs	r3, #1
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	22dc      	movs	r2, #220	; 0xdc
 8003240:	2114      	movs	r1, #20
 8003242:	4861      	ldr	r0, [pc, #388]	; (80033c8 <system_init+0x2d0>)
 8003244:	f7fe fc6e 	bl	8001b24 <EF_PutString>
	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003248:	20c8      	movs	r0, #200	; 0xc8
 800324a:	f002 f8b3 	bl	80053b4 <initWait>
	  	  	  LastTime = HAL_GetTick();
 800324e:	f006 fb8d 	bl	800996c <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4a5d      	ldr	r2, [pc, #372]	; (80033cc <system_init+0x2d4>)
 8003256:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Second step of initialization
//
	  GFX_DrawFillRoundRectangle(90, 190, 20, 20, 5, ILI9341_GREEN);
 8003258:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2305      	movs	r3, #5
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2314      	movs	r3, #20
 8003264:	2214      	movs	r2, #20
 8003266:	21be      	movs	r1, #190	; 0xbe
 8003268:	205a      	movs	r0, #90	; 0x5a
 800326a:	f7fe f9f0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_TEMP_2);	// ASK for current temperature inside
 800326e:	201b      	movs	r0, #27
 8003270:	f005 fb76 	bl	8008960 <SendComand>
  	  	  EEPROM_RelayStateRestore(); // Restore state of relay to state before power off, from EEPROM memory
 8003274:	f7ff fc62 	bl	8002b3c <EEPROM_RelayStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 8003278:	4857      	ldr	r0, [pc, #348]	; (80033d8 <system_init+0x2e0>)
 800327a:	f006 f987 	bl	800958c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o przekaźnikach...  ");
 800327e:	4958      	ldr	r1, [pc, #352]	; (80033e0 <system_init+0x2e8>)
 8003280:	4851      	ldr	r0, [pc, #324]	; (80033c8 <system_init+0x2d0>)
 8003282:	f00d ff3b 	bl	80110fc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003286:	f24c 6318 	movw	r3, #50712	; 0xc618
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2301      	movs	r3, #1
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	22dc      	movs	r2, #220	; 0xdc
 8003294:	2114      	movs	r1, #20
 8003296:	484c      	ldr	r0, [pc, #304]	; (80033c8 <system_init+0x2d0>)
 8003298:	f7fe fc44 	bl	8001b24 <EF_PutString>
  	  	  	  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800329c:	20c8      	movs	r0, #200	; 0xc8
 800329e:	f002 f889 	bl	80053b4 <initWait>
  	  	  	  LastTime = HAL_GetTick();
 80032a2:	f006 fb63 	bl	800996c <HAL_GetTick>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a48      	ldr	r2, [pc, #288]	; (80033cc <system_init+0x2d4>)
 80032aa:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Third step of initialization
//
	  GFX_DrawFillRoundRectangle(120, 190, 20, 20, 5, ILI9341_GREEN);
 80032ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032b0:	9301      	str	r3, [sp, #4]
 80032b2:	2305      	movs	r3, #5
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2314      	movs	r3, #20
 80032b8:	2214      	movs	r2, #20
 80032ba:	21be      	movs	r1, #190	; 0xbe
 80032bc:	2078      	movs	r0, #120	; 0x78
 80032be:	f7fe f9c6 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_PRES_1);	// ASK for current pressure
 80032c2:	2004      	movs	r0, #4
 80032c4:	f005 fb4c 	bl	8008960 <SendComand>

			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 80032c8:	20c8      	movs	r0, #200	; 0xc8
 80032ca:	f002 f873 	bl	80053b4 <initWait>
			  LastTime = HAL_GetTick();
 80032ce:	f006 fb4d 	bl	800996c <HAL_GetTick>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <system_init+0x2d4>)
 80032d6:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fourth step of initialization
//
	  GFX_DrawFillRoundRectangle(150, 190, 20, 20, 5, ILI9341_GREEN);
 80032d8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	2305      	movs	r3, #5
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	2314      	movs	r3, #20
 80032e4:	2214      	movs	r2, #20
 80032e6:	21be      	movs	r1, #190	; 0xbe
 80032e8:	2096      	movs	r0, #150	; 0x96
 80032ea:	f7fe f9b0 	bl	800164e <GFX_DrawFillRoundRectangle>
  	  	  EEPROM_LightStateRestore(); // Restore state of lights to state before power off, from EEPROM memory
 80032ee:	f7ff fc5d 	bl	8002bac <EEPROM_LightStateRestore>
  	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 80032f2:	4839      	ldr	r0, [pc, #228]	; (80033d8 <system_init+0x2e0>)
 80032f4:	f006 f94a 	bl	800958c <UARTDMA_TransmitEvent>

		  sprintf((char*)Msg, "Akt. inf. o światlach...    ");
 80032f8:	493a      	ldr	r1, [pc, #232]	; (80033e4 <system_init+0x2ec>)
 80032fa:	4833      	ldr	r0, [pc, #204]	; (80033c8 <system_init+0x2d0>)
 80032fc:	f00d fefe 	bl	80110fc <siprintf>
		  EF_PutString(Msg, 20, 220, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003300:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	2301      	movs	r3, #1
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	22dc      	movs	r2, #220	; 0xdc
 800330e:	2114      	movs	r1, #20
 8003310:	482d      	ldr	r0, [pc, #180]	; (80033c8 <system_init+0x2d0>)
 8003312:	f7fe fc07 	bl	8001b24 <EF_PutString>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003316:	20c8      	movs	r0, #200	; 0xc8
 8003318:	f002 f84c 	bl	80053b4 <initWait>
			  LastTime = HAL_GetTick();
 800331c:	f006 fb26 	bl	800996c <HAL_GetTick>
 8003320:	4603      	mov	r3, r0
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <system_init+0x2d4>)
 8003324:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(180, 190, 20, 20, 5, ILI9341_GREEN);
 8003326:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	2305      	movs	r3, #5
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	2314      	movs	r3, #20
 8003332:	2214      	movs	r2, #20
 8003334:	21be      	movs	r1, #190	; 0xbe
 8003336:	20b4      	movs	r0, #180	; 0xb4
 8003338:	f7fe f989 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  	  SendComand(UCMD_TEMP_1);	// ASK for current temperature outside
 800333c:	2003      	movs	r0, #3
 800333e:	f005 fb0f 	bl	8008960 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 8003342:	20c8      	movs	r0, #200	; 0xc8
 8003344:	f002 f836 	bl	80053b4 <initWait>
			  LastTime = HAL_GetTick();
 8003348:	f006 fb10 	bl	800996c <HAL_GetTick>
 800334c:	4603      	mov	r3, r0
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <system_init+0x2d4>)
 8003350:	6013      	str	r3, [r2, #0]

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Sixth step of initialization
//
	  GFX_DrawFillRoundRectangle(210, 190, 20, 20, 5, ILI9341_GREEN);
 8003352:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	2305      	movs	r3, #5
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2314      	movs	r3, #20
 800335e:	2214      	movs	r2, #20
 8003360:	21be      	movs	r1, #190	; 0xbe
 8003362:	20d2      	movs	r0, #210	; 0xd2
 8003364:	f7fe f973 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003368:	2015      	movs	r0, #21
 800336a:	f005 faf9 	bl	8008960 <SendComand>
			  initWait(ONE_MODULE_INIT_TIME_IN_MS);
 800336e:	20c8      	movs	r0, #200	; 0xc8
 8003370:	f002 f820 	bl	80053b4 <initWait>
			  LastTime = HAL_GetTick();
 8003374:	f006 fafa 	bl	800996c <HAL_GetTick>
 8003378:	4603      	mov	r3, r0
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <system_init+0x2d4>)
 800337c:	6013      	str	r3, [r2, #0]
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Fifth step of initialization
//
	  GFX_DrawFillRoundRectangle(240, 190, 20, 20, 5, ILI9341_GREEN);
 800337e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2305      	movs	r3, #5
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2314      	movs	r3, #20
 800338a:	2214      	movs	r2, #20
 800338c:	21be      	movs	r1, #190	; 0xbe
 800338e:	20f0      	movs	r0, #240	; 0xf0
 8003390:	f7fe f95d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003394:	2016      	movs	r0, #22
 8003396:	f005 fae3 	bl	8008960 <SendComand>
	  	  UARTDMA_TransmitEvent(&huartdma2); // TRANSMIT
 800339a:	480f      	ldr	r0, [pc, #60]	; (80033d8 <system_init+0x2e0>)
 800339c:	f006 f8f6 	bl	800958c <UARTDMA_TransmitEvent>
			  initWait(2*ONE_MODULE_INIT_TIME_IN_MS);
 80033a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80033a4:	f002 f806 	bl	80053b4 <initWait>
			  LastTime = HAL_GetTick();
 80033a8:	f006 fae0 	bl	800996c <HAL_GetTick>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <system_init+0x2d4>)
 80033b0:	6013      	str	r3, [r2, #0]

	  return 1; // TODO! DODAĆ SPRAWDZENIE POPRAWNOŚCI INICJALIZACJI I ZWRÓCENIE 1 / 0
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	080180e4 	.word	0x080180e4
 80033c0:	08018068 	.word	0x08018068
 80033c4:	08014d48 	.word	0x08014d48
 80033c8:	200002fc 	.word	0x200002fc
 80033cc:	20000250 	.word	0x20000250
 80033d0:	080160f0 	.word	0x080160f0
 80033d4:	20000033 	.word	0x20000033
 80033d8:	200004a4 	.word	0x200004a4
 80033dc:	08014d5c 	.word	0x08014d5c
 80033e0:	08014d78 	.word	0x08014d78
 80033e4:	08014d98 	.word	0x08014d98

080033e8 <showCurrentParameters>:
//
// Display current PARAMETERS screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showCurrentParameters(float temp_zew, float temp_wew, uint8_t * TimeTab, uint8_t water_lvl, float presure)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80033f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	460b      	mov	r3, r1
 80033fa:	ed87 1a01 	vstr	s2, [r7, #4]
 80033fe:	72fb      	strb	r3, [r7, #11]
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003400:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003404:	f7fe fd78 	bl	8001ef8 <ILI9341_ClearDisplay>
	  SendComand(UCMD_TEMP_1);
 8003408:	2003      	movs	r0, #3
 800340a:	f005 faa9 	bl	8008960 <SendComand>
	  SendComand(UCMD_PRES_1);
 800340e:	2004      	movs	r0, #4
 8003410:	f005 faa6 	bl	8008960 <SendComand>
	  SendComand(UCMD_TEMP_2);
 8003414:	201b      	movs	r0, #27
 8003416:	f005 faa3 	bl	8008960 <SendComand>

	  uint8_t CHour = DS3231_GetHour();
 800341a:	f7ff f9bb 	bl	8002794 <DS3231_GetHour>
 800341e:	4603      	mov	r3, r0
 8003420:	77fb      	strb	r3, [r7, #31]
	  uint8_t CMinute = DS3231_GetMinute();
 8003422:	f7ff f9c3 	bl	80027ac <DS3231_GetMinute>
 8003426:	4603      	mov	r3, r0
 8003428:	77bb      	strb	r3, [r7, #30]


	  EF_SetFont(&arialBlack_20ptFontInfo);
 800342a:	4881      	ldr	r0, [pc, #516]	; (8003630 <showCurrentParameters+0x248>)
 800342c:	f7fe f960 	bl	80016f0 <EF_SetFont>

	  //
	  // Display HEADER
	  sprintf((char*)Msg, "-=PARAMETRY=-");
 8003430:	4980      	ldr	r1, [pc, #512]	; (8003634 <showCurrentParameters+0x24c>)
 8003432:	4881      	ldr	r0, [pc, #516]	; (8003638 <showCurrentParameters+0x250>)
 8003434:	f00d fe62 	bl	80110fc <siprintf>
	  EF_PutString(Msg, PARAMETRY_STRING_POZ_X, PARAMETRY_STRING_POZ_Y, ILI9341_DARKCYAN, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003438:	f24c 6318 	movw	r3, #50712	; 0xc618
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2300      	movs	r3, #0
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003446:	220a      	movs	r2, #10
 8003448:	212f      	movs	r1, #47	; 0x2f
 800344a:	487b      	ldr	r0, [pc, #492]	; (8003638 <showCurrentParameters+0x250>)
 800344c:	f7fe fb6a 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003450:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2329      	movs	r3, #41	; 0x29
 8003458:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800345c:	2129      	movs	r1, #41	; 0x29
 800345e:	2000      	movs	r0, #0
 8003460:	f7fd fe96 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003464:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	232b      	movs	r3, #43	; 0x2b
 800346c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003470:	212b      	movs	r1, #43	; 0x2b
 8003472:	2000      	movs	r0, #0
 8003474:	f7fd fe8c 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display PARAMETERS
	  if ((CHour<10)&&(CMinute<10)) sprintf((char*)Msg, "Czas: 0%d : 0%d", CHour, CMinute);
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	2b09      	cmp	r3, #9
 800347c:	d809      	bhi.n	8003492 <showCurrentParameters+0xaa>
 800347e:	7fbb      	ldrb	r3, [r7, #30]
 8003480:	2b09      	cmp	r3, #9
 8003482:	d806      	bhi.n	8003492 <showCurrentParameters+0xaa>
 8003484:	7ffa      	ldrb	r2, [r7, #31]
 8003486:	7fbb      	ldrb	r3, [r7, #30]
 8003488:	496c      	ldr	r1, [pc, #432]	; (800363c <showCurrentParameters+0x254>)
 800348a:	486b      	ldr	r0, [pc, #428]	; (8003638 <showCurrentParameters+0x250>)
 800348c:	f00d fe36 	bl	80110fc <siprintf>
 8003490:	e019      	b.n	80034c6 <showCurrentParameters+0xde>
	  else if(CHour<10)	sprintf((char*)Msg, "Czas: 0%d : %d", CHour, CMinute);
 8003492:	7ffb      	ldrb	r3, [r7, #31]
 8003494:	2b09      	cmp	r3, #9
 8003496:	d806      	bhi.n	80034a6 <showCurrentParameters+0xbe>
 8003498:	7ffa      	ldrb	r2, [r7, #31]
 800349a:	7fbb      	ldrb	r3, [r7, #30]
 800349c:	4968      	ldr	r1, [pc, #416]	; (8003640 <showCurrentParameters+0x258>)
 800349e:	4866      	ldr	r0, [pc, #408]	; (8003638 <showCurrentParameters+0x250>)
 80034a0:	f00d fe2c 	bl	80110fc <siprintf>
 80034a4:	e00f      	b.n	80034c6 <showCurrentParameters+0xde>
	  else if(CMinute<10) sprintf((char*)Msg, "Czas: %d : 0%d", CHour, CMinute);
 80034a6:	7fbb      	ldrb	r3, [r7, #30]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d806      	bhi.n	80034ba <showCurrentParameters+0xd2>
 80034ac:	7ffa      	ldrb	r2, [r7, #31]
 80034ae:	7fbb      	ldrb	r3, [r7, #30]
 80034b0:	4964      	ldr	r1, [pc, #400]	; (8003644 <showCurrentParameters+0x25c>)
 80034b2:	4861      	ldr	r0, [pc, #388]	; (8003638 <showCurrentParameters+0x250>)
 80034b4:	f00d fe22 	bl	80110fc <siprintf>
 80034b8:	e005      	b.n	80034c6 <showCurrentParameters+0xde>
	  else sprintf((char*)Msg, "Czas: %d : %d", CHour, CMinute);
 80034ba:	7ffa      	ldrb	r2, [r7, #31]
 80034bc:	7fbb      	ldrb	r3, [r7, #30]
 80034be:	4962      	ldr	r1, [pc, #392]	; (8003648 <showCurrentParameters+0x260>)
 80034c0:	485d      	ldr	r0, [pc, #372]	; (8003638 <showCurrentParameters+0x250>)
 80034c2:	f00d fe1b 	bl	80110fc <siprintf>
	  EF_PutString(Msg, CZAS_POZ_X, CZAS_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80034c6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2300      	movs	r3, #0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	2232      	movs	r2, #50	; 0x32
 80034d4:	2114      	movs	r1, #20
 80034d6:	4858      	ldr	r0, [pc, #352]	; (8003638 <showCurrentParameters+0x250>)
 80034d8:	f7fe fb24 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. zewn: %.2f`C", CTemp);
 80034dc:	4b5b      	ldr	r3, [pc, #364]	; (800364c <showCurrentParameters+0x264>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f849 	bl	8000578 <__aeabi_f2d>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4959      	ldr	r1, [pc, #356]	; (8003650 <showCurrentParameters+0x268>)
 80034ec:	4852      	ldr	r0, [pc, #328]	; (8003638 <showCurrentParameters+0x250>)
 80034ee:	f00d fe05 	bl	80110fc <siprintf>
	  EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80034f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	2301      	movs	r3, #1
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	2250      	movs	r2, #80	; 0x50
 8003500:	2114      	movs	r1, #20
 8003502:	484d      	ldr	r0, [pc, #308]	; (8003638 <showCurrentParameters+0x250>)
 8003504:	f7fe fb0e 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Temp. wewn: %.2f`C", CTempWew);
 8003508:	4b52      	ldr	r3, [pc, #328]	; (8003654 <showCurrentParameters+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f833 	bl	8000578 <__aeabi_f2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4950      	ldr	r1, [pc, #320]	; (8003658 <showCurrentParameters+0x270>)
 8003518:	4847      	ldr	r0, [pc, #284]	; (8003638 <showCurrentParameters+0x250>)
 800351a:	f00d fdef 	bl	80110fc <siprintf>
	  EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800351e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2300      	movs	r3, #0
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2300      	movs	r3, #0
 800352a:	226e      	movs	r2, #110	; 0x6e
 800352c:	2114      	movs	r1, #20
 800352e:	4842      	ldr	r0, [pc, #264]	; (8003638 <showCurrentParameters+0x250>)
 8003530:	f7fe faf8 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Poz. wody: -%ldmm", CDist2water);
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <showCurrentParameters+0x274>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4949      	ldr	r1, [pc, #292]	; (8003660 <showCurrentParameters+0x278>)
 800353c:	483e      	ldr	r0, [pc, #248]	; (8003638 <showCurrentParameters+0x250>)
 800353e:	f00d fddd 	bl	80110fc <siprintf>
	  EF_PutString(Msg, POZ_WODY_POZ_X, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003542:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	2300      	movs	r3, #0
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2300      	movs	r3, #0
 800354e:	228c      	movs	r2, #140	; 0x8c
 8003550:	2114      	movs	r1, #20
 8003552:	4839      	ldr	r0, [pc, #228]	; (8003638 <showCurrentParameters+0x250>)
 8003554:	f7fe fae6 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <showCurrentParameters+0x27c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd f80b 	bl	8000578 <__aeabi_f2d>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4940      	ldr	r1, [pc, #256]	; (8003668 <showCurrentParameters+0x280>)
 8003568:	4833      	ldr	r0, [pc, #204]	; (8003638 <showCurrentParameters+0x250>)
 800356a:	f00d fdc7 	bl	80110fc <siprintf>
	  EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800356e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2300      	movs	r3, #0
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	2300      	movs	r3, #0
 800357a:	22aa      	movs	r2, #170	; 0xaa
 800357c:	2114      	movs	r1, #20
 800357e:	482e      	ldr	r0, [pc, #184]	; (8003638 <showCurrentParameters+0x250>)
 8003580:	f7fe fad0 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003584:	4839      	ldr	r0, [pc, #228]	; (800366c <showCurrentParameters+0x284>)
 8003586:	f7fe f8b3 	bl	80016f0 <EF_SetFont>
	  // Right button
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800358a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	2305      	movs	r3, #5
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2314      	movs	r3, #20
 8003596:	225f      	movs	r2, #95	; 0x5f
 8003598:	21d8      	movs	r1, #216	; 0xd8
 800359a:	20dc      	movs	r0, #220	; 0xdc
 800359c:	f7fe f857 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "CONTROL=>");
 80035a0:	4933      	ldr	r1, [pc, #204]	; (8003670 <showCurrentParameters+0x288>)
 80035a2:	4825      	ldr	r0, [pc, #148]	; (8003638 <showCurrentParameters+0x250>)
 80035a4:	f00d fdaa 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	22da      	movs	r2, #218	; 0xda
 80035b6:	21df      	movs	r1, #223	; 0xdf
 80035b8:	481f      	ldr	r0, [pc, #124]	; (8003638 <showCurrentParameters+0x250>)
 80035ba:	f7fe fab3 	bl	8001b24 <EF_PutString>
	  // Left button
	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80035be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2305      	movs	r3, #5
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2314      	movs	r3, #20
 80035ca:	2264      	movs	r2, #100	; 0x64
 80035cc:	21d8      	movs	r1, #216	; 0xd8
 80035ce:	200a      	movs	r0, #10
 80035d0:	f7fe f83d 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=LIGHTS");
 80035d4:	4927      	ldr	r1, [pc, #156]	; (8003674 <showCurrentParameters+0x28c>)
 80035d6:	4818      	ldr	r0, [pc, #96]	; (8003638 <showCurrentParameters+0x250>)
 80035d8:	f00d fd90 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80035dc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	22da      	movs	r2, #218	; 0xda
 80035ea:	2114      	movs	r1, #20
 80035ec:	4812      	ldr	r0, [pc, #72]	; (8003638 <showCurrentParameters+0x250>)
 80035ee:	f7fe fa99 	bl	8001b24 <EF_PutString>
	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80035f2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2305      	movs	r3, #5
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2314      	movs	r3, #20
 80035fe:	225a      	movs	r2, #90	; 0x5a
 8003600:	21d8      	movs	r1, #216	; 0xd8
 8003602:	2078      	movs	r0, #120	; 0x78
 8003604:	f7fe f823 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">CLOCK<");
 8003608:	491b      	ldr	r1, [pc, #108]	; (8003678 <showCurrentParameters+0x290>)
 800360a:	480b      	ldr	r0, [pc, #44]	; (8003638 <showCurrentParameters+0x250>)
 800360c:	f00d fd76 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 12), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003610:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2300      	movs	r3, #0
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	22da      	movs	r2, #218	; 0xda
 800361e:	2184      	movs	r1, #132	; 0x84
 8003620:	4805      	ldr	r0, [pc, #20]	; (8003638 <showCurrentParameters+0x250>)
 8003622:	f7fe fa7f 	bl	8001b24 <EF_PutString>
}
 8003626:	bf00      	nop
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08018068 	.word	0x08018068
 8003634:	08014db8 	.word	0x08014db8
 8003638:	200002fc 	.word	0x200002fc
 800363c:	08014dc8 	.word	0x08014dc8
 8003640:	08014dd8 	.word	0x08014dd8
 8003644:	08014de8 	.word	0x08014de8
 8003648:	08014df8 	.word	0x08014df8
 800364c:	20000294 	.word	0x20000294
 8003650:	08014e08 	.word	0x08014e08
 8003654:	200002a0 	.word	0x200002a0
 8003658:	08014e1c 	.word	0x08014e1c
 800365c:	200002a4 	.word	0x200002a4
 8003660:	08014e30 	.word	0x08014e30
 8003664:	2000029c 	.word	0x2000029c
 8003668:	08014e44 	.word	0x08014e44
 800366c:	080160f0 	.word	0x080160f0
 8003670:	08014e5c 	.word	0x08014e5c
 8003674:	08014e68 	.word	0x08014e68
 8003678:	08014e74 	.word	0x08014e74

0800367c <showControlPanel>:
//
// Display control panel to change SWITCH STATE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showControlPanel()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af02      	add	r7, sp, #8
	  SendComand(UCMD_RELAY_SCHOW_ALL); // ASK for current relay state
 8003682:	2015      	movs	r0, #21
 8003684:	f005 f96c 	bl	8008960 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003688:	f24c 6018 	movw	r0, #50712	; 0xc618
 800368c:	f7fe fc34 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003690:	485c      	ldr	r0, [pc, #368]	; (8003804 <showControlPanel+0x188>)
 8003692:	f7fe f82d 	bl	80016f0 <EF_SetFont>

	  // Display HEADER
	  sprintf((char*)Msg, "-=PRZEŁĄCZNIKI=-");
 8003696:	495c      	ldr	r1, [pc, #368]	; (8003808 <showControlPanel+0x18c>)
 8003698:	485c      	ldr	r0, [pc, #368]	; (800380c <showControlPanel+0x190>)
 800369a:	f00d fd2f 	bl	80110fc <siprintf>
	  EF_PutString(Msg, PRZELACZNIKI_STRING_POZ_X, PRZELACZNIKI_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800369e:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2300      	movs	r3, #0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	231f      	movs	r3, #31
 80036aa:	220a      	movs	r2, #10
 80036ac:	2123      	movs	r1, #35	; 0x23
 80036ae:	4857      	ldr	r0, [pc, #348]	; (800380c <showControlPanel+0x190>)
 80036b0:	f7fe fa38 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 80036b4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2329      	movs	r3, #41	; 0x29
 80036bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036c0:	2129      	movs	r1, #41	; 0x29
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fd fd64 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 80036c8:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	232b      	movs	r3, #43	; 0x2b
 80036d0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036d4:	212b      	movs	r1, #43	; 0x2b
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7fd fd5a 	bl	8001190 <GFX_DrawLine>

	  //
	  // Display Strings with name of SWITCH
	  sprintf((char*)Msg, "PRZEŁĄCZNIK 1:");
 80036dc:	494c      	ldr	r1, [pc, #304]	; (8003810 <showControlPanel+0x194>)
 80036de:	484b      	ldr	r0, [pc, #300]	; (800380c <showControlPanel+0x190>)
 80036e0:	f00d fd0c 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80036e4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2300      	movs	r3, #0
 80036f0:	223c      	movs	r2, #60	; 0x3c
 80036f2:	2114      	movs	r1, #20
 80036f4:	4845      	ldr	r0, [pc, #276]	; (800380c <showControlPanel+0x190>)
 80036f6:	f7fe fa15 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 2:");
 80036fa:	4946      	ldr	r1, [pc, #280]	; (8003814 <showControlPanel+0x198>)
 80036fc:	4843      	ldr	r0, [pc, #268]	; (800380c <showControlPanel+0x190>)
 80036fe:	f00d fcfd 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003702:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2301      	movs	r3, #1
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	2300      	movs	r3, #0
 800370e:	225a      	movs	r2, #90	; 0x5a
 8003710:	2114      	movs	r1, #20
 8003712:	483e      	ldr	r0, [pc, #248]	; (800380c <showControlPanel+0x190>)
 8003714:	f7fe fa06 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 3:");
 8003718:	493f      	ldr	r1, [pc, #252]	; (8003818 <showControlPanel+0x19c>)
 800371a:	483c      	ldr	r0, [pc, #240]	; (800380c <showControlPanel+0x190>)
 800371c:	f00d fcee 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003720:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	2278      	movs	r2, #120	; 0x78
 800372e:	2114      	movs	r1, #20
 8003730:	4836      	ldr	r0, [pc, #216]	; (800380c <showControlPanel+0x190>)
 8003732:	f7fe f9f7 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "PRZEŁĄCZNIK 4:");
 8003736:	4939      	ldr	r1, [pc, #228]	; (800381c <showControlPanel+0x1a0>)
 8003738:	4834      	ldr	r0, [pc, #208]	; (800380c <showControlPanel+0x190>)
 800373a:	f00d fcdf 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_SWITCH_POZ_X, STRING_SWITCH_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800373e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2300      	movs	r3, #0
 800374a:	2296      	movs	r2, #150	; 0x96
 800374c:	2114      	movs	r1, #20
 800374e:	482f      	ldr	r0, [pc, #188]	; (800380c <showControlPanel+0x190>)
 8003750:	f7fe f9e8 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8003754:	4832      	ldr	r0, [pc, #200]	; (8003820 <showControlPanel+0x1a4>)
 8003756:	f7fd ffcb 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800375a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	2305      	movs	r3, #5
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2314      	movs	r3, #20
 8003766:	225f      	movs	r2, #95	; 0x5f
 8003768:	21d8      	movs	r1, #216	; 0xd8
 800376a:	20dc      	movs	r0, #220	; 0xdc
 800376c:	f7fd ff6f 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "LIGHTS=>");
 8003770:	492c      	ldr	r1, [pc, #176]	; (8003824 <showControlPanel+0x1a8>)
 8003772:	4826      	ldr	r0, [pc, #152]	; (800380c <showControlPanel+0x190>)
 8003774:	f00d fcc2 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 3), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003778:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	22da      	movs	r2, #218	; 0xda
 8003786:	21df      	movs	r1, #223	; 0xdf
 8003788:	4820      	ldr	r0, [pc, #128]	; (800380c <showControlPanel+0x190>)
 800378a:	f7fe f9cb 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 800378e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2305      	movs	r3, #5
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2314      	movs	r3, #20
 800379a:	2264      	movs	r2, #100	; 0x64
 800379c:	21d8      	movs	r1, #216	; 0xd8
 800379e:	200a      	movs	r0, #10
 80037a0:	f7fd ff55 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=PARAM");
 80037a4:	4920      	ldr	r1, [pc, #128]	; (8003828 <showControlPanel+0x1ac>)
 80037a6:	4819      	ldr	r0, [pc, #100]	; (800380c <showControlPanel+0x190>)
 80037a8:	f00d fca8 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 10), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	22da      	movs	r2, #218	; 0xda
 80037ba:	2114      	movs	r1, #20
 80037bc:	4813      	ldr	r0, [pc, #76]	; (800380c <showControlPanel+0x190>)
 80037be:	f7fe f9b1 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 80037c2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	2305      	movs	r3, #5
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2314      	movs	r3, #20
 80037ce:	225a      	movs	r2, #90	; 0x5a
 80037d0:	21d8      	movs	r1, #216	; 0xd8
 80037d2:	2078      	movs	r0, #120	; 0x78
 80037d4:	f7fd ff3b 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "ACTIVITIES");
 80037d8:	4914      	ldr	r1, [pc, #80]	; (800382c <showControlPanel+0x1b0>)
 80037da:	480c      	ldr	r0, [pc, #48]	; (800380c <showControlPanel+0x190>)
 80037dc:	f00d fc8e 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80037e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	22da      	movs	r2, #218	; 0xda
 80037ee:	217e      	movs	r1, #126	; 0x7e
 80037f0:	4806      	ldr	r0, [pc, #24]	; (800380c <showControlPanel+0x190>)
 80037f2:	f7fe f997 	bl	8001b24 <EF_PutString>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 80037f6:	4803      	ldr	r0, [pc, #12]	; (8003804 <showControlPanel+0x188>)
 80037f8:	f7fd ff7a 	bl	80016f0 <EF_SetFont>


}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08018068 	.word	0x08018068
 8003808:	08014e7c 	.word	0x08014e7c
 800380c:	200002fc 	.word	0x200002fc
 8003810:	08014e90 	.word	0x08014e90
 8003814:	08014ea4 	.word	0x08014ea4
 8003818:	08014eb8 	.word	0x08014eb8
 800381c:	08014ecc 	.word	0x08014ecc
 8003820:	080160f0 	.word	0x080160f0
 8003824:	08014ee0 	.word	0x08014ee0
 8003828:	08014eec 	.word	0x08014eec
 800382c:	08014ef4 	.word	0x08014ef4

08003830 <showLightsControlPanel>:
//
// Display screen to change LIGHTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showLightsControlPanel()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af02      	add	r7, sp, #8
	  SendComand(UCMD_LIGHT_SCHOW_ALL); // ASK for current lights state
 8003836:	2016      	movs	r0, #22
 8003838:	f005 f892 	bl	8008960 <SendComand>

	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 800383c:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003840:	f7fe fb5a 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8003844:	485b      	ldr	r0, [pc, #364]	; (80039b4 <showLightsControlPanel+0x184>)
 8003846:	f7fd ff53 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "-=ŚWIATŁA=-");
 800384a:	495b      	ldr	r1, [pc, #364]	; (80039b8 <showLightsControlPanel+0x188>)
 800384c:	485b      	ldr	r0, [pc, #364]	; (80039bc <showLightsControlPanel+0x18c>)
 800384e:	f00d fc55 	bl	80110fc <siprintf>
	  EF_PutString(Msg, SWIATLA_STRING_POZ_X, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003852:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003860:	220a      	movs	r2, #10
 8003862:	2146      	movs	r1, #70	; 0x46
 8003864:	4855      	ldr	r0, [pc, #340]	; (80039bc <showLightsControlPanel+0x18c>)
 8003866:	f7fe f95d 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 800386a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2329      	movs	r3, #41	; 0x29
 8003872:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003876:	2129      	movs	r1, #41	; 0x29
 8003878:	2000      	movs	r0, #0
 800387a:	f7fd fc89 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 800387e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	232b      	movs	r3, #43	; 0x2b
 8003886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800388a:	212b      	movs	r1, #43	; 0x2b
 800388c:	2000      	movs	r0, #0
 800388e:	f7fd fc7f 	bl	8001190 <GFX_DrawLine>

	  // Display String with name of LIGHT
	  sprintf((char*)Msg, "ŚWIATŁO 1:");
 8003892:	494b      	ldr	r1, [pc, #300]	; (80039c0 <showLightsControlPanel+0x190>)
 8003894:	4849      	ldr	r0, [pc, #292]	; (80039bc <showLightsControlPanel+0x18c>)
 8003896:	f00d fc31 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_1_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 800389a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	2300      	movs	r3, #0
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	223c      	movs	r2, #60	; 0x3c
 80038a8:	2114      	movs	r1, #20
 80038aa:	4844      	ldr	r0, [pc, #272]	; (80039bc <showLightsControlPanel+0x18c>)
 80038ac:	f7fe f93a 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 2:");
 80038b0:	4944      	ldr	r1, [pc, #272]	; (80039c4 <showLightsControlPanel+0x194>)
 80038b2:	4842      	ldr	r0, [pc, #264]	; (80039bc <showLightsControlPanel+0x18c>)
 80038b4:	f00d fc22 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_2_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80038b8:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	2301      	movs	r3, #1
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2300      	movs	r3, #0
 80038c4:	225a      	movs	r2, #90	; 0x5a
 80038c6:	2114      	movs	r1, #20
 80038c8:	483c      	ldr	r0, [pc, #240]	; (80039bc <showLightsControlPanel+0x18c>)
 80038ca:	f7fe f92b 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 3:");
 80038ce:	493e      	ldr	r1, [pc, #248]	; (80039c8 <showLightsControlPanel+0x198>)
 80038d0:	483a      	ldr	r0, [pc, #232]	; (80039bc <showLightsControlPanel+0x18c>)
 80038d2:	f00d fc13 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_3_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038d6:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2300      	movs	r3, #0
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	2278      	movs	r2, #120	; 0x78
 80038e4:	2114      	movs	r1, #20
 80038e6:	4835      	ldr	r0, [pc, #212]	; (80039bc <showLightsControlPanel+0x18c>)
 80038e8:	f7fe f91c 	bl	8001b24 <EF_PutString>

	  sprintf((char*)Msg, "ŚWIATŁO 4:");
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <showLightsControlPanel+0x19c>)
 80038ee:	4833      	ldr	r0, [pc, #204]	; (80039bc <showLightsControlPanel+0x18c>)
 80038f0:	f00d fc04 	bl	80110fc <siprintf>
	  EF_PutString(Msg, STRING_LIGHTS_POZ_X, STRING_LIGHTS_4_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 80038f4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	2296      	movs	r2, #150	; 0x96
 8003902:	2114      	movs	r1, #20
 8003904:	482d      	ldr	r0, [pc, #180]	; (80039bc <showLightsControlPanel+0x18c>)
 8003906:	f7fe f90d 	bl	8001b24 <EF_PutString>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 800390a:	4831      	ldr	r0, [pc, #196]	; (80039d0 <showLightsControlPanel+0x1a0>)
 800390c:	f7fd fef0 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003910:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2305      	movs	r3, #5
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2314      	movs	r3, #20
 800391c:	225f      	movs	r2, #95	; 0x5f
 800391e:	21d8      	movs	r1, #216	; 0xd8
 8003920:	20dc      	movs	r0, #220	; 0xdc
 8003922:	f7fd fe94 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "PARAM=>");
 8003926:	492b      	ldr	r1, [pc, #172]	; (80039d4 <showLightsControlPanel+0x1a4>)
 8003928:	4824      	ldr	r0, [pc, #144]	; (80039bc <showLightsControlPanel+0x18c>)
 800392a:	f00d fbe7 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800392e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	22da      	movs	r2, #218	; 0xda
 800393c:	21e6      	movs	r1, #230	; 0xe6
 800393e:	481f      	ldr	r0, [pc, #124]	; (80039bc <showLightsControlPanel+0x18c>)
 8003940:	f7fe f8f0 	bl	8001b24 <EF_PutString>

	  // Medium button
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003944:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	2305      	movs	r3, #5
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2314      	movs	r3, #20
 8003950:	225a      	movs	r2, #90	; 0x5a
 8003952:	21d8      	movs	r1, #216	; 0xd8
 8003954:	2078      	movs	r0, #120	; 0x78
 8003956:	f7fd fe7a 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, ">WS2812b<");
 800395a:	491f      	ldr	r1, [pc, #124]	; (80039d8 <showLightsControlPanel+0x1a8>)
 800395c:	4817      	ldr	r0, [pc, #92]	; (80039bc <showLightsControlPanel+0x18c>)
 800395e:	f00d fbcd 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003962:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	22da      	movs	r2, #218	; 0xda
 8003970:	217e      	movs	r1, #126	; 0x7e
 8003972:	4812      	ldr	r0, [pc, #72]	; (80039bc <showLightsControlPanel+0x18c>)
 8003974:	f7fe f8d6 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003978:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2305      	movs	r3, #5
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2314      	movs	r3, #20
 8003984:	2264      	movs	r2, #100	; 0x64
 8003986:	21d8      	movs	r1, #216	; 0xd8
 8003988:	200a      	movs	r0, #10
 800398a:	f7fd fe60 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<=CONTROL");
 800398e:	4913      	ldr	r1, [pc, #76]	; (80039dc <showLightsControlPanel+0x1ac>)
 8003990:	480a      	ldr	r0, [pc, #40]	; (80039bc <showLightsControlPanel+0x18c>)
 8003992:	f00d fbb3 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003996:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	22da      	movs	r2, #218	; 0xda
 80039a4:	210d      	movs	r1, #13
 80039a6:	4805      	ldr	r0, [pc, #20]	; (80039bc <showLightsControlPanel+0x18c>)
 80039a8:	f7fe f8bc 	bl	8001b24 <EF_PutString>


}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	08018068 	.word	0x08018068
 80039b8:	08014f00 	.word	0x08014f00
 80039bc:	200002fc 	.word	0x200002fc
 80039c0:	08014f10 	.word	0x08014f10
 80039c4:	08014f20 	.word	0x08014f20
 80039c8:	08014f30 	.word	0x08014f30
 80039cc:	08014f40 	.word	0x08014f40
 80039d0:	080160f0 	.word	0x080160f0
 80039d4:	08014f50 	.word	0x08014f50
 80039d8:	08014f58 	.word	0x08014f58
 80039dc:	08014f64 	.word	0x08014f64

080039e0 <showClockSetPanel>:
//
// Display screen to change current CLOCK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showClockSetPanel()
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 80039e6:	f24c 6018 	movw	r0, #50712	; 0xc618
 80039ea:	f7fe fa85 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 80039ee:	48a2      	ldr	r0, [pc, #648]	; (8003c78 <showClockSetPanel+0x298>)
 80039f0:	f7fd fe7e 	bl	80016f0 <EF_SetFont>

	uint8_t CHour = DS3231_GetHour();
 80039f4:	f7fe fece 	bl	8002794 <DS3231_GetHour>
 80039f8:	4603      	mov	r3, r0
 80039fa:	71fb      	strb	r3, [r7, #7]
	uint8_t CMinute = DS3231_GetMinute();
 80039fc:	f7fe fed6 	bl	80027ac <DS3231_GetMinute>
 8003a00:	4603      	mov	r3, r0
 8003a02:	71bb      	strb	r3, [r7, #6]
	uint8_t CDayOfWeek = DS3231_GetDayOfWeek();
 8003a04:	f7fe feba 	bl	800277c <DS3231_GetDayOfWeek>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	717b      	strb	r3, [r7, #5]

	//
	// Display HEADER string
	sprintf((char*)Msg, "-=SET CLOCK=-");
 8003a0c:	499b      	ldr	r1, [pc, #620]	; (8003c7c <showClockSetPanel+0x29c>)
 8003a0e:	489c      	ldr	r0, [pc, #624]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a10:	f00d fb74 	bl	80110fc <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a14:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a22:	220a      	movs	r2, #10
 8003a24:	212f      	movs	r1, #47	; 0x2f
 8003a26:	4896      	ldr	r0, [pc, #600]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a28:	f7fe f87c 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003a2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2329      	movs	r3, #41	; 0x29
 8003a34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a38:	2129      	movs	r1, #41	; 0x29
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7fd fba8 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003a40:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	232b      	movs	r3, #43	; 0x2b
 8003a48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a4c:	212b      	movs	r1, #43	; 0x2b
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fd fb9e 	bl	8001190 <GFX_DrawLine>

	sprintf((char*)Msg, "GODZINA: %d", CHour);
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	461a      	mov	r2, r3
 8003a58:	498a      	ldr	r1, [pc, #552]	; (8003c84 <showClockSetPanel+0x2a4>)
 8003a5a:	4889      	ldr	r0, [pc, #548]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a5c:	f00d fb4e 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003a60:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2300      	movs	r3, #0
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2246      	movs	r2, #70	; 0x46
 8003a6e:	2114      	movs	r1, #20
 8003a70:	4883      	ldr	r0, [pc, #524]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a72:	f7fe f857 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "MINUTA:   %d", CMinute);
 8003a76:	79bb      	ldrb	r3, [r7, #6]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4983      	ldr	r1, [pc, #524]	; (8003c88 <showClockSetPanel+0x2a8>)
 8003a7c:	4880      	ldr	r0, [pc, #512]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a7e:	f00d fb3d 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003a82:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2301      	movs	r3, #1
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	226e      	movs	r2, #110	; 0x6e
 8003a90:	2114      	movs	r1, #20
 8003a92:	487b      	ldr	r0, [pc, #492]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003a94:	f7fe f846 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "DZIEŃ TYG:  %d", CDayOfWeek);
 8003a98:	797b      	ldrb	r3, [r7, #5]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	497b      	ldr	r1, [pc, #492]	; (8003c8c <showClockSetPanel+0x2ac>)
 8003a9e:	4878      	ldr	r0, [pc, #480]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003aa0:	f00d fb2c 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8003aa4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2296      	movs	r2, #150	; 0x96
 8003ab2:	2114      	movs	r1, #20
 8003ab4:	4872      	ldr	r0, [pc, #456]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003ab6:	f7fe f835 	bl	8001b24 <EF_PutString>

	// Display string on button
	EF_SetFont(&arial_11ptFontInfo);
 8003aba:	4875      	ldr	r0, [pc, #468]	; (8003c90 <showClockSetPanel+0x2b0>)
 8003abc:	f7fd fe18 	bl	80016f0 <EF_SetFont>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003ac0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	2315      	movs	r3, #21
 8003acc:	221e      	movs	r2, #30
 8003ace:	214b      	movs	r1, #75	; 0x4b
 8003ad0:	20f0      	movs	r0, #240	; 0xf0
 8003ad2:	f7fd fdbc 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003ad6:	496f      	ldr	r1, [pc, #444]	; (8003c94 <showClockSetPanel+0x2b4>)
 8003ad8:	4869      	ldr	r0, [pc, #420]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003ada:	f00d fb0f 	bl	80110fc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003ade:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	224d      	movs	r2, #77	; 0x4d
 8003aec:	21f3      	movs	r1, #243	; 0xf3
 8003aee:	4864      	ldr	r0, [pc, #400]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003af0:	f7fe f818 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_1_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003af4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2305      	movs	r3, #5
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2315      	movs	r3, #21
 8003b00:	221e      	movs	r2, #30
 8003b02:	214b      	movs	r1, #75	; 0x4b
 8003b04:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b08:	f7fd fda1 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+6");
 8003b0c:	4962      	ldr	r1, [pc, #392]	; (8003c98 <showClockSetPanel+0x2b8>)
 8003b0e:	485c      	ldr	r0, [pc, #368]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b10:	f00d faf4 	bl	80110fc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X+2), (CLOCK_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b14:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	224d      	movs	r2, #77	; 0x4d
 8003b22:	f240 111d 	movw	r1, #285	; 0x11d
 8003b26:	4856      	ldr	r0, [pc, #344]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b28:	f7fd fffc 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b2c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	2305      	movs	r3, #5
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2315      	movs	r3, #21
 8003b38:	221e      	movs	r2, #30
 8003b3a:	2173      	movs	r1, #115	; 0x73
 8003b3c:	20f0      	movs	r0, #240	; 0xf0
 8003b3e:	f7fd fd86 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003b42:	4954      	ldr	r1, [pc, #336]	; (8003c94 <showClockSetPanel+0x2b4>)
 8003b44:	484e      	ldr	r0, [pc, #312]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b46:	f00d fad9 	bl	80110fc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X+2), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b4a:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2300      	movs	r3, #0
 8003b56:	2275      	movs	r2, #117	; 0x75
 8003b58:	21f5      	movs	r1, #245	; 0xf5
 8003b5a:	4849      	ldr	r0, [pc, #292]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b5c:	f7fd ffe2 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON2_X, CLOCK_B_2_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b60:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2305      	movs	r3, #5
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2315      	movs	r3, #21
 8003b6c:	221e      	movs	r2, #30
 8003b6e:	2173      	movs	r1, #115	; 0x73
 8003b70:	f44f 708c 	mov.w	r0, #280	; 0x118
 8003b74:	f7fd fd6b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003b78:	4948      	ldr	r1, [pc, #288]	; (8003c9c <showClockSetPanel+0x2bc>)
 8003b7a:	4841      	ldr	r0, [pc, #260]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b7c:	f00d fabe 	bl	80110fc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON2_X+STRING_ERRATA_X), (CLOCK_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003b80:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2300      	movs	r3, #0
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2275      	movs	r2, #117	; 0x75
 8003b8e:	f240 111b 	movw	r1, #283	; 0x11b
 8003b92:	483b      	ldr	r0, [pc, #236]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003b94:	f7fd ffc6 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(CLOCK_BUTTON_X, CLOCK_B_3_POZ_Y, CLOCK_BUTTON_W, CLOCK_BUTTON_H, CLOCK_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003b98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2315      	movs	r3, #21
 8003ba4:	221e      	movs	r2, #30
 8003ba6:	219b      	movs	r1, #155	; 0x9b
 8003ba8:	20f0      	movs	r0, #240	; 0xf0
 8003baa:	f7fd fd50 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1D");
 8003bae:	493c      	ldr	r1, [pc, #240]	; (8003ca0 <showClockSetPanel+0x2c0>)
 8003bb0:	4833      	ldr	r0, [pc, #204]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003bb2:	f00d faa3 	bl	80110fc <siprintf>
	EF_PutString(Msg, (CLOCK_BUTTON_X+STRING_ERRATA_X), (CLOCK_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003bb6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	229d      	movs	r2, #157	; 0x9d
 8003bc4:	21f3      	movs	r1, #243	; 0xf3
 8003bc6:	482e      	ldr	r0, [pc, #184]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003bc8:	f7fd ffac 	bl	8001b24 <EF_PutString>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003bcc:	4830      	ldr	r0, [pc, #192]	; (8003c90 <showClockSetPanel+0x2b0>)
 8003bce:	f7fd fd8f 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003bd2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	2305      	movs	r3, #5
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2314      	movs	r3, #20
 8003bde:	225f      	movs	r2, #95	; 0x5f
 8003be0:	21d8      	movs	r1, #216	; 0xd8
 8003be2:	20dc      	movs	r0, #220	; 0xdc
 8003be4:	f7fd fd33 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "CONFIRM");
 8003be8:	492e      	ldr	r1, [pc, #184]	; (8003ca4 <showClockSetPanel+0x2c4>)
 8003bea:	4825      	ldr	r0, [pc, #148]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003bec:	f00d fa86 	bl	80110fc <siprintf>
	EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003bf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	22da      	movs	r2, #218	; 0xda
 8003bfe:	21e6      	movs	r1, #230	; 0xe6
 8003c00:	481f      	ldr	r0, [pc, #124]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003c02:	f7fd ff8f 	bl	8001b24 <EF_PutString>

	// Medium button
	GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_CLOCK_X-30, MEDIUM_BUTTON_CLOCK_Y, MEDIUM_BUTTON_CLOCK_W+60, MEDIUM_BUTTON_H_CLOCK, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8003c06:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2316      	movs	r3, #22
 8003c12:	22aa      	movs	r2, #170	; 0xaa
 8003c14:	21be      	movs	r1, #190	; 0xbe
 8003c16:	2050      	movs	r0, #80	; 0x50
 8003c18:	f7fd fd19 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "HARMONOGRAMY");
 8003c1c:	4922      	ldr	r1, [pc, #136]	; (8003ca8 <showClockSetPanel+0x2c8>)
 8003c1e:	4818      	ldr	r0, [pc, #96]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003c20:	f00d fa6c 	bl	80110fc <siprintf>
	EF_PutString(Msg, (MEDIUM_BUTTON_CLOCK_X -10), (MEDIUM_BUTTON_CLOCK_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	22c1      	movs	r2, #193	; 0xc1
 8003c32:	2164      	movs	r1, #100	; 0x64
 8003c34:	4812      	ldr	r0, [pc, #72]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003c36:	f7fd ff75 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003c3a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2305      	movs	r3, #5
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2314      	movs	r3, #20
 8003c46:	2264      	movs	r2, #100	; 0x64
 8003c48:	21d8      	movs	r1, #216	; 0xd8
 8003c4a:	200a      	movs	r0, #10
 8003c4c:	f7fd fcff 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003c50:	4916      	ldr	r1, [pc, #88]	; (8003cac <showClockSetPanel+0x2cc>)
 8003c52:	480b      	ldr	r0, [pc, #44]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003c54:	f00d fa52 	bl	80110fc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003c58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003c5c:	9301      	str	r3, [sp, #4]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2300      	movs	r3, #0
 8003c64:	22da      	movs	r2, #218	; 0xda
 8003c66:	210d      	movs	r1, #13
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <showClockSetPanel+0x2a0>)
 8003c6a:	f7fd ff5b 	bl	8001b24 <EF_PutString>
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	08018068 	.word	0x08018068
 8003c7c:	08014f70 	.word	0x08014f70
 8003c80:	200002fc 	.word	0x200002fc
 8003c84:	08014f80 	.word	0x08014f80
 8003c88:	08014f8c 	.word	0x08014f8c
 8003c8c:	08014f9c 	.word	0x08014f9c
 8003c90:	080160f0 	.word	0x080160f0
 8003c94:	08014fac 	.word	0x08014fac
 8003c98:	08014fb0 	.word	0x08014fb0
 8003c9c:	08014fb4 	.word	0x08014fb4
 8003ca0:	08014fb8 	.word	0x08014fb8
 8003ca4:	08014fbc 	.word	0x08014fbc
 8003ca8:	08014fc4 	.word	0x08014fc4
 8003cac:	08014fd4 	.word	0x08014fd4

08003cb0 <showPreparedActivitiesPanel>:
//
// Display screen with Activities
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void showPreparedActivitiesPanel()
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003cb6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003cba:	f7fe f91d 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003cbe:	487a      	ldr	r0, [pc, #488]	; (8003ea8 <showPreparedActivitiesPanel+0x1f8>)
 8003cc0:	f7fd fd16 	bl	80016f0 <EF_SetFont>

	// Display Header
	sprintf((char*)Msg, "-=ACTIVITIES=-");
 8003cc4:	4979      	ldr	r1, [pc, #484]	; (8003eac <showPreparedActivitiesPanel+0x1fc>)
 8003cc6:	487a      	ldr	r0, [pc, #488]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003cc8:	f00d fa18 	bl	80110fc <siprintf>
	EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003ccc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	231f      	movs	r3, #31
 8003cd8:	220a      	movs	r2, #10
 8003cda:	212f      	movs	r1, #47	; 0x2f
 8003cdc:	4874      	ldr	r0, [pc, #464]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003cde:	f7fd ff21 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003ce2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2329      	movs	r3, #41	; 0x29
 8003cea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003cee:	2129      	movs	r1, #41	; 0x29
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fd fa4d 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003cf6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	232b      	movs	r3, #43	; 0x2b
 8003cfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d02:	212b      	movs	r1, #43	; 0x2b
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7fd fa43 	bl	8001190 <GFX_DrawLine>

	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 8003d0a:	486a      	ldr	r0, [pc, #424]	; (8003eb4 <showPreparedActivitiesPanel+0x204>)
 8003d0c:	f7fd fcf0 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8003d10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2305      	movs	r3, #5
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2314      	movs	r3, #20
 8003d1c:	2264      	movs	r2, #100	; 0x64
 8003d1e:	21d8      	movs	r1, #216	; 0xd8
 8003d20:	200a      	movs	r0, #10
 8003d22:	f7fd fc94 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 8003d26:	4964      	ldr	r1, [pc, #400]	; (8003eb8 <showPreparedActivitiesPanel+0x208>)
 8003d28:	4861      	ldr	r0, [pc, #388]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d2a:	f00d f9e7 	bl	80110fc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8003d2e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	22da      	movs	r2, #218	; 0xda
 8003d3c:	210d      	movs	r1, #13
 8003d3e:	485c      	ldr	r0, [pc, #368]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d40:	f7fd fef0 	bl	8001b24 <EF_PutString>
	//
	// Draw current state of Activities button
	//
	// First Button
	//
	if(ActivityButtonState[0] >= 1)
 8003d44:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <showPreparedActivitiesPanel+0x20c>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d029      	beq.n	8003da0 <showPreparedActivitiesPanel+0xf0>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	230a      	movs	r3, #10
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2328      	movs	r3, #40	; 0x28
 8003d58:	2278      	movs	r2, #120	; 0x78
 8003d5a:	213c      	movs	r1, #60	; 0x3c
 8003d5c:	2064      	movs	r0, #100	; 0x64
 8003d5e:	f7fd fc76 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003d62:	4957      	ldr	r1, [pc, #348]	; (8003ec0 <showPreparedActivitiesPanel+0x210>)
 8003d64:	4852      	ldr	r0, [pc, #328]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d66:	f00d f9c9 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	223e      	movs	r2, #62	; 0x3e
 8003d78:	2177      	movs	r1, #119	; 0x77
 8003d7a:	484d      	ldr	r0, [pc, #308]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d7c:	f7fd fed2 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003d80:	4950      	ldr	r1, [pc, #320]	; (8003ec4 <showPreparedActivitiesPanel+0x214>)
 8003d82:	484b      	ldr	r0, [pc, #300]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d84:	f00d f9ba 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003d88:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	2250      	movs	r2, #80	; 0x50
 8003d96:	2193      	movs	r1, #147	; 0x93
 8003d98:	4845      	ldr	r0, [pc, #276]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003d9a:	f7fd fec3 	bl	8001b24 <EF_PutString>
 8003d9e:	e028      	b.n	8003df2 <showPreparedActivitiesPanel+0x142>
	}
	else
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003da0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	230a      	movs	r3, #10
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	2328      	movs	r3, #40	; 0x28
 8003dac:	2278      	movs	r2, #120	; 0x78
 8003dae:	213c      	movs	r1, #60	; 0x3c
 8003db0:	2064      	movs	r0, #100	; 0x64
 8003db2:	f7fd fc4c 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8003db6:	4942      	ldr	r1, [pc, #264]	; (8003ec0 <showPreparedActivitiesPanel+0x210>)
 8003db8:	483d      	ldr	r0, [pc, #244]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003dba:	f00d f99f 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003dbe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	223e      	movs	r2, #62	; 0x3e
 8003dcc:	2177      	movs	r1, #119	; 0x77
 8003dce:	4838      	ldr	r0, [pc, #224]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003dd0:	f7fd fea8 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003dd4:	493c      	ldr	r1, [pc, #240]	; (8003ec8 <showPreparedActivitiesPanel+0x218>)
 8003dd6:	4836      	ldr	r0, [pc, #216]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003dd8:	f00d f990 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003ddc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	2300      	movs	r3, #0
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2300      	movs	r3, #0
 8003de8:	2250      	movs	r2, #80	; 0x50
 8003dea:	2193      	movs	r1, #147	; 0x93
 8003dec:	4830      	ldr	r0, [pc, #192]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003dee:	f7fd fe99 	bl	8001b24 <EF_PutString>
	}
	 //
	 // Second Button
	 //
	if(ActivityButtonState[1] >= 1)
 8003df2:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <showPreparedActivitiesPanel+0x20c>)
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d029      	beq.n	8003e4e <showPreparedActivitiesPanel+0x19e>
	{
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003dfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	230a      	movs	r3, #10
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	2328      	movs	r3, #40	; 0x28
 8003e06:	2278      	movs	r2, #120	; 0x78
 8003e08:	2178      	movs	r1, #120	; 0x78
 8003e0a:	2064      	movs	r0, #100	; 0x64
 8003e0c:	f7fd fc1f 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e10:	492e      	ldr	r1, [pc, #184]	; (8003ecc <showPreparedActivitiesPanel+0x21c>)
 8003e12:	4827      	ldr	r0, [pc, #156]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e14:	f00d f972 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	2300      	movs	r3, #0
 8003e24:	227a      	movs	r2, #122	; 0x7a
 8003e26:	2169      	movs	r1, #105	; 0x69
 8003e28:	4821      	ldr	r0, [pc, #132]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e2a:	f7fd fe7b 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "ON");
 8003e2e:	4925      	ldr	r1, [pc, #148]	; (8003ec4 <showPreparedActivitiesPanel+0x214>)
 8003e30:	481f      	ldr	r0, [pc, #124]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e32:	f00d f963 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8003e36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	228c      	movs	r2, #140	; 0x8c
 8003e44:	2193      	movs	r1, #147	; 0x93
 8003e46:	481a      	ldr	r0, [pc, #104]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e48:	f7fd fe6c 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "CZYSZCZENIE");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
		sprintf((char*)Msg, "OFF");
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	}
}
 8003e4c:	e028      	b.n	8003ea0 <showPreparedActivitiesPanel+0x1f0>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	230a      	movs	r3, #10
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2328      	movs	r3, #40	; 0x28
 8003e5a:	2278      	movs	r2, #120	; 0x78
 8003e5c:	2178      	movs	r1, #120	; 0x78
 8003e5e:	2064      	movs	r0, #100	; 0x64
 8003e60:	f7fd fbf5 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "CZYSZCZENIE");
 8003e64:	4919      	ldr	r1, [pc, #100]	; (8003ecc <showPreparedActivitiesPanel+0x21c>)
 8003e66:	4812      	ldr	r0, [pc, #72]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e68:	f00d f948 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	227a      	movs	r2, #122	; 0x7a
 8003e7a:	2169      	movs	r1, #105	; 0x69
 8003e7c:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e7e:	f7fd fe51 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8003e82:	4911      	ldr	r1, [pc, #68]	; (8003ec8 <showPreparedActivitiesPanel+0x218>)
 8003e84:	480a      	ldr	r0, [pc, #40]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e86:	f00d f939 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8003e8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	228c      	movs	r2, #140	; 0x8c
 8003e98:	2193      	movs	r1, #147	; 0x93
 8003e9a:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <showPreparedActivitiesPanel+0x200>)
 8003e9c:	f7fd fe42 	bl	8001b24 <EF_PutString>
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	08018068 	.word	0x08018068
 8003eac:	08014fdc 	.word	0x08014fdc
 8003eb0:	200002fc 	.word	0x200002fc
 8003eb4:	080160f0 	.word	0x080160f0
 8003eb8:	08014fd4 	.word	0x08014fd4
 8003ebc:	200002b0 	.word	0x200002b0
 8003ec0:	08014fec 	.word	0x08014fec
 8003ec4:	08014ff8 	.word	0x08014ff8
 8003ec8:	08014ffc 	.word	0x08014ffc
 8003ecc:	08015000 	.word	0x08015000

08003ed0 <showWSLedPanel>:
// Display screen to controlling WS2812b LEDs
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void showWSLedPanel()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af02      	add	r7, sp, #8
	ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8003ed6:	f24c 6018 	movw	r0, #50712	; 0xc618
 8003eda:	f7fe f80d 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arialBlack_20ptFontInfo);
 8003ede:	48c7      	ldr	r0, [pc, #796]	; (80041fc <showWSLedPanel+0x32c>)
 8003ee0:	f7fd fc06 	bl	80016f0 <EF_SetFont>


	// Display Header
	sprintf((char*)Msg, "-=WS2812b=-");
 8003ee4:	49c6      	ldr	r1, [pc, #792]	; (8004200 <showWSLedPanel+0x330>)
 8003ee6:	48c7      	ldr	r0, [pc, #796]	; (8004204 <showWSLedPanel+0x334>)
 8003ee8:	f00d f908 	bl	80110fc <siprintf>
	EF_PutString(Msg, WS_LED_STRING_POZ_X, WS_LED_STRING_POZ_Y, ILI9341_BLUE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003eec:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	231f      	movs	r3, #31
 8003ef8:	220a      	movs	r2, #10
 8003efa:	2146      	movs	r1, #70	; 0x46
 8003efc:	48c1      	ldr	r0, [pc, #772]	; (8004204 <showWSLedPanel+0x334>)
 8003efe:	f7fd fe11 	bl	8001b24 <EF_PutString>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8003f02:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2329      	movs	r3, #41	; 0x29
 8003f0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f0e:	2129      	movs	r1, #41	; 0x29
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fd f93d 	bl	8001190 <GFX_DrawLine>
	GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8003f16:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	232b      	movs	r3, #43	; 0x2b
 8003f1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f22:	212b      	movs	r1, #43	; 0x2b
 8003f24:	2000      	movs	r0, #0
 8003f26:	f7fd f933 	bl	8001190 <GFX_DrawLine>

	// Display String
	sprintf((char*)Msg, "ILOŚĆ LED: %d", NrOfLeds);
 8003f2a:	4bb7      	ldr	r3, [pc, #732]	; (8004208 <showWSLedPanel+0x338>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	49b6      	ldr	r1, [pc, #728]	; (800420c <showWSLedPanel+0x33c>)
 8003f32:	48b4      	ldr	r0, [pc, #720]	; (8004204 <showWSLedPanel+0x334>)
 8003f34:	f00d f8e2 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f38:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	223c      	movs	r2, #60	; 0x3c
 8003f46:	2114      	movs	r1, #20
 8003f48:	48ae      	ldr	r0, [pc, #696]	; (8004204 <showWSLedPanel+0x334>)
 8003f4a:	f7fd fdeb 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "WHITE:");
 8003f4e:	49b0      	ldr	r1, [pc, #704]	; (8004210 <showWSLedPanel+0x340>)
 8003f50:	48ac      	ldr	r0, [pc, #688]	; (8004204 <showWSLedPanel+0x334>)
 8003f52:	f00d f8d3 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_WHITE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f56:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	225a      	movs	r2, #90	; 0x5a
 8003f64:	2114      	movs	r1, #20
 8003f66:	48a7      	ldr	r0, [pc, #668]	; (8004204 <showWSLedPanel+0x334>)
 8003f68:	f7fd fddc 	bl	8001b24 <EF_PutString>

	sprintf((char*)Msg, "BLUE:");
 8003f6c:	49a9      	ldr	r1, [pc, #676]	; (8004214 <showWSLedPanel+0x344>)
 8003f6e:	48a5      	ldr	r0, [pc, #660]	; (8004204 <showWSLedPanel+0x334>)
 8003f70:	f00d f8c4 	bl	80110fc <siprintf>
	EF_PutString(Msg, STRING_WS_LED_POZ_X, STRING_WS_LED_BLUE_POZ_Y, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8003f74:	f24c 6318 	movw	r3, #50712	; 0xc618
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2278      	movs	r2, #120	; 0x78
 8003f82:	2114      	movs	r1, #20
 8003f84:	489f      	ldr	r0, [pc, #636]	; (8004204 <showWSLedPanel+0x334>)
 8003f86:	f7fd fdcd 	bl	8001b24 <EF_PutString>

	//
	// Display first row of buttons - number of LEDs
	EF_SetFont(&arial_11ptFontInfo);
 8003f8a:	48a3      	ldr	r0, [pc, #652]	; (8004218 <showWSLedPanel+0x348>)
 8003f8c:	f7fd fbb0 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_1_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003f90:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	2305      	movs	r3, #5
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2315      	movs	r3, #21
 8003f9c:	221e      	movs	r2, #30
 8003f9e:	2141      	movs	r1, #65	; 0x41
 8003fa0:	20d9      	movs	r0, #217	; 0xd9
 8003fa2:	f7fd fb54 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+1");
 8003fa6:	499d      	ldr	r1, [pc, #628]	; (800421c <showWSLedPanel+0x34c>)
 8003fa8:	4896      	ldr	r0, [pc, #600]	; (8004204 <showWSLedPanel+0x334>)
 8003faa:	f00d f8a7 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_1_X+STRING_ERRATA_X + 3), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fae:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2243      	movs	r2, #67	; 0x43
 8003fbc:	21df      	movs	r1, #223	; 0xdf
 8003fbe:	4891      	ldr	r0, [pc, #580]	; (8004204 <showWSLedPanel+0x334>)
 8003fc0:	f7fd fdb0 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_2_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_CLOCK_BUTTON_COLOR);
 8003fc4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2305      	movs	r3, #5
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2315      	movs	r3, #21
 8003fd0:	221e      	movs	r2, #30
 8003fd2:	2141      	movs	r1, #65	; 0x41
 8003fd4:	20fc      	movs	r0, #252	; 0xfc
 8003fd6:	f7fd fb3a 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "+10");
 8003fda:	4991      	ldr	r1, [pc, #580]	; (8004220 <showWSLedPanel+0x350>)
 8003fdc:	4889      	ldr	r0, [pc, #548]	; (8004204 <showWSLedPanel+0x334>)
 8003fde:	f00d f88d 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_2_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_CLOCK_BUTTON_COLOR);
 8003fe2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2300      	movs	r3, #0
 8003fee:	2243      	movs	r2, #67	; 0x43
 8003ff0:	f240 1101 	movw	r1, #257	; 0x101
 8003ff4:	4883      	ldr	r0, [pc, #524]	; (8004204 <showWSLedPanel+0x334>)
 8003ff6:	f7fd fd95 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8003ffa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	2305      	movs	r3, #5
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2315      	movs	r3, #21
 8004006:	221e      	movs	r2, #30
 8004008:	2141      	movs	r1, #65	; 0x41
 800400a:	f240 101f 	movw	r0, #287	; 0x11f
 800400e:	f7fd fb1e 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OK");
 8004012:	4984      	ldr	r1, [pc, #528]	; (8004224 <showWSLedPanel+0x354>)
 8004014:	487b      	ldr	r0, [pc, #492]	; (8004204 <showWSLedPanel+0x334>)
 8004016:	f00d f871 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+2), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800401a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2243      	movs	r2, #67	; 0x43
 8004028:	f44f 7192 	mov.w	r1, #292	; 0x124
 800402c:	4875      	ldr	r0, [pc, #468]	; (8004204 <showWSLedPanel+0x334>)
 800402e:	f7fd fd79 	bl	8001b24 <EF_PutString>

	//
	// Display second row of buttons - WHITE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	2305      	movs	r3, #5
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2315      	movs	r3, #21
 800403e:	2228      	movs	r2, #40	; 0x28
 8004040:	215f      	movs	r1, #95	; 0x5f
 8004042:	2096      	movs	r0, #150	; 0x96
 8004044:	f7fd fb03 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 8004048:	4977      	ldr	r1, [pc, #476]	; (8004228 <showWSLedPanel+0x358>)
 800404a:	486e      	ldr	r0, [pc, #440]	; (8004204 <showWSLedPanel+0x334>)
 800404c:	f00d f856 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	2300      	movs	r3, #0
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	2261      	movs	r2, #97	; 0x61
 800405e:	219b      	movs	r1, #155	; 0x9b
 8004060:	4868      	ldr	r0, [pc, #416]	; (8004204 <showWSLedPanel+0x334>)
 8004062:	f7fd fd5f 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 8004066:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	2305      	movs	r3, #5
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	2315      	movs	r3, #21
 8004072:	2228      	movs	r2, #40	; 0x28
 8004074:	215f      	movs	r1, #95	; 0x5f
 8004076:	20ca      	movs	r0, #202	; 0xca
 8004078:	f7fd fae9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 800407c:	496b      	ldr	r1, [pc, #428]	; (800422c <showWSLedPanel+0x35c>)
 800407e:	4861      	ldr	r0, [pc, #388]	; (8004204 <showWSLedPanel+0x334>)
 8004080:	f00d f83c 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 8004084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	2261      	movs	r2, #97	; 0x61
 8004092:	21d2      	movs	r1, #210	; 0xd2
 8004094:	485b      	ldr	r0, [pc, #364]	; (8004204 <showWSLedPanel+0x334>)
 8004096:	f7fd fd45 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_2_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_WHITE_BUTTON_COLOR);
 800409a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	2305      	movs	r3, #5
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2315      	movs	r3, #21
 80040a6:	2228      	movs	r2, #40	; 0x28
 80040a8:	215f      	movs	r1, #95	; 0x5f
 80040aa:	20fe      	movs	r0, #254	; 0xfe
 80040ac:	f7fd facf 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 80040b0:	495f      	ldr	r1, [pc, #380]	; (8004230 <showWSLedPanel+0x360>)
 80040b2:	4854      	ldr	r0, [pc, #336]	; (8004204 <showWSLedPanel+0x334>)
 80040b4:	f00d f822 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_WHITE_BUTTON_COLOR);
 80040b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	2300      	movs	r3, #0
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2300      	movs	r3, #0
 80040c4:	2261      	movs	r2, #97	; 0x61
 80040c6:	f44f 7183 	mov.w	r1, #262	; 0x106
 80040ca:	484e      	ldr	r0, [pc, #312]	; (8004204 <showWSLedPanel+0x334>)
 80040cc:	f7fd fd2a 	bl	8001b24 <EF_PutString>

	//
	// Display third row of buttons - BLUE
	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_1_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 80040d0:	231f      	movs	r3, #31
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2305      	movs	r3, #5
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2315      	movs	r3, #21
 80040da:	2228      	movs	r2, #40	; 0x28
 80040dc:	217d      	movs	r1, #125	; 0x7d
 80040de:	2096      	movs	r0, #150	; 0x96
 80040e0:	f7fd fab5 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MAX");
 80040e4:	4950      	ldr	r1, [pc, #320]	; (8004228 <showWSLedPanel+0x358>)
 80040e6:	4847      	ldr	r0, [pc, #284]	; (8004204 <showWSLedPanel+0x334>)
 80040e8:	f00d f808 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_1_X+STRING_ERRATA_X+2), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 80040ec:	231f      	movs	r3, #31
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	2300      	movs	r3, #0
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	227f      	movs	r2, #127	; 0x7f
 80040f8:	219b      	movs	r1, #155	; 0x9b
 80040fa:	4842      	ldr	r0, [pc, #264]	; (8004204 <showWSLedPanel+0x334>)
 80040fc:	f7fd fd12 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_2_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004100:	231f      	movs	r3, #31
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2305      	movs	r3, #5
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2315      	movs	r3, #21
 800410a:	2228      	movs	r2, #40	; 0x28
 800410c:	217d      	movs	r1, #125	; 0x7d
 800410e:	20ca      	movs	r0, #202	; 0xca
 8004110:	f7fd fa9d 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MID");
 8004114:	4945      	ldr	r1, [pc, #276]	; (800422c <showWSLedPanel+0x35c>)
 8004116:	483b      	ldr	r0, [pc, #236]	; (8004204 <showWSLedPanel+0x334>)
 8004118:	f00c fff0 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_2_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800411c:	231f      	movs	r3, #31
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	2300      	movs	r3, #0
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	227f      	movs	r2, #127	; 0x7f
 8004128:	21d2      	movs	r1, #210	; 0xd2
 800412a:	4836      	ldr	r0, [pc, #216]	; (8004204 <showWSLedPanel+0x334>)
 800412c:	f7fd fcfa 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_WHITE_BUTTON_3_X, WS_B_3_POZ_Y, WS_COLOR_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_BLUE_BUTTON_COLOR);
 8004130:	231f      	movs	r3, #31
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	2305      	movs	r3, #5
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2315      	movs	r3, #21
 800413a:	2228      	movs	r2, #40	; 0x28
 800413c:	217d      	movs	r1, #125	; 0x7d
 800413e:	20fe      	movs	r0, #254	; 0xfe
 8004140:	f7fd fa85 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "MIN");
 8004144:	493a      	ldr	r1, [pc, #232]	; (8004230 <showWSLedPanel+0x360>)
 8004146:	482f      	ldr	r0, [pc, #188]	; (8004204 <showWSLedPanel+0x334>)
 8004148:	f00c ffd8 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_WHITE_BUTTON_3_X+STRING_ERRATA_X+5), (WS_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_BLUE_BUTTON_COLOR);
 800414c:	231f      	movs	r3, #31
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	2300      	movs	r3, #0
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2300      	movs	r3, #0
 8004156:	227f      	movs	r2, #127	; 0x7f
 8004158:	f44f 7183 	mov.w	r1, #262	; 0x106
 800415c:	4829      	ldr	r0, [pc, #164]	; (8004204 <showWSLedPanel+0x334>)
 800415e:	f7fd fce1 	bl	8001b24 <EF_PutString>

	//
	// Display fourth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_1_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_DAILY_BUTTON_COLOR);
 8004162:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004166:	9301      	str	r3, [sp, #4]
 8004168:	2305      	movs	r3, #5
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2315      	movs	r3, #21
 800416e:	2250      	movs	r2, #80	; 0x50
 8004170:	219c      	movs	r1, #156	; 0x9c
 8004172:	2014      	movs	r0, #20
 8004174:	f7fd fa6b 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "DAILY");
 8004178:	492e      	ldr	r1, [pc, #184]	; (8004234 <showWSLedPanel+0x364>)
 800417a:	4822      	ldr	r0, [pc, #136]	; (8004204 <showWSLedPanel+0x334>)
 800417c:	f00c ffbe 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_DAILY_BUTTON_COLOR);
 8004180:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2300      	movs	r3, #0
 800418c:	229e      	movs	r2, #158	; 0x9e
 800418e:	211c      	movs	r1, #28
 8004190:	481c      	ldr	r0, [pc, #112]	; (8004204 <showWSLedPanel+0x334>)
 8004192:	f7fd fcc7 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_2_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004196:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	2305      	movs	r3, #5
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2315      	movs	r3, #21
 80041a2:	2250      	movs	r2, #80	; 0x50
 80041a4:	219c      	movs	r1, #156	; 0x9c
 80041a6:	2078      	movs	r0, #120	; 0x78
 80041a8:	f7fd fa51 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "OFF");
 80041ac:	4922      	ldr	r1, [pc, #136]	; (8004238 <showWSLedPanel+0x368>)
 80041ae:	4815      	ldr	r0, [pc, #84]	; (8004204 <showWSLedPanel+0x334>)
 80041b0:	f00c ffa4 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_2_X+STRING_ERRATA_X+12), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80041b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	229e      	movs	r2, #158	; 0x9e
 80041c2:	2187      	movs	r1, #135	; 0x87
 80041c4:	480f      	ldr	r0, [pc, #60]	; (8004204 <showWSLedPanel+0x334>)
 80041c6:	f7fd fcad 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_BUTTON_3_X, WS_B_4_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_NIGHT_BUTTON_COLOR);
 80041ca:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2305      	movs	r3, #5
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	2315      	movs	r3, #21
 80041d6:	2250      	movs	r2, #80	; 0x50
 80041d8:	219c      	movs	r1, #156	; 0x9c
 80041da:	20dc      	movs	r0, #220	; 0xdc
 80041dc:	f7fd fa37 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "NIGHT");
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <showWSLedPanel+0x36c>)
 80041e2:	4808      	ldr	r0, [pc, #32]	; (8004204 <showWSLedPanel+0x334>)
 80041e4:	f00c ff8a 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_BUTTON_3_X+STRING_ERRATA_X+10), (WS_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_NIGHT_BUTTON_COLOR);
 80041e8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2300      	movs	r3, #0
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	229e      	movs	r2, #158	; 0x9e
 80041f6:	21e9      	movs	r1, #233	; 0xe9
 80041f8:	e022      	b.n	8004240 <showWSLedPanel+0x370>
 80041fa:	bf00      	nop
 80041fc:	08018068 	.word	0x08018068
 8004200:	0801500c 	.word	0x0801500c
 8004204:	200002fc 	.word	0x200002fc
 8004208:	20000033 	.word	0x20000033
 800420c:	08015018 	.word	0x08015018
 8004210:	08015028 	.word	0x08015028
 8004214:	08015030 	.word	0x08015030
 8004218:	080160f0 	.word	0x080160f0
 800421c:	08014fac 	.word	0x08014fac
 8004220:	08014fb4 	.word	0x08014fb4
 8004224:	08015038 	.word	0x08015038
 8004228:	0801503c 	.word	0x0801503c
 800422c:	08015040 	.word	0x08015040
 8004230:	08015044 	.word	0x08015044
 8004234:	08015048 	.word	0x08015048
 8004238:	08014ffc 	.word	0x08014ffc
 800423c:	08015050 	.word	0x08015050
 8004240:	482b      	ldr	r0, [pc, #172]	; (80042f0 <showWSLedPanel+0x420>)
 8004242:	f7fd fc6f 	bl	8001b24 <EF_PutString>

	//
	// Display fifth row of buttons
	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_1_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 8004246:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	2305      	movs	r3, #5
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	2315      	movs	r3, #21
 8004252:	2250      	movs	r2, #80	; 0x50
 8004254:	21bb      	movs	r1, #187	; 0xbb
 8004256:	2046      	movs	r0, #70	; 0x46
 8004258:	f7fd f9f9 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNRISE");
 800425c:	4925      	ldr	r1, [pc, #148]	; (80042f4 <showWSLedPanel+0x424>)
 800425e:	4824      	ldr	r0, [pc, #144]	; (80042f0 <showWSLedPanel+0x420>)
 8004260:	f00c ff4c 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_1_X+STRING_ERRATA_X+5), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004264:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	2300      	movs	r3, #0
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2300      	movs	r3, #0
 8004270:	22bd      	movs	r2, #189	; 0xbd
 8004272:	214e      	movs	r1, #78	; 0x4e
 8004274:	481e      	ldr	r0, [pc, #120]	; (80042f0 <showWSLedPanel+0x420>)
 8004276:	f7fd fc55 	bl	8001b24 <EF_PutString>

	GFX_DrawFillRoundRectangle(WS_PREDEFINED_ACT_BUTTON_2_X, WS_B_5_POZ_Y, WS_PREDEFINED_BUTTON_W, WS_PREDEFINED_BUTTON_H, WS_LED_BUTTON_R, LED_WS_SUN_BUTTON_COLOR);
 800427a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	2305      	movs	r3, #5
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2315      	movs	r3, #21
 8004286:	2250      	movs	r2, #80	; 0x50
 8004288:	21bb      	movs	r1, #187	; 0xbb
 800428a:	20aa      	movs	r0, #170	; 0xaa
 800428c:	f7fd f9df 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "SUNSET");
 8004290:	4919      	ldr	r1, [pc, #100]	; (80042f8 <showWSLedPanel+0x428>)
 8004292:	4817      	ldr	r0, [pc, #92]	; (80042f0 <showWSLedPanel+0x420>)
 8004294:	f00c ff32 	bl	80110fc <siprintf>
	EF_PutString(Msg, (WS_PREDEFINED_ACT_BUTTON_2_X+STRING_ERRATA_X+8), (WS_B_5_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, LED_WS_SUN_BUTTON_COLOR);
 8004298:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	22bd      	movs	r2, #189	; 0xbd
 80042a6:	21b5      	movs	r1, #181	; 0xb5
 80042a8:	4811      	ldr	r0, [pc, #68]	; (80042f0 <showWSLedPanel+0x420>)
 80042aa:	f7fd fc3b 	bl	8001b24 <EF_PutString>


	//
	// Display button to change screen
	EF_SetFont(&arial_11ptFontInfo);
 80042ae:	4813      	ldr	r0, [pc, #76]	; (80042fc <showWSLedPanel+0x42c>)
 80042b0:	f7fd fa1e 	bl	80016f0 <EF_SetFont>
	GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80042b4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	2305      	movs	r3, #5
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2314      	movs	r3, #20
 80042c0:	2264      	movs	r2, #100	; 0x64
 80042c2:	21d8      	movs	r1, #216	; 0xd8
 80042c4:	200a      	movs	r0, #10
 80042c6:	f7fd f9c2 	bl	800164e <GFX_DrawFillRoundRectangle>
	sprintf((char*)Msg, "<=BACK");
 80042ca:	490d      	ldr	r1, [pc, #52]	; (8004300 <showWSLedPanel+0x430>)
 80042cc:	4808      	ldr	r0, [pc, #32]	; (80042f0 <showWSLedPanel+0x420>)
 80042ce:	f00c ff15 	bl	80110fc <siprintf>
	EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 80042d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2300      	movs	r3, #0
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2300      	movs	r3, #0
 80042de:	22da      	movs	r2, #218	; 0xda
 80042e0:	210d      	movs	r1, #13
 80042e2:	4803      	ldr	r0, [pc, #12]	; (80042f0 <showWSLedPanel+0x420>)
 80042e4:	f7fd fc1e 	bl	8001b24 <EF_PutString>


}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200002fc 	.word	0x200002fc
 80042f4:	08015058 	.word	0x08015058
 80042f8:	08015060 	.word	0x08015060
 80042fc:	080160f0 	.word	0x080160f0
 8004300:	08014fd4 	.word	0x08014fd4

08004304 <drawschedulePanel>:
//
// Display screen to setting Schedule Panel
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void drawschedulePanel(uint8_t NrOfschedule)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b090      	sub	sp, #64	; 0x40
 8004308:	af02      	add	r7, sp, #8
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
	uint8_t hourOnschedule1 = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t hourOffschedule1 = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t minuteOnschedule1 = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t minuteOffschedule1 = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hourOnschedule2 = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t hourOffschedule2 = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t minuteOnschedule2 = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t minuteOffschedule2 = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t schedule1DayInWeekTab[7] = {0};
 800433e:	2300      	movs	r3, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004346:	2100      	movs	r1, #0
 8004348:	460a      	mov	r2, r1
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	460a      	mov	r2, r1
 800434e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule1RelayAndSwitchTab[9] = {0};
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	f107 0320 	add.w	r3, r7, #32
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	711a      	strb	r2, [r3, #4]
	uint8_t schedule2DayInWeekTab[7] = {0};
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	f107 0318 	add.w	r3, r7, #24
 8004366:	2100      	movs	r1, #0
 8004368:	460a      	mov	r2, r1
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	460a      	mov	r2, r1
 800436e:	709a      	strb	r2, [r3, #2]
	uint8_t schedule2RelayAndSwitchTab[9] = {0};
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	711a      	strb	r2, [r3, #4]
	  //
	  // Draw empty Rectangle to indicate day of week
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_1_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800437e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004382:	9301      	str	r3, [sp, #4]
 8004384:	2305      	movs	r3, #5
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2314      	movs	r3, #20
 800438a:	2214      	movs	r2, #20
 800438c:	2132      	movs	r1, #50	; 0x32
 800438e:	203c      	movs	r0, #60	; 0x3c
 8004390:	f7fd f8e0 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_2_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004394:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	2305      	movs	r3, #5
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	2314      	movs	r3, #20
 80043a0:	2214      	movs	r2, #20
 80043a2:	2132      	movs	r1, #50	; 0x32
 80043a4:	205a      	movs	r0, #90	; 0x5a
 80043a6:	f7fd f8d5 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_3_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	2305      	movs	r3, #5
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2314      	movs	r3, #20
 80043b6:	2214      	movs	r2, #20
 80043b8:	2132      	movs	r1, #50	; 0x32
 80043ba:	2078      	movs	r0, #120	; 0x78
 80043bc:	f7fd f8ca 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_4_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	2305      	movs	r3, #5
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2314      	movs	r3, #20
 80043cc:	2214      	movs	r2, #20
 80043ce:	2132      	movs	r1, #50	; 0x32
 80043d0:	2096      	movs	r0, #150	; 0x96
 80043d2:	f7fd f8bf 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_5_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	2305      	movs	r3, #5
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2314      	movs	r3, #20
 80043e2:	2214      	movs	r2, #20
 80043e4:	2132      	movs	r1, #50	; 0x32
 80043e6:	20b4      	movs	r0, #180	; 0xb4
 80043e8:	f7fd f8b4 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_6_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80043ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	2305      	movs	r3, #5
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2314      	movs	r3, #20
 80043f8:	2214      	movs	r2, #20
 80043fa:	2132      	movs	r1, #50	; 0x32
 80043fc:	20d2      	movs	r0, #210	; 0xd2
 80043fe:	f7fd f8a9 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_BUTTON_7_X, DAY_CHECK_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004402:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	2305      	movs	r3, #5
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	2314      	movs	r3, #20
 800440e:	2214      	movs	r2, #20
 8004410:	2132      	movs	r1, #50	; 0x32
 8004412:	20f0      	movs	r0, #240	; 0xf0
 8004414:	f7fd f89e 	bl	8001554 <GFX_DrawRoundRectangle>

	  // Restore from EEPROM chosen day for this schedule
	  restoreTFTScheduleDayOfWeek(NrOfschedule);
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 feda 	bl	80051d4 <restoreTFTScheduleDayOfWeek>
	  restoreTFTScheduleRelayLights(NrOfschedule);
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff43 	bl	80052ae <restoreTFTScheduleRelayLights>

	  EF_SetFont(&arial_11ptFontInfo);
 8004428:	48cc      	ldr	r0, [pc, #816]	; (800475c <drawschedulePanel+0x458>)
 800442a:	f7fd f961 	bl	80016f0 <EF_SetFont>
	  sprintf((char*)Msg, "PN WT ŚR CZ PT SB ND");
 800442e:	49cc      	ldr	r1, [pc, #816]	; (8004760 <drawschedulePanel+0x45c>)
 8004430:	48cc      	ldr	r0, [pc, #816]	; (8004764 <drawschedulePanel+0x460>)
 8004432:	f00c fe63 	bl	80110fc <siprintf>
	  EF_PutString(Msg, DAY_CHECK_BUTTON_1_X, (DAY_CHECK_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004436:	f24c 6318 	movw	r3, #50712	; 0xc618
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	2301      	movs	r3, #1
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	2300      	movs	r3, #0
 8004442:	224b      	movs	r2, #75	; 0x4b
 8004444:	213c      	movs	r1, #60	; 0x3c
 8004446:	48c7      	ldr	r0, [pc, #796]	; (8004764 <drawschedulePanel+0x460>)
 8004448:	f7fd fb6c 	bl	8001b24 <EF_PutString>

	  //
	  // Draw empty Rectangle to indicate relay and lights
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800444c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	2305      	movs	r3, #5
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	2314      	movs	r3, #20
 8004458:	2214      	movs	r2, #20
 800445a:	21aa      	movs	r1, #170	; 0xaa
 800445c:	2015      	movs	r0, #21
 800445e:	f7fd f879 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004462:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	2305      	movs	r3, #5
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2314      	movs	r3, #20
 800446e:	2214      	movs	r2, #20
 8004470:	21aa      	movs	r1, #170	; 0xaa
 8004472:	2035      	movs	r0, #53	; 0x35
 8004474:	f7fd f86e 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 8004478:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2305      	movs	r3, #5
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2314      	movs	r3, #20
 8004484:	2214      	movs	r2, #20
 8004486:	21aa      	movs	r1, #170	; 0xaa
 8004488:	2055      	movs	r0, #85	; 0x55
 800448a:	f7fd f863 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 800448e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	2305      	movs	r3, #5
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2314      	movs	r3, #20
 800449a:	2214      	movs	r2, #20
 800449c:	21aa      	movs	r1, #170	; 0xaa
 800449e:	2075      	movs	r0, #117	; 0x75
 80044a0:	f7fd f858 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	2305      	movs	r3, #5
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2314      	movs	r3, #20
 80044b0:	2214      	movs	r2, #20
 80044b2:	21aa      	movs	r1, #170	; 0xaa
 80044b4:	2095      	movs	r0, #149	; 0x95
 80044b6:	f7fd f84d 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044ba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	2305      	movs	r3, #5
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2314      	movs	r3, #20
 80044c6:	2214      	movs	r2, #20
 80044c8:	21aa      	movs	r1, #170	; 0xaa
 80044ca:	20b5      	movs	r0, #181	; 0xb5
 80044cc:	f7fd f842 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	2305      	movs	r3, #5
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2314      	movs	r3, #20
 80044dc:	2214      	movs	r2, #20
 80044de:	21aa      	movs	r1, #170	; 0xaa
 80044e0:	20d5      	movs	r0, #213	; 0xd5
 80044e2:	f7fd f837 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	2305      	movs	r3, #5
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2314      	movs	r3, #20
 80044f2:	2214      	movs	r2, #20
 80044f4:	21aa      	movs	r1, #170	; 0xaa
 80044f6:	20f5      	movs	r0, #245	; 0xf5
 80044f8:	f7fd f82c 	bl	8001554 <GFX_DrawRoundRectangle>
	  GFX_DrawRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X, DAY_CHECK_RELAY_BUTTON_Y, DAY_CHECK_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR);
 80044fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	2305      	movs	r3, #5
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	2314      	movs	r3, #20
 8004508:	2214      	movs	r2, #20
 800450a:	21aa      	movs	r1, #170	; 0xaa
 800450c:	f240 1015 	movw	r0, #277	; 0x115
 8004510:	f7fd f820 	bl	8001554 <GFX_DrawRoundRectangle>

	  sprintf((char*)Msg, "R1  R2  R3  R4 WS L1  L2  L3  L4");
 8004514:	4994      	ldr	r1, [pc, #592]	; (8004768 <drawschedulePanel+0x464>)
 8004516:	4893      	ldr	r0, [pc, #588]	; (8004764 <drawschedulePanel+0x460>)
 8004518:	f00c fdf0 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (DAY_CHECK_RELAY_BUTTON_1_X), (DAY_CHECK_RELAY_BUTTON_Y + 25), ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800451c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	2301      	movs	r3, #1
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2300      	movs	r3, #0
 8004528:	22c3      	movs	r2, #195	; 0xc3
 800452a:	2115      	movs	r1, #21
 800452c:	488d      	ldr	r0, [pc, #564]	; (8004764 <drawschedulePanel+0x460>)
 800452e:	f7fd faf9 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004532:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	2305      	movs	r3, #5
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2314      	movs	r3, #20
 800453e:	2222      	movs	r2, #34	; 0x22
 8004540:	2165      	movs	r1, #101	; 0x65
 8004542:	20bb      	movs	r0, #187	; 0xbb
 8004544:	f7fd f883 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 8004548:	4988      	ldr	r1, [pc, #544]	; (800476c <drawschedulePanel+0x468>)
 800454a:	4886      	ldr	r0, [pc, #536]	; (8004764 <drawschedulePanel+0x460>)
 800454c:	f00c fdd6 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004550:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	2300      	movs	r3, #0
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2300      	movs	r3, #0
 800455c:	2268      	movs	r2, #104	; 0x68
 800455e:	21c1      	movs	r1, #193	; 0xc1
 8004560:	4880      	ldr	r0, [pc, #512]	; (8004764 <drawschedulePanel+0x460>)
 8004562:	f7fd fadf 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004566:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	2305      	movs	r3, #5
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2314      	movs	r3, #20
 8004572:	2222      	movs	r2, #34	; 0x22
 8004574:	2165      	movs	r1, #101	; 0x65
 8004576:	20e9      	movs	r0, #233	; 0xe9
 8004578:	f7fd f869 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800457c:	497c      	ldr	r1, [pc, #496]	; (8004770 <drawschedulePanel+0x46c>)
 800457e:	4879      	ldr	r0, [pc, #484]	; (8004764 <drawschedulePanel+0x460>)
 8004580:	f00c fdbc 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004584:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	2300      	movs	r3, #0
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2300      	movs	r3, #0
 8004590:	2268      	movs	r2, #104	; 0x68
 8004592:	21ec      	movs	r1, #236	; 0xec
 8004594:	4873      	ldr	r0, [pc, #460]	; (8004764 <drawschedulePanel+0x460>)
 8004596:	f7fd fac5 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_ON_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800459a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	2305      	movs	r3, #5
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2314      	movs	r3, #20
 80045a6:	2222      	movs	r2, #34	; 0x22
 80045a8:	2165      	movs	r1, #101	; 0x65
 80045aa:	f240 1017 	movw	r0, #279	; 0x117
 80045ae:	f7fd f84e 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 80045b2:	4970      	ldr	r1, [pc, #448]	; (8004774 <drawschedulePanel+0x470>)
 80045b4:	486b      	ldr	r0, [pc, #428]	; (8004764 <drawschedulePanel+0x460>)
 80045b6:	f00c fda1 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_ON_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	2300      	movs	r3, #0
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	2268      	movs	r2, #104	; 0x68
 80045c8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80045cc:	4865      	ldr	r0, [pc, #404]	; (8004764 <drawschedulePanel+0x460>)
 80045ce:	f7fd faa9 	bl	8001b24 <EF_PutString>


	  GFX_DrawFillRoundRectangle(ONE_HOUR_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	2305      	movs	r3, #5
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2314      	movs	r3, #20
 80045de:	2222      	movs	r2, #34	; 0x22
 80045e0:	2188      	movs	r1, #136	; 0x88
 80045e2:	20bb      	movs	r0, #187	; 0xbb
 80045e4:	f7fd f833 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1H");
 80045e8:	4960      	ldr	r1, [pc, #384]	; (800476c <drawschedulePanel+0x468>)
 80045ea:	485e      	ldr	r0, [pc, #376]	; (8004764 <drawschedulePanel+0x460>)
 80045ec:	f00c fd86 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (ONE_HOUR_ADD_SHEDULE_X+6), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 80045f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	2300      	movs	r3, #0
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	228b      	movs	r2, #139	; 0x8b
 80045fe:	21c1      	movs	r1, #193	; 0xc1
 8004600:	4858      	ldr	r0, [pc, #352]	; (8004764 <drawschedulePanel+0x460>)
 8004602:	f7fd fa8f 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(ONE_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004606:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2305      	movs	r3, #5
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2314      	movs	r3, #20
 8004612:	2222      	movs	r2, #34	; 0x22
 8004614:	2188      	movs	r1, #136	; 0x88
 8004616:	20e9      	movs	r0, #233	; 0xe9
 8004618:	f7fd f819 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+1M");
 800461c:	4954      	ldr	r1, [pc, #336]	; (8004770 <drawschedulePanel+0x46c>)
 800461e:	4851      	ldr	r0, [pc, #324]	; (8004764 <drawschedulePanel+0x460>)
 8004620:	f00c fd6c 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (ONE_MINUTE_ADD_SHEDULE_X+3), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 8004624:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	2300      	movs	r3, #0
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2300      	movs	r3, #0
 8004630:	228b      	movs	r2, #139	; 0x8b
 8004632:	21ec      	movs	r1, #236	; 0xec
 8004634:	484b      	ldr	r0, [pc, #300]	; (8004764 <drawschedulePanel+0x460>)
 8004636:	f7fd fa75 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(TEN_MINUTE_ADD_SHEDULE_X, HOUR_MINUTE_OFF_ADD_SHEDULE_Y, HOOUR_MINUTE_BUTTON_W, DAY_CHECK_BUTTON_H, DAY_CHECK_BUTTON_R, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800463a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	2305      	movs	r3, #5
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2314      	movs	r3, #20
 8004646:	2222      	movs	r2, #34	; 0x22
 8004648:	2188      	movs	r1, #136	; 0x88
 800464a:	f240 1017 	movw	r0, #279	; 0x117
 800464e:	f7fc fffe 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "+10M");
 8004652:	4948      	ldr	r1, [pc, #288]	; (8004774 <drawschedulePanel+0x470>)
 8004654:	4843      	ldr	r0, [pc, #268]	; (8004764 <drawschedulePanel+0x460>)
 8004656:	f00c fd51 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (TEN_MINUTE_ADD_SHEDULE_X+1), (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + 3), ILI9341_BLACK, BG_TRANSPARENT, SHEDULE_ADD_HOUR_MINUTE_BUTTON_COLOR);
 800465a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2300      	movs	r3, #0
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	228b      	movs	r2, #139	; 0x8b
 8004668:	f44f 718c 	mov.w	r1, #280	; 0x118
 800466c:	483d      	ldr	r0, [pc, #244]	; (8004764 <drawschedulePanel+0x460>)
 800466e:	f7fd fa59 	bl	8001b24 <EF_PutString>
	  //
	  // Display hour and minute ON and OFF



	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004672:	4841      	ldr	r0, [pc, #260]	; (8004778 <drawschedulePanel+0x474>)
 8004674:	f7fd f83c 	bl	80016f0 <EF_SetFont>
	  if(NrOfschedule == 1)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 80db 	bne.w	8004836 <drawschedulePanel+0x532>
	  {
		  // Read hour and minute of ON and OFF
		  EEPROM_ScheduleHourOnRead(1, &hourOnschedule1);
 8004680:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004684:	4619      	mov	r1, r3
 8004686:	2001      	movs	r0, #1
 8004688:	f7fe fc19 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnschedule1);
 800468c:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8004690:	4619      	mov	r1, r3
 8004692:	2001      	movs	r0, #1
 8004694:	f7fe fc37 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffschedule1);
 8004698:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800469c:	4619      	mov	r1, r3
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fe fc55 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffschedule1);
 80046a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80046a8:	4619      	mov	r1, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	f7fe fc73 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  // Read day of week and relay / lights in current schedule
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 80046b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046b4:	4619      	mov	r1, r3
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fe fab0 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 80046bc:	f107 031c 	add.w	r3, r7, #28
 80046c0:	4619      	mov	r1, r3
 80046c2:	2001      	movs	r0, #1
 80046c4:	f7fe fb26 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  if(hourOnschedule1 > 23) hourOnschedule1 = 23;
 80046c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046cc:	2b17      	cmp	r3, #23
 80046ce:	d902      	bls.n	80046d6 <drawschedulePanel+0x3d2>
 80046d0:	2317      	movs	r3, #23
 80046d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  if(minuteOnschedule1 > 59) minuteOnschedule1 = 59;
 80046d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80046da:	2b3b      	cmp	r3, #59	; 0x3b
 80046dc:	d902      	bls.n	80046e4 <drawschedulePanel+0x3e0>
 80046de:	233b      	movs	r3, #59	; 0x3b
 80046e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  if(hourOffschedule1 > 23) hourOffschedule1 = 23;
 80046e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80046e8:	2b17      	cmp	r3, #23
 80046ea:	d902      	bls.n	80046f2 <drawschedulePanel+0x3ee>
 80046ec:	2317      	movs	r3, #23
 80046ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(minuteOffschedule1 > 59) minuteOffschedule1 = 59;
 80046f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046f6:	2b3b      	cmp	r3, #59	; 0x3b
 80046f8:	d902      	bls.n	8004700 <drawschedulePanel+0x3fc>
 80046fa:	233b      	movs	r3, #59	; 0x3b
 80046fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  if((hourOnschedule1 < 10)&&(minuteOnschedule1 < 10))sprintf((char*)Msg, "ON:   0%d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004704:	2b09      	cmp	r3, #9
 8004706:	d80d      	bhi.n	8004724 <drawschedulePanel+0x420>
 8004708:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800470c:	2b09      	cmp	r3, #9
 800470e:	d809      	bhi.n	8004724 <drawschedulePanel+0x420>
 8004710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004714:	461a      	mov	r2, r3
 8004716:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800471a:	4918      	ldr	r1, [pc, #96]	; (800477c <drawschedulePanel+0x478>)
 800471c:	4811      	ldr	r0, [pc, #68]	; (8004764 <drawschedulePanel+0x460>)
 800471e:	f00c fced 	bl	80110fc <siprintf>
 8004722:	e03a      	b.n	800479a <drawschedulePanel+0x496>
		  else if(hourOnschedule1 < 10) sprintf((char*)Msg, "ON:   0%d  : %d", hourOnschedule1, minuteOnschedule1);
 8004724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004728:	2b09      	cmp	r3, #9
 800472a:	d809      	bhi.n	8004740 <drawschedulePanel+0x43c>
 800472c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004730:	461a      	mov	r2, r3
 8004732:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004736:	4912      	ldr	r1, [pc, #72]	; (8004780 <drawschedulePanel+0x47c>)
 8004738:	480a      	ldr	r0, [pc, #40]	; (8004764 <drawschedulePanel+0x460>)
 800473a:	f00c fcdf 	bl	80110fc <siprintf>
 800473e:	e02c      	b.n	800479a <drawschedulePanel+0x496>
		  else if (minuteOnschedule1 < 10) sprintf((char*)Msg, "ON:    %d  :0%d", hourOnschedule1, minuteOnschedule1);
 8004740:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004744:	2b09      	cmp	r3, #9
 8004746:	d81f      	bhi.n	8004788 <drawschedulePanel+0x484>
 8004748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800474c:	461a      	mov	r2, r3
 800474e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004752:	490c      	ldr	r1, [pc, #48]	; (8004784 <drawschedulePanel+0x480>)
 8004754:	4803      	ldr	r0, [pc, #12]	; (8004764 <drawschedulePanel+0x460>)
 8004756:	f00c fcd1 	bl	80110fc <siprintf>
 800475a:	e01e      	b.n	800479a <drawschedulePanel+0x496>
 800475c:	080160f0 	.word	0x080160f0
 8004760:	08015068 	.word	0x08015068
 8004764:	200002fc 	.word	0x200002fc
 8004768:	08015080 	.word	0x08015080
 800476c:	080150a4 	.word	0x080150a4
 8004770:	080150a8 	.word	0x080150a8
 8004774:	080150ac 	.word	0x080150ac
 8004778:	08018068 	.word	0x08018068
 800477c:	080150b4 	.word	0x080150b4
 8004780:	080150c4 	.word	0x080150c4
 8004784:	080150d4 	.word	0x080150d4
		  else sprintf((char*)Msg, "ON:    %d  : %d", hourOnschedule1, minuteOnschedule1);
 8004788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800478c:	461a      	mov	r2, r3
 800478e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004792:	498f      	ldr	r1, [pc, #572]	; (80049d0 <drawschedulePanel+0x6cc>)
 8004794:	488f      	ldr	r0, [pc, #572]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004796:	f00c fcb1 	bl	80110fc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800479a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	2301      	movs	r3, #1
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	2264      	movs	r2, #100	; 0x64
 80047a8:	210a      	movs	r1, #10
 80047aa:	488a      	ldr	r0, [pc, #552]	; (80049d4 <drawschedulePanel+0x6d0>)
 80047ac:	f7fd f9ba 	bl	8001b24 <EF_PutString>

		  if((hourOffschedule1 < 10)&&(minuteOffschedule1 < 10))sprintf((char*)Msg, "OFF: 0%d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047b4:	2b09      	cmp	r3, #9
 80047b6:	d80d      	bhi.n	80047d4 <drawschedulePanel+0x4d0>
 80047b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047bc:	2b09      	cmp	r3, #9
 80047be:	d809      	bhi.n	80047d4 <drawschedulePanel+0x4d0>
 80047c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047c4:	461a      	mov	r2, r3
 80047c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047ca:	4983      	ldr	r1, [pc, #524]	; (80049d8 <drawschedulePanel+0x6d4>)
 80047cc:	4881      	ldr	r0, [pc, #516]	; (80049d4 <drawschedulePanel+0x6d0>)
 80047ce:	f00c fc95 	bl	80110fc <siprintf>
 80047d2:	e024      	b.n	800481e <drawschedulePanel+0x51a>
		  else if(hourOffschedule1 < 10) sprintf((char*)Msg, "OFF: 0%d  : %d", hourOffschedule1, minuteOffschedule1);
 80047d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d809      	bhi.n	80047f0 <drawschedulePanel+0x4ec>
 80047dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047e0:	461a      	mov	r2, r3
 80047e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047e6:	497d      	ldr	r1, [pc, #500]	; (80049dc <drawschedulePanel+0x6d8>)
 80047e8:	487a      	ldr	r0, [pc, #488]	; (80049d4 <drawschedulePanel+0x6d0>)
 80047ea:	f00c fc87 	bl	80110fc <siprintf>
 80047ee:	e016      	b.n	800481e <drawschedulePanel+0x51a>
		  else if (minuteOffschedule1 < 10) sprintf((char*)Msg, "OFF:  %d  :0%d", hourOffschedule1, minuteOffschedule1);
 80047f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047f4:	2b09      	cmp	r3, #9
 80047f6:	d809      	bhi.n	800480c <drawschedulePanel+0x508>
 80047f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80047fc:	461a      	mov	r2, r3
 80047fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004802:	4977      	ldr	r1, [pc, #476]	; (80049e0 <drawschedulePanel+0x6dc>)
 8004804:	4873      	ldr	r0, [pc, #460]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004806:	f00c fc79 	bl	80110fc <siprintf>
 800480a:	e008      	b.n	800481e <drawschedulePanel+0x51a>
		  else sprintf((char*)Msg, "OFF:  %d  : %d", hourOffschedule1, minuteOffschedule1);
 800480c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004810:	461a      	mov	r2, r3
 8004812:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004816:	4973      	ldr	r1, [pc, #460]	; (80049e4 <drawschedulePanel+0x6e0>)
 8004818:	486e      	ldr	r0, [pc, #440]	; (80049d4 <drawschedulePanel+0x6d0>)
 800481a:	f00c fc6f 	bl	80110fc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800481e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	2301      	movs	r3, #1
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2300      	movs	r3, #0
 800482a:	2287      	movs	r2, #135	; 0x87
 800482c:	210a      	movs	r1, #10
 800482e:	4869      	ldr	r0, [pc, #420]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004830:	f7fd f978 	bl	8001b24 <EF_PutString>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
	  }
}
 8004834:	e0c7      	b.n	80049c6 <drawschedulePanel+0x6c2>
	  else if(NrOfschedule == 2)
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f040 80c4 	bne.w	80049c6 <drawschedulePanel+0x6c2>
		  EEPROM_ScheduleHourOnRead(2, &hourOnschedule2);
 800483e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8004842:	4619      	mov	r1, r3
 8004844:	2002      	movs	r0, #2
 8004846:	f7fe fb3a 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnschedule2);
 800484a:	f107 0331 	add.w	r3, r7, #49	; 0x31
 800484e:	4619      	mov	r1, r3
 8004850:	2002      	movs	r0, #2
 8004852:	f7fe fb58 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffschedule2);
 8004856:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800485a:	4619      	mov	r1, r3
 800485c:	2002      	movs	r0, #2
 800485e:	f7fe fb76 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffschedule2);
 8004862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004866:	4619      	mov	r1, r3
 8004868:	2002      	movs	r0, #2
 800486a:	f7fe fb94 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule2DayInWeekTab);
 800486e:	f107 0314 	add.w	r3, r7, #20
 8004872:	4619      	mov	r1, r3
 8004874:	2002      	movs	r0, #2
 8004876:	f7fe f9d1 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule2RelayAndSwitchTab);
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4619      	mov	r1, r3
 8004880:	2002      	movs	r0, #2
 8004882:	f7fe fa47 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  if(hourOnschedule2 > 23) hourOnschedule2 = 23;
 8004886:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800488a:	2b17      	cmp	r3, #23
 800488c:	d902      	bls.n	8004894 <drawschedulePanel+0x590>
 800488e:	2317      	movs	r3, #23
 8004890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		  if(minuteOnschedule2 > 59) minuteOnschedule2 = 59;
 8004894:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004898:	2b3b      	cmp	r3, #59	; 0x3b
 800489a:	d902      	bls.n	80048a2 <drawschedulePanel+0x59e>
 800489c:	233b      	movs	r3, #59	; 0x3b
 800489e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		  if(hourOffschedule2 > 23) hourOffschedule2 = 23;
 80048a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80048a6:	2b17      	cmp	r3, #23
 80048a8:	d902      	bls.n	80048b0 <drawschedulePanel+0x5ac>
 80048aa:	2317      	movs	r3, #23
 80048ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  if(minuteOffschedule2 > 59) minuteOffschedule2 = 59;
 80048b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048b4:	2b3b      	cmp	r3, #59	; 0x3b
 80048b6:	d902      	bls.n	80048be <drawschedulePanel+0x5ba>
 80048b8:	233b      	movs	r3, #59	; 0x3b
 80048ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  if((hourOnschedule2 < 10)&&(minuteOnschedule2 < 10))sprintf((char*)Msg, "ON:    0%d :0%d", hourOnschedule2, minuteOnschedule2);
 80048be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048c2:	2b09      	cmp	r3, #9
 80048c4:	d80d      	bhi.n	80048e2 <drawschedulePanel+0x5de>
 80048c6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d809      	bhi.n	80048e2 <drawschedulePanel+0x5de>
 80048ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048d2:	461a      	mov	r2, r3
 80048d4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048d8:	4943      	ldr	r1, [pc, #268]	; (80049e8 <drawschedulePanel+0x6e4>)
 80048da:	483e      	ldr	r0, [pc, #248]	; (80049d4 <drawschedulePanel+0x6d0>)
 80048dc:	f00c fc0e 	bl	80110fc <siprintf>
 80048e0:	e024      	b.n	800492c <drawschedulePanel+0x628>
		  else if(hourOnschedule2 < 10) sprintf((char*)Msg, "ON:    0%d : %d", hourOnschedule2, minuteOnschedule2);
 80048e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d809      	bhi.n	80048fe <drawschedulePanel+0x5fa>
 80048ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048ee:	461a      	mov	r2, r3
 80048f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048f4:	493d      	ldr	r1, [pc, #244]	; (80049ec <drawschedulePanel+0x6e8>)
 80048f6:	4837      	ldr	r0, [pc, #220]	; (80049d4 <drawschedulePanel+0x6d0>)
 80048f8:	f00c fc00 	bl	80110fc <siprintf>
 80048fc:	e016      	b.n	800492c <drawschedulePanel+0x628>
		  else if (minuteOnschedule2 < 10) sprintf((char*)Msg, "ON:     %d :0%d", hourOnschedule2, minuteOnschedule2);
 80048fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004902:	2b09      	cmp	r3, #9
 8004904:	d809      	bhi.n	800491a <drawschedulePanel+0x616>
 8004906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800490a:	461a      	mov	r2, r3
 800490c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004910:	4937      	ldr	r1, [pc, #220]	; (80049f0 <drawschedulePanel+0x6ec>)
 8004912:	4830      	ldr	r0, [pc, #192]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004914:	f00c fbf2 	bl	80110fc <siprintf>
 8004918:	e008      	b.n	800492c <drawschedulePanel+0x628>
		  else sprintf((char*)Msg, "ON:     %d : %d", hourOnschedule2, minuteOnschedule2);
 800491a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491e:	461a      	mov	r2, r3
 8004920:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004924:	4933      	ldr	r1, [pc, #204]	; (80049f4 <drawschedulePanel+0x6f0>)
 8004926:	482b      	ldr	r0, [pc, #172]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004928:	f00c fbe8 	bl	80110fc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X, STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800492c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	2301      	movs	r3, #1
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	2264      	movs	r2, #100	; 0x64
 800493a:	210a      	movs	r1, #10
 800493c:	4825      	ldr	r0, [pc, #148]	; (80049d4 <drawschedulePanel+0x6d0>)
 800493e:	f7fd f8f1 	bl	8001b24 <EF_PutString>
		  if((hourOffschedule2 < 10)&&(minuteOffschedule2 < 10))sprintf((char*)Msg, "OFF:  0%d :0%d", hourOffschedule2, minuteOffschedule2);
 8004942:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004946:	2b09      	cmp	r3, #9
 8004948:	d80d      	bhi.n	8004966 <drawschedulePanel+0x662>
 800494a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800494e:	2b09      	cmp	r3, #9
 8004950:	d809      	bhi.n	8004966 <drawschedulePanel+0x662>
 8004952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004956:	461a      	mov	r2, r3
 8004958:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800495c:	4926      	ldr	r1, [pc, #152]	; (80049f8 <drawschedulePanel+0x6f4>)
 800495e:	481d      	ldr	r0, [pc, #116]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004960:	f00c fbcc 	bl	80110fc <siprintf>
 8004964:	e024      	b.n	80049b0 <drawschedulePanel+0x6ac>
		  else if(hourOffschedule2 < 10) sprintf((char*)Msg, "OFF:  0%d : %d", hourOffschedule2, minuteOffschedule2);
 8004966:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800496a:	2b09      	cmp	r3, #9
 800496c:	d809      	bhi.n	8004982 <drawschedulePanel+0x67e>
 800496e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004972:	461a      	mov	r2, r3
 8004974:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004978:	4920      	ldr	r1, [pc, #128]	; (80049fc <drawschedulePanel+0x6f8>)
 800497a:	4816      	ldr	r0, [pc, #88]	; (80049d4 <drawschedulePanel+0x6d0>)
 800497c:	f00c fbbe 	bl	80110fc <siprintf>
 8004980:	e016      	b.n	80049b0 <drawschedulePanel+0x6ac>
		  else if (minuteOffschedule2 < 10) sprintf((char*)Msg, "OFF:   %d :0%d", hourOffschedule2, minuteOffschedule2);
 8004982:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004986:	2b09      	cmp	r3, #9
 8004988:	d809      	bhi.n	800499e <drawschedulePanel+0x69a>
 800498a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800498e:	461a      	mov	r2, r3
 8004990:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004994:	491a      	ldr	r1, [pc, #104]	; (8004a00 <drawschedulePanel+0x6fc>)
 8004996:	480f      	ldr	r0, [pc, #60]	; (80049d4 <drawschedulePanel+0x6d0>)
 8004998:	f00c fbb0 	bl	80110fc <siprintf>
 800499c:	e008      	b.n	80049b0 <drawschedulePanel+0x6ac>
		  else sprintf((char*)Msg, "OFF:   %d : %d", hourOffschedule2, minuteOffschedule2);
 800499e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80049a2:	461a      	mov	r2, r3
 80049a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049a8:	4916      	ldr	r1, [pc, #88]	; (8004a04 <drawschedulePanel+0x700>)
 80049aa:	480a      	ldr	r0, [pc, #40]	; (80049d4 <drawschedulePanel+0x6d0>)
 80049ac:	f00c fba6 	bl	80110fc <siprintf>
		  EF_PutString(Msg, STRING_ON_OFF_X+2, STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80049b0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	2301      	movs	r3, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	2300      	movs	r3, #0
 80049bc:	2287      	movs	r2, #135	; 0x87
 80049be:	210c      	movs	r1, #12
 80049c0:	4804      	ldr	r0, [pc, #16]	; (80049d4 <drawschedulePanel+0x6d0>)
 80049c2:	f7fd f8af 	bl	8001b24 <EF_PutString>
}
 80049c6:	bf00      	nop
 80049c8:	3738      	adds	r7, #56	; 0x38
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	080150e4 	.word	0x080150e4
 80049d4:	200002fc 	.word	0x200002fc
 80049d8:	080150f4 	.word	0x080150f4
 80049dc:	08015104 	.word	0x08015104
 80049e0:	08015114 	.word	0x08015114
 80049e4:	08015124 	.word	0x08015124
 80049e8:	08015134 	.word	0x08015134
 80049ec:	08015144 	.word	0x08015144
 80049f0:	08015154 	.word	0x08015154
 80049f4:	08015164 	.word	0x08015164
 80049f8:	08015174 	.word	0x08015174
 80049fc:	08015184 	.word	0x08015184
 8004a00:	08015194 	.word	0x08015194
 8004a04:	080151a4 	.word	0x080151a4

08004a08 <showSchedule1Panel>:

void showSchedule1Panel()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004a0e:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004a12:	f7fd fa71 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004a16:	483f      	ldr	r0, [pc, #252]	; (8004b14 <showSchedule1Panel+0x10c>)
 8004a18:	f7fc fe6a 	bl	80016f0 <EF_SetFont>

	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 1");
 8004a1c:	493e      	ldr	r1, [pc, #248]	; (8004b18 <showSchedule1Panel+0x110>)
 8004a1e:	483f      	ldr	r0, [pc, #252]	; (8004b1c <showSchedule1Panel+0x114>)
 8004a20:	f00c fb6c 	bl	80110fc <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004a24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a32:	220a      	movs	r2, #10
 8004a34:	212a      	movs	r1, #42	; 0x2a
 8004a36:	4839      	ldr	r0, [pc, #228]	; (8004b1c <showSchedule1Panel+0x114>)
 8004a38:	f7fd f874 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004a3c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	2329      	movs	r3, #41	; 0x29
 8004a44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a48:	2129      	movs	r1, #41	; 0x29
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	f7fc fba0 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004a50:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	232b      	movs	r3, #43	; 0x2b
 8004a58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a5c:	212b      	movs	r1, #43	; 0x2b
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fc fb96 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(1);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7ff fc4d 	bl	8004304 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004a6a:	482d      	ldr	r0, [pc, #180]	; (8004b20 <showSchedule1Panel+0x118>)
 8004a6c:	f7fc fe40 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(RIGHT_BUTTON_X, RIGHT_BUTTON_Y, RIGHT_BUTTON_W, RIGHT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004a70:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	2305      	movs	r3, #5
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	2314      	movs	r3, #20
 8004a7c:	225f      	movs	r2, #95	; 0x5f
 8004a7e:	21d8      	movs	r1, #216	; 0xd8
 8004a80:	20dc      	movs	r0, #220	; 0xdc
 8004a82:	f7fc fde4 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "HARM. 2=>");
 8004a86:	4927      	ldr	r1, [pc, #156]	; (8004b24 <showSchedule1Panel+0x11c>)
 8004a88:	4824      	ldr	r0, [pc, #144]	; (8004b1c <showSchedule1Panel+0x114>)
 8004a8a:	f00c fb37 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (RIGHT_BUTTON_X + 10), (RIGHT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004a8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	22da      	movs	r2, #218	; 0xda
 8004a9c:	21e6      	movs	r1, #230	; 0xe6
 8004a9e:	481f      	ldr	r0, [pc, #124]	; (8004b1c <showSchedule1Panel+0x114>)
 8004aa0:	f7fd f840 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004aa4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	2305      	movs	r3, #5
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2314      	movs	r3, #20
 8004ab0:	225a      	movs	r2, #90	; 0x5a
 8004ab2:	21d8      	movs	r1, #216	; 0xd8
 8004ab4:	2078      	movs	r0, #120	; 0x78
 8004ab6:	f7fc fdca 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004aba:	491b      	ldr	r1, [pc, #108]	; (8004b28 <showSchedule1Panel+0x120>)
 8004abc:	4817      	ldr	r0, [pc, #92]	; (8004b1c <showSchedule1Panel+0x114>)
 8004abe:	f00c fb1d 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004ac2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2300      	movs	r3, #0
 8004ace:	22da      	movs	r2, #218	; 0xda
 8004ad0:	217e      	movs	r1, #126	; 0x7e
 8004ad2:	4812      	ldr	r0, [pc, #72]	; (8004b1c <showSchedule1Panel+0x114>)
 8004ad4:	f7fd f826 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004ad8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004adc:	9301      	str	r3, [sp, #4]
 8004ade:	2305      	movs	r3, #5
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	2314      	movs	r3, #20
 8004ae4:	2264      	movs	r2, #100	; 0x64
 8004ae6:	21d8      	movs	r1, #216	; 0xd8
 8004ae8:	200a      	movs	r0, #10
 8004aea:	f7fc fdb0 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004aee:	490f      	ldr	r1, [pc, #60]	; (8004b2c <showSchedule1Panel+0x124>)
 8004af0:	480a      	ldr	r0, [pc, #40]	; (8004b1c <showSchedule1Panel+0x114>)
 8004af2:	f00c fb03 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004af6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	2300      	movs	r3, #0
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	2300      	movs	r3, #0
 8004b02:	22da      	movs	r2, #218	; 0xda
 8004b04:	210d      	movs	r1, #13
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <showSchedule1Panel+0x114>)
 8004b08:	f7fd f80c 	bl	8001b24 <EF_PutString>
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	08018068 	.word	0x08018068
 8004b18:	080151b4 	.word	0x080151b4
 8004b1c:	200002fc 	.word	0x200002fc
 8004b20:	080160f0 	.word	0x080160f0
 8004b24:	080151c4 	.word	0x080151c4
 8004b28:	080151d0 	.word	0x080151d0
 8004b2c:	080151d8 	.word	0x080151d8

08004b30 <showSchedule2Panel>:

void showSchedule2Panel()
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af02      	add	r7, sp, #8
	  ILI9341_ClearDisplay(ILI9341_LIGHTGREY);
 8004b36:	f24c 6018 	movw	r0, #50712	; 0xc618
 8004b3a:	f7fd f9dd 	bl	8001ef8 <ILI9341_ClearDisplay>
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004b3e:	4832      	ldr	r0, [pc, #200]	; (8004c08 <showSchedule2Panel+0xd8>)
 8004b40:	f7fc fdd6 	bl	80016f0 <EF_SetFont>
	  // Display Header
	  sprintf((char*)Msg, "HARMONOGRAM 2");
 8004b44:	4931      	ldr	r1, [pc, #196]	; (8004c0c <showSchedule2Panel+0xdc>)
 8004b46:	4832      	ldr	r0, [pc, #200]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004b48:	f00c fad8 	bl	80110fc <siprintf>
	  EF_PutString(Msg, CLOCK_STRING_POZ_X-5, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_TRANSPARENT, ILI9341_LIGHTGREY);
 8004b4c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	212a      	movs	r1, #42	; 0x2a
 8004b5e:	482c      	ldr	r0, [pc, #176]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004b60:	f7fc ffe0 	bl	8001b24 <EF_PutString>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y, 320, HEADER_UNDERLINE_POZ_Y, HEADER_UNDERLINE_COLOR);
 8004b64:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	2329      	movs	r3, #41	; 0x29
 8004b6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b70:	2129      	movs	r1, #41	; 0x29
 8004b72:	2000      	movs	r0, #0
 8004b74:	f7fc fb0c 	bl	8001190 <GFX_DrawLine>
	  GFX_DrawLine(0, HEADER_UNDERLINE_POZ_Y+2, 320, HEADER_UNDERLINE_POZ_Y+2, HEADER_UNDERLINE_COLOR);
 8004b78:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	232b      	movs	r3, #43	; 0x2b
 8004b80:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004b84:	212b      	movs	r1, #43	; 0x2b
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7fc fb02 	bl	8001190 <GFX_DrawLine>

	  drawschedulePanel(2);
 8004b8c:	2002      	movs	r0, #2
 8004b8e:	f7ff fbb9 	bl	8004304 <drawschedulePanel>

	  //
	  // Display button to change screen
	  EF_SetFont(&arial_11ptFontInfo);
 8004b92:	4820      	ldr	r0, [pc, #128]	; (8004c14 <showSchedule2Panel+0xe4>)
 8004b94:	f7fc fdac 	bl	80016f0 <EF_SetFont>
	  GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_ORANGE);
 8004b98:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	2314      	movs	r3, #20
 8004ba4:	225a      	movs	r2, #90	; 0x5a
 8004ba6:	21d8      	movs	r1, #216	; 0xd8
 8004ba8:	2078      	movs	r0, #120	; 0x78
 8004baa:	f7fc fd50 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, " >POTW<");
 8004bae:	491a      	ldr	r1, [pc, #104]	; (8004c18 <showSchedule2Panel+0xe8>)
 8004bb0:	4817      	ldr	r0, [pc, #92]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004bb2:	f00c faa3 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bb6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	22da      	movs	r2, #218	; 0xda
 8004bc4:	217e      	movs	r1, #126	; 0x7e
 8004bc6:	4812      	ldr	r0, [pc, #72]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004bc8:	f7fc ffac 	bl	8001b24 <EF_PutString>

	  GFX_DrawFillRoundRectangle(LEFT_BUTTON_X, LEFT_BUTTON_Y, LEFT_BUTTON_W, LEFT_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8004bcc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	2305      	movs	r3, #5
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	2314      	movs	r3, #20
 8004bd8:	2264      	movs	r2, #100	; 0x64
 8004bda:	21d8      	movs	r1, #216	; 0xd8
 8004bdc:	200a      	movs	r0, #10
 8004bde:	f7fc fd36 	bl	800164e <GFX_DrawFillRoundRectangle>
	  sprintf((char*)Msg, "<= CLOCK");
 8004be2:	490e      	ldr	r1, [pc, #56]	; (8004c1c <showSchedule2Panel+0xec>)
 8004be4:	480a      	ldr	r0, [pc, #40]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004be6:	f00c fa89 	bl	80110fc <siprintf>
	  EF_PutString(Msg, (LEFT_BUTTON_X + 3), (LEFT_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8004bea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	22da      	movs	r2, #218	; 0xda
 8004bf8:	210d      	movs	r1, #13
 8004bfa:	4805      	ldr	r0, [pc, #20]	; (8004c10 <showSchedule2Panel+0xe0>)
 8004bfc:	f7fc ff92 	bl	8001b24 <EF_PutString>
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	08018068 	.word	0x08018068
 8004c0c:	080151e4 	.word	0x080151e4
 8004c10:	200002fc 	.word	0x200002fc
 8004c14:	080160f0 	.word	0x080160f0
 8004c18:	080151d0 	.word	0x080151d0
 8004c1c:	080151d8 	.word	0x080151d8

08004c20 <ChangeHourOnScreen>:
//
// Change displayed time, if is other than current time
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ChangeHourOnScreen()
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af02      	add	r7, sp, #8
	  uint8_t CHour = DS3231_GetHour();
 8004c26:	f7fd fdb5 	bl	8002794 <DS3231_GetHour>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
	  uint8_t CMinute = DS3231_GetMinute();
 8004c2e:	f7fd fdbd 	bl	80027ac <DS3231_GetMinute>
 8004c32:	4603      	mov	r3, r0
 8004c34:	71bb      	strb	r3, [r7, #6]
	  EF_SetFont(&arialBlack_20ptFontInfo);
 8004c36:	482a      	ldr	r0, [pc, #168]	; (8004ce0 <ChangeHourOnScreen+0xc0>)
 8004c38:	f7fc fd5a 	bl	80016f0 <EF_SetFont>

	  //
	  // Change HOURES
	  if(CHour != OldHours)
 8004c3c:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <ChangeHourOnScreen+0xc4>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	79fa      	ldrb	r2, [r7, #7]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d021      	beq.n	8004c8a <ChangeHourOnScreen+0x6a>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c46:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <ChangeHourOnScreen+0xc8>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d11d      	bne.n	8004c8a <ChangeHourOnScreen+0x6a>
		  {
			  if(CHour < 10)
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d806      	bhi.n	8004c62 <ChangeHourOnScreen+0x42>
			  {
				  sprintf((char*)Msg, " 0%d", CHour);
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	461a      	mov	r2, r3
 8004c58:	4924      	ldr	r1, [pc, #144]	; (8004cec <ChangeHourOnScreen+0xcc>)
 8004c5a:	4825      	ldr	r0, [pc, #148]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004c5c:	f00c fa4e 	bl	80110fc <siprintf>
 8004c60:	e005      	b.n	8004c6e <ChangeHourOnScreen+0x4e>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d", CHour);
 8004c62:	79fb      	ldrb	r3, [r7, #7]
 8004c64:	461a      	mov	r2, r3
 8004c66:	4923      	ldr	r1, [pc, #140]	; (8004cf4 <ChangeHourOnScreen+0xd4>)
 8004c68:	4821      	ldr	r0, [pc, #132]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004c6a:	f00c fa47 	bl	80110fc <siprintf>
			  }
			  EF_PutString(Msg, CZAS_POZ_X + 77 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004c6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	2301      	movs	r3, #1
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2232      	movs	r2, #50	; 0x32
 8004c7c:	2161      	movs	r1, #97	; 0x61
 8004c7e:	481c      	ldr	r0, [pc, #112]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004c80:	f7fc ff50 	bl	8001b24 <EF_PutString>
			  OldHours = CHour;
 8004c84:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <ChangeHourOnScreen+0xc4>)
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	7013      	strb	r3, [r2, #0]
		  }
	  }
	  //
	  // Change MINUTES
	  if(CMinute != OldMinutes)
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <ChangeHourOnScreen+0xd8>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	79ba      	ldrb	r2, [r7, #6]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d021      	beq.n	8004cd8 <ChangeHourOnScreen+0xb8>
	  {
		  if(State == MENUTFT_PARAMETERS)
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <ChangeHourOnScreen+0xc8>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11d      	bne.n	8004cd8 <ChangeHourOnScreen+0xb8>
		  {
			  if(CMinute < 10)
 8004c9c:	79bb      	ldrb	r3, [r7, #6]
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d806      	bhi.n	8004cb0 <ChangeHourOnScreen+0x90>
			  {
				  sprintf((char*)Msg, " 0%d  ", CMinute);
 8004ca2:	79bb      	ldrb	r3, [r7, #6]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4915      	ldr	r1, [pc, #84]	; (8004cfc <ChangeHourOnScreen+0xdc>)
 8004ca8:	4811      	ldr	r0, [pc, #68]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004caa:	f00c fa27 	bl	80110fc <siprintf>
 8004cae:	e005      	b.n	8004cbc <ChangeHourOnScreen+0x9c>
			  }
			  else
			  {
				  sprintf((char*)Msg, " %d  ", CMinute);
 8004cb0:	79bb      	ldrb	r3, [r7, #6]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4912      	ldr	r1, [pc, #72]	; (8004d00 <ChangeHourOnScreen+0xe0>)
 8004cb6:	480e      	ldr	r0, [pc, #56]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004cb8:	f00c fa20 	bl	80110fc <siprintf>
			  }

			  EF_PutString(Msg, CZAS_POZ_X + 130 , CZAS_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8004cbc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2232      	movs	r2, #50	; 0x32
 8004cca:	2196      	movs	r1, #150	; 0x96
 8004ccc:	4808      	ldr	r0, [pc, #32]	; (8004cf0 <ChangeHourOnScreen+0xd0>)
 8004cce:	f7fc ff29 	bl	8001b24 <EF_PutString>
			  OldMinutes = CMinute;
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <ChangeHourOnScreen+0xd8>)
 8004cd4:	79bb      	ldrb	r3, [r7, #6]
 8004cd6:	7013      	strb	r3, [r2, #0]
		  }
	  }

}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08018068 	.word	0x08018068
 8004ce4:	2000024c 	.word	0x2000024c
 8004ce8:	20000290 	.word	0x20000290
 8004cec:	080151f4 	.word	0x080151f4
 8004cf0:	200002fc 	.word	0x200002fc
 8004cf4:	080151fc 	.word	0x080151fc
 8004cf8:	2000024d 	.word	0x2000024d
 8004cfc:	08015200 	.word	0x08015200
 8004d00:	08015208 	.word	0x08015208

08004d04 <predefinedActivityCzyszczenie>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Action make during predefined activity - first activity
//
void predefinedActivityCzyszczenie(uint8_t State)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <predefinedActivityCzyszczenie+0x1e>
	{
		// Read which Relay was ON before turn on activity and restore state before activity
		EEPROM_RelayStateRestore();
 8004d18:	f7fd ff10 	bl	8002b3c <EEPROM_RelayStateRestore>
		EEPROM_LightStateRestore();
 8004d1c:	f7fd ff46 	bl	8002bac <EEPROM_LightStateRestore>
		SendComand(UCMD_RELAY_ALL_OFF);

		SendComand(UCMD_LIGHT_ALL_ON);

	}
}
 8004d20:	e005      	b.n	8004d2e <predefinedActivityCzyszczenie+0x2a>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004d22:	2018      	movs	r0, #24
 8004d24:	f003 fe1c 	bl	8008960 <SendComand>
		SendComand(UCMD_LIGHT_ALL_ON);
 8004d28:	2019      	movs	r0, #25
 8004d2a:	f003 fe19 	bl	8008960 <SendComand>
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <predefinedActivityKarmienie>:

//
// Action make during predefined activity - first activity
//
void predefinedActivityKarmienie(uint8_t State)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
	uint8_t NowyStan = State;
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	73fb      	strb	r3, [r7, #15]
	if(NowyStan == 0) //If turn Activity OFF - Filters ON
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d12e      	bne.n	8004daa <predefinedActivityKarmienie+0x72>
	{
		EEPROM_RelayStateRestore();
 8004d4c:	f7fd fef6 	bl	8002b3c <EEPROM_RelayStateRestore>

		EF_SetFont(&arial_11ptFontInfo);
 8004d50:	481b      	ldr	r0, [pc, #108]	; (8004dc0 <predefinedActivityKarmienie+0x88>)
 8004d52:	f7fc fccd 	bl	80016f0 <EF_SetFont>
		GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004d56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2328      	movs	r3, #40	; 0x28
 8004d62:	2278      	movs	r2, #120	; 0x78
 8004d64:	213c      	movs	r1, #60	; 0x3c
 8004d66:	2064      	movs	r0, #100	; 0x64
 8004d68:	f7fc fc71 	bl	800164e <GFX_DrawFillRoundRectangle>
		sprintf((char*)Msg, "KARMIENIE");
 8004d6c:	4915      	ldr	r1, [pc, #84]	; (8004dc4 <predefinedActivityKarmienie+0x8c>)
 8004d6e:	4816      	ldr	r0, [pc, #88]	; (8004dc8 <predefinedActivityKarmienie+0x90>)
 8004d70:	f00c f9c4 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	223e      	movs	r2, #62	; 0x3e
 8004d82:	2177      	movs	r1, #119	; 0x77
 8004d84:	4810      	ldr	r0, [pc, #64]	; (8004dc8 <predefinedActivityKarmienie+0x90>)
 8004d86:	f7fc fecd 	bl	8001b24 <EF_PutString>
		sprintf((char*)Msg, "OFF");
 8004d8a:	4910      	ldr	r1, [pc, #64]	; (8004dcc <predefinedActivityKarmienie+0x94>)
 8004d8c:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <predefinedActivityKarmienie+0x90>)
 8004d8e:	f00c f9b5 	bl	80110fc <siprintf>
		EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004d92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2250      	movs	r2, #80	; 0x50
 8004da0:	2193      	movs	r1, #147	; 0x93
 8004da2:	4809      	ldr	r0, [pc, #36]	; (8004dc8 <predefinedActivityKarmienie+0x90>)
 8004da4:	f7fc febe 	bl	8001b24 <EF_PutString>
	{
		SendComand(UCMD_RELAY_ALL_OFF);
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
	}

}
 8004da8:	e005      	b.n	8004db6 <predefinedActivityKarmienie+0x7e>
		SendComand(UCMD_RELAY_ALL_OFF);
 8004daa:	2018      	movs	r0, #24
 8004dac:	f003 fdd8 	bl	8008960 <SendComand>
		HAL_TIM_Base_Start_IT(&htim10); // start Timer to count time of feeding
 8004db0:	4807      	ldr	r0, [pc, #28]	; (8004dd0 <predefinedActivityKarmienie+0x98>)
 8004db2:	f009 ff53 	bl	800ec5c <HAL_TIM_Base_Start_IT>
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	080160f0 	.word	0x080160f0
 8004dc4:	08014fec 	.word	0x08014fec
 8004dc8:	200002fc 	.word	0x200002fc
 8004dcc:	08014ffc 	.word	0x08014ffc
 8004dd0:	20000768 	.word	0x20000768

08004dd4 <drawCurrentStateOfSwitches>:

//
// Draw current state of switches button
//
void drawCurrentStateOfSwitches()
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af02      	add	r7, sp, #8
	  //
	  // First Switch
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004dda:	487d      	ldr	r0, [pc, #500]	; (8004fd0 <drawCurrentStateOfSwitches+0x1fc>)
 8004ddc:	f7fc fc88 	bl	80016f0 <EF_SetFont>
	  if(SwitchesButtonState[0] >= 1)
 8004de0:	4b7c      	ldr	r3, [pc, #496]	; (8004fd4 <drawCurrentStateOfSwitches+0x200>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <drawCurrentStateOfSwitches+0x4e>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004de8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	2305      	movs	r3, #5
 8004df0:	9300      	str	r3, [sp, #0]
 8004df2:	2315      	movs	r3, #21
 8004df4:	2221      	movs	r2, #33	; 0x21
 8004df6:	2141      	movs	r1, #65	; 0x41
 8004df8:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004dfc:	f7fc fc27 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e00:	4975      	ldr	r1, [pc, #468]	; (8004fd8 <drawCurrentStateOfSwitches+0x204>)
 8004e02:	4876      	ldr	r0, [pc, #472]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e04:	f00c f97a 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e08:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2300      	movs	r3, #0
 8004e14:	2243      	movs	r2, #67	; 0x43
 8004e16:	f240 1111 	movw	r1, #273	; 0x111
 8004e1a:	4870      	ldr	r0, [pc, #448]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e1c:	f7fc fe82 	bl	8001b24 <EF_PutString>
 8004e20:	e01b      	b.n	8004e5a <drawCurrentStateOfSwitches+0x86>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	2305      	movs	r3, #5
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2315      	movs	r3, #21
 8004e2e:	2221      	movs	r2, #33	; 0x21
 8004e30:	2141      	movs	r1, #65	; 0x41
 8004e32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e36:	f7fc fc0a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004e3a:	4969      	ldr	r1, [pc, #420]	; (8004fe0 <drawCurrentStateOfSwitches+0x20c>)
 8004e3c:	4867      	ldr	r0, [pc, #412]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e3e:	f00c f95d 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004e42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2243      	movs	r2, #67	; 0x43
 8004e50:	f240 1111 	movw	r1, #273	; 0x111
 8004e54:	4861      	ldr	r0, [pc, #388]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e56:	f7fc fe65 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Switch
	  //
	  if(SwitchesButtonState[1] >= 1)
 8004e5a:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <drawCurrentStateOfSwitches+0x200>)
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01c      	beq.n	8004e9c <drawCurrentStateOfSwitches+0xc8>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004e62:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	2305      	movs	r3, #5
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2315      	movs	r3, #21
 8004e6e:	2221      	movs	r2, #33	; 0x21
 8004e70:	215f      	movs	r1, #95	; 0x5f
 8004e72:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004e76:	f7fc fbea 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004e7a:	4957      	ldr	r1, [pc, #348]	; (8004fd8 <drawCurrentStateOfSwitches+0x204>)
 8004e7c:	4857      	ldr	r0, [pc, #348]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e7e:	f00c f93d 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004e82:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2261      	movs	r2, #97	; 0x61
 8004e90:	f240 1111 	movw	r1, #273	; 0x111
 8004e94:	4851      	ldr	r0, [pc, #324]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004e96:	f7fc fe45 	bl	8001b24 <EF_PutString>
 8004e9a:	e01b      	b.n	8004ed4 <drawCurrentStateOfSwitches+0x100>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004e9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	2315      	movs	r3, #21
 8004ea8:	2221      	movs	r2, #33	; 0x21
 8004eaa:	215f      	movs	r1, #95	; 0x5f
 8004eac:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004eb0:	f7fc fbcd 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004eb4:	494a      	ldr	r1, [pc, #296]	; (8004fe0 <drawCurrentStateOfSwitches+0x20c>)
 8004eb6:	4849      	ldr	r0, [pc, #292]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004eb8:	f00c f920 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004ebc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2261      	movs	r2, #97	; 0x61
 8004eca:	f240 1111 	movw	r1, #273	; 0x111
 8004ece:	4843      	ldr	r0, [pc, #268]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004ed0:	f7fc fe28 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Switch
	  //
	  if(SwitchesButtonState[2] >= 1)
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <drawCurrentStateOfSwitches+0x200>)
 8004ed6:	789b      	ldrb	r3, [r3, #2]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01c      	beq.n	8004f16 <drawCurrentStateOfSwitches+0x142>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004edc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	2305      	movs	r3, #5
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2315      	movs	r3, #21
 8004ee8:	2221      	movs	r2, #33	; 0x21
 8004eea:	217d      	movs	r1, #125	; 0x7d
 8004eec:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004ef0:	f7fc fbad 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004ef4:	4938      	ldr	r1, [pc, #224]	; (8004fd8 <drawCurrentStateOfSwitches+0x204>)
 8004ef6:	4839      	ldr	r0, [pc, #228]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004ef8:	f00c f900 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004efc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	227f      	movs	r2, #127	; 0x7f
 8004f0a:	f240 1111 	movw	r1, #273	; 0x111
 8004f0e:	4833      	ldr	r0, [pc, #204]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004f10:	f7fc fe08 	bl	8001b24 <EF_PutString>
 8004f14:	e01b      	b.n	8004f4e <drawCurrentStateOfSwitches+0x17a>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f1a:	9301      	str	r3, [sp, #4]
 8004f1c:	2305      	movs	r3, #5
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2315      	movs	r3, #21
 8004f22:	2221      	movs	r2, #33	; 0x21
 8004f24:	217d      	movs	r1, #125	; 0x7d
 8004f26:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f2a:	f7fc fb90 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004f2e:	492c      	ldr	r1, [pc, #176]	; (8004fe0 <drawCurrentStateOfSwitches+0x20c>)
 8004f30:	482a      	ldr	r0, [pc, #168]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004f32:	f00c f8e3 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004f36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2300      	movs	r3, #0
 8004f42:	227f      	movs	r2, #127	; 0x7f
 8004f44:	f240 1111 	movw	r1, #273	; 0x111
 8004f48:	4824      	ldr	r0, [pc, #144]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004f4a:	f7fc fdeb 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Switch
	  //
	  if(SwitchesButtonState[3] >= 1)
 8004f4e:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <drawCurrentStateOfSwitches+0x200>)
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d01c      	beq.n	8004f90 <drawCurrentStateOfSwitches+0x1bc>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004f56:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	2305      	movs	r3, #5
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2315      	movs	r3, #21
 8004f62:	2221      	movs	r2, #33	; 0x21
 8004f64:	219b      	movs	r1, #155	; 0x9b
 8004f66:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004f6a:	f7fc fb70 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8004f6e:	491a      	ldr	r1, [pc, #104]	; (8004fd8 <drawCurrentStateOfSwitches+0x204>)
 8004f70:	481a      	ldr	r0, [pc, #104]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004f72:	f00c f8c3 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8004f76:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	2300      	movs	r3, #0
 8004f82:	229d      	movs	r2, #157	; 0x9d
 8004f84:	f240 1111 	movw	r1, #273	; 0x111
 8004f88:	4814      	ldr	r0, [pc, #80]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004f8a:	f7fc fdcb 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8004f8e:	e01b      	b.n	8004fc8 <drawCurrentStateOfSwitches+0x1f4>
		  GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8004f90:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004f94:	9301      	str	r3, [sp, #4]
 8004f96:	2305      	movs	r3, #5
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2315      	movs	r3, #21
 8004f9c:	2221      	movs	r2, #33	; 0x21
 8004f9e:	219b      	movs	r1, #155	; 0x9b
 8004fa0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004fa4:	f7fc fb53 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8004fa8:	490d      	ldr	r1, [pc, #52]	; (8004fe0 <drawCurrentStateOfSwitches+0x20c>)
 8004faa:	480c      	ldr	r0, [pc, #48]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004fac:	f00c f8a6 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8004fb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004fb4:	9301      	str	r3, [sp, #4]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	229d      	movs	r2, #157	; 0x9d
 8004fbe:	f240 1111 	movw	r1, #273	; 0x111
 8004fc2:	4806      	ldr	r0, [pc, #24]	; (8004fdc <drawCurrentStateOfSwitches+0x208>)
 8004fc4:	f7fc fdae 	bl	8001b24 <EF_PutString>
}
 8004fc8:	bf00      	nop
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	080160f0 	.word	0x080160f0
 8004fd4:	200002a8 	.word	0x200002a8
 8004fd8:	08014ff8 	.word	0x08014ff8
 8004fdc:	200002fc 	.word	0x200002fc
 8004fe0:	08014ffc 	.word	0x08014ffc

08004fe4 <drawCurrentStateOfLights>:
//
//
// Draw current state of lights button
//
void drawCurrentStateOfLights()
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af02      	add	r7, sp, #8
	  //
	  // First Light
	  //
	  EF_SetFont(&arial_11ptFontInfo);
 8004fea:	4875      	ldr	r0, [pc, #468]	; (80051c0 <drawCurrentStateOfLights+0x1dc>)
 8004fec:	f7fc fb80 	bl	80016f0 <EF_SetFont>
	  if(LightsButtonState[0] >= 1)
 8004ff0:	4b74      	ldr	r3, [pc, #464]	; (80051c4 <drawCurrentStateOfLights+0x1e0>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01a      	beq.n	800502e <drawCurrentStateOfLights+0x4a>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8004ff8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	2305      	movs	r3, #5
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2315      	movs	r3, #21
 8005004:	2221      	movs	r2, #33	; 0x21
 8005006:	2141      	movs	r1, #65	; 0x41
 8005008:	20c8      	movs	r0, #200	; 0xc8
 800500a:	f7fc fb20 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 800500e:	496e      	ldr	r1, [pc, #440]	; (80051c8 <drawCurrentStateOfLights+0x1e4>)
 8005010:	486e      	ldr	r0, [pc, #440]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005012:	f00c f873 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800501a:	9301      	str	r3, [sp, #4]
 800501c:	2300      	movs	r3, #0
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2300      	movs	r3, #0
 8005022:	2243      	movs	r2, #67	; 0x43
 8005024:	21cb      	movs	r1, #203	; 0xcb
 8005026:	4869      	ldr	r0, [pc, #420]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005028:	f7fc fd7c 	bl	8001b24 <EF_PutString>
 800502c:	e019      	b.n	8005062 <drawCurrentStateOfLights+0x7e>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800502e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	2305      	movs	r3, #5
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2315      	movs	r3, #21
 800503a:	2221      	movs	r2, #33	; 0x21
 800503c:	2141      	movs	r1, #65	; 0x41
 800503e:	20c8      	movs	r0, #200	; 0xc8
 8005040:	f7fc fb05 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005044:	4962      	ldr	r1, [pc, #392]	; (80051d0 <drawCurrentStateOfLights+0x1ec>)
 8005046:	4861      	ldr	r0, [pc, #388]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005048:	f00c f858 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800504c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	2243      	movs	r2, #67	; 0x43
 800505a:	21cb      	movs	r1, #203	; 0xcb
 800505c:	485b      	ldr	r0, [pc, #364]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800505e:	f7fc fd61 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Second Light
	  //
	  if(LightsButtonState[1] >= 1)
 8005062:	4b58      	ldr	r3, [pc, #352]	; (80051c4 <drawCurrentStateOfLights+0x1e0>)
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01a      	beq.n	80050a0 <drawCurrentStateOfLights+0xbc>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800506a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	2305      	movs	r3, #5
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	2315      	movs	r3, #21
 8005076:	2221      	movs	r2, #33	; 0x21
 8005078:	215f      	movs	r1, #95	; 0x5f
 800507a:	20c8      	movs	r0, #200	; 0xc8
 800507c:	f7fc fae7 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005080:	4951      	ldr	r1, [pc, #324]	; (80051c8 <drawCurrentStateOfLights+0x1e4>)
 8005082:	4852      	ldr	r0, [pc, #328]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005084:	f00c f83a 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005088:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	2300      	movs	r3, #0
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	2261      	movs	r2, #97	; 0x61
 8005096:	21cb      	movs	r1, #203	; 0xcb
 8005098:	484c      	ldr	r0, [pc, #304]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800509a:	f7fc fd43 	bl	8001b24 <EF_PutString>
 800509e:	e019      	b.n	80050d4 <drawCurrentStateOfLights+0xf0>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80050a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050a4:	9301      	str	r3, [sp, #4]
 80050a6:	2305      	movs	r3, #5
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2315      	movs	r3, #21
 80050ac:	2221      	movs	r2, #33	; 0x21
 80050ae:	215f      	movs	r1, #95	; 0x5f
 80050b0:	20c8      	movs	r0, #200	; 0xc8
 80050b2:	f7fc facc 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 80050b6:	4946      	ldr	r1, [pc, #280]	; (80051d0 <drawCurrentStateOfLights+0x1ec>)
 80050b8:	4844      	ldr	r0, [pc, #272]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 80050ba:	f00c f81f 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	2300      	movs	r3, #0
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	2261      	movs	r2, #97	; 0x61
 80050cc:	21cb      	movs	r1, #203	; 0xcb
 80050ce:	483f      	ldr	r0, [pc, #252]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 80050d0:	f7fc fd28 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Third Light
	  //
	  if(LightsButtonState[2] >= 1)
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <drawCurrentStateOfLights+0x1e0>)
 80050d6:	789b      	ldrb	r3, [r3, #2]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01a      	beq.n	8005112 <drawCurrentStateOfLights+0x12e>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80050dc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80050e0:	9301      	str	r3, [sp, #4]
 80050e2:	2305      	movs	r3, #5
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	2315      	movs	r3, #21
 80050e8:	2221      	movs	r2, #33	; 0x21
 80050ea:	217d      	movs	r1, #125	; 0x7d
 80050ec:	20c8      	movs	r0, #200	; 0xc8
 80050ee:	f7fc faae 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 80050f2:	4935      	ldr	r1, [pc, #212]	; (80051c8 <drawCurrentStateOfLights+0x1e4>)
 80050f4:	4835      	ldr	r0, [pc, #212]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 80050f6:	f00c f801 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80050fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	2300      	movs	r3, #0
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	227f      	movs	r2, #127	; 0x7f
 8005108:	21cb      	movs	r1, #203	; 0xcb
 800510a:	4830      	ldr	r0, [pc, #192]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800510c:	f7fc fd0a 	bl	8001b24 <EF_PutString>
 8005110:	e019      	b.n	8005146 <drawCurrentStateOfLights+0x162>
	  }
	  else
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005112:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2305      	movs	r3, #5
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2315      	movs	r3, #21
 800511e:	2221      	movs	r2, #33	; 0x21
 8005120:	217d      	movs	r1, #125	; 0x7d
 8005122:	20c8      	movs	r0, #200	; 0xc8
 8005124:	f7fc fa93 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 8005128:	4929      	ldr	r1, [pc, #164]	; (80051d0 <drawCurrentStateOfLights+0x1ec>)
 800512a:	4828      	ldr	r0, [pc, #160]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800512c:	f00b ffe6 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005130:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	227f      	movs	r2, #127	; 0x7f
 800513e:	21cb      	movs	r1, #203	; 0xcb
 8005140:	4822      	ldr	r0, [pc, #136]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005142:	f7fc fcef 	bl	8001b24 <EF_PutString>
	  }
	  //
	  // Fourth Light
	  //
	  if(LightsButtonState[3] >= 1)
 8005146:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <drawCurrentStateOfLights+0x1e0>)
 8005148:	78db      	ldrb	r3, [r3, #3]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01a      	beq.n	8005184 <drawCurrentStateOfLights+0x1a0>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 800514e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2305      	movs	r3, #5
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2315      	movs	r3, #21
 800515a:	2221      	movs	r2, #33	; 0x21
 800515c:	219b      	movs	r1, #155	; 0x9b
 800515e:	20c8      	movs	r0, #200	; 0xc8
 8005160:	f7fc fa75 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "ON");
 8005164:	4918      	ldr	r1, [pc, #96]	; (80051c8 <drawCurrentStateOfLights+0x1e4>)
 8005166:	4819      	ldr	r0, [pc, #100]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 8005168:	f00b ffc8 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800516c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	229d      	movs	r2, #157	; 0x9d
 800517a:	21cb      	movs	r1, #203	; 0xcb
 800517c:	4813      	ldr	r0, [pc, #76]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800517e:	f7fc fcd1 	bl	8001b24 <EF_PutString>
	  {
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
		  sprintf((char*)Msg, "OFF");
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
	  }
}
 8005182:	e019      	b.n	80051b8 <drawCurrentStateOfLights+0x1d4>
		  GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005184:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	2305      	movs	r3, #5
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	2315      	movs	r3, #21
 8005190:	2221      	movs	r2, #33	; 0x21
 8005192:	219b      	movs	r1, #155	; 0x9b
 8005194:	20c8      	movs	r0, #200	; 0xc8
 8005196:	f7fc fa5a 	bl	800164e <GFX_DrawFillRoundRectangle>
		  sprintf((char*)Msg, "OFF");
 800519a:	490d      	ldr	r1, [pc, #52]	; (80051d0 <drawCurrentStateOfLights+0x1ec>)
 800519c:	480b      	ldr	r0, [pc, #44]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 800519e:	f00b ffad 	bl	80110fc <siprintf>
		  EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80051a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	2300      	movs	r3, #0
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	229d      	movs	r2, #157	; 0x9d
 80051b0:	21cb      	movs	r1, #203	; 0xcb
 80051b2:	4806      	ldr	r0, [pc, #24]	; (80051cc <drawCurrentStateOfLights+0x1e8>)
 80051b4:	f7fc fcb6 	bl	8001b24 <EF_PutString>
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	080160f0 	.word	0x080160f0
 80051c4:	200002ac 	.word	0x200002ac
 80051c8:	08014ff8 	.word	0x08014ff8
 80051cc:	200002fc 	.word	0x200002fc
 80051d0:	08014ffc 	.word	0x08014ffc

080051d4 <restoreTFTScheduleDayOfWeek>:
}

//
// Restore on TFT screen rectangle indicate each day of week, from EEPROM
void restoreTFTScheduleDayOfWeek(uint8_t NrOfSchedule)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
	uint8_t TempDayTab[7] = {0};
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	f107 030c 	add.w	r3, r7, #12
 80051e6:	2100      	movs	r1, #0
 80051e8:	460a      	mov	r2, r1
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	460a      	mov	r2, r1
 80051ee:	709a      	strb	r2, [r3, #2]
	EEPROM_ScheduleDayInWeekRead(NrOfSchedule, TempDayTab);
 80051f0:	f107 0208 	add.w	r2, r7, #8
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fd0f 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>

	if(TempDayTab[0]) changeTFTScheduleDayOfWeek(1, 1);
 80051fe:	7a3b      	ldrb	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <restoreTFTScheduleDayOfWeek+0x3a>
 8005204:	2101      	movs	r1, #1
 8005206:	2001      	movs	r0, #1
 8005208:	f002 f8a0 	bl	800734c <changeTFTScheduleDayOfWeek>
 800520c:	e003      	b.n	8005216 <restoreTFTScheduleDayOfWeek+0x42>
	else changeTFTScheduleDayOfWeek(1, 0);
 800520e:	2100      	movs	r1, #0
 8005210:	2001      	movs	r0, #1
 8005212:	f002 f89b 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[1]) changeTFTScheduleDayOfWeek(2, 1);
 8005216:	7a7b      	ldrb	r3, [r7, #9]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <restoreTFTScheduleDayOfWeek+0x52>
 800521c:	2101      	movs	r1, #1
 800521e:	2002      	movs	r0, #2
 8005220:	f002 f894 	bl	800734c <changeTFTScheduleDayOfWeek>
 8005224:	e003      	b.n	800522e <restoreTFTScheduleDayOfWeek+0x5a>
	else changeTFTScheduleDayOfWeek(2, 0);
 8005226:	2100      	movs	r1, #0
 8005228:	2002      	movs	r0, #2
 800522a:	f002 f88f 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[2]) changeTFTScheduleDayOfWeek(3, 1);
 800522e:	7abb      	ldrb	r3, [r7, #10]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <restoreTFTScheduleDayOfWeek+0x6a>
 8005234:	2101      	movs	r1, #1
 8005236:	2003      	movs	r0, #3
 8005238:	f002 f888 	bl	800734c <changeTFTScheduleDayOfWeek>
 800523c:	e003      	b.n	8005246 <restoreTFTScheduleDayOfWeek+0x72>
	else changeTFTScheduleDayOfWeek(3, 0);
 800523e:	2100      	movs	r1, #0
 8005240:	2003      	movs	r0, #3
 8005242:	f002 f883 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[3]) changeTFTScheduleDayOfWeek(4, 1);
 8005246:	7afb      	ldrb	r3, [r7, #11]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <restoreTFTScheduleDayOfWeek+0x82>
 800524c:	2101      	movs	r1, #1
 800524e:	2004      	movs	r0, #4
 8005250:	f002 f87c 	bl	800734c <changeTFTScheduleDayOfWeek>
 8005254:	e003      	b.n	800525e <restoreTFTScheduleDayOfWeek+0x8a>
	else changeTFTScheduleDayOfWeek(4, 0);
 8005256:	2100      	movs	r1, #0
 8005258:	2004      	movs	r0, #4
 800525a:	f002 f877 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[4]) changeTFTScheduleDayOfWeek(5, 1);
 800525e:	7b3b      	ldrb	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <restoreTFTScheduleDayOfWeek+0x9a>
 8005264:	2101      	movs	r1, #1
 8005266:	2005      	movs	r0, #5
 8005268:	f002 f870 	bl	800734c <changeTFTScheduleDayOfWeek>
 800526c:	e003      	b.n	8005276 <restoreTFTScheduleDayOfWeek+0xa2>
	else changeTFTScheduleDayOfWeek(5, 0);
 800526e:	2100      	movs	r1, #0
 8005270:	2005      	movs	r0, #5
 8005272:	f002 f86b 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[5]) changeTFTScheduleDayOfWeek(6, 1);
 8005276:	7b7b      	ldrb	r3, [r7, #13]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <restoreTFTScheduleDayOfWeek+0xb2>
 800527c:	2101      	movs	r1, #1
 800527e:	2006      	movs	r0, #6
 8005280:	f002 f864 	bl	800734c <changeTFTScheduleDayOfWeek>
 8005284:	e003      	b.n	800528e <restoreTFTScheduleDayOfWeek+0xba>
	else changeTFTScheduleDayOfWeek(6, 0);
 8005286:	2100      	movs	r1, #0
 8005288:	2006      	movs	r0, #6
 800528a:	f002 f85f 	bl	800734c <changeTFTScheduleDayOfWeek>
	if(TempDayTab[6]) changeTFTScheduleDayOfWeek(7, 1);
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d004      	beq.n	800529e <restoreTFTScheduleDayOfWeek+0xca>
 8005294:	2101      	movs	r1, #1
 8005296:	2007      	movs	r0, #7
 8005298:	f002 f858 	bl	800734c <changeTFTScheduleDayOfWeek>
	else changeTFTScheduleDayOfWeek(7, 0);

}
 800529c:	e003      	b.n	80052a6 <restoreTFTScheduleDayOfWeek+0xd2>
	else changeTFTScheduleDayOfWeek(7, 0);
 800529e:	2100      	movs	r1, #0
 80052a0:	2007      	movs	r0, #7
 80052a2:	f002 f853 	bl	800734c <changeTFTScheduleDayOfWeek>
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <restoreTFTScheduleRelayLights>:

//
// Restore on TFT screen rectangle indicate each Relay and Light, from EEPROM
void restoreTFTScheduleRelayLights(uint8_t NrOfSchedule)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	71fb      	strb	r3, [r7, #7]
	uint8_t TempRelayLIghtsTab[9] = {0};
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	f107 0310 	add.w	r3, r7, #16
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	711a      	strb	r2, [r3, #4]
	EEPROM_ScheduleRelayAndSwitchTabRead(NrOfSchedule, TempRelayLIghtsTab);
 80052c6:	f107 020c 	add.w	r2, r7, #12
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fd fd20 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

	if(TempRelayLIghtsTab[0]) changeTFTScheduleRelayLights (1, 1);
 80052d4:	7b3b      	ldrb	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <restoreTFTScheduleRelayLights+0x36>
 80052da:	2101      	movs	r1, #1
 80052dc:	2001      	movs	r0, #1
 80052de:	f002 f912 	bl	8007506 <changeTFTScheduleRelayLights>
 80052e2:	e003      	b.n	80052ec <restoreTFTScheduleRelayLights+0x3e>
	else changeTFTScheduleRelayLights(1, 0);
 80052e4:	2100      	movs	r1, #0
 80052e6:	2001      	movs	r0, #1
 80052e8:	f002 f90d 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[1]) changeTFTScheduleRelayLights(2, 1);
 80052ec:	7b7b      	ldrb	r3, [r7, #13]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <restoreTFTScheduleRelayLights+0x4e>
 80052f2:	2101      	movs	r1, #1
 80052f4:	2002      	movs	r0, #2
 80052f6:	f002 f906 	bl	8007506 <changeTFTScheduleRelayLights>
 80052fa:	e003      	b.n	8005304 <restoreTFTScheduleRelayLights+0x56>
	else changeTFTScheduleRelayLights(2, 0);
 80052fc:	2100      	movs	r1, #0
 80052fe:	2002      	movs	r0, #2
 8005300:	f002 f901 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[2]) changeTFTScheduleRelayLights(3, 1);
 8005304:	7bbb      	ldrb	r3, [r7, #14]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <restoreTFTScheduleRelayLights+0x66>
 800530a:	2101      	movs	r1, #1
 800530c:	2003      	movs	r0, #3
 800530e:	f002 f8fa 	bl	8007506 <changeTFTScheduleRelayLights>
 8005312:	e003      	b.n	800531c <restoreTFTScheduleRelayLights+0x6e>
	else changeTFTScheduleRelayLights(3, 0);
 8005314:	2100      	movs	r1, #0
 8005316:	2003      	movs	r0, #3
 8005318:	f002 f8f5 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[3]) changeTFTScheduleRelayLights(4, 1);
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <restoreTFTScheduleRelayLights+0x7e>
 8005322:	2101      	movs	r1, #1
 8005324:	2004      	movs	r0, #4
 8005326:	f002 f8ee 	bl	8007506 <changeTFTScheduleRelayLights>
 800532a:	e003      	b.n	8005334 <restoreTFTScheduleRelayLights+0x86>
	else changeTFTScheduleRelayLights(4, 0);
 800532c:	2100      	movs	r1, #0
 800532e:	2004      	movs	r0, #4
 8005330:	f002 f8e9 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[4]) changeTFTScheduleRelayLights(5, 1);
 8005334:	7c3b      	ldrb	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <restoreTFTScheduleRelayLights+0x96>
 800533a:	2101      	movs	r1, #1
 800533c:	2005      	movs	r0, #5
 800533e:	f002 f8e2 	bl	8007506 <changeTFTScheduleRelayLights>
 8005342:	e003      	b.n	800534c <restoreTFTScheduleRelayLights+0x9e>
	else changeTFTScheduleRelayLights(5, 0);
 8005344:	2100      	movs	r1, #0
 8005346:	2005      	movs	r0, #5
 8005348:	f002 f8dd 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[5]) changeTFTScheduleRelayLights(6, 1);
 800534c:	7c7b      	ldrb	r3, [r7, #17]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d004      	beq.n	800535c <restoreTFTScheduleRelayLights+0xae>
 8005352:	2101      	movs	r1, #1
 8005354:	2006      	movs	r0, #6
 8005356:	f002 f8d6 	bl	8007506 <changeTFTScheduleRelayLights>
 800535a:	e003      	b.n	8005364 <restoreTFTScheduleRelayLights+0xb6>
	else changeTFTScheduleRelayLights(6, 0);
 800535c:	2100      	movs	r1, #0
 800535e:	2006      	movs	r0, #6
 8005360:	f002 f8d1 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[6]) changeTFTScheduleRelayLights(7, 1);
 8005364:	7cbb      	ldrb	r3, [r7, #18]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <restoreTFTScheduleRelayLights+0xc6>
 800536a:	2101      	movs	r1, #1
 800536c:	2007      	movs	r0, #7
 800536e:	f002 f8ca 	bl	8007506 <changeTFTScheduleRelayLights>
 8005372:	e003      	b.n	800537c <restoreTFTScheduleRelayLights+0xce>
	else changeTFTScheduleRelayLights(7, 0);
 8005374:	2100      	movs	r1, #0
 8005376:	2007      	movs	r0, #7
 8005378:	f002 f8c5 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[7]) changeTFTScheduleRelayLights(8, 1);
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <restoreTFTScheduleRelayLights+0xde>
 8005382:	2101      	movs	r1, #1
 8005384:	2008      	movs	r0, #8
 8005386:	f002 f8be 	bl	8007506 <changeTFTScheduleRelayLights>
 800538a:	e003      	b.n	8005394 <restoreTFTScheduleRelayLights+0xe6>
	else changeTFTScheduleRelayLights(8, 0);
 800538c:	2100      	movs	r1, #0
 800538e:	2008      	movs	r0, #8
 8005390:	f002 f8b9 	bl	8007506 <changeTFTScheduleRelayLights>
	if(TempRelayLIghtsTab[8]) changeTFTScheduleRelayLights(9, 1);
 8005394:	7d3b      	ldrb	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <restoreTFTScheduleRelayLights+0xf6>
 800539a:	2101      	movs	r1, #1
 800539c:	2009      	movs	r0, #9
 800539e:	f002 f8b2 	bl	8007506 <changeTFTScheduleRelayLights>
	else changeTFTScheduleRelayLights(9, 0);

}
 80053a2:	e003      	b.n	80053ac <restoreTFTScheduleRelayLights+0xfe>
	else changeTFTScheduleRelayLights(9, 0);
 80053a4:	2100      	movs	r1, #0
 80053a6:	2009      	movs	r0, #9
 80053a8:	f002 f8ad 	bl	8007506 <changeTFTScheduleRelayLights>
}
 80053ac:	bf00      	nop
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <initWait>:


//
// Function to wait but only if it is necessary
void initWait(uint32_t TimeInMs)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    while (HAL_GetTick() - LastTime <= TimeInMs)
 80053bc:	bf00      	nop
 80053be:	f004 fad5 	bl	800996c <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <initWait+0x28>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d2f6      	bcs.n	80053be <initWait+0xa>
    {
    }
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000250 	.word	0x20000250

080053e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e6:	f107 0314 	add.w	r3, r7, #20
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]
 80053f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	4b3f      	ldr	r3, [pc, #252]	; (80054f8 <MX_GPIO_Init+0x118>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	4a3e      	ldr	r2, [pc, #248]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005400:	f043 0304 	orr.w	r3, r3, #4
 8005404:	6313      	str	r3, [r2, #48]	; 0x30
 8005406:	4b3c      	ldr	r3, [pc, #240]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	4b38      	ldr	r3, [pc, #224]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	4a37      	ldr	r2, [pc, #220]	; (80054f8 <MX_GPIO_Init+0x118>)
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	6313      	str	r3, [r2, #48]	; 0x30
 8005422:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	4a30      	ldr	r2, [pc, #192]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6313      	str	r3, [r2, #48]	; 0x30
 800543e:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	4b2a      	ldr	r3, [pc, #168]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <MX_GPIO_Init+0x118>)
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	6313      	str	r3, [r2, #48]	; 0x30
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <MX_GPIO_Init+0x118>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	607b      	str	r3, [r7, #4]
 8005464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 8005466:	2200      	movs	r2, #0
 8005468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800546c:	4823      	ldr	r0, [pc, #140]	; (80054fc <MX_GPIO_Init+0x11c>)
 800546e:	f005 f9f9 	bl	800a864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8005478:	4821      	ldr	r0, [pc, #132]	; (8005500 <MX_GPIO_Init+0x120>)
 800547a:	f005 f9f3 	bl	800a864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP_USER_LED_Pin;
 800547e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005484:	2301      	movs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800548c:	2300      	movs	r3, #0
 800548e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BP_USER_LED_GPIO_Port, &GPIO_InitStruct);
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4619      	mov	r1, r3
 8005496:	4819      	ldr	r0, [pc, #100]	; (80054fc <MX_GPIO_Init+0x11c>)
 8005498:	f005 f848 	bl	800a52c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTC_IRQ_Pin;
 800549c:	2310      	movs	r3, #16
 800549e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054a6:	2301      	movs	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RTC_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	4619      	mov	r1, r3
 80054b0:	4814      	ldr	r0, [pc, #80]	; (8005504 <MX_GPIO_Init+0x124>)
 80054b2:	f005 f83b 	bl	800a52c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 80054b6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80054ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054bc:	2301      	movs	r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c4:	2300      	movs	r3, #0
 80054c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4619      	mov	r1, r3
 80054ce:	480c      	ldr	r0, [pc, #48]	; (8005500 <MX_GPIO_Init+0x120>)
 80054d0:	f005 f82c 	bl	800a52c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 80054d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80054da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80054de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	4619      	mov	r1, r3
 80054ea:	4806      	ldr	r0, [pc, #24]	; (8005504 <MX_GPIO_Init+0x124>)
 80054ec:	f005 f81e 	bl	800a52c <HAL_GPIO_Init>

}
 80054f0:	bf00      	nop
 80054f2:	3728      	adds	r7, #40	; 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40020800 	.word	0x40020800
 8005500:	40020400 	.word	0x40020400
 8005504:	40020000 	.word	0x40020000

08005508 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800550c:	4b12      	ldr	r3, [pc, #72]	; (8005558 <MX_I2C1_Init+0x50>)
 800550e:	4a13      	ldr	r2, [pc, #76]	; (800555c <MX_I2C1_Init+0x54>)
 8005510:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <MX_I2C1_Init+0x50>)
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <MX_I2C1_Init+0x58>)
 8005516:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <MX_I2C1_Init+0x50>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <MX_I2C1_Init+0x50>)
 8005520:	2200      	movs	r2, #0
 8005522:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <MX_I2C1_Init+0x50>)
 8005526:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800552a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <MX_I2C1_Init+0x50>)
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <MX_I2C1_Init+0x50>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005538:	4b07      	ldr	r3, [pc, #28]	; (8005558 <MX_I2C1_Init+0x50>)
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <MX_I2C1_Init+0x50>)
 8005540:	2200      	movs	r2, #0
 8005542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005544:	4804      	ldr	r0, [pc, #16]	; (8005558 <MX_I2C1_Init+0x50>)
 8005546:	f005 f9d9 	bl	800a8fc <HAL_I2C_Init>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005550:	f000 fa7c 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	200003f0 	.word	0x200003f0
 800555c:	40005400 	.word	0x40005400
 8005560:	00061a80 	.word	0x00061a80

08005564 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <MX_I2C3_Init+0x50>)
 800556a:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <MX_I2C3_Init+0x54>)
 800556c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <MX_I2C3_Init+0x50>)
 8005570:	4a12      	ldr	r2, [pc, #72]	; (80055bc <MX_I2C3_Init+0x58>)
 8005572:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <MX_I2C3_Init+0x50>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <MX_I2C3_Init+0x50>)
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <MX_I2C3_Init+0x50>)
 8005582:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005586:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <MX_I2C3_Init+0x50>)
 800558a:	2200      	movs	r2, #0
 800558c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <MX_I2C3_Init+0x50>)
 8005590:	2200      	movs	r2, #0
 8005592:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <MX_I2C3_Init+0x50>)
 8005596:	2200      	movs	r2, #0
 8005598:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <MX_I2C3_Init+0x50>)
 800559c:	2200      	movs	r2, #0
 800559e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80055a0:	4804      	ldr	r0, [pc, #16]	; (80055b4 <MX_I2C3_Init+0x50>)
 80055a2:	f005 f9ab 	bl	800a8fc <HAL_I2C_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80055ac:	f000 fa4e 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	2000033c 	.word	0x2000033c
 80055b8:	40005c00 	.word	0x40005c00
 80055bc:	000186a0 	.word	0x000186a0

080055c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c8:	f107 031c 	add.w	r3, r7, #28
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a74      	ldr	r2, [pc, #464]	; (80057b0 <HAL_I2C_MspInit+0x1f0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	f040 8090 	bne.w	8005704 <HAL_I2C_MspInit+0x144>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	4b72      	ldr	r3, [pc, #456]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	4a71      	ldr	r2, [pc, #452]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	6313      	str	r3, [r2, #48]	; 0x30
 80055f4:	4b6f      	ldr	r3, [pc, #444]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005600:	23c0      	movs	r3, #192	; 0xc0
 8005602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005604:	2312      	movs	r3, #18
 8005606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800560c:	2303      	movs	r3, #3
 800560e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005610:	2304      	movs	r3, #4
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005614:	f107 031c 	add.w	r3, r7, #28
 8005618:	4619      	mov	r1, r3
 800561a:	4867      	ldr	r0, [pc, #412]	; (80057b8 <HAL_I2C_MspInit+0x1f8>)
 800561c:	f004 ff86 	bl	800a52c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	4b63      	ldr	r3, [pc, #396]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	4a62      	ldr	r2, [pc, #392]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 800562a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800562e:	6413      	str	r3, [r2, #64]	; 0x40
 8005630:	4b60      	ldr	r3, [pc, #384]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800563c:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 800563e:	4a60      	ldr	r2, [pc, #384]	; (80057c0 <HAL_I2C_MspInit+0x200>)
 8005640:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005642:	4b5e      	ldr	r3, [pc, #376]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005648:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005650:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005652:	2200      	movs	r2, #0
 8005654:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005656:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800565c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800565e:	4b57      	ldr	r3, [pc, #348]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005660:	2200      	movs	r2, #0
 8005662:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005664:	4b55      	ldr	r3, [pc, #340]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005666:	2200      	movs	r2, #0
 8005668:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800566a:	4b54      	ldr	r3, [pc, #336]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 800566c:	2200      	movs	r2, #0
 800566e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005670:	4b52      	ldr	r3, [pc, #328]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005672:	2200      	movs	r2, #0
 8005674:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005676:	4b51      	ldr	r3, [pc, #324]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005678:	2200      	movs	r2, #0
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800567c:	484f      	ldr	r0, [pc, #316]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 800567e:	f004 fb45 	bl	8009d0c <HAL_DMA_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005688:	f000 f9e0 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a4b      	ldr	r2, [pc, #300]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
 8005692:	4a4a      	ldr	r2, [pc, #296]	; (80057bc <HAL_I2C_MspInit+0x1fc>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8005698:	4b4a      	ldr	r3, [pc, #296]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 800569a:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_I2C_MspInit+0x208>)
 800569c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056a4:	4b47      	ldr	r3, [pc, #284]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056b0:	4b44      	ldr	r3, [pc, #272]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056b8:	4b42      	ldr	r3, [pc, #264]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056be:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80056c4:	4b3f      	ldr	r3, [pc, #252]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056ca:	4b3e      	ldr	r3, [pc, #248]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056d0:	4b3c      	ldr	r3, [pc, #240]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80056d6:	483b      	ldr	r0, [pc, #236]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056d8:	f004 fb18 	bl	8009d0c <HAL_DMA_Init>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80056e2:	f000 f9b3 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a36      	ldr	r2, [pc, #216]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34
 80056ec:	4a35      	ldr	r2, [pc, #212]	; (80057c4 <HAL_I2C_MspInit+0x204>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2100      	movs	r1, #0
 80056f6:	2020      	movs	r0, #32
 80056f8:	f004 faa7 	bl	8009c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80056fc:	2020      	movs	r0, #32
 80056fe:	f004 fac0 	bl	8009c82 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005702:	e050      	b.n	80057a6 <HAL_I2C_MspInit+0x1e6>
  else if(i2cHandle->Instance==I2C3)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a30      	ldr	r2, [pc, #192]	; (80057cc <HAL_I2C_MspInit+0x20c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d14b      	bne.n	80057a6 <HAL_I2C_MspInit+0x1e6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	4b28      	ldr	r3, [pc, #160]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6313      	str	r3, [r2, #48]	; 0x30
 800571e:	4b25      	ldr	r3, [pc, #148]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005734:	f043 0302 	orr.w	r3, r3, #2
 8005738:	6313      	str	r3, [r2, #48]	; 0x30
 800573a:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800574c:	2312      	movs	r3, #18
 800574e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	2300      	movs	r3, #0
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005754:	2303      	movs	r3, #3
 8005756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005758:	2304      	movs	r3, #4
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575c:	f107 031c 	add.w	r3, r7, #28
 8005760:	4619      	mov	r1, r3
 8005762:	481b      	ldr	r0, [pc, #108]	; (80057d0 <HAL_I2C_MspInit+0x210>)
 8005764:	f004 fee2 	bl	800a52c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800576e:	2312      	movs	r3, #18
 8005770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005776:	2303      	movs	r3, #3
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800577a:	2309      	movs	r3, #9
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577e:	f107 031c 	add.w	r3, r7, #28
 8005782:	4619      	mov	r1, r3
 8005784:	480c      	ldr	r0, [pc, #48]	; (80057b8 <HAL_I2C_MspInit+0x1f8>)
 8005786:	f004 fed1 	bl	800a52c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 8005794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005798:	6413      	str	r3, [r2, #64]	; 0x40
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_I2C_MspInit+0x1f4>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]
}
 80057a6:	bf00      	nop
 80057a8:	3730      	adds	r7, #48	; 0x30
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40005400 	.word	0x40005400
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40020400 	.word	0x40020400
 80057bc:	20000444 	.word	0x20000444
 80057c0:	40026010 	.word	0x40026010
 80057c4:	20000390 	.word	0x20000390
 80057c8:	40026028 	.word	0x40026028
 80057cc:	40005c00 	.word	0x40005c00
 80057d0:	40020000 	.word	0x40020000

080057d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057da:	f004 f861 	bl	80098a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057de:	f000 f857 	bl	8005890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80057e2:	f7ff fdfd 	bl	80053e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80057e6:	f003 fa9d 	bl	8008d24 <MX_SPI1_Init>
  MX_DMA_Init();
 80057ea:	f7fc fe83 	bl	80024f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80057ee:	f003 ff57 	bl	80096a0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80057f2:	f003 facd 	bl	8008d90 <MX_SPI3_Init>
  MX_I2C1_Init();
 80057f6:	f7ff fe87 	bl	8005508 <MX_I2C1_Init>
  MX_TIM11_Init();
 80057fa:	f003 fd43 	bl	8009284 <MX_TIM11_Init>
  MX_TIM10_Init();
 80057fe:	f003 fd1d 	bl	800923c <MX_TIM10_Init>
  MX_I2C3_Init();
 8005802:	f7ff feaf 	bl	8005564 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005806:	f000 f8ab 	bl	8005960 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  //
  //Timer START
  HAL_TIM_Base_Start_IT(&htim11);
 800580a:	481b      	ldr	r0, [pc, #108]	; (8005878 <main+0xa4>)
 800580c:	f009 fa26 	bl	800ec5c <HAL_TIM_Base_Start_IT>
  // TFT controller INIT
  ILI9341_Init(&hspi1);
 8005810:	481a      	ldr	r0, [pc, #104]	; (800587c <main+0xa8>)
 8005812:	f7fc fbcf 	bl	8001fb4 <ILI9341_Init>
  // UART in DMA mode with use RingBuffer INIT
  UARTDMA_Init(&huartdma2, &huart2);
 8005816:	491a      	ldr	r1, [pc, #104]	; (8005880 <main+0xac>)
 8005818:	481a      	ldr	r0, [pc, #104]	; (8005884 <main+0xb0>)
 800581a:	f003 fef2 	bl	8009602 <UARTDMA_Init>
  // TFT touch controller INIT
  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 800581e:	2117      	movs	r1, #23
 8005820:	4819      	ldr	r0, [pc, #100]	; (8005888 <main+0xb4>)
 8005822:	f7fc fe17 	bl	8002454 <XPT2046_Init>
  // RTC Initialization
  DS3231_Init(&hi2c1);
 8005826:	4819      	ldr	r0, [pc, #100]	; (800588c <main+0xb8>)
 8005828:	f7fc fe9c 	bl	8002564 <DS3231_Init>
  DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800582c:	2001      	movs	r0, #1
 800582e:	f7fc fef3 	bl	8002618 <DS3231_SetInterruptMode>
  DS3231_EnableOscillator(DS3231_ENABLED);
 8005832:	2001      	movs	r0, #1
 8005834:	f7fc ff10 	bl	8002658 <DS3231_EnableOscillator>


  uint8_t result = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	71fb      	strb	r3, [r7, #7]
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 800583c:	e001      	b.n	8005842 <main+0x6e>
  Error_Handler();
 800583e:	f000 f905 	bl	8005a4c <Error_Handler>
  while (eeprom_read(0x01, &result, sizeof(result)) != HAL_OK)
 8005842:	1dfb      	adds	r3, r7, #7
 8005844:	2201      	movs	r2, #1
 8005846:	4619      	mov	r1, r3
 8005848:	2001      	movs	r0, #1
 800584a:	f7fd f851 	bl	80028f0 <eeprom_read>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f4      	bne.n	800583e <main+0x6a>
  {

	  //
	  // RECEIVE DATA FROM SECUND uC
	  //
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005854:	480b      	ldr	r0, [pc, #44]	; (8005884 <main+0xb0>)
 8005856:	f003 fe87 	bl	8009568 <UARTDMA_IsDataReceivedReady>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <main+0x92>
	  {
		  UART_ParseLine(&huartdma2); // Parsing function
 8005860:	4808      	ldr	r0, [pc, #32]	; (8005884 <main+0xb0>)
 8005862:	f002 fda1 	bl	80083a8 <UART_ParseLine>
	  }

	  //
	  // TRANSMIT DATA AND COMAND TO SECOND uC
	  //
	  UARTDMA_TransmitEvent(&huartdma2);
 8005866:	4807      	ldr	r0, [pc, #28]	; (8005884 <main+0xb0>)
 8005868:	f003 fe90 	bl	800958c <UARTDMA_TransmitEvent>

	  //
	  // TOUCH SCREEN
	  //
	  XPT2046_Task();
 800586c:	f7fc fd20 	bl	80022b0 <XPT2046_Task>

	  //
	  // CURRENT DISPLAYED SCREEN
	  //
	  MenuTFT();
 8005870:	f000 f928 	bl	8005ac4 <MenuTFT>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2))
 8005874:	e7ee      	b.n	8005854 <main+0x80>
 8005876:	bf00      	nop
 8005878:	200007b0 	.word	0x200007b0
 800587c:	20000710 	.word	0x20000710
 8005880:	200008b8 	.word	0x200008b8
 8005884:	200004a4 	.word	0x200004a4
 8005888:	200006b8 	.word	0x200006b8
 800588c:	200003f0 	.word	0x200003f0

08005890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b094      	sub	sp, #80	; 0x50
 8005894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	2230      	movs	r2, #48	; 0x30
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f00a fda4 	bl	80103ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	4b27      	ldr	r3, [pc, #156]	; (8005958 <SystemClock_Config+0xc8>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <SystemClock_Config+0xc8>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c2:	6413      	str	r3, [r2, #64]	; 0x40
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <SystemClock_Config+0xc8>)
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058d0:	2300      	movs	r3, #0
 80058d2:	607b      	str	r3, [r7, #4]
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <SystemClock_Config+0xcc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a20      	ldr	r2, [pc, #128]	; (800595c <SystemClock_Config+0xcc>)
 80058da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <SystemClock_Config+0xcc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80058f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80058f6:	2302      	movs	r3, #2
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80058fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005900:	230c      	movs	r3, #12
 8005902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8005904:	2360      	movs	r3, #96	; 0x60
 8005906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005908:	2302      	movs	r3, #2
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800590c:	2304      	movs	r3, #4
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005910:	f107 0320 	add.w	r3, r7, #32
 8005914:	4618      	mov	r0, r3
 8005916:	f008 f8f5 	bl	800db04 <HAL_RCC_OscConfig>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005920:	f000 f894 	bl	8005a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005924:	230f      	movs	r3, #15
 8005926:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005928:	2302      	movs	r3, #2
 800592a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	2103      	movs	r1, #3
 8005940:	4618      	mov	r0, r3
 8005942:	f008 fb57 	bl	800dff4 <HAL_RCC_ClockConfig>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800594c:	f000 f87e 	bl	8005a4c <Error_Handler>
  }
}
 8005950:	bf00      	nop
 8005952:	3750      	adds	r7, #80	; 0x50
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000

08005960 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	2100      	movs	r1, #0
 8005968:	200a      	movs	r0, #10
 800596a:	f004 f96e 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800596e:	200a      	movs	r0, #10
 8005970:	f004 f987 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005974:	2200      	movs	r2, #0
 8005976:	2100      	movs	r1, #0
 8005978:	2017      	movs	r0, #23
 800597a:	f004 f966 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800597e:	2017      	movs	r0, #23
 8005980:	f004 f97f 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005984:	2200      	movs	r2, #0
 8005986:	2100      	movs	r1, #0
 8005988:	201f      	movs	r0, #31
 800598a:	f004 f95e 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800598e:	201f      	movs	r0, #31
 8005990:	f004 f977 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005994:	2200      	movs	r2, #0
 8005996:	2100      	movs	r1, #0
 8005998:	2026      	movs	r0, #38	; 0x26
 800599a:	f004 f956 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800599e:	2026      	movs	r0, #38	; 0x26
 80059a0:	f004 f96f 	bl	8009c82 <HAL_NVIC_EnableIRQ>
  /* SPI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80059a4:	2200      	movs	r2, #0
 80059a6:	2100      	movs	r1, #0
 80059a8:	2033      	movs	r0, #51	; 0x33
 80059aa:	f004 f94e 	bl	8009c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80059ae:	2033      	movs	r0, #51	; 0x33
 80059b0:	f004 f967 	bl	8009c82 <HAL_NVIC_EnableIRQ>
}
 80059b4:	bf00      	nop
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Periodic interrupt from TIMERS Callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11) // Update event one per 8 seconds
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		ChangeHourOnScreen(); // Check if current showing hour are different from this from RTC and change it
 80059ca:	f7ff f929 	bl	8004c20 <ChangeHourOnScreen>
	}
	if(htim->Instance == TIM10) // Update even each second - one per second 1/s
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d117      	bne.n	8005a08 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(FeedingCounter >= FEEDING_TIME_IN_S) // timer to count seconds from start feeding to turn off this activity
 80059d8:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d90d      	bls.n	80059fc <HAL_TIM_PeriodElapsedCallback+0x44>
		{
			HAL_GPIO_TogglePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin);
 80059e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80059e6:	f004 ff56 	bl	800a896 <HAL_GPIO_TogglePin>
			predefinedActivityKarmienie(0);
 80059ea:	2000      	movs	r0, #0
 80059ec:	f7ff f9a4 	bl	8004d38 <predefinedActivityKarmienie>
			FeedingCounter = 0;
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80059f6:	480a      	ldr	r0, [pc, #40]	; (8005a20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80059f8:	f009 f992 	bl	800ed20 <HAL_TIM_Base_Stop_IT>

		}
		FeedingCounter++;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005a06:	701a      	strb	r2, [r3, #0]
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40014800 	.word	0x40014800
 8005a14:	40014400 	.word	0x40014400
 8005a18:	20000254 	.word	0x20000254
 8005a1c:	40020800 	.word	0x40020800
 8005a20:	20000768 	.word	0x20000768

08005a24 <HAL_GPIO_EXTI_Callback>:

// Output interrupt from GPIO etc. Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin) // Interrupt from XPT2046 - touch screen controler
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a34:	d101      	bne.n	8005a3a <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8005a36:	f7fc fd01 	bl	800243c <XPT2046_IRQ>
	}

	if(GPIO_Pin == RTC_IRQ_Pin) // Interrupt from RTC - alarm one per minute
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d101      	bne.n	8005a44 <HAL_GPIO_EXTI_Callback+0x20>
	{
		DS3231_ClearAlarm2Flag();
 8005a40:	f7fc fe4e 	bl	80026e0 <DS3231_ClearAlarm2Flag>

	}
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	ILI9341_ClearDisplay(ILI9341_RED);
 8005a52:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8005a56:	f7fc fa4f 	bl	8001ef8 <ILI9341_ClearDisplay>
	EF_SetFont(&arial_11ptFontInfo);
 8005a5a:	4814      	ldr	r0, [pc, #80]	; (8005aac <Error_Handler+0x60>)
 8005a5c:	f7fb fe48 	bl	80016f0 <EF_SetFont>
	sprintf((char*)Msg, "Error in Function: %s\n", __FILE__);
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <Error_Handler+0x64>)
 8005a62:	4914      	ldr	r1, [pc, #80]	; (8005ab4 <Error_Handler+0x68>)
 8005a64:	4814      	ldr	r0, [pc, #80]	; (8005ab8 <Error_Handler+0x6c>)
 8005a66:	f00b fb49 	bl	80110fc <siprintf>
	EF_PutString(Msg, ERROR_FILE_POZ_X, ERROR_FILE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005a6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	2301      	movs	r3, #1
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	2214      	movs	r2, #20
 8005a78:	210a      	movs	r1, #10
 8005a7a:	480f      	ldr	r0, [pc, #60]	; (8005ab8 <Error_Handler+0x6c>)
 8005a7c:	f7fc f852 	bl	8001b24 <EF_PutString>
	sprintf((char*)Msg, "Function: %s, Line: %d\n",__func__, (int)__LINE__);
 8005a80:	f240 1335 	movw	r3, #309	; 0x135
 8005a84:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <Error_Handler+0x70>)
 8005a86:	490e      	ldr	r1, [pc, #56]	; (8005ac0 <Error_Handler+0x74>)
 8005a88:	480b      	ldr	r0, [pc, #44]	; (8005ab8 <Error_Handler+0x6c>)
 8005a8a:	f00b fb37 	bl	80110fc <siprintf>
	EF_PutString(Msg, ERROR_FUNC_AND_LINE_POZ_X, ERROR_FUNC_AND_LINE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_RED);
 8005a8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	2301      	movs	r3, #1
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2232      	movs	r2, #50	; 0x32
 8005a9c:	210a      	movs	r1, #10
 8005a9e:	4806      	ldr	r0, [pc, #24]	; (8005ab8 <Error_Handler+0x6c>)
 8005aa0:	f7fc f840 	bl	8001b24 <EF_PutString>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005aa4:	b672      	cpsid	i
}
 8005aa6:	bf00      	nop

  __disable_irq();

  while (1)
 8005aa8:	e7fe      	b.n	8005aa8 <Error_Handler+0x5c>
 8005aaa:	bf00      	nop
 8005aac:	080160f0 	.word	0x080160f0
 8005ab0:	08015210 	.word	0x08015210
 8005ab4:	08015224 	.word	0x08015224
 8005ab8:	200002fc 	.word	0x200002fc
 8005abc:	08028764 	.word	0x08028764
 8005ac0:	0801523c 	.word	0x0801523c

08005ac4 <MenuTFT>:
//
//	MAIN FUNCTION TO HANDLING STAND MACHINE OF SCREEN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MenuTFT(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
	switch(State)
 8005ac8:	4b4f      	ldr	r3, [pc, #316]	; (8005c08 <MenuTFT+0x144>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	f200 8098 	bhi.w	8005c02 <MenuTFT+0x13e>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <MenuTFT+0x14>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b43 	.word	0x08005b43
 8005ae4:	08005b73 	.word	0x08005b73
 8005ae8:	08005b91 	.word	0x08005b91
 8005aec:	08005b5b 	.word	0x08005b5b
 8005af0:	08005ba9 	.word	0x08005ba9
 8005af4:	08005bc7 	.word	0x08005bc7
 8005af8:	08005be5 	.word	0x08005be5
	{
	case MENUTFT_INIT:
		system_init();
 8005afc:	f7fd fafc 	bl	80030f8 <system_init>
		State = MENUTFT_PARAMETERS;
 8005b00:	4b41      	ldr	r3, [pc, #260]	; (8005c08 <MenuTFT+0x144>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
		StateChangeFlag = 1;
 8005b06:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <MenuTFT+0x148>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	701a      	strb	r2, [r3, #0]
		break;
 8005b0c:	e079      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_PARAMETERS:
		if(StateChangeFlag == 1) // make only one time
 8005b0e:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <MenuTFT+0x148>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d112      	bne.n	8005b3c <MenuTFT+0x78>
		{
			showCurrentParameters(CTemp, 0, 0, 0, CPres);
 8005b16:	4b3e      	ldr	r3, [pc, #248]	; (8005c10 <MenuTFT+0x14c>)
 8005b18:	edd3 7a00 	vldr	s15, [r3]
 8005b1c:	4b3d      	ldr	r3, [pc, #244]	; (8005c14 <MenuTFT+0x150>)
 8005b1e:	ed93 7a00 	vldr	s14, [r3]
 8005b22:	eeb0 1a47 	vmov.f32	s2, s14
 8005b26:	2100      	movs	r1, #0
 8005b28:	2000      	movs	r0, #0
 8005b2a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8005c18 <MenuTFT+0x154>
 8005b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b32:	f7fd fc59 	bl	80033e8 <showCurrentParameters>
			StateChangeFlag = 0;
 8005b36:	4b35      	ldr	r3, [pc, #212]	; (8005c0c <MenuTFT+0x148>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	701a      	strb	r2, [r3, #0]
		}
		TouchParametersActivity();
 8005b3c:	f000 f874 	bl	8005c28 <TouchParametersActivity>
		break;
 8005b40:	e05f      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_SWITCH:
		if(StateChangeFlag == 1) // make only one time
 8005b42:	4b32      	ldr	r3, [pc, #200]	; (8005c0c <MenuTFT+0x148>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d104      	bne.n	8005b54 <MenuTFT+0x90>
		{
			showControlPanel();
 8005b4a:	f7fd fd97 	bl	800367c <showControlPanel>
			StateChangeFlag = 0;
 8005b4e:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <MenuTFT+0x148>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
		}
		TouchSwitchActivity();
 8005b54:	f000 f8c8 	bl	8005ce8 <TouchSwitchActivity>
		break;
 8005b58:	e053      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_LIGHTS:
		if(StateChangeFlag == 1) // make only one time
 8005b5a:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <MenuTFT+0x148>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d104      	bne.n	8005b6c <MenuTFT+0xa8>
		{
			showLightsControlPanel();
 8005b62:	f7fd fe65 	bl	8003830 <showLightsControlPanel>
			StateChangeFlag = 0;
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <MenuTFT+0x148>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
		}
		TouchLightsActivity();
 8005b6c:	f000 faa4 	bl	80060b8 <TouchLightsActivity>
		break;
 8005b70:	e047      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_CLOCK:
		if(StateChangeFlag == 1) // make only one time
 8005b72:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <MenuTFT+0x148>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d107      	bne.n	8005b8a <MenuTFT+0xc6>
		{
			showClockSetPanel();
 8005b7a:	f7fd ff31 	bl	80039e0 <showClockSetPanel>
			ClockChangeFlag = 1;
 8005b7e:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <MenuTFT+0x158>)
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005b84:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <MenuTFT+0x148>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
		}
		TouchClockActivity();
 8005b8a:	f000 fc6b 	bl	8006464 <TouchClockActivity>
		break;
 8005b8e:	e038      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_ACTIVITIES:
		if(StateChangeFlag == 1) // make only one time
 8005b90:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <MenuTFT+0x148>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d104      	bne.n	8005ba2 <MenuTFT+0xde>
		{
			showPreparedActivitiesPanel();
 8005b98:	f7fe f88a 	bl	8003cb0 <showPreparedActivitiesPanel>
			StateChangeFlag = 0;
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <MenuTFT+0x148>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
		}
		TouchPredefinedActivityActivity();
 8005ba2:	f000 fe01 	bl	80067a8 <TouchPredefinedActivityActivity>
		break;
 8005ba6:	e02c      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_WS_LED:
		if(StateChangeFlag == 1) // make only one time
 8005ba8:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <MenuTFT+0x148>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <MenuTFT+0xfc>
		{
			showWSLedPanel();
 8005bb0:	f7fe f98e 	bl	8003ed0 <showWSLedPanel>
			WSLedChangeFlag = 1;
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <MenuTFT+0x15c>)
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <MenuTFT+0x148>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
		}
		TouchWSLedActivity();
 8005bc0:	f000 ff1a 	bl	80069f8 <TouchWSLedActivity>
		break;
 8005bc4:	e01d      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_1:
		if(StateChangeFlag == 1) // make only one time
 8005bc6:	4b11      	ldr	r3, [pc, #68]	; (8005c0c <MenuTFT+0x148>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d107      	bne.n	8005bde <MenuTFT+0x11a>
		{
			showSchedule1Panel();
 8005bce:	f7fe ff1b 	bl	8004a08 <showSchedule1Panel>
			ScheduleChangeFlag = 1;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <MenuTFT+0x160>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <MenuTFT+0x148>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
		}
		Schedule1Activity();
 8005bde:	f001 f8b7 	bl	8006d50 <Schedule1Activity>
		break;
 8005be2:	e00e      	b.n	8005c02 <MenuTFT+0x13e>
	case MENUTFT_SCHEDULE_2:
		if(StateChangeFlag == 1) // make only one time
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <MenuTFT+0x148>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <MenuTFT+0x138>
		{
			showSchedule2Panel();
 8005bec:	f7fe ffa0 	bl	8004b30 <showSchedule2Panel>
			ScheduleChangeFlag = 1;
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <MenuTFT+0x160>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
			StateChangeFlag = 0;
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <MenuTFT+0x148>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
		}
		Schedule2Activity();
 8005bfc:	f001 f9be 	bl	8006f7c <Schedule2Activity>
		break;
 8005c00:	bf00      	nop
	}
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000290 	.word	0x20000290
 8005c0c:	20000255 	.word	0x20000255
 8005c10:	20000294 	.word	0x20000294
 8005c14:	2000029c 	.word	0x2000029c
 8005c18:	00000000 	.word	0x00000000
 8005c1c:	20000256 	.word	0x20000256
 8005c20:	20000257 	.word	0x20000257
 8005c24:	20000258 	.word	0x20000258

08005c28 <TouchParametersActivity>:
//
// Function to handling touch on Parameters Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchParametersActivity(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005c2e:	f7fc fb2d 	bl	800228c <XPT2046_IsTouched>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d04c      	beq.n	8005cd2 <TouchParametersActivity+0xaa>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005c38:	f003 fe98 	bl	800996c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <TouchParametersActivity+0xb4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c48:	d343      	bcc.n	8005cd2 <TouchParametersActivity+0xaa>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005c4a:	1d3a      	adds	r2, r7, #4
 8005c4c:	1dbb      	adds	r3, r7, #6
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fc fadd 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	2b09      	cmp	r3, #9
 8005c5a:	d90f      	bls.n	8005c7c <TouchParametersActivity+0x54>
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	2b6e      	cmp	r3, #110	; 0x6e
 8005c60:	d80c      	bhi.n	8005c7c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005c62:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005c64:	2bd7      	cmp	r3, #215	; 0xd7
 8005c66:	d909      	bls.n	8005c7c <TouchParametersActivity+0x54>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005c68:	88bb      	ldrh	r3, [r7, #4]
 8005c6a:	2bec      	cmp	r3, #236	; 0xec
 8005c6c:	d806      	bhi.n	8005c7c <TouchParametersActivity+0x54>
			{
				State = MENUTFT_LIGHTS;
 8005c6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <TouchParametersActivity+0xb8>)
 8005c70:	2205      	movs	r2, #5
 8005c72:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <TouchParametersActivity+0xbc>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e025      	b.n	8005cc8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005c7c:	88fb      	ldrh	r3, [r7, #6]
 8005c7e:	2bdb      	cmp	r3, #219	; 0xdb
 8005c80:	d910      	bls.n	8005ca4 <TouchParametersActivity+0x7c>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005c88:	d20c      	bcs.n	8005ca4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005c8a:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005c8c:	2bd7      	cmp	r3, #215	; 0xd7
 8005c8e:	d909      	bls.n	8005ca4 <TouchParametersActivity+0x7c>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005c90:	88bb      	ldrh	r3, [r7, #4]
 8005c92:	2bec      	cmp	r3, #236	; 0xec
 8005c94:	d806      	bhi.n	8005ca4 <TouchParametersActivity+0x7c>
			{
				State = MENUTFT_SWITCH;
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <TouchParametersActivity+0xb8>)
 8005c98:	2202      	movs	r2, #2
 8005c9a:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005c9c:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <TouchParametersActivity+0xbc>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e011      	b.n	8005cc8 <TouchParametersActivity+0xa0>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	2b77      	cmp	r3, #119	; 0x77
 8005ca8:	d90e      	bls.n	8005cc8 <TouchParametersActivity+0xa0>
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	2bd2      	cmp	r3, #210	; 0xd2
 8005cae:	d80b      	bhi.n	8005cc8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005cb0:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005cb2:	2bd7      	cmp	r3, #215	; 0xd7
 8005cb4:	d908      	bls.n	8005cc8 <TouchParametersActivity+0xa0>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005cb6:	88bb      	ldrh	r3, [r7, #4]
 8005cb8:	2bec      	cmp	r3, #236	; 0xec
 8005cba:	d805      	bhi.n	8005cc8 <TouchParametersActivity+0xa0>
			{
				State = MENUTFT_CLOCK;
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <TouchParametersActivity+0xb8>)
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <TouchParametersActivity+0xbc>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
			}
			TimerTouch = HAL_GetTick();
 8005cc8:	f003 fe50 	bl	800996c <HAL_GetTick>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4a03      	ldr	r2, [pc, #12]	; (8005cdc <TouchParametersActivity+0xb4>)
 8005cd0:	6013      	str	r3, [r2, #0]
		}
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2000028c 	.word	0x2000028c
 8005ce0:	20000290 	.word	0x20000290
 8005ce4:	20000255 	.word	0x20000255

08005ce8 <TouchSwitchActivity>:
//
// Function to handling touch on Switches Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchSwitchActivity(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 8005cee:	f7fc facd 	bl	800228c <XPT2046_IsTouched>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 81ce 	beq.w	8006096 <TouchSwitchActivity+0x3ae>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8005cfa:	f003 fe37 	bl	800996c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	4bad      	ldr	r3, [pc, #692]	; (8005fb8 <TouchSwitchActivity+0x2d0>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d0a:	f0c0 81c4 	bcc.w	8006096 <TouchSwitchActivity+0x3ae>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8005d0e:	1d3a      	adds	r2, r7, #4
 8005d10:	1dbb      	adds	r3, r7, #6
 8005d12:	4611      	mov	r1, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc fa7b 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	d90f      	bls.n	8005d40 <TouchSwitchActivity+0x58>
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	2b6e      	cmp	r3, #110	; 0x6e
 8005d24:	d80c      	bhi.n	8005d40 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d26:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8005d28:	2bd7      	cmp	r3, #215	; 0xd7
 8005d2a:	d909      	bls.n	8005d40 <TouchSwitchActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
 8005d2e:	2bec      	cmp	r3, #236	; 0xec
 8005d30:	d806      	bhi.n	8005d40 <TouchSwitchActivity+0x58>
			{
				State = MENUTFT_PARAMETERS;
 8005d32:	4ba2      	ldr	r3, [pc, #648]	; (8005fbc <TouchSwitchActivity+0x2d4>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d38:	4ba1      	ldr	r3, [pc, #644]	; (8005fc0 <TouchSwitchActivity+0x2d8>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	e1a5      	b.n	800608c <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	2bdb      	cmp	r3, #219	; 0xdb
 8005d44:	d910      	bls.n	8005d68 <TouchSwitchActivity+0x80>
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8005d4c:	d20c      	bcs.n	8005d68 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d4e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8005d50:	2bd7      	cmp	r3, #215	; 0xd7
 8005d52:	d909      	bls.n	8005d68 <TouchSwitchActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8005d54:	88bb      	ldrh	r3, [r7, #4]
 8005d56:	2bec      	cmp	r3, #236	; 0xec
 8005d58:	d806      	bhi.n	8005d68 <TouchSwitchActivity+0x80>
			{
				State = MENUTFT_LIGHTS;
 8005d5a:	4b98      	ldr	r3, [pc, #608]	; (8005fbc <TouchSwitchActivity+0x2d4>)
 8005d5c:	2205      	movs	r2, #5
 8005d5e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d60:	4b97      	ldr	r3, [pc, #604]	; (8005fc0 <TouchSwitchActivity+0x2d8>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e191      	b.n	800608c <TouchSwitchActivity+0x3a4>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d68:	88fb      	ldrh	r3, [r7, #6]
 8005d6a:	2b77      	cmp	r3, #119	; 0x77
 8005d6c:	d90f      	bls.n	8005d8e <TouchSwitchActivity+0xa6>
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2bd2      	cmp	r3, #210	; 0xd2
 8005d72:	d80c      	bhi.n	8005d8e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d74:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8005d76:	2bd7      	cmp	r3, #215	; 0xd7
 8005d78:	d909      	bls.n	8005d8e <TouchSwitchActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8005d7a:	88bb      	ldrh	r3, [r7, #4]
 8005d7c:	2bec      	cmp	r3, #236	; 0xec
 8005d7e:	d806      	bhi.n	8005d8e <TouchSwitchActivity+0xa6>
			{
				State = MENUTFT_ACTIVITIES;
 8005d80:	4b8e      	ldr	r3, [pc, #568]	; (8005fbc <TouchSwitchActivity+0x2d4>)
 8005d82:	2204      	movs	r2, #4
 8005d84:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8005d86:	4b8e      	ldr	r3, [pc, #568]	; (8005fc0 <TouchSwitchActivity+0x2d8>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e17e      	b.n	800608c <TouchSwitchActivity+0x3a4>

			//
			// Check if it is button to change SWITCH status
			//
			//TODO: POTWIERDZENIE WYKONANIA POLECENIA!!!
			else if((x >= SWITCH_BUTTON_X)&&(x <= (SWITCH_BUTTON_X + SWITCH_BUTTON_W)))
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005d94:	f0c0 817a 	bcc.w	800608c <TouchSwitchActivity+0x3a4>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8005d9e:	f080 8175 	bcs.w	800608c <TouchSwitchActivity+0x3a4>
			{
				EF_SetFont(&arial_11ptFontInfo);
 8005da2:	4888      	ldr	r0, [pc, #544]	; (8005fc4 <TouchSwitchActivity+0x2dc>)
 8005da4:	f7fb fca4 	bl	80016f0 <EF_SetFont>
				//
				// FIRST SWITCH
				if((y >= SWITCH_1_POZ_Y)&&(y <= (SWITCH_1_POZ_Y + SWITCH_BUTTON_H)))
 8005da8:	88bb      	ldrh	r3, [r7, #4]
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d954      	bls.n	8005e58 <TouchSwitchActivity+0x170>
 8005dae:	88bb      	ldrh	r3, [r7, #4]
 8005db0:	2b56      	cmp	r3, #86	; 0x56
 8005db2:	d851      	bhi.n	8005e58 <TouchSwitchActivity+0x170>
				{
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005db4:	4b84      	ldr	r3, [pc, #528]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d026      	beq.n	8005e0a <TouchSwitchActivity+0x122>
					{
						SendComand(UCMD_RELAY_1_OFF); // Send comannd to OFF
 8005dbc:	2006      	movs	r0, #6
 8005dbe:	f002 fdcf 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005dc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	2305      	movs	r3, #5
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	2315      	movs	r3, #21
 8005dce:	2221      	movs	r2, #33	; 0x21
 8005dd0:	2141      	movs	r1, #65	; 0x41
 8005dd2:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005dd6:	f7fb fc3a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005dda:	497c      	ldr	r1, [pc, #496]	; (8005fcc <TouchSwitchActivity+0x2e4>)
 8005ddc:	487c      	ldr	r0, [pc, #496]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005dde:	f00b f98d 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005de2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	2300      	movs	r3, #0
 8005dee:	2243      	movs	r2, #67	; 0x43
 8005df0:	f240 1111 	movw	r1, #273	; 0x111
 8005df4:	4876      	ldr	r0, [pc, #472]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005df6:	f7fb fe95 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 0;
 8005dfa:	4b73      	ldr	r3, [pc, #460]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 0);
 8005e00:	2100      	movs	r1, #0
 8005e02:	2001      	movs	r0, #1
 8005e04:	f7fc fdba 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005e08:	e13d      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_1_ON); // Send comannd to ON
 8005e0a:	2005      	movs	r0, #5
 8005e0c:	f002 fda8 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_1_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005e10:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	2305      	movs	r3, #5
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	2315      	movs	r3, #21
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	2141      	movs	r1, #65	; 0x41
 8005e20:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005e24:	f7fb fc13 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005e28:	496a      	ldr	r1, [pc, #424]	; (8005fd4 <TouchSwitchActivity+0x2ec>)
 8005e2a:	4869      	ldr	r0, [pc, #420]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005e2c:	f00b f966 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005e30:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2243      	movs	r2, #67	; 0x43
 8005e3e:	f240 1111 	movw	r1, #273	; 0x111
 8005e42:	4863      	ldr	r0, [pc, #396]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005e44:	f7fb fe6e 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[0] = 1;
 8005e48:	4b5f      	ldr	r3, [pc, #380]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
						EEPROM_RelayStateUpdate(1, 1);
 8005e4e:	2101      	movs	r1, #1
 8005e50:	2001      	movs	r0, #1
 8005e52:	f7fc fd93 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[0] >= 1) // if is ON
 8005e56:	e116      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}

				}
				//
				// SECOND SWITCH
				else if((y >= SWITCH_2_POZ_Y)&&(y <= (SWITCH_2_POZ_Y + SWITCH_BUTTON_H)))
 8005e58:	88bb      	ldrh	r3, [r7, #4]
 8005e5a:	2b5e      	cmp	r3, #94	; 0x5e
 8005e5c:	d954      	bls.n	8005f08 <TouchSwitchActivity+0x220>
 8005e5e:	88bb      	ldrh	r3, [r7, #4]
 8005e60:	2b74      	cmp	r3, #116	; 0x74
 8005e62:	d851      	bhi.n	8005f08 <TouchSwitchActivity+0x220>
				{
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005e64:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d026      	beq.n	8005eba <TouchSwitchActivity+0x1d2>
					{
						SendComand(UCMD_RELAY_2_OFF); // Send comannd to OFF
 8005e6c:	2008      	movs	r0, #8
 8005e6e:	f002 fd77 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005e72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	2305      	movs	r3, #5
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	2315      	movs	r3, #21
 8005e7e:	2221      	movs	r2, #33	; 0x21
 8005e80:	215f      	movs	r1, #95	; 0x5f
 8005e82:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005e86:	f7fb fbe2 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005e8a:	4950      	ldr	r1, [pc, #320]	; (8005fcc <TouchSwitchActivity+0x2e4>)
 8005e8c:	4850      	ldr	r0, [pc, #320]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005e8e:	f00b f935 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2261      	movs	r2, #97	; 0x61
 8005ea0:	f240 1111 	movw	r1, #273	; 0x111
 8005ea4:	484a      	ldr	r0, [pc, #296]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005ea6:	f7fb fe3d 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 0;
 8005eaa:	4b47      	ldr	r3, [pc, #284]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 0);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2002      	movs	r0, #2
 8005eb4:	f7fc fd62 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005eb8:	e0e5      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_2_ON); // Send comannd to ON
 8005eba:	2007      	movs	r0, #7
 8005ebc:	f002 fd50 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_2_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005ec0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2315      	movs	r3, #21
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	215f      	movs	r1, #95	; 0x5f
 8005ed0:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005ed4:	f7fb fbbb 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005ed8:	493e      	ldr	r1, [pc, #248]	; (8005fd4 <TouchSwitchActivity+0x2ec>)
 8005eda:	483d      	ldr	r0, [pc, #244]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005edc:	f00b f90e 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005ee0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	2261      	movs	r2, #97	; 0x61
 8005eee:	f240 1111 	movw	r1, #273	; 0x111
 8005ef2:	4837      	ldr	r0, [pc, #220]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005ef4:	f7fb fe16 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[1] = 1;
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	705a      	strb	r2, [r3, #1]
						EEPROM_RelayStateUpdate(2, 1);
 8005efe:	2101      	movs	r1, #1
 8005f00:	2002      	movs	r0, #2
 8005f02:	f7fc fd3b 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[1] >= 1) // if is ON
 8005f06:	e0be      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}
				}
				//
				// THIRD SWITCH
				else if((y >= SWITCH_3_POZ_Y)&&(y <= (SWITCH_3_POZ_Y + SWITCH_BUTTON_H)))
 8005f08:	88bb      	ldrh	r3, [r7, #4]
 8005f0a:	2b7c      	cmp	r3, #124	; 0x7c
 8005f0c:	d964      	bls.n	8005fd8 <TouchSwitchActivity+0x2f0>
 8005f0e:	88bb      	ldrh	r3, [r7, #4]
 8005f10:	2b92      	cmp	r3, #146	; 0x92
 8005f12:	d861      	bhi.n	8005fd8 <TouchSwitchActivity+0x2f0>
				{
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005f14:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005f16:	789b      	ldrb	r3, [r3, #2]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d026      	beq.n	8005f6a <TouchSwitchActivity+0x282>
					{
						SendComand(UCMD_RELAY_3_OFF); // Send comannd to OFF
 8005f1c:	200a      	movs	r0, #10
 8005f1e:	f002 fd1f 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005f22:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f26:	9301      	str	r3, [sp, #4]
 8005f28:	2305      	movs	r3, #5
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	2315      	movs	r3, #21
 8005f2e:	2221      	movs	r2, #33	; 0x21
 8005f30:	217d      	movs	r1, #125	; 0x7d
 8005f32:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005f36:	f7fb fb8a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 8005f3a:	4924      	ldr	r1, [pc, #144]	; (8005fcc <TouchSwitchActivity+0x2e4>)
 8005f3c:	4824      	ldr	r0, [pc, #144]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005f3e:	f00b f8dd 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8005f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	227f      	movs	r2, #127	; 0x7f
 8005f50:	f240 1111 	movw	r1, #273	; 0x111
 8005f54:	481e      	ldr	r0, [pc, #120]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005f56:	f7fb fde5 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 0;
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 0);
 8005f60:	2100      	movs	r1, #0
 8005f62:	2003      	movs	r0, #3
 8005f64:	f7fc fd0a 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005f68:	e08d      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_3_ON); // Send comannd to ON
 8005f6a:	2009      	movs	r0, #9
 8005f6c:	f002 fcf8 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_3_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8005f70:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	2305      	movs	r3, #5
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	2315      	movs	r3, #21
 8005f7c:	2221      	movs	r2, #33	; 0x21
 8005f7e:	217d      	movs	r1, #125	; 0x7d
 8005f80:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8005f84:	f7fb fb63 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8005f88:	4912      	ldr	r1, [pc, #72]	; (8005fd4 <TouchSwitchActivity+0x2ec>)
 8005f8a:	4811      	ldr	r0, [pc, #68]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005f8c:	f00b f8b6 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8005f90:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	227f      	movs	r2, #127	; 0x7f
 8005f9e:	f240 1111 	movw	r1, #273	; 0x111
 8005fa2:	480b      	ldr	r0, [pc, #44]	; (8005fd0 <TouchSwitchActivity+0x2e8>)
 8005fa4:	f7fb fdbe 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[2] = 1;
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <TouchSwitchActivity+0x2e0>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	709a      	strb	r2, [r3, #2]
						EEPROM_RelayStateUpdate(3, 1);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	2003      	movs	r0, #3
 8005fb2:	f7fc fce3 	bl	800297c <EEPROM_RelayStateUpdate>
					if(SwitchesButtonState[2] >= 1) // if is ON
 8005fb6:	e066      	b.n	8006086 <TouchSwitchActivity+0x39e>
 8005fb8:	2000028c 	.word	0x2000028c
 8005fbc:	20000290 	.word	0x20000290
 8005fc0:	20000255 	.word	0x20000255
 8005fc4:	080160f0 	.word	0x080160f0
 8005fc8:	200002a8 	.word	0x200002a8
 8005fcc:	08015254 	.word	0x08015254
 8005fd0:	200002fc 	.word	0x200002fc
 8005fd4:	08015258 	.word	0x08015258
					}
				}
				//
				// FOURTH SWITCH
				else if((y >= SWITCH_4_POZ_Y)&&(y <= (SWITCH_4_POZ_Y + SWITCH_BUTTON_H)))
 8005fd8:	88bb      	ldrh	r3, [r7, #4]
 8005fda:	2b9a      	cmp	r3, #154	; 0x9a
 8005fdc:	d953      	bls.n	8006086 <TouchSwitchActivity+0x39e>
 8005fde:	88bb      	ldrh	r3, [r7, #4]
 8005fe0:	2bb0      	cmp	r3, #176	; 0xb0
 8005fe2:	d850      	bhi.n	8006086 <TouchSwitchActivity+0x39e>
				{
					if(SwitchesButtonState[3] >= 1) // if is ON
 8005fe4:	4b2e      	ldr	r3, [pc, #184]	; (80060a0 <TouchSwitchActivity+0x3b8>)
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d026      	beq.n	800603a <TouchSwitchActivity+0x352>
					{
						SendComand(UCMD_RELAY_4_OFF); // Send comannd to OFF
 8005fec:	200c      	movs	r0, #12
 8005fee:	f002 fcb7 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8005ff2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	2305      	movs	r3, #5
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	2315      	movs	r3, #21
 8005ffe:	2221      	movs	r2, #33	; 0x21
 8006000:	219b      	movs	r1, #155	; 0x9b
 8006002:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8006006:	f7fb fb22 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800600a:	4926      	ldr	r1, [pc, #152]	; (80060a4 <TouchSwitchActivity+0x3bc>)
 800600c:	4826      	ldr	r0, [pc, #152]	; (80060a8 <TouchSwitchActivity+0x3c0>)
 800600e:	f00b f875 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006012:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	2300      	movs	r3, #0
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	229d      	movs	r2, #157	; 0x9d
 8006020:	f240 1111 	movw	r1, #273	; 0x111
 8006024:	4820      	ldr	r0, [pc, #128]	; (80060a8 <TouchSwitchActivity+0x3c0>)
 8006026:	f7fb fd7d 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 0;
 800602a:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <TouchSwitchActivity+0x3b8>)
 800602c:	2200      	movs	r2, #0
 800602e:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 0);
 8006030:	2100      	movs	r1, #0
 8006032:	2004      	movs	r0, #4
 8006034:	f7fc fca2 	bl	800297c <EEPROM_RelayStateUpdate>
 8006038:	e025      	b.n	8006086 <TouchSwitchActivity+0x39e>
					}
					else // if is OFF
					{
						SendComand(UCMD_RELAY_4_ON); // Send comannd to ON
 800603a:	200b      	movs	r0, #11
 800603c:	f002 fc90 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(SWITCH_BUTTON_X, SWITCH_4_POZ_Y, SWITCH_BUTTON_W, SWITCH_BUTTON_H, SWITCH_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006040:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	2305      	movs	r3, #5
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2315      	movs	r3, #21
 800604c:	2221      	movs	r2, #33	; 0x21
 800604e:	219b      	movs	r1, #155	; 0x9b
 8006050:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8006054:	f7fb fafb 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8006058:	4914      	ldr	r1, [pc, #80]	; (80060ac <TouchSwitchActivity+0x3c4>)
 800605a:	4813      	ldr	r0, [pc, #76]	; (80060a8 <TouchSwitchActivity+0x3c0>)
 800605c:	f00b f84e 	bl	80110fc <siprintf>
						EF_PutString(Msg, (SWITCH_BUTTON_X+STRING_ERRATA_X), (SWITCH_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8006060:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	2300      	movs	r3, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	229d      	movs	r2, #157	; 0x9d
 800606e:	f240 1111 	movw	r1, #273	; 0x111
 8006072:	480d      	ldr	r0, [pc, #52]	; (80060a8 <TouchSwitchActivity+0x3c0>)
 8006074:	f7fb fd56 	bl	8001b24 <EF_PutString>
						SwitchesButtonState[3] = 1;
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <TouchSwitchActivity+0x3b8>)
 800607a:	2201      	movs	r2, #1
 800607c:	70da      	strb	r2, [r3, #3]
						EEPROM_RelayStateUpdate(4, 1);
 800607e:	2101      	movs	r1, #1
 8006080:	2004      	movs	r0, #4
 8006082:	f7fc fc7b 	bl	800297c <EEPROM_RelayStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006086:	480a      	ldr	r0, [pc, #40]	; (80060b0 <TouchSwitchActivity+0x3c8>)
 8006088:	f7fb fb32 	bl	80016f0 <EF_SetFont>
			}
			TimerTouch = HAL_GetTick();
 800608c:	f003 fc6e 	bl	800996c <HAL_GetTick>
 8006090:	4603      	mov	r3, r0
 8006092:	4a08      	ldr	r2, [pc, #32]	; (80060b4 <TouchSwitchActivity+0x3cc>)
 8006094:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200002a8 	.word	0x200002a8
 80060a4:	08015254 	.word	0x08015254
 80060a8:	200002fc 	.word	0x200002fc
 80060ac:	08015258 	.word	0x08015258
 80060b0:	08018068 	.word	0x08018068
 80060b4:	2000028c 	.word	0x2000028c

080060b8 <TouchLightsActivity>:
//
// Function to handling touch on Lights Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchLightsActivity(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af02      	add	r7, sp, #8
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80060be:	f7fc f8e5 	bl	800228c <XPT2046_IsTouched>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 81bc 	beq.w	8006442 <TouchLightsActivity+0x38a>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80060ca:	f003 fc4f 	bl	800996c <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4ba6      	ldr	r3, [pc, #664]	; (800636c <TouchLightsActivity+0x2b4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060da:	f0c0 81b2 	bcc.w	8006442 <TouchLightsActivity+0x38a>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80060de:	1d3a      	adds	r2, r7, #4
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fc f893 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b09      	cmp	r3, #9
 80060ee:	d90f      	bls.n	8006110 <TouchLightsActivity+0x58>
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	2b6e      	cmp	r3, #110	; 0x6e
 80060f4:	d80c      	bhi.n	8006110 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060f6:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80060f8:	2bd7      	cmp	r3, #215	; 0xd7
 80060fa:	d909      	bls.n	8006110 <TouchLightsActivity+0x58>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	2bec      	cmp	r3, #236	; 0xec
 8006100:	d806      	bhi.n	8006110 <TouchLightsActivity+0x58>
			{
				State = MENUTFT_SWITCH;
 8006102:	4b9b      	ldr	r3, [pc, #620]	; (8006370 <TouchLightsActivity+0x2b8>)
 8006104:	2202      	movs	r2, #2
 8006106:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006108:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <TouchLightsActivity+0x2bc>)
 800610a:	2201      	movs	r2, #1
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	e193      	b.n	8006438 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006110:	88fb      	ldrh	r3, [r7, #6]
 8006112:	2bdb      	cmp	r3, #219	; 0xdb
 8006114:	d910      	bls.n	8006138 <TouchLightsActivity+0x80>
 8006116:	88fb      	ldrh	r3, [r7, #6]
 8006118:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800611c:	d20c      	bcs.n	8006138 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 800611e:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006120:	2bd7      	cmp	r3, #215	; 0xd7
 8006122:	d909      	bls.n	8006138 <TouchLightsActivity+0x80>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006124:	88bb      	ldrh	r3, [r7, #4]
 8006126:	2bec      	cmp	r3, #236	; 0xec
 8006128:	d806      	bhi.n	8006138 <TouchLightsActivity+0x80>
			{
				State = MENUTFT_PARAMETERS;
 800612a:	4b91      	ldr	r3, [pc, #580]	; (8006370 <TouchLightsActivity+0x2b8>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006130:	4b90      	ldr	r3, [pc, #576]	; (8006374 <TouchLightsActivity+0x2bc>)
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e17f      	b.n	8006438 <TouchLightsActivity+0x380>
			}

			// Check if that point is inside the MEDIUM Button
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	2b77      	cmp	r3, #119	; 0x77
 800613c:	d90f      	bls.n	800615e <TouchLightsActivity+0xa6>
 800613e:	88fb      	ldrh	r3, [r7, #6]
 8006140:	2bd2      	cmp	r3, #210	; 0xd2
 8006142:	d80c      	bhi.n	800615e <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006144:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006146:	2bd7      	cmp	r3, #215	; 0xd7
 8006148:	d909      	bls.n	800615e <TouchLightsActivity+0xa6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800614a:	88bb      	ldrh	r3, [r7, #4]
 800614c:	2bec      	cmp	r3, #236	; 0xec
 800614e:	d806      	bhi.n	800615e <TouchLightsActivity+0xa6>
			{
				State = MENUTFT_WS_LED;
 8006150:	4b87      	ldr	r3, [pc, #540]	; (8006370 <TouchLightsActivity+0x2b8>)
 8006152:	2206      	movs	r2, #6
 8006154:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006156:	4b87      	ldr	r3, [pc, #540]	; (8006374 <TouchLightsActivity+0x2bc>)
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	e16c      	b.n	8006438 <TouchLightsActivity+0x380>

			//
			// Check if it is button to change LIGHTS status
			//
			//TODO: POWIERDZENIA WYKONANIA KOMENDY
			else if((x >= LIGHTS_BUTTON_X)&&(x <= (LIGHTS_BUTTON_X + LIGHTS_BUTTON_W)))
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	2bc7      	cmp	r3, #199	; 0xc7
 8006162:	f240 8169 	bls.w	8006438 <TouchLightsActivity+0x380>
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	2be9      	cmp	r3, #233	; 0xe9
 800616a:	f200 8165 	bhi.w	8006438 <TouchLightsActivity+0x380>
			{
				EF_SetFont(&arial_11ptFontInfo);
 800616e:	4882      	ldr	r0, [pc, #520]	; (8006378 <TouchLightsActivity+0x2c0>)
 8006170:	f7fb fabe 	bl	80016f0 <EF_SetFont>

				//
				// FIRST LIGHT
				if((y >= LIGHT_B_1_POZ_Y)&&(y <= (LIGHT_B_1_POZ_Y + LIGHTS_BUTTON_H)))
 8006174:	88bb      	ldrh	r3, [r7, #4]
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d950      	bls.n	800621c <TouchLightsActivity+0x164>
 800617a:	88bb      	ldrh	r3, [r7, #4]
 800617c:	2b56      	cmp	r3, #86	; 0x56
 800617e:	d84d      	bhi.n	800621c <TouchLightsActivity+0x164>
				{
					if(LightsButtonState[0] >= 1) // if is ON
 8006180:	4b7e      	ldr	r3, [pc, #504]	; (800637c <TouchLightsActivity+0x2c4>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d024      	beq.n	80061d2 <TouchLightsActivity+0x11a>
					{
						SendComand(UCMD_LIGHT_1_OFF); // Send comannd to OFF
 8006188:	200e      	movs	r0, #14
 800618a:	f002 fbe9 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 800618e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	2305      	movs	r3, #5
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	2315      	movs	r3, #21
 800619a:	2221      	movs	r2, #33	; 0x21
 800619c:	2141      	movs	r1, #65	; 0x41
 800619e:	20c8      	movs	r0, #200	; 0xc8
 80061a0:	f7fb fa55 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80061a4:	4976      	ldr	r1, [pc, #472]	; (8006380 <TouchLightsActivity+0x2c8>)
 80061a6:	4877      	ldr	r0, [pc, #476]	; (8006384 <TouchLightsActivity+0x2cc>)
 80061a8:	f00a ffa8 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80061ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	2300      	movs	r3, #0
 80061b8:	2243      	movs	r2, #67	; 0x43
 80061ba:	21cb      	movs	r1, #203	; 0xcb
 80061bc:	4871      	ldr	r0, [pc, #452]	; (8006384 <TouchLightsActivity+0x2cc>)
 80061be:	f7fb fcb1 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 0;
 80061c2:	4b6e      	ldr	r3, [pc, #440]	; (800637c <TouchLightsActivity+0x2c4>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 0);
 80061c8:	2100      	movs	r1, #0
 80061ca:	2001      	movs	r0, #1
 80061cc:	f7fc fc0f 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 80061d0:	e12f      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_1_ON); // Send comannd to ON
 80061d2:	200d      	movs	r0, #13
 80061d4:	f002 fbc4 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_1_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80061d8:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	2305      	movs	r3, #5
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	2315      	movs	r3, #21
 80061e4:	2221      	movs	r2, #33	; 0x21
 80061e6:	2141      	movs	r1, #65	; 0x41
 80061e8:	20c8      	movs	r0, #200	; 0xc8
 80061ea:	f7fb fa30 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 80061ee:	4966      	ldr	r1, [pc, #408]	; (8006388 <TouchLightsActivity+0x2d0>)
 80061f0:	4864      	ldr	r0, [pc, #400]	; (8006384 <TouchLightsActivity+0x2cc>)
 80061f2:	f00a ff83 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80061f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80061fa:	9301      	str	r3, [sp, #4]
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	2243      	movs	r2, #67	; 0x43
 8006204:	21cb      	movs	r1, #203	; 0xcb
 8006206:	485f      	ldr	r0, [pc, #380]	; (8006384 <TouchLightsActivity+0x2cc>)
 8006208:	f7fb fc8c 	bl	8001b24 <EF_PutString>
						LightsButtonState[0] = 1;
 800620c:	4b5b      	ldr	r3, [pc, #364]	; (800637c <TouchLightsActivity+0x2c4>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
						EEPROM_LightStateUpdate(1, 1);
 8006212:	2101      	movs	r1, #1
 8006214:	2001      	movs	r0, #1
 8006216:	f7fc fbea 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[0] >= 1) // if is ON
 800621a:	e10a      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
				}
				//
				// SECOND LIGHT
				else if((y >= LIGHT_B_2_POZ_Y)&&(y <= (LIGHT_B_2_POZ_Y + LIGHTS_BUTTON_H)))
 800621c:	88bb      	ldrh	r3, [r7, #4]
 800621e:	2b5e      	cmp	r3, #94	; 0x5e
 8006220:	d950      	bls.n	80062c4 <TouchLightsActivity+0x20c>
 8006222:	88bb      	ldrh	r3, [r7, #4]
 8006224:	2b74      	cmp	r3, #116	; 0x74
 8006226:	d84d      	bhi.n	80062c4 <TouchLightsActivity+0x20c>
				{
					if(LightsButtonState[1] >= 1) // if is ON
 8006228:	4b54      	ldr	r3, [pc, #336]	; (800637c <TouchLightsActivity+0x2c4>)
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d024      	beq.n	800627a <TouchLightsActivity+0x1c2>
					{
						SendComand(UCMD_LIGHT_2_OFF); // Send comannd to OFF
 8006230:	2010      	movs	r0, #16
 8006232:	f002 fb95 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8006236:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	2305      	movs	r3, #5
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2315      	movs	r3, #21
 8006242:	2221      	movs	r2, #33	; 0x21
 8006244:	215f      	movs	r1, #95	; 0x5f
 8006246:	20c8      	movs	r0, #200	; 0xc8
 8006248:	f7fb fa01 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 800624c:	494c      	ldr	r1, [pc, #304]	; (8006380 <TouchLightsActivity+0x2c8>)
 800624e:	484d      	ldr	r0, [pc, #308]	; (8006384 <TouchLightsActivity+0x2cc>)
 8006250:	f00a ff54 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006254:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	2300      	movs	r3, #0
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	2300      	movs	r3, #0
 8006260:	2261      	movs	r2, #97	; 0x61
 8006262:	21cb      	movs	r1, #203	; 0xcb
 8006264:	4847      	ldr	r0, [pc, #284]	; (8006384 <TouchLightsActivity+0x2cc>)
 8006266:	f7fb fc5d 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 0;
 800626a:	4b44      	ldr	r3, [pc, #272]	; (800637c <TouchLightsActivity+0x2c4>)
 800626c:	2200      	movs	r2, #0
 800626e:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 0);
 8006270:	2100      	movs	r1, #0
 8006272:	2002      	movs	r0, #2
 8006274:	f7fc fbbb 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 8006278:	e0db      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_2_ON); // Send comannd to ON
 800627a:	200f      	movs	r0, #15
 800627c:	f002 fb70 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_2_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006280:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	2305      	movs	r3, #5
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2315      	movs	r3, #21
 800628c:	2221      	movs	r2, #33	; 0x21
 800628e:	215f      	movs	r1, #95	; 0x5f
 8006290:	20c8      	movs	r0, #200	; 0xc8
 8006292:	f7fb f9dc 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8006296:	493c      	ldr	r1, [pc, #240]	; (8006388 <TouchLightsActivity+0x2d0>)
 8006298:	483a      	ldr	r0, [pc, #232]	; (8006384 <TouchLightsActivity+0x2cc>)
 800629a:	f00a ff2f 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_2_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800629e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	2300      	movs	r3, #0
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	2300      	movs	r3, #0
 80062aa:	2261      	movs	r2, #97	; 0x61
 80062ac:	21cb      	movs	r1, #203	; 0xcb
 80062ae:	4835      	ldr	r0, [pc, #212]	; (8006384 <TouchLightsActivity+0x2cc>)
 80062b0:	f7fb fc38 	bl	8001b24 <EF_PutString>
						LightsButtonState[1] = 1;
 80062b4:	4b31      	ldr	r3, [pc, #196]	; (800637c <TouchLightsActivity+0x2c4>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	705a      	strb	r2, [r3, #1]
						EEPROM_LightStateUpdate(2, 1);
 80062ba:	2101      	movs	r1, #1
 80062bc:	2002      	movs	r0, #2
 80062be:	f7fc fb96 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[1] >= 1) // if is ON
 80062c2:	e0b6      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
				}

				//
				// THIRD LIGHT
				else if((y >= LIGHT_B_3_POZ_Y)&&(y <= (LIGHT_B_3_POZ_Y + LIGHTS_BUTTON_H)))
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	2b7c      	cmp	r3, #124	; 0x7c
 80062c8:	d960      	bls.n	800638c <TouchLightsActivity+0x2d4>
 80062ca:	88bb      	ldrh	r3, [r7, #4]
 80062cc:	2b92      	cmp	r3, #146	; 0x92
 80062ce:	d85d      	bhi.n	800638c <TouchLightsActivity+0x2d4>
				{
					if(LightsButtonState[2] >= 1) // if is ON
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <TouchLightsActivity+0x2c4>)
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d024      	beq.n	8006322 <TouchLightsActivity+0x26a>
					{
						SendComand(UCMD_LIGHT_3_OFF); // Send comannd to OFF
 80062d8:	2012      	movs	r0, #18
 80062da:	f002 fb41 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80062de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80062e2:	9301      	str	r3, [sp, #4]
 80062e4:	2305      	movs	r3, #5
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	2315      	movs	r3, #21
 80062ea:	2221      	movs	r2, #33	; 0x21
 80062ec:	217d      	movs	r1, #125	; 0x7d
 80062ee:	20c8      	movs	r0, #200	; 0xc8
 80062f0:	f7fb f9ad 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80062f4:	4922      	ldr	r1, [pc, #136]	; (8006380 <TouchLightsActivity+0x2c8>)
 80062f6:	4823      	ldr	r0, [pc, #140]	; (8006384 <TouchLightsActivity+0x2cc>)
 80062f8:	f00a ff00 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80062fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	2300      	movs	r3, #0
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	227f      	movs	r2, #127	; 0x7f
 800630a:	21cb      	movs	r1, #203	; 0xcb
 800630c:	481d      	ldr	r0, [pc, #116]	; (8006384 <TouchLightsActivity+0x2cc>)
 800630e:	f7fb fc09 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 0;
 8006312:	4b1a      	ldr	r3, [pc, #104]	; (800637c <TouchLightsActivity+0x2c4>)
 8006314:	2200      	movs	r2, #0
 8006316:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 0);
 8006318:	2100      	movs	r1, #0
 800631a:	2003      	movs	r0, #3
 800631c:	f7fc fb67 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 8006320:	e087      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_3_ON); // Send comannd to ON
 8006322:	2011      	movs	r0, #17
 8006324:	f002 fb1c 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_3_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006328:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	2305      	movs	r3, #5
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2315      	movs	r3, #21
 8006334:	2221      	movs	r2, #33	; 0x21
 8006336:	217d      	movs	r1, #125	; 0x7d
 8006338:	20c8      	movs	r0, #200	; 0xc8
 800633a:	f7fb f988 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 800633e:	4912      	ldr	r1, [pc, #72]	; (8006388 <TouchLightsActivity+0x2d0>)
 8006340:	4810      	ldr	r0, [pc, #64]	; (8006384 <TouchLightsActivity+0x2cc>)
 8006342:	f00a fedb 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_3_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006346:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800634a:	9301      	str	r3, [sp, #4]
 800634c:	2300      	movs	r3, #0
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2300      	movs	r3, #0
 8006352:	227f      	movs	r2, #127	; 0x7f
 8006354:	21cb      	movs	r1, #203	; 0xcb
 8006356:	480b      	ldr	r0, [pc, #44]	; (8006384 <TouchLightsActivity+0x2cc>)
 8006358:	f7fb fbe4 	bl	8001b24 <EF_PutString>
						LightsButtonState[2] = 1;
 800635c:	4b07      	ldr	r3, [pc, #28]	; (800637c <TouchLightsActivity+0x2c4>)
 800635e:	2201      	movs	r2, #1
 8006360:	709a      	strb	r2, [r3, #2]
						EEPROM_LightStateUpdate(3, 1);
 8006362:	2101      	movs	r1, #1
 8006364:	2003      	movs	r0, #3
 8006366:	f7fc fb42 	bl	80029ee <EEPROM_LightStateUpdate>
					if(LightsButtonState[2] >= 1) // if is ON
 800636a:	e062      	b.n	8006432 <TouchLightsActivity+0x37a>
 800636c:	2000028c 	.word	0x2000028c
 8006370:	20000290 	.word	0x20000290
 8006374:	20000255 	.word	0x20000255
 8006378:	080160f0 	.word	0x080160f0
 800637c:	200002ac 	.word	0x200002ac
 8006380:	08015254 	.word	0x08015254
 8006384:	200002fc 	.word	0x200002fc
 8006388:	08015258 	.word	0x08015258
					}
				}

				//
				// FOURTH LIGHT
				else if((y >= LIGHT_B_4_POZ_Y)&&(y <= (LIGHT_B_4_POZ_Y + LIGHTS_BUTTON_H)))
 800638c:	88bb      	ldrh	r3, [r7, #4]
 800638e:	2b9a      	cmp	r3, #154	; 0x9a
 8006390:	d94f      	bls.n	8006432 <TouchLightsActivity+0x37a>
 8006392:	88bb      	ldrh	r3, [r7, #4]
 8006394:	2bb0      	cmp	r3, #176	; 0xb0
 8006396:	d84c      	bhi.n	8006432 <TouchLightsActivity+0x37a>
				{
					if(LightsButtonState[3] >= 1) // if is ON
 8006398:	4b2c      	ldr	r3, [pc, #176]	; (800644c <TouchLightsActivity+0x394>)
 800639a:	78db      	ldrb	r3, [r3, #3]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d024      	beq.n	80063ea <TouchLightsActivity+0x332>
					{
						SendComand(UCMD_LIGHT_4_OFF); // Send comannd to OFF
 80063a0:	2014      	movs	r0, #20
 80063a2:	f002 fadd 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 80063a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	2305      	movs	r3, #5
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	2315      	movs	r3, #21
 80063b2:	2221      	movs	r2, #33	; 0x21
 80063b4:	219b      	movs	r1, #155	; 0x9b
 80063b6:	20c8      	movs	r0, #200	; 0xc8
 80063b8:	f7fb f949 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OFF");
 80063bc:	4924      	ldr	r1, [pc, #144]	; (8006450 <TouchLightsActivity+0x398>)
 80063be:	4825      	ldr	r0, [pc, #148]	; (8006454 <TouchLightsActivity+0x39c>)
 80063c0:	f00a fe9c 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 80063c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	229d      	movs	r2, #157	; 0x9d
 80063d2:	21cb      	movs	r1, #203	; 0xcb
 80063d4:	481f      	ldr	r0, [pc, #124]	; (8006454 <TouchLightsActivity+0x39c>)
 80063d6:	f7fb fba5 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 0;
 80063da:	4b1c      	ldr	r3, [pc, #112]	; (800644c <TouchLightsActivity+0x394>)
 80063dc:	2200      	movs	r2, #0
 80063de:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 0);
 80063e0:	2100      	movs	r1, #0
 80063e2:	2004      	movs	r0, #4
 80063e4:	f7fc fb03 	bl	80029ee <EEPROM_LightStateUpdate>
 80063e8:	e023      	b.n	8006432 <TouchLightsActivity+0x37a>
					}
					else // if is OFF
					{
						SendComand(UCMD_LIGHT_4_ON); // Send comannd to ON
 80063ea:	2013      	movs	r0, #19
 80063ec:	f002 fab8 	bl	8008960 <SendComand>
						GFX_DrawFillRoundRectangle(LIGHTS_BUTTON_X, LIGHT_B_4_POZ_Y, LIGHTS_BUTTON_W, LIGHTS_BUTTON_H, LIGHTS_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 80063f0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	2305      	movs	r3, #5
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	2315      	movs	r3, #21
 80063fc:	2221      	movs	r2, #33	; 0x21
 80063fe:	219b      	movs	r1, #155	; 0x9b
 8006400:	20c8      	movs	r0, #200	; 0xc8
 8006402:	f7fb f924 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "ON");
 8006406:	4914      	ldr	r1, [pc, #80]	; (8006458 <TouchLightsActivity+0x3a0>)
 8006408:	4812      	ldr	r0, [pc, #72]	; (8006454 <TouchLightsActivity+0x39c>)
 800640a:	f00a fe77 	bl	80110fc <siprintf>
						EF_PutString(Msg, (LIGHTS_BUTTON_X+STRING_ERRATA_X), (LIGHT_B_4_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800640e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	2300      	movs	r3, #0
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2300      	movs	r3, #0
 800641a:	229d      	movs	r2, #157	; 0x9d
 800641c:	21cb      	movs	r1, #203	; 0xcb
 800641e:	480d      	ldr	r0, [pc, #52]	; (8006454 <TouchLightsActivity+0x39c>)
 8006420:	f7fb fb80 	bl	8001b24 <EF_PutString>
						LightsButtonState[3] = 1;
 8006424:	4b09      	ldr	r3, [pc, #36]	; (800644c <TouchLightsActivity+0x394>)
 8006426:	2201      	movs	r2, #1
 8006428:	70da      	strb	r2, [r3, #3]
						EEPROM_LightStateUpdate(4, 1);
 800642a:	2101      	movs	r1, #1
 800642c:	2004      	movs	r0, #4
 800642e:	f7fc fade 	bl	80029ee <EEPROM_LightStateUpdate>
					}
				}
				EF_SetFont(&arialBlack_20ptFontInfo);
 8006432:	480a      	ldr	r0, [pc, #40]	; (800645c <TouchLightsActivity+0x3a4>)
 8006434:	f7fb f95c 	bl	80016f0 <EF_SetFont>
			}

			TimerTouch = HAL_GetTick();
 8006438:	f003 fa98 	bl	800996c <HAL_GetTick>
 800643c:	4603      	mov	r3, r0
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <TouchLightsActivity+0x3a8>)
 8006440:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200002ac 	.word	0x200002ac
 8006450:	08015254 	.word	0x08015254
 8006454:	200002fc 	.word	0x200002fc
 8006458:	08015258 	.word	0x08015258
 800645c:	08018068 	.word	0x08018068
 8006460:	2000028c 	.word	0x2000028c

08006464 <TouchClockActivity>:
//
// Function to handling touch on Set CLOCK Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchClockActivity(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 800646a:	f7fb ff0f 	bl	800228c <XPT2046_IsTouched>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8188 	beq.w	8006786 <TouchClockActivity+0x322>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006476:	48a0      	ldr	r0, [pc, #640]	; (80066f8 <TouchClockActivity+0x294>)
 8006478:	f7fb f93a 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 800647c:	f003 fa76 	bl	800996c <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	4b9e      	ldr	r3, [pc, #632]	; (80066fc <TouchClockActivity+0x298>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648c:	f0c0 817b 	bcc.w	8006786 <TouchClockActivity+0x322>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006490:	1d3a      	adds	r2, r7, #4
 8006492:	1dbb      	adds	r3, r7, #6
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f7fb feba 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get current Hour and Minutes to easier change them, but only once
 800649c:	4b98      	ldr	r3, [pc, #608]	; (8006700 <TouchClockActivity+0x29c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d114      	bne.n	80064ce <TouchClockActivity+0x6a>
				{
					Hours = DS3231_GetHour();
 80064a4:	f7fc f976 	bl	8002794 <DS3231_GetHour>
 80064a8:	4603      	mov	r3, r0
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b95      	ldr	r3, [pc, #596]	; (8006704 <TouchClockActivity+0x2a0>)
 80064ae:	701a      	strb	r2, [r3, #0]
					Minutes = DS3231_GetMinute();
 80064b0:	f7fc f97c 	bl	80027ac <DS3231_GetMinute>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	4b93      	ldr	r3, [pc, #588]	; (8006708 <TouchClockActivity+0x2a4>)
 80064ba:	701a      	strb	r2, [r3, #0]
					DayOfWeek = DS3231_GetDayOfWeek();
 80064bc:	f7fc f95e 	bl	800277c <DS3231_GetDayOfWeek>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	4b91      	ldr	r3, [pc, #580]	; (800670c <TouchClockActivity+0x2a8>)
 80064c6:	701a      	strb	r2, [r3, #0]
					ClockChangeFlag = 0;
 80064c8:	4b8d      	ldr	r3, [pc, #564]	; (8006700 <TouchClockActivity+0x29c>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	2b09      	cmp	r3, #9
 80064d2:	d90f      	bls.n	80064f4 <TouchClockActivity+0x90>
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	2b6e      	cmp	r3, #110	; 0x6e
 80064d8:	d80c      	bhi.n	80064f4 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064da:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80064dc:	2bd7      	cmp	r3, #215	; 0xd7
 80064de:	d909      	bls.n	80064f4 <TouchClockActivity+0x90>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80064e0:	88bb      	ldrh	r3, [r7, #4]
 80064e2:	2bec      	cmp	r3, #236	; 0xec
 80064e4:	d806      	bhi.n	80064f4 <TouchClockActivity+0x90>
				{
					State = MENUTFT_PARAMETERS;
 80064e6:	4b8a      	ldr	r3, [pc, #552]	; (8006710 <TouchClockActivity+0x2ac>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 80064ec:	4b89      	ldr	r3, [pc, #548]	; (8006714 <TouchClockActivity+0x2b0>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	e143      	b.n	800677c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the RIGHT Button - Confirmed changed clock
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	2bdb      	cmp	r3, #219	; 0xdb
 80064f8:	d92c      	bls.n	8006554 <TouchClockActivity+0xf0>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006500:	d228      	bcs.n	8006554 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006502:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X+RIGHT_BUTTON_W))&&
 8006504:	2bd7      	cmp	r3, #215	; 0xd7
 8006506:	d925      	bls.n	8006554 <TouchClockActivity+0xf0>
						(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006508:	88bb      	ldrh	r3, [r7, #4]
 800650a:	2bec      	cmp	r3, #236	; 0xec
 800650c:	d822      	bhi.n	8006554 <TouchClockActivity+0xf0>
				{
					DS3231_SetDayOfWeek(DayOfWeek);
 800650e:	4b7f      	ldr	r3, [pc, #508]	; (800670c <TouchClockActivity+0x2a8>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f7fc f956 	bl	80027c4 <DS3231_SetDayOfWeek>
					DS3231_SetHour(Hours);
 8006518:	4b7a      	ldr	r3, [pc, #488]	; (8006704 <TouchClockActivity+0x2a0>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fc f963 	bl	80027e8 <DS3231_SetHour>
					DS3231_SetMinute(Minutes);
 8006522:	4b79      	ldr	r3, [pc, #484]	; (8006708 <TouchClockActivity+0x2a4>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc f973 	bl	8002812 <DS3231_SetMinute>
					DS3231_SetSecond(50);
 800652c:	2032      	movs	r0, #50	; 0x32
 800652e:	f7fc f982 	bl	8002836 <DS3231_SetSecond>
					sprintf((char*)Msg, "-Time Changed-");
 8006532:	4979      	ldr	r1, [pc, #484]	; (8006718 <TouchClockActivity+0x2b4>)
 8006534:	4879      	ldr	r0, [pc, #484]	; (800671c <TouchClockActivity+0x2b8>)
 8006536:	f00a fde1 	bl	80110fc <siprintf>
					EF_PutString(Msg, CLOCK_STRING_POZ_X, CLOCK_STRING_POZ_Y, ILI9341_GREEN, BG_COLOR, ILI9341_LIGHTGREY);
 800653a:	f24c 6318 	movw	r3, #50712	; 0xc618
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	2301      	movs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006548:	220a      	movs	r2, #10
 800654a:	212f      	movs	r1, #47	; 0x2f
 800654c:	4873      	ldr	r0, [pc, #460]	; (800671c <TouchClockActivity+0x2b8>)
 800654e:	f7fb fae9 	bl	8001b24 <EF_PutString>
 8006552:	e113      	b.n	800677c <TouchClockActivity+0x318>
				}

				// Check if that point is inside the Medium Button - change screen to Schedule  screen
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b6d      	cmp	r3, #109	; 0x6d
 8006558:	d90f      	bls.n	800657a <TouchClockActivity+0x116>
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2bdc      	cmp	r3, #220	; 0xdc
 800655e:	d80c      	bhi.n	800657a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006560:	88bb      	ldrh	r3, [r7, #4]
				else if((x >= MEDIUM_BUTTON_CLOCK_X)&&(x <= (MEDIUM_BUTTON_CLOCK_X + MEDIUM_BUTTON_CLOCK_W))&&
 8006562:	2bbd      	cmp	r3, #189	; 0xbd
 8006564:	d909      	bls.n	800657a <TouchClockActivity+0x116>
						(y >= MEDIUM_BUTTON_CLOCK_Y)&&(y <= (MEDIUM_BUTTON_CLOCK_Y + MEDIUM_BUTTON_H_CLOCK)))
 8006566:	88bb      	ldrh	r3, [r7, #4]
 8006568:	2bd4      	cmp	r3, #212	; 0xd4
 800656a:	d806      	bhi.n	800657a <TouchClockActivity+0x116>
				{
					State = MENUTFT_SCHEDULE_1;
 800656c:	4b68      	ldr	r3, [pc, #416]	; (8006710 <TouchClockActivity+0x2ac>)
 800656e:	2207      	movs	r2, #7
 8006570:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006572:	4b68      	ldr	r3, [pc, #416]	; (8006714 <TouchClockActivity+0x2b0>)
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e100      	b.n	800677c <TouchClockActivity+0x318>


				//
				// Check if it is button to increase by an ONE (1) HOUR / MINUT - first ROW
				//
				else if((x >= CLOCK_BUTTON_X)&&(x <= (CLOCK_BUTTON_X + CLOCK_BUTTON_W)))
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2bef      	cmp	r3, #239	; 0xef
 800657e:	d97b      	bls.n	8006678 <TouchClockActivity+0x214>
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006586:	d877      	bhi.n	8006678 <TouchClockActivity+0x214>
				{

					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8006588:	88bb      	ldrh	r3, [r7, #4]
 800658a:	2b4a      	cmp	r3, #74	; 0x4a
 800658c:	d923      	bls.n	80065d6 <TouchClockActivity+0x172>
 800658e:	88bb      	ldrh	r3, [r7, #4]
 8006590:	2b60      	cmp	r3, #96	; 0x60
 8006592:	d820      	bhi.n	80065d6 <TouchClockActivity+0x172>
					{
						if(Hours < 24)
 8006594:	4b5b      	ldr	r3, [pc, #364]	; (8006704 <TouchClockActivity+0x2a0>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b17      	cmp	r3, #23
 800659a:	d806      	bhi.n	80065aa <TouchClockActivity+0x146>
						{
							Hours++;
 800659c:	4b59      	ldr	r3, [pc, #356]	; (8006704 <TouchClockActivity+0x2a0>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b57      	ldr	r3, [pc, #348]	; (8006704 <TouchClockActivity+0x2a0>)
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	e002      	b.n	80065b0 <TouchClockActivity+0x14c>
						}
						else
						{
							Hours = 1;
 80065aa:	4b56      	ldr	r3, [pc, #344]	; (8006704 <TouchClockActivity+0x2a0>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80065b0:	4b54      	ldr	r3, [pc, #336]	; (8006704 <TouchClockActivity+0x2a0>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	495a      	ldr	r1, [pc, #360]	; (8006720 <TouchClockActivity+0x2bc>)
 80065b8:	4858      	ldr	r0, [pc, #352]	; (800671c <TouchClockActivity+0x2b8>)
 80065ba:	f00a fd9f 	bl	80110fc <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80065be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	2301      	movs	r3, #1
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2300      	movs	r3, #0
 80065ca:	2246      	movs	r2, #70	; 0x46
 80065cc:	21a0      	movs	r1, #160	; 0xa0
 80065ce:	4853      	ldr	r0, [pc, #332]	; (800671c <TouchClockActivity+0x2b8>)
 80065d0:	f7fb faa8 	bl	8001b24 <EF_PutString>
 80065d4:	e04f      	b.n	8006676 <TouchClockActivity+0x212>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Minute
 80065d6:	88bb      	ldrh	r3, [r7, #4]
 80065d8:	2b72      	cmp	r3, #114	; 0x72
 80065da:	d923      	bls.n	8006624 <TouchClockActivity+0x1c0>
 80065dc:	88bb      	ldrh	r3, [r7, #4]
 80065de:	2b88      	cmp	r3, #136	; 0x88
 80065e0:	d820      	bhi.n	8006624 <TouchClockActivity+0x1c0>
					{
						if(Minutes < 59)
 80065e2:	4b49      	ldr	r3, [pc, #292]	; (8006708 <TouchClockActivity+0x2a4>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b3a      	cmp	r3, #58	; 0x3a
 80065e8:	d806      	bhi.n	80065f8 <TouchClockActivity+0x194>
						{
							Minutes++;
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <TouchClockActivity+0x2a4>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b45      	ldr	r3, [pc, #276]	; (8006708 <TouchClockActivity+0x2a4>)
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e002      	b.n	80065fe <TouchClockActivity+0x19a>
						}
						else
						{
							Minutes = 0;
 80065f8:	4b43      	ldr	r3, [pc, #268]	; (8006708 <TouchClockActivity+0x2a4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 80065fe:	4b42      	ldr	r3, [pc, #264]	; (8006708 <TouchClockActivity+0x2a4>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	461a      	mov	r2, r3
 8006604:	4946      	ldr	r1, [pc, #280]	; (8006720 <TouchClockActivity+0x2bc>)
 8006606:	4845      	ldr	r0, [pc, #276]	; (800671c <TouchClockActivity+0x2b8>)
 8006608:	f00a fd78 	bl	80110fc <siprintf>
						EF_PutString(Msg, STRING_H_M_NUMBER_POZ_X, STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800660c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006610:	9301      	str	r3, [sp, #4]
 8006612:	2301      	movs	r3, #1
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	226e      	movs	r2, #110	; 0x6e
 800661a:	21a0      	movs	r1, #160	; 0xa0
 800661c:	483f      	ldr	r0, [pc, #252]	; (800671c <TouchClockActivity+0x2b8>)
 800661e:	f7fb fa81 	bl	8001b24 <EF_PutString>
 8006622:	e028      	b.n	8006676 <TouchClockActivity+0x212>
					}
					else if((y >= CLOCK_B_3_POZ_Y)&&(y <= (CLOCK_B_3_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Day
 8006624:	88bb      	ldrh	r3, [r7, #4]
 8006626:	2b9a      	cmp	r3, #154	; 0x9a
 8006628:	f240 80a7 	bls.w	800677a <TouchClockActivity+0x316>
 800662c:	88bb      	ldrh	r3, [r7, #4]
 800662e:	2bb0      	cmp	r3, #176	; 0xb0
 8006630:	f200 80a3 	bhi.w	800677a <TouchClockActivity+0x316>
					{
						if(DayOfWeek < 7)
 8006634:	4b35      	ldr	r3, [pc, #212]	; (800670c <TouchClockActivity+0x2a8>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b06      	cmp	r3, #6
 800663a:	d806      	bhi.n	800664a <TouchClockActivity+0x1e6>
						{
							DayOfWeek++;
 800663c:	4b33      	ldr	r3, [pc, #204]	; (800670c <TouchClockActivity+0x2a8>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	3301      	adds	r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	4b31      	ldr	r3, [pc, #196]	; (800670c <TouchClockActivity+0x2a8>)
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e002      	b.n	8006650 <TouchClockActivity+0x1ec>
						}
						else
						{
							DayOfWeek = 1;
 800664a:	4b30      	ldr	r3, [pc, #192]	; (800670c <TouchClockActivity+0x2a8>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, "DZIEŃ TYG:  %d ", DayOfWeek);
 8006650:	4b2e      	ldr	r3, [pc, #184]	; (800670c <TouchClockActivity+0x2a8>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	4933      	ldr	r1, [pc, #204]	; (8006724 <TouchClockActivity+0x2c0>)
 8006658:	4830      	ldr	r0, [pc, #192]	; (800671c <TouchClockActivity+0x2b8>)
 800665a:	f00a fd4f 	bl	80110fc <siprintf>
						EF_PutString(Msg, STRING_HOUR_MINUTE_POZ_X, STRING_DAY_OF_WEEK_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800665e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006662:	9301      	str	r3, [sp, #4]
 8006664:	2301      	movs	r3, #1
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	2300      	movs	r3, #0
 800666a:	2296      	movs	r2, #150	; 0x96
 800666c:	2114      	movs	r1, #20
 800666e:	482b      	ldr	r0, [pc, #172]	; (800671c <TouchClockActivity+0x2b8>)
 8006670:	f7fb fa58 	bl	8001b24 <EF_PutString>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 8006674:	e081      	b.n	800677a <TouchClockActivity+0x316>
 8006676:	e080      	b.n	800677a <TouchClockActivity+0x316>
				}

				//
				// Check if it is button to increase by an 6 HOURS / 10 MINUTS - second ROW
				//
				else if((x >= (CLOCK_BUTTON2_X))&&(x <= (CLOCK_BUTTON2_X + CLOCK_BUTTON_W)))
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800667e:	d37d      	bcc.n	800677c <TouchClockActivity+0x318>
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8006686:	d879      	bhi.n	800677c <TouchClockActivity+0x318>
				{
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 6 Hour
 8006688:	88bb      	ldrh	r3, [r7, #4]
 800668a:	2b4a      	cmp	r3, #74	; 0x4a
 800668c:	d923      	bls.n	80066d6 <TouchClockActivity+0x272>
 800668e:	88bb      	ldrh	r3, [r7, #4]
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d820      	bhi.n	80066d6 <TouchClockActivity+0x272>
					{

						if(Hours < 19)
 8006694:	4b1b      	ldr	r3, [pc, #108]	; (8006704 <TouchClockActivity+0x2a0>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b12      	cmp	r3, #18
 800669a:	d806      	bhi.n	80066aa <TouchClockActivity+0x246>
						{
							Hours = Hours + 6;
 800669c:	4b19      	ldr	r3, [pc, #100]	; (8006704 <TouchClockActivity+0x2a0>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	3306      	adds	r3, #6
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	4b17      	ldr	r3, [pc, #92]	; (8006704 <TouchClockActivity+0x2a0>)
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	e002      	b.n	80066b0 <TouchClockActivity+0x24c>
						}
						else
						{
							Hours = 1;
 80066aa:	4b16      	ldr	r3, [pc, #88]	; (8006704 <TouchClockActivity+0x2a0>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Hours);
 80066b0:	4b14      	ldr	r3, [pc, #80]	; (8006704 <TouchClockActivity+0x2a0>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	491a      	ldr	r1, [pc, #104]	; (8006720 <TouchClockActivity+0x2bc>)
 80066b8:	4818      	ldr	r0, [pc, #96]	; (800671c <TouchClockActivity+0x2b8>)
 80066ba:	f00a fd1f 	bl	80110fc <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-3), STRING_HOUR_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80066be:	f24c 6318 	movw	r3, #50712	; 0xc618
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	2301      	movs	r3, #1
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	2246      	movs	r2, #70	; 0x46
 80066cc:	219d      	movs	r1, #157	; 0x9d
 80066ce:	4813      	ldr	r0, [pc, #76]	; (800671c <TouchClockActivity+0x2b8>)
 80066d0:	f7fb fa28 	bl	8001b24 <EF_PutString>
 80066d4:	e04d      	b.n	8006772 <TouchClockActivity+0x30e>

					}
					else if((y >= CLOCK_B_2_POZ_Y)&&(y <= (CLOCK_B_2_POZ_Y + CLOCK_BUTTON_H))) // Add 10 Minute
 80066d6:	88bb      	ldrh	r3, [r7, #4]
 80066d8:	2b72      	cmp	r3, #114	; 0x72
 80066da:	d94a      	bls.n	8006772 <TouchClockActivity+0x30e>
 80066dc:	88bb      	ldrh	r3, [r7, #4]
 80066de:	2b88      	cmp	r3, #136	; 0x88
 80066e0:	d847      	bhi.n	8006772 <TouchClockActivity+0x30e>
					{
						if(Minutes < 49)
 80066e2:	4b09      	ldr	r3, [pc, #36]	; (8006708 <TouchClockActivity+0x2a4>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b30      	cmp	r3, #48	; 0x30
 80066e8:	d81e      	bhi.n	8006728 <TouchClockActivity+0x2c4>
						{
							Minutes = Minutes +10;
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <TouchClockActivity+0x2a4>)
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	330a      	adds	r3, #10
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <TouchClockActivity+0x2a4>)
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	e02a      	b.n	800674e <TouchClockActivity+0x2ea>
 80066f8:	08018068 	.word	0x08018068
 80066fc:	2000028c 	.word	0x2000028c
 8006700:	20000256 	.word	0x20000256
 8006704:	20000031 	.word	0x20000031
 8006708:	20000032 	.word	0x20000032
 800670c:	20000030 	.word	0x20000030
 8006710:	20000290 	.word	0x20000290
 8006714:	20000255 	.word	0x20000255
 8006718:	0801525c 	.word	0x0801525c
 800671c:	200002fc 	.word	0x200002fc
 8006720:	0801526c 	.word	0x0801526c
 8006724:	08015274 	.word	0x08015274
						}
						else
						{
							Minutes = (Minutes + 10) % 60;
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <TouchClockActivity+0x32c>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f103 020a 	add.w	r2, r3, #10
 8006730:	4b18      	ldr	r3, [pc, #96]	; (8006794 <TouchClockActivity+0x330>)
 8006732:	fb83 1302 	smull	r1, r3, r3, r2
 8006736:	4413      	add	r3, r2
 8006738:	1159      	asrs	r1, r3, #5
 800673a:	17d3      	asrs	r3, r2, #31
 800673c:	1ac9      	subs	r1, r1, r3
 800673e:	460b      	mov	r3, r1
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	1ad1      	subs	r1, r2, r3
 8006748:	b2ca      	uxtb	r2, r1
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <TouchClockActivity+0x32c>)
 800674c:	701a      	strb	r2, [r3, #0]
						}
						sprintf((char*)Msg, " %d  ", Minutes);
 800674e:	4b10      	ldr	r3, [pc, #64]	; (8006790 <TouchClockActivity+0x32c>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	4910      	ldr	r1, [pc, #64]	; (8006798 <TouchClockActivity+0x334>)
 8006756:	4811      	ldr	r0, [pc, #68]	; (800679c <TouchClockActivity+0x338>)
 8006758:	f00a fcd0 	bl	80110fc <siprintf>
						EF_PutString(Msg, (STRING_H_M_NUMBER_POZ_X-4), STRING_MINUTE_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800675c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	2301      	movs	r3, #1
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	2300      	movs	r3, #0
 8006768:	226e      	movs	r2, #110	; 0x6e
 800676a:	219c      	movs	r1, #156	; 0x9c
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <TouchClockActivity+0x338>)
 800676e:	f7fb f9d9 	bl	8001b24 <EF_PutString>

					}
					EF_SetFont(&arialBlack_20ptFontInfo);
 8006772:	480b      	ldr	r0, [pc, #44]	; (80067a0 <TouchClockActivity+0x33c>)
 8006774:	f7fa ffbc 	bl	80016f0 <EF_SetFont>
 8006778:	e000      	b.n	800677c <TouchClockActivity+0x318>
					if((y >= CLOCK_B_1_POZ_Y)&&(y <= (CLOCK_B_1_POZ_Y + CLOCK_BUTTON_H))) // Add 1 Hour
 800677a:	bf00      	nop
				}
				TimerTouch = HAL_GetTick();
 800677c:	f003 f8f6 	bl	800996c <HAL_GetTick>
 8006780:	4603      	mov	r3, r0
 8006782:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <TouchClockActivity+0x340>)
 8006784:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000032 	.word	0x20000032
 8006794:	88888889 	.word	0x88888889
 8006798:	0801526c 	.word	0x0801526c
 800679c:	200002fc 	.word	0x200002fc
 80067a0:	08018068 	.word	0x08018068
 80067a4:	2000028c 	.word	0x2000028c

080067a8 <TouchPredefinedActivityActivity>:
//
// Function to handling touch on Predefined Activity Screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchPredefinedActivityActivity()
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af02      	add	r7, sp, #8
	if(XPT2046_IsTouched())
 80067ae:	f7fb fd6d 	bl	800228c <XPT2046_IsTouched>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8106 	beq.w	80069c6 <TouchPredefinedActivityActivity+0x21e>
	{

		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 80067ba:	f003 f8d7 	bl	800996c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	4b83      	ldr	r3, [pc, #524]	; (80069d0 <TouchPredefinedActivityActivity+0x228>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ca:	f0c0 80fc 	bcc.w	80069c6 <TouchPredefinedActivityActivity+0x21e>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80067ce:	1d3a      	adds	r2, r7, #4
 80067d0:	1dbb      	adds	r3, r7, #6
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fb fd1b 	bl	8002210 <XPT2046_GetTouchPoint>

			EF_SetFont(&arial_11ptFontInfo);
 80067da:	487e      	ldr	r0, [pc, #504]	; (80069d4 <TouchPredefinedActivityActivity+0x22c>)
 80067dc:	f7fa ff88 	bl	80016f0 <EF_SetFont>
			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b09      	cmp	r3, #9
 80067e4:	d90f      	bls.n	8006806 <TouchPredefinedActivityActivity+0x5e>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b6e      	cmp	r3, #110	; 0x6e
 80067ea:	d80c      	bhi.n	8006806 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067ec:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 80067ee:	2bd7      	cmp	r3, #215	; 0xd7
 80067f0:	d909      	bls.n	8006806 <TouchPredefinedActivityActivity+0x5e>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 80067f2:	88bb      	ldrh	r3, [r7, #4]
 80067f4:	2bec      	cmp	r3, #236	; 0xec
 80067f6:	d806      	bhi.n	8006806 <TouchPredefinedActivityActivity+0x5e>
			{
				State = MENUTFT_SWITCH;
 80067f8:	4b77      	ldr	r3, [pc, #476]	; (80069d8 <TouchPredefinedActivityActivity+0x230>)
 80067fa:	2202      	movs	r2, #2
 80067fc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 80067fe:	4b77      	ldr	r3, [pc, #476]	; (80069dc <TouchPredefinedActivityActivity+0x234>)
 8006800:	2201      	movs	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e0da      	b.n	80069bc <TouchPredefinedActivityActivity+0x214>
			}

			//
			// Check if that point is in row where are button to Predefined Activity
			//
			else if((x >= ACTIVITY_BUTTON_X)&&(x <= (ACTIVITY_BUTTON_X + ACTIVITY_BUTTON_W)))
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b63      	cmp	r3, #99	; 0x63
 800680a:	f240 80d7 	bls.w	80069bc <TouchPredefinedActivityActivity+0x214>
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	2bdc      	cmp	r3, #220	; 0xdc
 8006812:	f200 80d3 	bhi.w	80069bc <TouchPredefinedActivityActivity+0x214>
			{
				if((y >= ACTIVITY_BUTTON_1_Y)&&(y<= (ACTIVITY_BUTTON_1_Y + ACTIVITY_BUTTON_H))) // First predefined activity button
 8006816:	88bb      	ldrh	r3, [r7, #4]
 8006818:	2b3b      	cmp	r3, #59	; 0x3b
 800681a:	d966      	bls.n	80068ea <TouchPredefinedActivityActivity+0x142>
 800681c:	88bb      	ldrh	r3, [r7, #4]
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d863      	bhi.n	80068ea <TouchPredefinedActivityActivity+0x142>
				{
					if(ActivityButtonState[0] >= 1) // if is ON
 8006822:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d02f      	beq.n	800688a <TouchPredefinedActivityActivity+0xe2>
					{
						ActivityButtonState[0] = 0;
 800682a:	4b6d      	ldr	r3, [pc, #436]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8006830:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	230a      	movs	r3, #10
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2328      	movs	r3, #40	; 0x28
 800683c:	2278      	movs	r2, #120	; 0x78
 800683e:	213c      	movs	r1, #60	; 0x3c
 8006840:	2064      	movs	r0, #100	; 0x64
 8006842:	f7fa ff04 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 8006846:	4967      	ldr	r1, [pc, #412]	; (80069e4 <TouchPredefinedActivityActivity+0x23c>)
 8006848:	4867      	ldr	r0, [pc, #412]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800684a:	f00a fc57 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800684e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	2300      	movs	r3, #0
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	2300      	movs	r3, #0
 800685a:	223e      	movs	r2, #62	; 0x3e
 800685c:	2177      	movs	r1, #119	; 0x77
 800685e:	4862      	ldr	r0, [pc, #392]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 8006860:	f7fb f960 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8006864:	4961      	ldr	r1, [pc, #388]	; (80069ec <TouchPredefinedActivityActivity+0x244>)
 8006866:	4860      	ldr	r0, [pc, #384]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 8006868:	f00a fc48 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 800686c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	2300      	movs	r3, #0
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	2300      	movs	r3, #0
 8006878:	2250      	movs	r2, #80	; 0x50
 800687a:	2193      	movs	r1, #147	; 0x93
 800687c:	485a      	ldr	r0, [pc, #360]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800687e:	f7fb f951 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(0); // Turn Activity OFF
 8006882:	2000      	movs	r0, #0
 8006884:	f7fe fa58 	bl	8004d38 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 8006888:	e098      	b.n	80069bc <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[0] = 1;
 800688a:	4b55      	ldr	r3, [pc, #340]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 800688c:	2201      	movs	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_1_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006890:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	230a      	movs	r3, #10
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	2328      	movs	r3, #40	; 0x28
 800689c:	2278      	movs	r2, #120	; 0x78
 800689e:	213c      	movs	r1, #60	; 0x3c
 80068a0:	2064      	movs	r0, #100	; 0x64
 80068a2:	f7fa fed4 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "KARMIENIE");
 80068a6:	494f      	ldr	r1, [pc, #316]	; (80069e4 <TouchPredefinedActivityActivity+0x23c>)
 80068a8:	484f      	ldr	r0, [pc, #316]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 80068aa:	f00a fc27 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_1_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80068ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	2300      	movs	r3, #0
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2300      	movs	r3, #0
 80068ba:	223e      	movs	r2, #62	; 0x3e
 80068bc:	2177      	movs	r1, #119	; 0x77
 80068be:	484a      	ldr	r0, [pc, #296]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 80068c0:	f7fb f930 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 80068c4:	494a      	ldr	r1, [pc, #296]	; (80069f0 <TouchPredefinedActivityActivity+0x248>)
 80068c6:	4848      	ldr	r0, [pc, #288]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 80068c8:	f00a fc18 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_1_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80068cc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	2300      	movs	r3, #0
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2300      	movs	r3, #0
 80068d8:	2250      	movs	r2, #80	; 0x50
 80068da:	2193      	movs	r1, #147	; 0x93
 80068dc:	4842      	ldr	r0, [pc, #264]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 80068de:	f7fb f921 	bl	8001b24 <EF_PutString>
						predefinedActivityKarmienie(1);
 80068e2:	2001      	movs	r0, #1
 80068e4:	f7fe fa28 	bl	8004d38 <predefinedActivityKarmienie>
					if(ActivityButtonState[0] >= 1) // if is ON
 80068e8:	e068      	b.n	80069bc <TouchPredefinedActivityActivity+0x214>
					}

				}

				else if((y >= ACTIVITY_BUTTON_2_Y)&&(y<= (ACTIVITY_BUTTON_2_Y + ACTIVITY_BUTTON_H))) // Second predefined activity button
 80068ea:	88bb      	ldrh	r3, [r7, #4]
 80068ec:	2b77      	cmp	r3, #119	; 0x77
 80068ee:	d965      	bls.n	80069bc <TouchPredefinedActivityActivity+0x214>
 80068f0:	88bb      	ldrh	r3, [r7, #4]
 80068f2:	2ba0      	cmp	r3, #160	; 0xa0
 80068f4:	d862      	bhi.n	80069bc <TouchPredefinedActivityActivity+0x214>
				{
					if(ActivityButtonState[1] >= 1) // if is ON
 80068f6:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d02f      	beq.n	800695e <TouchPredefinedActivityActivity+0x1b6>
					{
						ActivityButtonState[1] = 0;
 80068fe:	4b38      	ldr	r3, [pc, #224]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 8006900:	2200      	movs	r2, #0
 8006902:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_OFF_BUTTON_COLOR);
 8006904:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	230a      	movs	r3, #10
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	2328      	movs	r3, #40	; 0x28
 8006910:	2278      	movs	r2, #120	; 0x78
 8006912:	2178      	movs	r1, #120	; 0x78
 8006914:	2064      	movs	r0, #100	; 0x64
 8006916:	f7fa fe9a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800691a:	4936      	ldr	r1, [pc, #216]	; (80069f4 <TouchPredefinedActivityActivity+0x24c>)
 800691c:	4832      	ldr	r0, [pc, #200]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800691e:	f00a fbed 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006922:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006926:	9301      	str	r3, [sp, #4]
 8006928:	2300      	movs	r3, #0
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2300      	movs	r3, #0
 800692e:	227a      	movs	r2, #122	; 0x7a
 8006930:	2169      	movs	r1, #105	; 0x69
 8006932:	482d      	ldr	r0, [pc, #180]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 8006934:	f7fb f8f6 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "OFF");
 8006938:	492c      	ldr	r1, [pc, #176]	; (80069ec <TouchPredefinedActivityActivity+0x244>)
 800693a:	482b      	ldr	r0, [pc, #172]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800693c:	f00a fbde 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_OFF_BUTTON_COLOR);
 8006940:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	2300      	movs	r3, #0
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	2300      	movs	r3, #0
 800694c:	228c      	movs	r2, #140	; 0x8c
 800694e:	2193      	movs	r1, #147	; 0x93
 8006950:	4825      	ldr	r0, [pc, #148]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 8006952:	f7fb f8e7 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(0);
 8006956:	2000      	movs	r0, #0
 8006958:	f7fe f9d4 	bl	8004d04 <predefinedActivityCzyszczenie>
 800695c:	e02e      	b.n	80069bc <TouchPredefinedActivityActivity+0x214>
					}
					else // if is OFF
					{
						ActivityButtonState[1] = 1;
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <TouchPredefinedActivityActivity+0x238>)
 8006960:	2201      	movs	r2, #1
 8006962:	705a      	strb	r2, [r3, #1]
						GFX_DrawFillRoundRectangle(ACTIVITY_BUTTON_X, ACTIVITY_BUTTON_2_Y, ACTIVITY_BUTTON_W, ACTIVITY_BUTTON_H, ACTIVITY_BUTTON_R, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006964:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	230a      	movs	r3, #10
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2328      	movs	r3, #40	; 0x28
 8006970:	2278      	movs	r2, #120	; 0x78
 8006972:	2178      	movs	r1, #120	; 0x78
 8006974:	2064      	movs	r0, #100	; 0x64
 8006976:	f7fa fe6a 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "CZYSZCZENIE");
 800697a:	491e      	ldr	r1, [pc, #120]	; (80069f4 <TouchPredefinedActivityActivity+0x24c>)
 800697c:	481a      	ldr	r0, [pc, #104]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800697e:	f00a fbbd 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_2_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 8006982:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	2300      	movs	r3, #0
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	227a      	movs	r2, #122	; 0x7a
 8006990:	2169      	movs	r1, #105	; 0x69
 8006992:	4815      	ldr	r0, [pc, #84]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 8006994:	f7fb f8c6 	bl	8001b24 <EF_PutString>
						sprintf((char*)Msg, "ON");
 8006998:	4915      	ldr	r1, [pc, #84]	; (80069f0 <TouchPredefinedActivityActivity+0x248>)
 800699a:	4813      	ldr	r0, [pc, #76]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 800699c:	f00a fbae 	bl	80110fc <siprintf>
						EF_PutString(Msg, (ACTIVITY_BUTTON_X+STRING_ACTIVITIES_ON_OFF_X_ERRATA), (ACTIVITY_BUTTON_2_Y+STRING_ACTIVITIES_Y_INTER), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_ACTIVITY_BUTTON_COLOR);
 80069a0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	2300      	movs	r3, #0
 80069ac:	228c      	movs	r2, #140	; 0x8c
 80069ae:	2193      	movs	r1, #147	; 0x93
 80069b0:	480d      	ldr	r0, [pc, #52]	; (80069e8 <TouchPredefinedActivityActivity+0x240>)
 80069b2:	f7fb f8b7 	bl	8001b24 <EF_PutString>
						predefinedActivityCzyszczenie(1);
 80069b6:	2001      	movs	r0, #1
 80069b8:	f7fe f9a4 	bl	8004d04 <predefinedActivityCzyszczenie>
					}
				}
			}
			TimerTouch = HAL_GetTick();
 80069bc:	f002 ffd6 	bl	800996c <HAL_GetTick>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4a03      	ldr	r2, [pc, #12]	; (80069d0 <TouchPredefinedActivityActivity+0x228>)
 80069c4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000028c 	.word	0x2000028c
 80069d4:	080160f0 	.word	0x080160f0
 80069d8:	20000290 	.word	0x20000290
 80069dc:	20000255 	.word	0x20000255
 80069e0:	200002b0 	.word	0x200002b0
 80069e4:	08015288 	.word	0x08015288
 80069e8:	200002fc 	.word	0x200002fc
 80069ec:	08015254 	.word	0x08015254
 80069f0:	08015258 	.word	0x08015258
 80069f4:	08015294 	.word	0x08015294

080069f8 <TouchWSLedActivity>:
//
// Function to handling touch on LEDs WS2812b controlling screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TouchWSLedActivity(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af02      	add	r7, sp, #8
	// Check if screen was touched
		if(XPT2046_IsTouched())
 80069fe:	f7fb fc45 	bl	800228c <XPT2046_IsTouched>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 819d 	beq.w	8006d44 <TouchWSLedActivity+0x34c>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8006a0a:	48ae      	ldr	r0, [pc, #696]	; (8006cc4 <TouchWSLedActivity+0x2cc>)
 8006a0c:	f7fa fe70 	bl	80016f0 <EF_SetFont>
			if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006a10:	f002 ffac 	bl	800996c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	4bac      	ldr	r3, [pc, #688]	; (8006cc8 <TouchWSLedActivity+0x2d0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a20:	f0c0 8190 	bcc.w	8006d44 <TouchWSLedActivity+0x34c>
			{
				uint16_t x, y; // Touch points

				XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006a24:	1d3a      	adds	r2, r7, #4
 8006a26:	1dbb      	adds	r3, r7, #6
 8006a28:	4611      	mov	r1, r2
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb fbf0 	bl	8002210 <XPT2046_GetTouchPoint>

				if( 1 == ClockChangeFlag) // If we just get inside this screen we must get number of LEDs, but we do it only once
 8006a30:	4ba6      	ldr	r3, [pc, #664]	; (8006ccc <TouchWSLedActivity+0x2d4>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d10b      	bne.n	8006a50 <TouchWSLedActivity+0x58>
				{
					while(eeprom_read(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds)) != HAL_OK); // read number of leds
 8006a38:	bf00      	nop
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	49a4      	ldr	r1, [pc, #656]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006a3e:	2001      	movs	r0, #1
 8006a40:	f7fb ff56 	bl	80028f0 <eeprom_read>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f7      	bne.n	8006a3a <TouchWSLedActivity+0x42>
					WSLedChangeFlag = 0;
 8006a4a:	4ba2      	ldr	r3, [pc, #648]	; (8006cd4 <TouchWSLedActivity+0x2dc>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]

				//
				// Check if it is button to change screen
				//
				// Check if that point is inside the LEFT Button - back to Parameters
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d90f      	bls.n	8006a76 <TouchWSLedActivity+0x7e>
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	2b6e      	cmp	r3, #110	; 0x6e
 8006a5a:	d80c      	bhi.n	8006a76 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a5c:	88bb      	ldrh	r3, [r7, #4]
				if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006a5e:	2bd7      	cmp	r3, #215	; 0xd7
 8006a60:	d909      	bls.n	8006a76 <TouchWSLedActivity+0x7e>
						(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006a62:	88bb      	ldrh	r3, [r7, #4]
 8006a64:	2bec      	cmp	r3, #236	; 0xec
 8006a66:	d806      	bhi.n	8006a76 <TouchWSLedActivity+0x7e>
				{
					State = MENUTFT_LIGHTS;
 8006a68:	4b9b      	ldr	r3, [pc, #620]	; (8006cd8 <TouchWSLedActivity+0x2e0>)
 8006a6a:	2205      	movs	r2, #5
 8006a6c:	701a      	strb	r2, [r3, #0]
					StateChangeFlag = 1;
 8006a6e:	4b9b      	ldr	r3, [pc, #620]	; (8006cdc <TouchWSLedActivity+0x2e4>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e161      	b.n	8006d3a <TouchWSLedActivity+0x342>


				//
				// Check if it is button to increase number of LEDs - first line
				//
				else if((y >= WS_B_1_POZ_Y)&&(y <= (WS_B_1_POZ_Y + WS_LED_BUTTON_H)))
 8006a76:	88bb      	ldrh	r3, [r7, #4]
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	f240 80af 	bls.w	8006bdc <TouchWSLedActivity+0x1e4>
 8006a7e:	88bb      	ldrh	r3, [r7, #4]
 8006a80:	2b56      	cmp	r3, #86	; 0x56
 8006a82:	f200 80ab 	bhi.w	8006bdc <TouchWSLedActivity+0x1e4>
				{

					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	2bd8      	cmp	r3, #216	; 0xd8
 8006a8a:	d92f      	bls.n	8006aec <TouchWSLedActivity+0xf4>
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	2bf7      	cmp	r3, #247	; 0xf7
 8006a90:	d82c      	bhi.n	8006aec <TouchWSLedActivity+0xf4>
					{
						if(NrOfLeds < 98)
 8006a92:	4b8f      	ldr	r3, [pc, #572]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b61      	cmp	r3, #97	; 0x61
 8006a98:	d806      	bhi.n	8006aa8 <TouchWSLedActivity+0xb0>
						{
							NrOfLeds++;
 8006a9a:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	4b8b      	ldr	r3, [pc, #556]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <TouchWSLedActivity+0xb6>
						}
						else
						{
							NrOfLeds = 1;
 8006aa8:	4b89      	ldr	r3, [pc, #548]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
						}
						if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8006aae:	4b88      	ldr	r3, [pc, #544]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d807      	bhi.n	8006ac6 <TouchWSLedActivity+0xce>
 8006ab6:	4b86      	ldr	r3, [pc, #536]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	4988      	ldr	r1, [pc, #544]	; (8006ce0 <TouchWSLedActivity+0x2e8>)
 8006abe:	4889      	ldr	r0, [pc, #548]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006ac0:	f00a fb1c 	bl	80110fc <siprintf>
 8006ac4:	e006      	b.n	8006ad4 <TouchWSLedActivity+0xdc>
						else sprintf((char*)Msg, " %d", NrOfLeds);
 8006ac6:	4b82      	ldr	r3, [pc, #520]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	4986      	ldr	r1, [pc, #536]	; (8006ce8 <TouchWSLedActivity+0x2f0>)
 8006ace:	4885      	ldr	r0, [pc, #532]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006ad0:	f00a fb14 	bl	80110fc <siprintf>
						EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006ad4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	2301      	movs	r3, #1
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	223c      	movs	r2, #60	; 0x3c
 8006ae2:	21ac      	movs	r1, #172	; 0xac
 8006ae4:	487f      	ldr	r0, [pc, #508]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006ae6:	f7fb f81d 	bl	8001b24 <EF_PutString>
 8006aea:	e076      	b.n	8006bda <TouchWSLedActivity+0x1e2>
					}
					else if((x >= WS_LED_BUTTON_2_X)&&(x <= (WS_LED_BUTTON_2_X + WS_LED_BUTTON_W))) // Add +10 LED
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	2bfb      	cmp	r3, #251	; 0xfb
 8006af0:	d941      	bls.n	8006b76 <TouchWSLedActivity+0x17e>
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8006af8:	d83d      	bhi.n	8006b76 <TouchWSLedActivity+0x17e>
					{
						if(NrOfLeds < 90)
 8006afa:	4b75      	ldr	r3, [pc, #468]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b59      	cmp	r3, #89	; 0x59
 8006b00:	d806      	bhi.n	8006b10 <TouchWSLedActivity+0x118>
						{
							NrOfLeds = NrOfLeds + 10;
 8006b02:	4b73      	ldr	r3, [pc, #460]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	330a      	adds	r3, #10
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4b71      	ldr	r3, [pc, #452]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e013      	b.n	8006b38 <TouchWSLedActivity+0x140>
						}
						else
						{
							NrOfLeds = (NrOfLeds + 10) % 99;
 8006b10:	4b6f      	ldr	r3, [pc, #444]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f103 020a 	add.w	r2, r3, #10
 8006b18:	4b74      	ldr	r3, [pc, #464]	; (8006cec <TouchWSLedActivity+0x2f4>)
 8006b1a:	fb83 1302 	smull	r1, r3, r3, r2
 8006b1e:	4413      	add	r3, r2
 8006b20:	1199      	asrs	r1, r3, #6
 8006b22:	17d3      	asrs	r3, r2, #31
 8006b24:	1ac9      	subs	r1, r1, r3
 8006b26:	460b      	mov	r3, r1
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	440b      	add	r3, r1
 8006b2c:	0159      	lsls	r1, r3, #5
 8006b2e:	440b      	add	r3, r1
 8006b30:	1ad1      	subs	r1, r2, r3
 8006b32:	b2ca      	uxtb	r2, r1
 8006b34:	4b66      	ldr	r3, [pc, #408]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b36:	701a      	strb	r2, [r3, #0]
						}
					// Display String
					if(NrOfLeds < 10)sprintf((char*)Msg, "  %d ", NrOfLeds);
 8006b38:	4b65      	ldr	r3, [pc, #404]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b09      	cmp	r3, #9
 8006b3e:	d807      	bhi.n	8006b50 <TouchWSLedActivity+0x158>
 8006b40:	4b63      	ldr	r3, [pc, #396]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	4966      	ldr	r1, [pc, #408]	; (8006ce0 <TouchWSLedActivity+0x2e8>)
 8006b48:	4866      	ldr	r0, [pc, #408]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006b4a:	f00a fad7 	bl	80110fc <siprintf>
 8006b4e:	e006      	b.n	8006b5e <TouchWSLedActivity+0x166>
					else sprintf((char*)Msg, " %d", NrOfLeds);
 8006b50:	4b5f      	ldr	r3, [pc, #380]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	4964      	ldr	r1, [pc, #400]	; (8006ce8 <TouchWSLedActivity+0x2f0>)
 8006b58:	4862      	ldr	r0, [pc, #392]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006b5a:	f00a facf 	bl	80110fc <siprintf>
					EF_PutString(Msg, STRING_WS_LED_POZ_NUMBER_X, STRING_WS_LED_ILOSC_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8006b5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	2301      	movs	r3, #1
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	223c      	movs	r2, #60	; 0x3c
 8006b6c:	21ac      	movs	r1, #172	; 0xac
 8006b6e:	485d      	ldr	r0, [pc, #372]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006b70:	f7fa ffd8 	bl	8001b24 <EF_PutString>
 8006b74:	e031      	b.n	8006bda <TouchWSLedActivity+0x1e2>
					}


					else if((x >= WS_LED_BUTTON_3_X)&&(x <= (WS_LED_BUTTON_3_X + WS_LED_BUTTON_W))) // OK - confirm and send number of LEDs
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8006b7c:	f240 80d6 	bls.w	8006d2c <TouchWSLedActivity+0x334>
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8006b86:	f080 80d1 	bcs.w	8006d2c <TouchWSLedActivity+0x334>
					{
						SendComand(UCMD_WS_NUMBER_LED);
 8006b8a:	2025      	movs	r0, #37	; 0x25
 8006b8c:	f001 fee8 	bl	8008960 <SendComand>
						EF_SetFont(&arial_11ptFontInfo);
 8006b90:	4857      	ldr	r0, [pc, #348]	; (8006cf0 <TouchWSLedActivity+0x2f8>)
 8006b92:	f7fa fdad 	bl	80016f0 <EF_SetFont>
						GFX_DrawFillRoundRectangle(WS_LED_BUTTON_3_X, WS_B_1_POZ_Y, WS_LED_BUTTON_W, WS_LED_BUTTON_H, WS_LED_BUTTON_R, SWITCH_ON_BUTTON_COLOR);
 8006b96:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	2305      	movs	r3, #5
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2315      	movs	r3, #21
 8006ba2:	221e      	movs	r2, #30
 8006ba4:	2141      	movs	r1, #65	; 0x41
 8006ba6:	f240 101f 	movw	r0, #287	; 0x11f
 8006baa:	f7fa fd50 	bl	800164e <GFX_DrawFillRoundRectangle>
						sprintf((char*)Msg, "OK");
 8006bae:	4951      	ldr	r1, [pc, #324]	; (8006cf4 <TouchWSLedActivity+0x2fc>)
 8006bb0:	484c      	ldr	r0, [pc, #304]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006bb2:	f00a faa3 	bl	80110fc <siprintf>
						EF_PutString(Msg, (WS_LED_BUTTON_3_X+STRING_ERRATA_X+1), (WS_B_1_POZ_Y+STRING_ERRATA_Y), ILI9341_BLACK, BG_TRANSPARENT, SWITCH_ON_BUTTON_COLOR);
 8006bb6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2243      	movs	r2, #67	; 0x43
 8006bc4:	f240 1123 	movw	r1, #291	; 0x123
 8006bc8:	4846      	ldr	r0, [pc, #280]	; (8006ce4 <TouchWSLedActivity+0x2ec>)
 8006bca:	f7fa ffab 	bl	8001b24 <EF_PutString>
						// Write chosen number of LEDs to EEPROM memory
						eeprom_write(EEPROM_ADR_NUMBER_WS_LEDS, &NrOfLeds, sizeof(NrOfLeds));
 8006bce:	2201      	movs	r2, #1
 8006bd0:	493f      	ldr	r1, [pc, #252]	; (8006cd0 <TouchWSLedActivity+0x2d8>)
 8006bd2:	2001      	movs	r0, #1
 8006bd4:	f7fb feaa 	bl	800292c <eeprom_write>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006bd8:	e0a8      	b.n	8006d2c <TouchWSLedActivity+0x334>
 8006bda:	e0a7      	b.n	8006d2c <TouchWSLedActivity+0x334>
				}

				//
				// Check if it is second line button to change LEDs to WHITE
				//
				else if((y >= WS_B_2_POZ_Y)&&(y <= (WS_B_2_POZ_Y + WS_LED_BUTTON_H)))
 8006bdc:	88bb      	ldrh	r3, [r7, #4]
 8006bde:	2b5e      	cmp	r3, #94	; 0x5e
 8006be0:	d924      	bls.n	8006c2c <TouchWSLedActivity+0x234>
 8006be2:	88bb      	ldrh	r3, [r7, #4]
 8006be4:	2b74      	cmp	r3, #116	; 0x74
 8006be6:	d821      	bhi.n	8006c2c <TouchWSLedActivity+0x234>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	2b95      	cmp	r3, #149	; 0x95
 8006bec:	d906      	bls.n	8006bfc <TouchWSLedActivity+0x204>
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2bbe      	cmp	r3, #190	; 0xbe
 8006bf2:	d803      	bhi.n	8006bfc <TouchWSLedActivity+0x204>
					{
						SendComand(UCMD_WS_LED_WHITE_MAX);
 8006bf4:	201d      	movs	r0, #29
 8006bf6:	f001 feb3 	bl	8008960 <SendComand>
 8006bfa:	e016      	b.n	8006c2a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	2bc9      	cmp	r3, #201	; 0xc9
 8006c00:	d906      	bls.n	8006c10 <TouchWSLedActivity+0x218>
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	2bf2      	cmp	r3, #242	; 0xf2
 8006c06:	d803      	bhi.n	8006c10 <TouchWSLedActivity+0x218>
					{
						SendComand(UCMD_WS_LED_WHITE_MID);
 8006c08:	201e      	movs	r0, #30
 8006c0a:	f001 fea9 	bl	8008960 <SendComand>
 8006c0e:	e00c      	b.n	8006c2a <TouchWSLedActivity+0x232>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	2bfd      	cmp	r3, #253	; 0xfd
 8006c14:	f240 808c 	bls.w	8006d30 <TouchWSLedActivity+0x338>
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8006c1e:	f200 8087 	bhi.w	8006d30 <TouchWSLedActivity+0x338>
					{
						SendComand(UCMD_WS_LED_WHITE_MIN);
 8006c22:	201f      	movs	r0, #31
 8006c24:	f001 fe9c 	bl	8008960 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006c28:	e082      	b.n	8006d30 <TouchWSLedActivity+0x338>
 8006c2a:	e081      	b.n	8006d30 <TouchWSLedActivity+0x338>
				}

				//
				// Check if it is third line button to change LEDs to BLUE
				//
				else if((y >= WS_B_3_POZ_Y)&&(y <= (WS_B_3_POZ_Y + WS_LED_BUTTON_H)))
 8006c2c:	88bb      	ldrh	r3, [r7, #4]
 8006c2e:	2b7c      	cmp	r3, #124	; 0x7c
 8006c30:	d922      	bls.n	8006c78 <TouchWSLedActivity+0x280>
 8006c32:	88bb      	ldrh	r3, [r7, #4]
 8006c34:	2b92      	cmp	r3, #146	; 0x92
 8006c36:	d81f      	bhi.n	8006c78 <TouchWSLedActivity+0x280>
				{
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	2b95      	cmp	r3, #149	; 0x95
 8006c3c:	d906      	bls.n	8006c4c <TouchWSLedActivity+0x254>
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2bbe      	cmp	r3, #190	; 0xbe
 8006c42:	d803      	bhi.n	8006c4c <TouchWSLedActivity+0x254>
					{
						SendComand(UCMD_WS_LED_BLUE_MAX);
 8006c44:	2020      	movs	r0, #32
 8006c46:	f001 fe8b 	bl	8008960 <SendComand>
 8006c4a:	e014      	b.n	8006c76 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_2_X)&&(x <= (WS_WHITE_BUTTON_2_X + WS_COLOR_BUTTON_W))) // MID
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	2bc9      	cmp	r3, #201	; 0xc9
 8006c50:	d906      	bls.n	8006c60 <TouchWSLedActivity+0x268>
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2bf2      	cmp	r3, #242	; 0xf2
 8006c56:	d803      	bhi.n	8006c60 <TouchWSLedActivity+0x268>
					{
						SendComand(UCMD_WS_LED_BLUE_MID);
 8006c58:	2021      	movs	r0, #33	; 0x21
 8006c5a:	f001 fe81 	bl	8008960 <SendComand>
 8006c5e:	e00a      	b.n	8006c76 <TouchWSLedActivity+0x27e>
					}
					else if((x >= WS_WHITE_BUTTON_3_X)&&(x <= (WS_WHITE_BUTTON_3_X + WS_COLOR_BUTTON_W))) // MIN
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2bfd      	cmp	r3, #253	; 0xfd
 8006c64:	d966      	bls.n	8006d34 <TouchWSLedActivity+0x33c>
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8006c6c:	d862      	bhi.n	8006d34 <TouchWSLedActivity+0x33c>
					{
						SendComand(UCMD_WS_LED_BLUE_MIN);
 8006c6e:	2022      	movs	r0, #34	; 0x22
 8006c70:	f001 fe76 	bl	8008960 <SendComand>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006c74:	e05e      	b.n	8006d34 <TouchWSLedActivity+0x33c>
 8006c76:	e05d      	b.n	8006d34 <TouchWSLedActivity+0x33c>
				}

				//
				// Check if it is fourth line button to change LEDs to Predefined
				//
				else if((y >= WS_B_4_POZ_Y)&&(y <= (WS_B_4_POZ_Y + WS_LED_BUTTON_H)))
 8006c78:	88bb      	ldrh	r3, [r7, #4]
 8006c7a:	2b9b      	cmp	r3, #155	; 0x9b
 8006c7c:	d93c      	bls.n	8006cf8 <TouchWSLedActivity+0x300>
 8006c7e:	88bb      	ldrh	r3, [r7, #4]
 8006c80:	2bb1      	cmp	r3, #177	; 0xb1
 8006c82:	d839      	bhi.n	8006cf8 <TouchWSLedActivity+0x300>
				{
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	2b13      	cmp	r3, #19
 8006c88:	d906      	bls.n	8006c98 <TouchWSLedActivity+0x2a0>
 8006c8a:	88fb      	ldrh	r3, [r7, #6]
 8006c8c:	2b64      	cmp	r3, #100	; 0x64
 8006c8e:	d803      	bhi.n	8006c98 <TouchWSLedActivity+0x2a0>
					{
						SendComand(UCMD_WS_LED_DAILY);
 8006c90:	2023      	movs	r0, #35	; 0x23
 8006c92:	f001 fe65 	bl	8008960 <SendComand>
 8006c96:	e014      	b.n	8006cc2 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_2_X)&&(x <= (WS_PREDEFINED_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	2b77      	cmp	r3, #119	; 0x77
 8006c9c:	d906      	bls.n	8006cac <TouchWSLedActivity+0x2b4>
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	2bc8      	cmp	r3, #200	; 0xc8
 8006ca2:	d803      	bhi.n	8006cac <TouchWSLedActivity+0x2b4>
					{
						SendComand(UCMD_WS_LED_WHITE_OFF);
 8006ca4:	201c      	movs	r0, #28
 8006ca6:	f001 fe5b 	bl	8008960 <SendComand>
 8006caa:	e00a      	b.n	8006cc2 <TouchWSLedActivity+0x2ca>
					}
					else if((x >= WS_PREDEFINED_BUTTON_3_X)&&(x <= (WS_PREDEFINED_BUTTON_3_X + WS_PREDEFINED_BUTTON_W))) // MIN
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2bdb      	cmp	r3, #219	; 0xdb
 8006cb0:	d942      	bls.n	8006d38 <TouchWSLedActivity+0x340>
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006cb8:	d83e      	bhi.n	8006d38 <TouchWSLedActivity+0x340>
					{
						SendComand(UCMD_WS_LED_NIGHT);
 8006cba:	2024      	movs	r0, #36	; 0x24
 8006cbc:	f001 fe50 	bl	8008960 <SendComand>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006cc0:	e03a      	b.n	8006d38 <TouchWSLedActivity+0x340>
 8006cc2:	e039      	b.n	8006d38 <TouchWSLedActivity+0x340>
 8006cc4:	08018068 	.word	0x08018068
 8006cc8:	2000028c 	.word	0x2000028c
 8006ccc:	20000256 	.word	0x20000256
 8006cd0:	20000033 	.word	0x20000033
 8006cd4:	20000257 	.word	0x20000257
 8006cd8:	20000290 	.word	0x20000290
 8006cdc:	20000255 	.word	0x20000255
 8006ce0:	080152a0 	.word	0x080152a0
 8006ce4:	200002fc 	.word	0x200002fc
 8006ce8:	080152a8 	.word	0x080152a8
 8006cec:	a57eb503 	.word	0xa57eb503
 8006cf0:	080160f0 	.word	0x080160f0
 8006cf4:	080152ac 	.word	0x080152ac
				}

				//
				// Check if it is fifth line button to change LEDs to Predefined animations
				//
				else if((y >= WS_B_5_POZ_Y)&&(y <= (WS_B_5_POZ_Y + WS_LED_BUTTON_H)))
 8006cf8:	88bb      	ldrh	r3, [r7, #4]
 8006cfa:	2bba      	cmp	r3, #186	; 0xba
 8006cfc:	d91d      	bls.n	8006d3a <TouchWSLedActivity+0x342>
 8006cfe:	88bb      	ldrh	r3, [r7, #4]
 8006d00:	2bd0      	cmp	r3, #208	; 0xd0
 8006d02:	d81a      	bhi.n	8006d3a <TouchWSLedActivity+0x342>
				{
					if((x >= WS_PREDEFINED_ACT_BUTTON_1_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b45      	cmp	r3, #69	; 0x45
 8006d08:	d906      	bls.n	8006d18 <TouchWSLedActivity+0x320>
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	2b96      	cmp	r3, #150	; 0x96
 8006d0e:	d803      	bhi.n	8006d18 <TouchWSLedActivity+0x320>
					{
						SendComand(UCMD_WS_ANIMATION_SUNRISE);
 8006d10:	2026      	movs	r0, #38	; 0x26
 8006d12:	f001 fe25 	bl	8008960 <SendComand>
 8006d16:	e010      	b.n	8006d3a <TouchWSLedActivity+0x342>
					}
					else if((x >= WS_PREDEFINED_ACT_BUTTON_2_X)&&(x <= (WS_PREDEFINED_ACT_BUTTON_2_X + WS_PREDEFINED_BUTTON_W))) // MID
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	2ba9      	cmp	r3, #169	; 0xa9
 8006d1c:	d90d      	bls.n	8006d3a <TouchWSLedActivity+0x342>
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2bfa      	cmp	r3, #250	; 0xfa
 8006d22:	d80a      	bhi.n	8006d3a <TouchWSLedActivity+0x342>
					{
						SendComand(UCMD_WS_ANIMATION_SUNSET);
 8006d24:	2027      	movs	r0, #39	; 0x27
 8006d26:	f001 fe1b 	bl	8008960 <SendComand>
 8006d2a:	e006      	b.n	8006d3a <TouchWSLedActivity+0x342>
					if((x >= WS_LED_BUTTON_1_X)&&(x <= (WS_LED_BUTTON_1_X + WS_LED_BUTTON_W))) // Add +1 LED
 8006d2c:	bf00      	nop
 8006d2e:	e004      	b.n	8006d3a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <TouchWSLedActivity+0x342>
					if((x >= WS_WHITE_BUTTON_1_X)&&(x <= (WS_WHITE_BUTTON_1_X + WS_COLOR_BUTTON_W))) // MAX
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <TouchWSLedActivity+0x342>
					if((x >= WS_PREDEFINED_BUTTON_1_X)&&(x <= (WS_PREDEFINED_BUTTON_1_X + WS_PREDEFINED_BUTTON_W))) // MAX
 8006d38:	bf00      	nop
					}
				}
				TimerTouch = HAL_GetTick();
 8006d3a:	f002 fe17 	bl	800996c <HAL_GetTick>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	4a02      	ldr	r2, [pc, #8]	; (8006d4c <TouchWSLedActivity+0x354>)
 8006d42:	6013      	str	r3, [r2, #0]
			}
		}
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	2000028c 	.word	0x2000028c

08006d50 <Schedule1Activity>:
//
// Function to handling touch on Schedule 1 (ONE) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule1Activity()
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af02      	add	r7, sp, #8
	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <Schedule1Activity+0x1f0>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d11a      	bne.n	8006d94 <Schedule1Activity+0x44>
	{
		  EEPROM_ScheduleHourOnRead(1, &hourOnSchedule1);
 8006d5e:	4979      	ldr	r1, [pc, #484]	; (8006f44 <Schedule1Activity+0x1f4>)
 8006d60:	2001      	movs	r0, #1
 8006d62:	f7fc f8ac 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(1, &minuteOnSchedule1);
 8006d66:	4978      	ldr	r1, [pc, #480]	; (8006f48 <Schedule1Activity+0x1f8>)
 8006d68:	2001      	movs	r0, #1
 8006d6a:	f7fc f8cc 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(1, &hourOffSchedule1);
 8006d6e:	4977      	ldr	r1, [pc, #476]	; (8006f4c <Schedule1Activity+0x1fc>)
 8006d70:	2001      	movs	r0, #1
 8006d72:	f7fc f8ec 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(1, &minuteOffSchedule1);
 8006d76:	4976      	ldr	r1, [pc, #472]	; (8006f50 <Schedule1Activity+0x200>)
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f7fc f90c 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(1, schedule1DayInWeekTab);
 8006d7e:	4975      	ldr	r1, [pc, #468]	; (8006f54 <Schedule1Activity+0x204>)
 8006d80:	2001      	movs	r0, #1
 8006d82:	f7fb ff4b 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(1, schedule1RelayAndSwitchTab);
 8006d86:	4974      	ldr	r1, [pc, #464]	; (8006f58 <Schedule1Activity+0x208>)
 8006d88:	2001      	movs	r0, #1
 8006d8a:	f7fb ffc3 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>

		  ScheduleChangeFlag = 0;
 8006d8e:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <Schedule1Activity+0x1f0>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006d94:	f7fb fa7a 	bl	800228c <XPT2046_IsTouched>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80cc 	beq.w	8006f38 <Schedule1Activity+0x1e8>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006da0:	f002 fde4 	bl	800996c <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	4b6d      	ldr	r3, [pc, #436]	; (8006f5c <Schedule1Activity+0x20c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db0:	f0c0 80c2 	bcc.w	8006f38 <Schedule1Activity+0x1e8>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006db4:	1d3a      	adds	r2, r7, #4
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fb fa28 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d90f      	bls.n	8006de6 <Schedule1Activity+0x96>
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	2b6e      	cmp	r3, #110	; 0x6e
 8006dca:	d80c      	bhi.n	8006de6 <Schedule1Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006dcc:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006dce:	2bd7      	cmp	r3, #215	; 0xd7
 8006dd0:	d909      	bls.n	8006de6 <Schedule1Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006dd2:	88bb      	ldrh	r3, [r7, #4]
 8006dd4:	2bec      	cmp	r3, #236	; 0xec
 8006dd6:	d806      	bhi.n	8006de6 <Schedule1Activity+0x96>
			{
				State = MENUTFT_CLOCK;
 8006dd8:	4b61      	ldr	r3, [pc, #388]	; (8006f60 <Schedule1Activity+0x210>)
 8006dda:	2203      	movs	r2, #3
 8006ddc:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006dde:	4b61      	ldr	r3, [pc, #388]	; (8006f64 <Schedule1Activity+0x214>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e0a3      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			// Check if that point is inside the RIGHT Button
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	2bdb      	cmp	r3, #219	; 0xdb
 8006dea:	d910      	bls.n	8006e0e <Schedule1Activity+0xbe>
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8006df2:	d20c      	bcs.n	8006e0e <Schedule1Activity+0xbe>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006df4:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= RIGHT_BUTTON_X)&&(x <= (RIGHT_BUTTON_X + RIGHT_BUTTON_W))&&
 8006df6:	2bd7      	cmp	r3, #215	; 0xd7
 8006df8:	d909      	bls.n	8006e0e <Schedule1Activity+0xbe>
					(y >= RIGHT_BUTTON_Y)&&(y <= (RIGHT_BUTTON_Y + RIGHT_BUTTON_H)))
 8006dfa:	88bb      	ldrh	r3, [r7, #4]
 8006dfc:	2bec      	cmp	r3, #236	; 0xec
 8006dfe:	d806      	bhi.n	8006e0e <Schedule1Activity+0xbe>
			{
				State = MENUTFT_SCHEDULE_2;
 8006e00:	4b57      	ldr	r3, [pc, #348]	; (8006f60 <Schedule1Activity+0x210>)
 8006e02:	2208      	movs	r2, #8
 8006e04:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 8006e06:	4b57      	ldr	r3, [pc, #348]	; (8006f64 <Schedule1Activity+0x214>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	e08f      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006e0e:	88bb      	ldrh	r3, [r7, #4]
 8006e10:	2b31      	cmp	r3, #49	; 0x31
 8006e12:	d909      	bls.n	8006e28 <Schedule1Activity+0xd8>
 8006e14:	88bb      	ldrh	r3, [r7, #4]
 8006e16:	2b46      	cmp	r3, #70	; 0x46
 8006e18:	d806      	bhi.n	8006e28 <Schedule1Activity+0xd8>
			{
				MenuTFTSchedule1ActivityDayOfWeekRow(x,y);
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	88ba      	ldrh	r2, [r7, #4]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f9b1 	bl	8007188 <MenuTFTSchedule1ActivityDayOfWeekRow>
 8006e26:	e082      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006e28:	88bb      	ldrh	r3, [r7, #4]
 8006e2a:	2b64      	cmp	r3, #100	; 0x64
 8006e2c:	d909      	bls.n	8006e42 <Schedule1Activity+0xf2>
 8006e2e:	88bb      	ldrh	r3, [r7, #4]
 8006e30:	2b79      	cmp	r3, #121	; 0x79
 8006e32:	d806      	bhi.n	8006e42 <Schedule1Activity+0xf2>
			{
				MenuTFTSchedule1ActivityHourMinuteONAdd(x,y);
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	88ba      	ldrh	r2, [r7, #4]
 8006e38:	4611      	mov	r1, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f000 fc7e 	bl	800773c <MenuTFTSchedule1ActivityHourMinuteONAdd>
 8006e40:	e075      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8006e42:	88bb      	ldrh	r3, [r7, #4]
 8006e44:	2b87      	cmp	r3, #135	; 0x87
 8006e46:	d909      	bls.n	8006e5c <Schedule1Activity+0x10c>
 8006e48:	88bb      	ldrh	r3, [r7, #4]
 8006e4a:	2b9c      	cmp	r3, #156	; 0x9c
 8006e4c:	d806      	bhi.n	8006e5c <Schedule1Activity+0x10c>
			{
				MenuTFTSchedule1ActivityHourMinuteOFFAdd(x,y);
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	88ba      	ldrh	r2, [r7, #4]
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fd3b 	bl	80078d0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>
 8006e5a:	e068      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8006e5c:	88bb      	ldrh	r3, [r7, #4]
 8006e5e:	2ba9      	cmp	r3, #169	; 0xa9
 8006e60:	d909      	bls.n	8006e76 <Schedule1Activity+0x126>
 8006e62:	88bb      	ldrh	r3, [r7, #4]
 8006e64:	2bbe      	cmp	r3, #190	; 0xbe
 8006e66:	d806      	bhi.n	8006e76 <Schedule1Activity+0x126>
			{
				MenuTFTSchedule1ActivityRelaysAndLightsRow(x,y);
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	88ba      	ldrh	r2, [r7, #4]
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 f86e 	bl	8007f50 <MenuTFTSchedule1ActivityRelaysAndLightsRow>
 8006e74:	e05b      	b.n	8006f2e <Schedule1Activity+0x1de>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	2b77      	cmp	r3, #119	; 0x77
 8006e7a:	d958      	bls.n	8006f2e <Schedule1Activity+0x1de>
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	2bd2      	cmp	r3, #210	; 0xd2
 8006e80:	d855      	bhi.n	8006f2e <Schedule1Activity+0x1de>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006e82:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8006e84:	2bd7      	cmp	r3, #215	; 0xd7
 8006e86:	d952      	bls.n	8006f2e <Schedule1Activity+0x1de>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8006e88:	88bb      	ldrh	r3, [r7, #4]
 8006e8a:	2bec      	cmp	r3, #236	; 0xec
 8006e8c:	d84f      	bhi.n	8006f2e <Schedule1Activity+0x1de>
			{
				EEPROM_ScheduleHourOnUpdate(1, hourOnSchedule1);
 8006e8e:	4b2d      	ldr	r3, [pc, #180]	; (8006f44 <Schedule1Activity+0x1f4>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	2001      	movs	r0, #1
 8006e96:	f7fc f8a2 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(1, minuteOnSchedule1);
 8006e9a:	4b2b      	ldr	r3, [pc, #172]	; (8006f48 <Schedule1Activity+0x1f8>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f7fc f8bf 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(1, hourOffSchedule1);
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <Schedule1Activity+0x1fc>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	2001      	movs	r0, #1
 8006eae:	f7fc f8dc 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(1, minuteOffSchedule1);
 8006eb2:	4b27      	ldr	r3, [pc, #156]	; (8006f50 <Schedule1Activity+0x200>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f7fc f8f9 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(1,  schedule1DayInWeekTab);
 8006ebe:	4925      	ldr	r1, [pc, #148]	; (8006f54 <Schedule1Activity+0x204>)
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f7fb feec 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(1, schedule1RelayAndSwitchTab);
 8006ec6:	4924      	ldr	r1, [pc, #144]	; (8006f58 <Schedule1Activity+0x208>)
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fb ff93 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 8006ece:	4826      	ldr	r0, [pc, #152]	; (8006f68 <Schedule1Activity+0x218>)
 8006ed0:	f7fa fc0e 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H1 ZMIENIONY      ");
 8006ed4:	4925      	ldr	r1, [pc, #148]	; (8006f6c <Schedule1Activity+0x21c>)
 8006ed6:	4826      	ldr	r0, [pc, #152]	; (8006f70 <Schedule1Activity+0x220>)
 8006ed8:	f00a f910 	bl	80110fc <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 8006edc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8006ee0:	9301      	str	r3, [sp, #4]
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8006eea:	220a      	movs	r2, #10
 8006eec:	2128      	movs	r1, #40	; 0x28
 8006eee:	4820      	ldr	r0, [pc, #128]	; (8006f70 <Schedule1Activity+0x220>)
 8006ef0:	f7fa fe18 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 8006ef4:	481f      	ldr	r0, [pc, #124]	; (8006f74 <Schedule1Activity+0x224>)
 8006ef6:	f7fa fbfb 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 8006efa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	2305      	movs	r3, #5
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	2314      	movs	r3, #20
 8006f06:	225a      	movs	r2, #90	; 0x5a
 8006f08:	21d8      	movs	r1, #216	; 0xd8
 8006f0a:	2078      	movs	r0, #120	; 0x78
 8006f0c:	f7fa fb9f 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8006f10:	4919      	ldr	r1, [pc, #100]	; (8006f78 <Schedule1Activity+0x228>)
 8006f12:	4817      	ldr	r0, [pc, #92]	; (8006f70 <Schedule1Activity+0x220>)
 8006f14:	f00a f8f2 	bl	80110fc <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 8006f18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	2300      	movs	r3, #0
 8006f24:	22da      	movs	r2, #218	; 0xda
 8006f26:	217e      	movs	r1, #126	; 0x7e
 8006f28:	4811      	ldr	r0, [pc, #68]	; (8006f70 <Schedule1Activity+0x220>)
 8006f2a:	f7fa fdfb 	bl	8001b24 <EF_PutString>
				//TODO! Day of week
			}
			TimerTouch = HAL_GetTick();
 8006f2e:	f002 fd1d 	bl	800996c <HAL_GetTick>
 8006f32:	4603      	mov	r3, r0
 8006f34:	4a09      	ldr	r2, [pc, #36]	; (8006f5c <Schedule1Activity+0x20c>)
 8006f36:	6013      	str	r3, [r2, #0]
		}
	}
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000258 	.word	0x20000258
 8006f44:	20000281 	.word	0x20000281
 8006f48:	20000283 	.word	0x20000283
 8006f4c:	20000282 	.word	0x20000282
 8006f50:	20000284 	.word	0x20000284
 8006f54:	2000025c 	.word	0x2000025c
 8006f58:	20000264 	.word	0x20000264
 8006f5c:	2000028c 	.word	0x2000028c
 8006f60:	20000290 	.word	0x20000290
 8006f64:	20000255 	.word	0x20000255
 8006f68:	08018068 	.word	0x08018068
 8006f6c:	080152b0 	.word	0x080152b0
 8006f70:	200002fc 	.word	0x200002fc
 8006f74:	080160f0 	.word	0x080160f0
 8006f78:	080152c4 	.word	0x080152c4

08006f7c <Schedule2Activity>:
//
// Function to handling touch on Schedule 2 (TWO) screen
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Schedule2Activity()
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af02      	add	r7, sp, #8

	if(1 == ScheduleChangeFlag) // initialization variables from eeprom, only once per change screen
 8006f82:	4b70      	ldr	r3, [pc, #448]	; (8007144 <Schedule2Activity+0x1c8>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d11a      	bne.n	8006fc0 <Schedule2Activity+0x44>
	{
		  EEPROM_ScheduleHourOnRead(2, &hourOnSchedule2);
 8006f8a:	496f      	ldr	r1, [pc, #444]	; (8007148 <Schedule2Activity+0x1cc>)
 8006f8c:	2002      	movs	r0, #2
 8006f8e:	f7fb ff96 	bl	8002ebe <EEPROM_ScheduleHourOnRead>
		  EEPROM_ScheduleMinuteOnRead(2, &minuteOnSchedule2);
 8006f92:	496e      	ldr	r1, [pc, #440]	; (800714c <Schedule2Activity+0x1d0>)
 8006f94:	2002      	movs	r0, #2
 8006f96:	f7fb ffb6 	bl	8002f06 <EEPROM_ScheduleMinuteOnRead>
		  EEPROM_ScheduleHourOffRead(2, &hourOffSchedule2);
 8006f9a:	496d      	ldr	r1, [pc, #436]	; (8007150 <Schedule2Activity+0x1d4>)
 8006f9c:	2002      	movs	r0, #2
 8006f9e:	f7fb ffd6 	bl	8002f4e <EEPROM_ScheduleHourOffRead>
		  EEPROM_ScheduleMinuteOffRead(2, &minuteOffSchedule2);
 8006fa2:	496c      	ldr	r1, [pc, #432]	; (8007154 <Schedule2Activity+0x1d8>)
 8006fa4:	2002      	movs	r0, #2
 8006fa6:	f7fb fff6 	bl	8002f96 <EEPROM_ScheduleMinuteOffRead>
		  EEPROM_ScheduleDayInWeekRead(2, schedule1DayInWeekTab);
 8006faa:	496b      	ldr	r1, [pc, #428]	; (8007158 <Schedule2Activity+0x1dc>)
 8006fac:	2002      	movs	r0, #2
 8006fae:	f7fb fe35 	bl	8002c1c <EEPROM_ScheduleDayInWeekRead>
		  EEPROM_ScheduleRelayAndSwitchTabRead(2, schedule1RelayAndSwitchTab);
 8006fb2:	496a      	ldr	r1, [pc, #424]	; (800715c <Schedule2Activity+0x1e0>)
 8006fb4:	2002      	movs	r0, #2
 8006fb6:	f7fb fead 	bl	8002d14 <EEPROM_ScheduleRelayAndSwitchTabRead>
		  ScheduleChangeFlag = 0;
 8006fba:	4b62      	ldr	r3, [pc, #392]	; (8007144 <Schedule2Activity+0x1c8>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
	}

	// Check if screen was touched
	if(XPT2046_IsTouched())
 8006fc0:	f7fb f964 	bl	800228c <XPT2046_IsTouched>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80b8 	beq.w	800713c <Schedule2Activity+0x1c0>
	{
		if(HAL_GetTick() - TimerTouch >= SWITCH_DEBOUNCING_TIME_MS) // If pass 1000ms from last change State
 8006fcc:	f002 fcce 	bl	800996c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b63      	ldr	r3, [pc, #396]	; (8007160 <Schedule2Activity+0x1e4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	f0c0 80ae 	bcc.w	800713c <Schedule2Activity+0x1c0>
		{
			uint16_t x, y; // Touch points
			XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 8006fe0:	1d3a      	adds	r2, r7, #4
 8006fe2:	1dbb      	adds	r3, r7, #6
 8006fe4:	4611      	mov	r1, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fb f912 	bl	8002210 <XPT2046_GetTouchPoint>

			//
			// Check if it is button to change screen
			//
			// Check if that point is inside the LEFT Button
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d90f      	bls.n	8007012 <Schedule2Activity+0x96>
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ff6:	d80c      	bhi.n	8007012 <Schedule2Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ff8:	88bb      	ldrh	r3, [r7, #4]
			if((x >= LEFT_BUTTON_X)&&(x <= (LEFT_BUTTON_X+LEFT_BUTTON_W))&&
 8006ffa:	2bd7      	cmp	r3, #215	; 0xd7
 8006ffc:	d909      	bls.n	8007012 <Schedule2Activity+0x96>
					(y >= LEFT_BUTTON_Y)&&(y <= (LEFT_BUTTON_Y + LEFT_BUTTON_H)))
 8006ffe:	88bb      	ldrh	r3, [r7, #4]
 8007000:	2bec      	cmp	r3, #236	; 0xec
 8007002:	d806      	bhi.n	8007012 <Schedule2Activity+0x96>
			{
				State = MENUTFT_CLOCK;
 8007004:	4b57      	ldr	r3, [pc, #348]	; (8007164 <Schedule2Activity+0x1e8>)
 8007006:	2203      	movs	r2, #3
 8007008:	701a      	strb	r2, [r3, #0]
				StateChangeFlag = 1;
 800700a:	4b57      	ldr	r3, [pc, #348]	; (8007168 <Schedule2Activity+0x1ec>)
 800700c:	2201      	movs	r2, #1
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	e08f      	b.n	8007132 <Schedule2Activity+0x1b6>
			}

			//Check if touch is inside row with day of week
			else if((y >= DAY_CHECK_BUTTON_Y)&&(y <= (DAY_CHECK_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8007012:	88bb      	ldrh	r3, [r7, #4]
 8007014:	2b31      	cmp	r3, #49	; 0x31
 8007016:	d909      	bls.n	800702c <Schedule2Activity+0xb0>
 8007018:	88bb      	ldrh	r3, [r7, #4]
 800701a:	2b46      	cmp	r3, #70	; 0x46
 800701c:	d806      	bhi.n	800702c <Schedule2Activity+0xb0>
			{
				MenuTFTSchedule2ActivityDayOfWeekRow(x,y);
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	88ba      	ldrh	r2, [r7, #4]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fd1d 	bl	8007a64 <MenuTFTSchedule2ActivityDayOfWeekRow>
 800702a:	e082      	b.n	8007132 <Schedule2Activity+0x1b6>
			}

			// Check if touch is in row Add hour/minute to ON time
			else if((y >= HOUR_MINUTE_ON_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_ON_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 800702c:	88bb      	ldrh	r3, [r7, #4]
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d909      	bls.n	8007046 <Schedule2Activity+0xca>
 8007032:	88bb      	ldrh	r3, [r7, #4]
 8007034:	2b79      	cmp	r3, #121	; 0x79
 8007036:	d806      	bhi.n	8007046 <Schedule2Activity+0xca>
			{
				MenuTFTSchedule2ActivityHourMinuteONAdd(x,y);
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	88ba      	ldrh	r2, [r7, #4]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fdf2 	bl	8007c28 <MenuTFTSchedule2ActivityHourMinuteONAdd>
 8007044:	e075      	b.n	8007132 <Schedule2Activity+0x1b6>
			}

			// Check if touch is in row Add hour/minute to OFF time
			else if((y >= HOUR_MINUTE_OFF_ADD_SHEDULE_Y)&&(y <= (HOUR_MINUTE_OFF_ADD_SHEDULE_Y + DAY_CHECK_BUTTON_H)))
 8007046:	88bb      	ldrh	r3, [r7, #4]
 8007048:	2b87      	cmp	r3, #135	; 0x87
 800704a:	d909      	bls.n	8007060 <Schedule2Activity+0xe4>
 800704c:	88bb      	ldrh	r3, [r7, #4]
 800704e:	2b9c      	cmp	r3, #156	; 0x9c
 8007050:	d806      	bhi.n	8007060 <Schedule2Activity+0xe4>
			{
				MenuTFTSchedule2ActivityHourMinuteOFFAdd(x,y);
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	88ba      	ldrh	r2, [r7, #4]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f000 feaf 	bl	8007dbc <MenuTFTSchedule2ActivityHourMinuteOFFAdd>
 800705e:	e068      	b.n	8007132 <Schedule2Activity+0x1b6>
			}

			//Check if touch is inside row with rectangle of Relays and Lights
			else if((y >= DAY_CHECK_RELAY_BUTTON_Y)&&(y <= (DAY_CHECK_RELAY_BUTTON_Y + DAY_CHECK_BUTTON_H)))
 8007060:	88bb      	ldrh	r3, [r7, #4]
 8007062:	2ba9      	cmp	r3, #169	; 0xa9
 8007064:	d909      	bls.n	800707a <Schedule2Activity+0xfe>
 8007066:	88bb      	ldrh	r3, [r7, #4]
 8007068:	2bbe      	cmp	r3, #190	; 0xbe
 800706a:	d806      	bhi.n	800707a <Schedule2Activity+0xfe>
			{
				MenuTFTSchedule2ActivityRelaysAndLightsRow(x,y);
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	88ba      	ldrh	r2, [r7, #4]
 8007070:	4611      	mov	r1, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f001 f882 	bl	800817c <MenuTFTSchedule2ActivityRelaysAndLightsRow>
 8007078:	e05b      	b.n	8007132 <Schedule2Activity+0x1b6>
			}

			// Check if that point is inside the MEDIUM Button - CONFIRM
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 800707a:	88fb      	ldrh	r3, [r7, #6]
 800707c:	2b77      	cmp	r3, #119	; 0x77
 800707e:	d958      	bls.n	8007132 <Schedule2Activity+0x1b6>
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	2bd2      	cmp	r3, #210	; 0xd2
 8007084:	d855      	bhi.n	8007132 <Schedule2Activity+0x1b6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 8007086:	88bb      	ldrh	r3, [r7, #4]
			else if((x >= MEDIUM_BUTTON_X)&&(x <= (MEDIUM_BUTTON_X+MEDIUM_BUTTON_W))&&
 8007088:	2bd7      	cmp	r3, #215	; 0xd7
 800708a:	d952      	bls.n	8007132 <Schedule2Activity+0x1b6>
					(y >= MEDIUM_BUTTON_Y)&&(y <= (MEDIUM_BUTTON_Y + MEDIUM_BUTTON_H)))
 800708c:	88bb      	ldrh	r3, [r7, #4]
 800708e:	2bec      	cmp	r3, #236	; 0xec
 8007090:	d84f      	bhi.n	8007132 <Schedule2Activity+0x1b6>
			{
				EEPROM_ScheduleHourOnUpdate(2, hourOnSchedule2);
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <Schedule2Activity+0x1cc>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	4619      	mov	r1, r3
 8007098:	2002      	movs	r0, #2
 800709a:	f7fb ffa0 	bl	8002fde <EEPROM_ScheduleHourOnUpdate>
				EEPROM_ScheduleMinuteOnUpdate(2, minuteOnSchedule2);
 800709e:	4b2b      	ldr	r3, [pc, #172]	; (800714c <Schedule2Activity+0x1d0>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	2002      	movs	r0, #2
 80070a6:	f7fb ffbd 	bl	8003024 <EEPROM_ScheduleMinuteOnUpdate>
				EEPROM_ScheduleHourOffUpdate(2, hourOffSchedule2);
 80070aa:	4b29      	ldr	r3, [pc, #164]	; (8007150 <Schedule2Activity+0x1d4>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	2002      	movs	r0, #2
 80070b2:	f7fb ffda 	bl	800306a <EEPROM_ScheduleHourOffUpdate>
				EEPROM_ScheduleMinuteOffUpdate(2, minuteOffSchedule2);
 80070b6:	4b27      	ldr	r3, [pc, #156]	; (8007154 <Schedule2Activity+0x1d8>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	4619      	mov	r1, r3
 80070bc:	2002      	movs	r0, #2
 80070be:	f7fb fff7 	bl	80030b0 <EEPROM_ScheduleMinuteOffUpdate>
				EEPROM_ScheduleDayInWeekUpdate(2,  schedule2DayInWeekTab);
 80070c2:	492a      	ldr	r1, [pc, #168]	; (800716c <Schedule2Activity+0x1f0>)
 80070c4:	2002      	movs	r0, #2
 80070c6:	f7fb fdea 	bl	8002c9e <EEPROM_ScheduleDayInWeekUpdate>
				EEPROM_ScheduleRelayAndSwitchTabUpdate(2, schedule2RelayAndSwitchTab);
 80070ca:	4929      	ldr	r1, [pc, #164]	; (8007170 <Schedule2Activity+0x1f4>)
 80070cc:	2002      	movs	r0, #2
 80070ce:	f7fb fe91 	bl	8002df4 <EEPROM_ScheduleRelayAndSwitchTabUpdate>

				EF_SetFont(&arialBlack_20ptFontInfo);
 80070d2:	4828      	ldr	r0, [pc, #160]	; (8007174 <Schedule2Activity+0x1f8>)
 80070d4:	f7fa fb0c 	bl	80016f0 <EF_SetFont>
				sprintf((char*)Msg, " H2 ZMIENIONY       ");
 80070d8:	4927      	ldr	r1, [pc, #156]	; (8007178 <Schedule2Activity+0x1fc>)
 80070da:	4828      	ldr	r0, [pc, #160]	; (800717c <Schedule2Activity+0x200>)
 80070dc:	f00a f80e 	bl	80110fc <siprintf>
				EF_PutString(Msg, CLOCK_STRING_POZ_X-7, SWIATLA_STRING_POZ_Y, ILI9341_ORANGE, BG_COLOR, ILI9341_LIGHTGREY);
 80070e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	2301      	movs	r3, #1
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80070ee:	220a      	movs	r2, #10
 80070f0:	2128      	movs	r1, #40	; 0x28
 80070f2:	4822      	ldr	r0, [pc, #136]	; (800717c <Schedule2Activity+0x200>)
 80070f4:	f7fa fd16 	bl	8001b24 <EF_PutString>

				EF_SetFont(&arial_11ptFontInfo);
 80070f8:	4821      	ldr	r0, [pc, #132]	; (8007180 <Schedule2Activity+0x204>)
 80070fa:	f7fa faf9 	bl	80016f0 <EF_SetFont>
				GFX_DrawFillRoundRectangle(MEDIUM_BUTTON_X, MEDIUM_BUTTON_Y, MEDIUM_BUTTON_W, MEDIUM_BUTTON_H, RIGHT_LEFT_BUTTON_R,  ILI9341_GREEN);
 80070fe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2305      	movs	r3, #5
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2314      	movs	r3, #20
 800710a:	225a      	movs	r2, #90	; 0x5a
 800710c:	21d8      	movs	r1, #216	; 0xd8
 800710e:	2078      	movs	r0, #120	; 0x78
 8007110:	f7fa fa9d 	bl	800164e <GFX_DrawFillRoundRectangle>
				sprintf((char*)Msg, " >POTW<");
 8007114:	491b      	ldr	r1, [pc, #108]	; (8007184 <Schedule2Activity+0x208>)
 8007116:	4819      	ldr	r0, [pc, #100]	; (800717c <Schedule2Activity+0x200>)
 8007118:	f009 fff0 	bl	80110fc <siprintf>
				EF_PutString(Msg, (MEDIUM_BUTTON_X + 6), (MEDIUM_BUTTON_Y + 2), ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800711c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	22da      	movs	r2, #218	; 0xda
 800712a:	217e      	movs	r1, #126	; 0x7e
 800712c:	4813      	ldr	r0, [pc, #76]	; (800717c <Schedule2Activity+0x200>)
 800712e:	f7fa fcf9 	bl	8001b24 <EF_PutString>
				// TODO! Add day of week
			}
			TimerTouch = HAL_GetTick();
 8007132:	f002 fc1b 	bl	800996c <HAL_GetTick>
 8007136:	4603      	mov	r3, r0
 8007138:	4a09      	ldr	r2, [pc, #36]	; (8007160 <Schedule2Activity+0x1e4>)
 800713a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000258 	.word	0x20000258
 8007148:	20000285 	.word	0x20000285
 800714c:	20000287 	.word	0x20000287
 8007150:	20000286 	.word	0x20000286
 8007154:	20000288 	.word	0x20000288
 8007158:	2000025c 	.word	0x2000025c
 800715c:	20000264 	.word	0x20000264
 8007160:	2000028c 	.word	0x2000028c
 8007164:	20000290 	.word	0x20000290
 8007168:	20000255 	.word	0x20000255
 800716c:	20000270 	.word	0x20000270
 8007170:	20000278 	.word	0x20000278
 8007174:	08018068 	.word	0x08018068
 8007178:	080152cc 	.word	0x080152cc
 800717c:	200002fc 	.word	0x200002fc
 8007180:	080160f0 	.word	0x080160f0
 8007184:	080152c4 	.word	0x080152c4

08007188 <MenuTFTSchedule1ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule1Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule1ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	460a      	mov	r2, r1
 8007192:	80fb      	strh	r3, [r7, #6]
 8007194:	4613      	mov	r3, r2
 8007196:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007198:	88fb      	ldrh	r3, [r7, #6]
 800719a:	2b3b      	cmp	r3, #59	; 0x3b
 800719c:	d91a      	bls.n	80071d4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	2b50      	cmp	r3, #80	; 0x50
 80071a2:	d817      	bhi.n	80071d4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x4c>
	{
		if(schedule1DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 80071a4:	4b68      	ldr	r3, [pc, #416]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x2e>
 80071ac:	2100      	movs	r1, #0
 80071ae:	2001      	movs	r0, #1
 80071b0:	f000 f8cc 	bl	800734c <changeTFTScheduleDayOfWeek>
 80071b4:	e003      	b.n	80071be <MenuTFTSchedule1ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 80071b6:	2101      	movs	r1, #1
 80071b8:	2001      	movs	r0, #1
 80071ba:	f000 f8c7 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[0] = !schedule1DayInWeekTab[0]; // update current state in tab holding state of day in week
 80071be:	4b62      	ldr	r3, [pc, #392]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	4b5e      	ldr	r3, [pc, #376]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	e0b4      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	2b59      	cmp	r3, #89	; 0x59
 80071d8:	d91a      	bls.n	8007210 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	2b6e      	cmp	r3, #110	; 0x6e
 80071de:	d817      	bhi.n	8007210 <MenuTFTSchedule1ActivityDayOfWeekRow+0x88>
	{
		if(schedule1DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 80071e0:	4b59      	ldr	r3, [pc, #356]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x6a>
 80071e8:	2100      	movs	r1, #0
 80071ea:	2002      	movs	r0, #2
 80071ec:	f000 f8ae 	bl	800734c <changeTFTScheduleDayOfWeek>
 80071f0:	e003      	b.n	80071fa <MenuTFTSchedule1ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 80071f2:	2101      	movs	r1, #1
 80071f4:	2002      	movs	r0, #2
 80071f6:	f000 f8a9 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[1] = !schedule1DayInWeekTab[1];
 80071fa:	4b53      	ldr	r3, [pc, #332]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	4b4f      	ldr	r3, [pc, #316]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800720c:	705a      	strb	r2, [r3, #1]
 800720e:	e096      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007210:	88fb      	ldrh	r3, [r7, #6]
 8007212:	2b77      	cmp	r3, #119	; 0x77
 8007214:	d91a      	bls.n	800724c <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b8c      	cmp	r3, #140	; 0x8c
 800721a:	d817      	bhi.n	800724c <MenuTFTSchedule1ActivityDayOfWeekRow+0xc4>
	{
		if(schedule1DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 800721c:	4b4a      	ldr	r3, [pc, #296]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800721e:	789b      	ldrb	r3, [r3, #2]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <MenuTFTSchedule1ActivityDayOfWeekRow+0xa6>
 8007224:	2100      	movs	r1, #0
 8007226:	2003      	movs	r0, #3
 8007228:	f000 f890 	bl	800734c <changeTFTScheduleDayOfWeek>
 800722c:	e003      	b.n	8007236 <MenuTFTSchedule1ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 800722e:	2101      	movs	r1, #1
 8007230:	2003      	movs	r0, #3
 8007232:	f000 f88b 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[2] = !schedule1DayInWeekTab[2];
 8007236:	4b44      	ldr	r3, [pc, #272]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007238:	789b      	ldrb	r3, [r3, #2]
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	4b40      	ldr	r3, [pc, #256]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007248:	709a      	strb	r2, [r3, #2]
 800724a:	e078      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	2b95      	cmp	r3, #149	; 0x95
 8007250:	d91a      	bls.n	8007288 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2baa      	cmp	r3, #170	; 0xaa
 8007256:	d817      	bhi.n	8007288 <MenuTFTSchedule1ActivityDayOfWeekRow+0x100>
	{
		if(schedule1DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007258:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800725a:	78db      	ldrb	r3, [r3, #3]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d004      	beq.n	800726a <MenuTFTSchedule1ActivityDayOfWeekRow+0xe2>
 8007260:	2100      	movs	r1, #0
 8007262:	2004      	movs	r0, #4
 8007264:	f000 f872 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007268:	e003      	b.n	8007272 <MenuTFTSchedule1ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 800726a:	2101      	movs	r1, #1
 800726c:	2004      	movs	r0, #4
 800726e:	f000 f86d 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[3] = !schedule1DayInWeekTab[3];
 8007272:	4b35      	ldr	r3, [pc, #212]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007274:	78db      	ldrb	r3, [r3, #3]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007284:	70da      	strb	r2, [r3, #3]
 8007286:	e05a      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	2bb3      	cmp	r3, #179	; 0xb3
 800728c:	d91a      	bls.n	80072c4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	2bc8      	cmp	r3, #200	; 0xc8
 8007292:	d817      	bhi.n	80072c4 <MenuTFTSchedule1ActivityDayOfWeekRow+0x13c>
	{
		if(schedule1DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007294:	4b2c      	ldr	r3, [pc, #176]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007296:	791b      	ldrb	r3, [r3, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d004      	beq.n	80072a6 <MenuTFTSchedule1ActivityDayOfWeekRow+0x11e>
 800729c:	2100      	movs	r1, #0
 800729e:	2005      	movs	r0, #5
 80072a0:	f000 f854 	bl	800734c <changeTFTScheduleDayOfWeek>
 80072a4:	e003      	b.n	80072ae <MenuTFTSchedule1ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 80072a6:	2101      	movs	r1, #1
 80072a8:	2005      	movs	r0, #5
 80072aa:	f000 f84f 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[4] = !schedule1DayInWeekTab[4];
 80072ae:	4b26      	ldr	r3, [pc, #152]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80072b0:	791b      	ldrb	r3, [r3, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	bf0c      	ite	eq
 80072b6:	2301      	moveq	r3, #1
 80072b8:	2300      	movne	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	4b22      	ldr	r3, [pc, #136]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80072c0:	711a      	strb	r2, [r3, #4]
 80072c2:	e03c      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80072c4:	88fb      	ldrh	r3, [r7, #6]
 80072c6:	2bd1      	cmp	r3, #209	; 0xd1
 80072c8:	d91a      	bls.n	8007300 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	2be6      	cmp	r3, #230	; 0xe6
 80072ce:	d817      	bhi.n	8007300 <MenuTFTSchedule1ActivityDayOfWeekRow+0x178>
	{
		if(schedule1DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80072d2:	795b      	ldrb	r3, [r3, #5]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d004      	beq.n	80072e2 <MenuTFTSchedule1ActivityDayOfWeekRow+0x15a>
 80072d8:	2100      	movs	r1, #0
 80072da:	2006      	movs	r0, #6
 80072dc:	f000 f836 	bl	800734c <changeTFTScheduleDayOfWeek>
 80072e0:	e003      	b.n	80072ea <MenuTFTSchedule1ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 80072e2:	2101      	movs	r1, #1
 80072e4:	2006      	movs	r0, #6
 80072e6:	f000 f831 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[5] = !schedule1DayInWeekTab[5];
 80072ea:	4b17      	ldr	r3, [pc, #92]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80072ec:	795b      	ldrb	r3, [r3, #5]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 80072fc:	715a      	strb	r2, [r3, #5]
 80072fe:	e01e      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	2bef      	cmp	r3, #239	; 0xef
 8007304:	d91b      	bls.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730c:	d817      	bhi.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule1DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 8007310:	799b      	ldrb	r3, [r3, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <MenuTFTSchedule1ActivityDayOfWeekRow+0x198>
 8007316:	2100      	movs	r1, #0
 8007318:	2007      	movs	r0, #7
 800731a:	f000 f817 	bl	800734c <changeTFTScheduleDayOfWeek>
 800731e:	e003      	b.n	8007328 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007320:	2101      	movs	r1, #1
 8007322:	2007      	movs	r0, #7
 8007324:	f000 f812 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule1DayInWeekTab[6] = !schedule1DayInWeekTab[6];
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800732a:	799b      	ldrb	r3, [r3, #6]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf0c      	ite	eq
 8007330:	2301      	moveq	r3, #1
 8007332:	2300      	movne	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <MenuTFTSchedule1ActivityDayOfWeekRow+0x1c0>)
 800733a:	719a      	strb	r2, [r3, #6]
	}
}
 800733c:	e7ff      	b.n	800733e <MenuTFTSchedule1ActivityDayOfWeekRow+0x1b6>
 800733e:	bf00      	nop
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	2000025c 	.word	0x2000025c

0800734c <changeTFTScheduleDayOfWeek>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleDayOfWeek(uint8_t NrOfDay, uint8_t NewState)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af02      	add	r7, sp, #8
 8007352:	4603      	mov	r3, r0
 8007354:	460a      	mov	r2, r1
 8007356:	71fb      	strb	r3, [r7, #7]
 8007358:	4613      	mov	r3, r2
 800735a:	71bb      	strb	r3, [r7, #6]
	if (1 == NrOfDay)	// if Monday
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d11a      	bne.n	8007398 <changeTFTScheduleDayOfWeek+0x4c>
	{
		if(0 == NewState)	// if turn off
 8007362:	79bb      	ldrb	r3, [r7, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10b      	bne.n	8007380 <changeTFTScheduleDayOfWeek+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007368:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	2305      	movs	r3, #5
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	2312      	movs	r3, #18
 8007374:	2212      	movs	r2, #18
 8007376:	2133      	movs	r1, #51	; 0x33
 8007378:	203d      	movs	r0, #61	; 0x3d
 800737a:	f7fa f968 	bl	800164e <GFX_DrawFillRoundRectangle>
		else	// if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 800737e:	e0be      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_1_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007380:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	2305      	movs	r3, #5
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	2312      	movs	r3, #18
 800738c:	2212      	movs	r2, #18
 800738e:	2133      	movs	r1, #51	; 0x33
 8007390:	203d      	movs	r0, #61	; 0x3d
 8007392:	f7fa f95c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007396:	e0b2      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (2== NrOfDay)	// if Tuesday
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d11a      	bne.n	80073d4 <changeTFTScheduleDayOfWeek+0x88>
		if(0 == NewState)	// if turn off
 800739e:	79bb      	ldrb	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10b      	bne.n	80073bc <changeTFTScheduleDayOfWeek+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073a8:	9301      	str	r3, [sp, #4]
 80073aa:	2305      	movs	r3, #5
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	2312      	movs	r3, #18
 80073b0:	2212      	movs	r2, #18
 80073b2:	2133      	movs	r1, #51	; 0x33
 80073b4:	205b      	movs	r0, #91	; 0x5b
 80073b6:	f7fa f94a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80073ba:	e0a0      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_2_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2305      	movs	r3, #5
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2312      	movs	r3, #18
 80073c8:	2212      	movs	r2, #18
 80073ca:	2133      	movs	r1, #51	; 0x33
 80073cc:	205b      	movs	r0, #91	; 0x5b
 80073ce:	f7fa f93e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80073d2:	e094      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (3== NrOfDay)	// if Wednesday
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d11a      	bne.n	8007410 <changeTFTScheduleDayOfWeek+0xc4>
		if(0 == NewState)	// if turn off
 80073da:	79bb      	ldrb	r3, [r7, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <changeTFTScheduleDayOfWeek+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80073e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	2305      	movs	r3, #5
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	2312      	movs	r3, #18
 80073ec:	2212      	movs	r2, #18
 80073ee:	2133      	movs	r1, #51	; 0x33
 80073f0:	2079      	movs	r0, #121	; 0x79
 80073f2:	f7fa f92c 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80073f6:	e082      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_3_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80073f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	2305      	movs	r3, #5
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2312      	movs	r3, #18
 8007404:	2212      	movs	r2, #18
 8007406:	2133      	movs	r1, #51	; 0x33
 8007408:	2079      	movs	r0, #121	; 0x79
 800740a:	f7fa f920 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800740e:	e076      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (4== NrOfDay)	// if Thursday
 8007410:	79fb      	ldrb	r3, [r7, #7]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d11a      	bne.n	800744c <changeTFTScheduleDayOfWeek+0x100>
		if(0 == NewState)	// if turn off
 8007416:	79bb      	ldrb	r3, [r7, #6]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10b      	bne.n	8007434 <changeTFTScheduleDayOfWeek+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800741c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	2305      	movs	r3, #5
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	2312      	movs	r3, #18
 8007428:	2212      	movs	r2, #18
 800742a:	2133      	movs	r1, #51	; 0x33
 800742c:	2097      	movs	r0, #151	; 0x97
 800742e:	f7fa f90e 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007432:	e064      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_4_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007434:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	2305      	movs	r3, #5
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2312      	movs	r3, #18
 8007440:	2212      	movs	r2, #18
 8007442:	2133      	movs	r1, #51	; 0x33
 8007444:	2097      	movs	r0, #151	; 0x97
 8007446:	f7fa f902 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800744a:	e058      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (5== NrOfDay)	// if Friday
 800744c:	79fb      	ldrb	r3, [r7, #7]
 800744e:	2b05      	cmp	r3, #5
 8007450:	d11a      	bne.n	8007488 <changeTFTScheduleDayOfWeek+0x13c>
		if(0 == NewState)	// if turn off
 8007452:	79bb      	ldrb	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <changeTFTScheduleDayOfWeek+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007458:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	2305      	movs	r3, #5
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	2312      	movs	r3, #18
 8007464:	2212      	movs	r2, #18
 8007466:	2133      	movs	r1, #51	; 0x33
 8007468:	20b5      	movs	r0, #181	; 0xb5
 800746a:	f7fa f8f0 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800746e:	e046      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_5_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007470:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	2305      	movs	r3, #5
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	2312      	movs	r3, #18
 800747c:	2212      	movs	r2, #18
 800747e:	2133      	movs	r1, #51	; 0x33
 8007480:	20b5      	movs	r0, #181	; 0xb5
 8007482:	f7fa f8e4 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007486:	e03a      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (6== NrOfDay)	// if Saturday
 8007488:	79fb      	ldrb	r3, [r7, #7]
 800748a:	2b06      	cmp	r3, #6
 800748c:	d11a      	bne.n	80074c4 <changeTFTScheduleDayOfWeek+0x178>
		if(0 == NewState)	// if turn off
 800748e:	79bb      	ldrb	r3, [r7, #6]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <changeTFTScheduleDayOfWeek+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	2305      	movs	r3, #5
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	2312      	movs	r3, #18
 80074a0:	2212      	movs	r2, #18
 80074a2:	2133      	movs	r1, #51	; 0x33
 80074a4:	20d3      	movs	r0, #211	; 0xd3
 80074a6:	f7fa f8d2 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80074aa:	e028      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_6_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80074ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2305      	movs	r3, #5
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2312      	movs	r3, #18
 80074b8:	2212      	movs	r2, #18
 80074ba:	2133      	movs	r1, #51	; 0x33
 80074bc:	20d3      	movs	r0, #211	; 0xd3
 80074be:	f7fa f8c6 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80074c2:	e01c      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
	else if (7== NrOfDay)	// If Sunday
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	2b07      	cmp	r3, #7
 80074c8:	d119      	bne.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
		if(0 == NewState)	// if turn off
 80074ca:	79bb      	ldrb	r3, [r7, #6]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <changeTFTScheduleDayOfWeek+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80074d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	2305      	movs	r3, #5
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2312      	movs	r3, #18
 80074dc:	2212      	movs	r2, #18
 80074de:	2133      	movs	r1, #51	; 0x33
 80074e0:	20f1      	movs	r0, #241	; 0xf1
 80074e2:	f7fa f8b4 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80074e6:	e00a      	b.n	80074fe <changeTFTScheduleDayOfWeek+0x1b2>
			GFX_DrawFillRoundRectangle(DAY_CHECK_BUTTON_7_X+1, DAY_CHECK_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80074e8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	2305      	movs	r3, #5
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	2312      	movs	r3, #18
 80074f4:	2212      	movs	r2, #18
 80074f6:	2133      	movs	r1, #51	; 0x33
 80074f8:	20f1      	movs	r0, #241	; 0xf1
 80074fa:	f7fa f8a8 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80074fe:	bf00      	nop
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <changeTFTScheduleRelayLights>:

//
// Update rectangle with state of each day
//
void changeTFTScheduleRelayLights(uint8_t NrOfRS, uint8_t NewState)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af02      	add	r7, sp, #8
 800750c:	4603      	mov	r3, r0
 800750e:	460a      	mov	r2, r1
 8007510:	71fb      	strb	r3, [r7, #7]
 8007512:	4613      	mov	r3, r2
 8007514:	71bb      	strb	r3, [r7, #6]
	if(1 == NrOfRS) // R1
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d11a      	bne.n	8007552 <changeTFTScheduleRelayLights+0x4c>
	{
		if (0 == NewState) // if turn off
 800751c:	79bb      	ldrb	r3, [r7, #6]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <changeTFTScheduleRelayLights+0x34>
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007522:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	2305      	movs	r3, #5
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	2312      	movs	r3, #18
 800752e:	2212      	movs	r2, #18
 8007530:	21ab      	movs	r1, #171	; 0xab
 8007532:	2016      	movs	r0, #22
 8007534:	f7fa f88b 	bl	800164e <GFX_DrawFillRoundRectangle>
		else // if turn on
		{
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
		}
	}
}
 8007538:	e0fc      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_1_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800753a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	2305      	movs	r3, #5
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2312      	movs	r3, #18
 8007546:	2212      	movs	r2, #18
 8007548:	21ab      	movs	r1, #171	; 0xab
 800754a:	2016      	movs	r0, #22
 800754c:	f7fa f87f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007550:	e0f0      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(2 == NrOfRS) // R2
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d11a      	bne.n	800758e <changeTFTScheduleRelayLights+0x88>
		if (0 == NewState) // if turn off
 8007558:	79bb      	ldrb	r3, [r7, #6]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10b      	bne.n	8007576 <changeTFTScheduleRelayLights+0x70>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800755e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	2305      	movs	r3, #5
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	2312      	movs	r3, #18
 800756a:	2212      	movs	r2, #18
 800756c:	21ab      	movs	r1, #171	; 0xab
 800756e:	2036      	movs	r0, #54	; 0x36
 8007570:	f7fa f86d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007574:	e0de      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_2_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007576:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	2305      	movs	r3, #5
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2312      	movs	r3, #18
 8007582:	2212      	movs	r2, #18
 8007584:	21ab      	movs	r1, #171	; 0xab
 8007586:	2036      	movs	r0, #54	; 0x36
 8007588:	f7fa f861 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800758c:	e0d2      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(3 == NrOfRS) // R3
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d11a      	bne.n	80075ca <changeTFTScheduleRelayLights+0xc4>
		if (0 == NewState) // if turn off
 8007594:	79bb      	ldrb	r3, [r7, #6]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <changeTFTScheduleRelayLights+0xac>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800759a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	2305      	movs	r3, #5
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2312      	movs	r3, #18
 80075a6:	2212      	movs	r2, #18
 80075a8:	21ab      	movs	r1, #171	; 0xab
 80075aa:	2056      	movs	r0, #86	; 0x56
 80075ac:	f7fa f84f 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80075b0:	e0c0      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_3_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80075b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075b6:	9301      	str	r3, [sp, #4]
 80075b8:	2305      	movs	r3, #5
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	2312      	movs	r3, #18
 80075be:	2212      	movs	r2, #18
 80075c0:	21ab      	movs	r1, #171	; 0xab
 80075c2:	2056      	movs	r0, #86	; 0x56
 80075c4:	f7fa f843 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80075c8:	e0b4      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(4 == NrOfRS) // R4
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d11a      	bne.n	8007606 <changeTFTScheduleRelayLights+0x100>
		if (0 == NewState) // if turn off
 80075d0:	79bb      	ldrb	r3, [r7, #6]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <changeTFTScheduleRelayLights+0xe8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80075d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	2305      	movs	r3, #5
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2312      	movs	r3, #18
 80075e2:	2212      	movs	r2, #18
 80075e4:	21ab      	movs	r1, #171	; 0xab
 80075e6:	2076      	movs	r0, #118	; 0x76
 80075e8:	f7fa f831 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80075ec:	e0a2      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_4_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80075ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	2305      	movs	r3, #5
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	2312      	movs	r3, #18
 80075fa:	2212      	movs	r2, #18
 80075fc:	21ab      	movs	r1, #171	; 0xab
 80075fe:	2076      	movs	r0, #118	; 0x76
 8007600:	f7fa f825 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007604:	e096      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(5 == NrOfRS) // WS2812b
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b05      	cmp	r3, #5
 800760a:	d11a      	bne.n	8007642 <changeTFTScheduleRelayLights+0x13c>
		if (0 == NewState) // if turn off
 800760c:	79bb      	ldrb	r3, [r7, #6]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10b      	bne.n	800762a <changeTFTScheduleRelayLights+0x124>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007612:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	2305      	movs	r3, #5
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	2312      	movs	r3, #18
 800761e:	2212      	movs	r2, #18
 8007620:	21ab      	movs	r1, #171	; 0xab
 8007622:	2096      	movs	r0, #150	; 0x96
 8007624:	f7fa f813 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007628:	e084      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_5_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800762a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	2305      	movs	r3, #5
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2312      	movs	r3, #18
 8007636:	2212      	movs	r2, #18
 8007638:	21ab      	movs	r1, #171	; 0xab
 800763a:	2096      	movs	r0, #150	; 0x96
 800763c:	f7fa f807 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007640:	e078      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(6 == NrOfRS) // L1
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	2b06      	cmp	r3, #6
 8007646:	d11a      	bne.n	800767e <changeTFTScheduleRelayLights+0x178>
		if (0 == NewState) // if turn off
 8007648:	79bb      	ldrb	r3, [r7, #6]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10b      	bne.n	8007666 <changeTFTScheduleRelayLights+0x160>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800764e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	2305      	movs	r3, #5
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2312      	movs	r3, #18
 800765a:	2212      	movs	r2, #18
 800765c:	21ab      	movs	r1, #171	; 0xab
 800765e:	20b6      	movs	r0, #182	; 0xb6
 8007660:	f7f9 fff5 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007664:	e066      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_6_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 8007666:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2305      	movs	r3, #5
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2312      	movs	r3, #18
 8007672:	2212      	movs	r2, #18
 8007674:	21ab      	movs	r1, #171	; 0xab
 8007676:	20b6      	movs	r0, #182	; 0xb6
 8007678:	f7f9 ffe9 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800767c:	e05a      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(7 == NrOfRS) // L2
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	2b07      	cmp	r3, #7
 8007682:	d11a      	bne.n	80076ba <changeTFTScheduleRelayLights+0x1b4>
		if (0 == NewState) // if turn off
 8007684:	79bb      	ldrb	r3, [r7, #6]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <changeTFTScheduleRelayLights+0x19c>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 800768a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	2305      	movs	r3, #5
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2312      	movs	r3, #18
 8007696:	2212      	movs	r2, #18
 8007698:	21ab      	movs	r1, #171	; 0xab
 800769a:	20d6      	movs	r0, #214	; 0xd6
 800769c:	f7f9 ffd7 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80076a0:	e048      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_7_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80076a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2305      	movs	r3, #5
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2312      	movs	r3, #18
 80076ae:	2212      	movs	r2, #18
 80076b0:	21ab      	movs	r1, #171	; 0xab
 80076b2:	20d6      	movs	r0, #214	; 0xd6
 80076b4:	f7f9 ffcb 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80076b8:	e03c      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(8 == NrOfRS) // L3
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d11a      	bne.n	80076f6 <changeTFTScheduleRelayLights+0x1f0>
		if (0 == NewState) // if turn off
 80076c0:	79bb      	ldrb	r3, [r7, #6]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10b      	bne.n	80076de <changeTFTScheduleRelayLights+0x1d8>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 80076c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	2305      	movs	r3, #5
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	2312      	movs	r3, #18
 80076d2:	2212      	movs	r2, #18
 80076d4:	21ab      	movs	r1, #171	; 0xab
 80076d6:	20f6      	movs	r0, #246	; 0xf6
 80076d8:	f7f9 ffb9 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80076dc:	e02a      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_8_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 80076de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80076e2:	9301      	str	r3, [sp, #4]
 80076e4:	2305      	movs	r3, #5
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	2312      	movs	r3, #18
 80076ea:	2212      	movs	r2, #18
 80076ec:	21ab      	movs	r1, #171	; 0xab
 80076ee:	20f6      	movs	r0, #246	; 0xf6
 80076f0:	f7f9 ffad 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 80076f4:	e01e      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
	else if(9 == NrOfRS) // L4
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d11b      	bne.n	8007734 <changeTFTScheduleRelayLights+0x22e>
		if (0 == NewState) // if turn off
 80076fc:	79bb      	ldrb	r3, [r7, #6]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10c      	bne.n	800771c <changeTFTScheduleRelayLights+0x216>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_OFF);
 8007702:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	2305      	movs	r3, #5
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2312      	movs	r3, #18
 800770e:	2212      	movs	r2, #18
 8007710:	21ab      	movs	r1, #171	; 0xab
 8007712:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007716:	f7f9 ff9a 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 800771a:	e00b      	b.n	8007734 <changeTFTScheduleRelayLights+0x22e>
			GFX_DrawFillRoundRectangle(DAY_CHECK_RELAY_BUTTON_9_X+1, DAY_CHECK_RELAY_BUTTON_Y+1, DAY_CHECK_BUTTON_W-2, DAY_CHECK_BUTTON_H-2, DAY_CHECK_BUTTON_R, DAY_CHECK_SWITCH_COLOR_ON);
 800771c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	2305      	movs	r3, #5
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	2312      	movs	r3, #18
 8007728:	2212      	movs	r2, #18
 800772a:	21ab      	movs	r1, #171	; 0xab
 800772c:	f44f 708b 	mov.w	r0, #278	; 0x116
 8007730:	f7f9 ff8d 	bl	800164e <GFX_DrawFillRoundRectangle>
}
 8007734:	bf00      	nop
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <MenuTFTSchedule1ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af02      	add	r7, sp, #8
 8007742:	4603      	mov	r3, r0
 8007744:	460a      	mov	r2, r1
 8007746:	80fb      	strh	r3, [r7, #6]
 8007748:	4613      	mov	r3, r2
 800774a:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 800774c:	4859      	ldr	r0, [pc, #356]	; (80078b4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x178>)
 800774e:	f7f9 ffcf 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	2bba      	cmp	r3, #186	; 0xba
 8007756:	d92f      	bls.n	80077b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	2bdd      	cmp	r3, #221	; 0xdd
 800775c:	d82c      	bhi.n	80077b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule1 < 24)
 800775e:	4b56      	ldr	r3, [pc, #344]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b17      	cmp	r3, #23
 8007764:	d806      	bhi.n	8007774 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule1++;
 8007766:	4b54      	ldr	r3, [pc, #336]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	b2da      	uxtb	r2, r3
 800776e:	4b52      	ldr	r3, [pc, #328]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	e002      	b.n	800777a <MenuTFTSchedule1ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule1 = 1;
 8007774:	4b50      	ldr	r3, [pc, #320]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007776:	2201      	movs	r2, #1
 8007778:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule1);
 800777a:	4b4f      	ldr	r3, [pc, #316]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b09      	cmp	r3, #9
 8007780:	d907      	bls.n	8007792 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x56>
 8007782:	4b4d      	ldr	r3, [pc, #308]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	494c      	ldr	r1, [pc, #304]	; (80078bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 800778a:	484d      	ldr	r0, [pc, #308]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800778c:	f009 fcb6 	bl	80110fc <siprintf>
 8007790:	e006      	b.n	80077a0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule1);
 8007792:	4b49      	ldr	r3, [pc, #292]	; (80078b8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x17c>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	494a      	ldr	r1, [pc, #296]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 800779a:	4849      	ldr	r0, [pc, #292]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800779c:	f009 fcae 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80077a0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	2301      	movs	r3, #1
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	2264      	movs	r2, #100	; 0x64
 80077ae:	2150      	movs	r1, #80	; 0x50
 80077b0:	4843      	ldr	r0, [pc, #268]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80077b2:	f7fa f9b7 	bl	8001b24 <EF_PutString>
 80077b6:	e078      	b.n	80078aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	2be8      	cmp	r3, #232	; 0xe8
 80077bc:	d930      	bls.n	8007820 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80077c4:	d22c      	bcs.n	8007820 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule1 < 59)
 80077c6:	4b40      	ldr	r3, [pc, #256]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b3a      	cmp	r3, #58	; 0x3a
 80077cc:	d806      	bhi.n	80077dc <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule1++;
 80077ce:	4b3e      	ldr	r3, [pc, #248]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	4b3c      	ldr	r3, [pc, #240]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e002      	b.n	80077e2 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule1 = 0;
 80077dc:	4b3a      	ldr	r3, [pc, #232]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 80077e2:	4b39      	ldr	r3, [pc, #228]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b09      	cmp	r3, #9
 80077e8:	d907      	bls.n	80077fa <MenuTFTSchedule1ActivityHourMinuteONAdd+0xbe>
 80077ea:	4b37      	ldr	r3, [pc, #220]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	4932      	ldr	r1, [pc, #200]	; (80078bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 80077f2:	4833      	ldr	r0, [pc, #204]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80077f4:	f009 fc82 	bl	80110fc <siprintf>
 80077f8:	e006      	b.n	8007808 <MenuTFTSchedule1ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 80077fa:	4b33      	ldr	r3, [pc, #204]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	4930      	ldr	r1, [pc, #192]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 8007802:	482f      	ldr	r0, [pc, #188]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 8007804:	f009 fc7a 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007808:	f24c 6318 	movw	r3, #50712	; 0xc618
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	2301      	movs	r3, #1
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	2264      	movs	r2, #100	; 0x64
 8007816:	218a      	movs	r1, #138	; 0x8a
 8007818:	4829      	ldr	r0, [pc, #164]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800781a:	f7fa f983 	bl	8001b24 <EF_PutString>
 800781e:	e044      	b.n	80078aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007826:	d940      	bls.n	80078aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800782e:	d23c      	bcs.n	80078aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule1 < 49)
 8007830:	4b25      	ldr	r3, [pc, #148]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b30      	cmp	r3, #48	; 0x30
 8007836:	d806      	bhi.n	8007846 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule1 = minuteOnSchedule1 + 10;
 8007838:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	330a      	adds	r3, #10
 800783e:	b2da      	uxtb	r2, r3
 8007840:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007842:	701a      	strb	r2, [r3, #0]
 8007844:	e012      	b.n	800786c <MenuTFTSchedule1ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule1 = (minuteOnSchedule1 + 10) % 60;
 8007846:	4b20      	ldr	r3, [pc, #128]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f103 020a 	add.w	r2, r3, #10
 800784e:	4b1f      	ldr	r3, [pc, #124]	; (80078cc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x190>)
 8007850:	fb83 1302 	smull	r1, r3, r3, r2
 8007854:	4413      	add	r3, r2
 8007856:	1159      	asrs	r1, r3, #5
 8007858:	17d3      	asrs	r3, r2, #31
 800785a:	1ac9      	subs	r1, r1, r3
 800785c:	460b      	mov	r3, r1
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	1a5b      	subs	r3, r3, r1
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	1ad1      	subs	r1, r2, r3
 8007866:	b2ca      	uxtb	r2, r1
 8007868:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800786a:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule1);
 800786c:	4b16      	ldr	r3, [pc, #88]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b09      	cmp	r3, #9
 8007872:	d907      	bls.n	8007884 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x148>
 8007874:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	4910      	ldr	r1, [pc, #64]	; (80078bc <MenuTFTSchedule1ActivityHourMinuteONAdd+0x180>)
 800787c:	4810      	ldr	r0, [pc, #64]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800787e:	f009 fc3d 	bl	80110fc <siprintf>
 8007882:	e006      	b.n	8007892 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule1);
 8007884:	4b10      	ldr	r3, [pc, #64]	; (80078c8 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x18c>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	490e      	ldr	r1, [pc, #56]	; (80078c4 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x188>)
 800788c:	480c      	ldr	r0, [pc, #48]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 800788e:	f009 fc35 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007892:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	2301      	movs	r3, #1
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2300      	movs	r3, #0
 800789e:	2264      	movs	r2, #100	; 0x64
 80078a0:	218a      	movs	r1, #138	; 0x8a
 80078a2:	4807      	ldr	r0, [pc, #28]	; (80078c0 <MenuTFTSchedule1ActivityHourMinuteONAdd+0x184>)
 80078a4:	f7fa f93e 	bl	8001b24 <EF_PutString>
	}
}
 80078a8:	e7ff      	b.n	80078aa <MenuTFTSchedule1ActivityHourMinuteONAdd+0x16e>
 80078aa:	bf00      	nop
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	08018068 	.word	0x08018068
 80078b8:	20000281 	.word	0x20000281
 80078bc:	080152e4 	.word	0x080152e4
 80078c0:	200002fc 	.word	0x200002fc
 80078c4:	080152ec 	.word	0x080152ec
 80078c8:	20000283 	.word	0x20000283
 80078cc:	88888889 	.word	0x88888889

080078d0 <MenuTFTSchedule1ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule1ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	4603      	mov	r3, r0
 80078d8:	460a      	mov	r2, r1
 80078da:	80fb      	strh	r3, [r7, #6]
 80078dc:	4613      	mov	r3, r2
 80078de:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 80078e0:	4859      	ldr	r0, [pc, #356]	; (8007a48 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x178>)
 80078e2:	f7f9 ff05 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	2bba      	cmp	r3, #186	; 0xba
 80078ea:	d92f      	bls.n	800794c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	2bdd      	cmp	r3, #221	; 0xdd
 80078f0:	d82c      	bhi.n	800794c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule1 < 24)
 80078f2:	4b56      	ldr	r3, [pc, #344]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b17      	cmp	r3, #23
 80078f8:	d806      	bhi.n	8007908 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule1++;
 80078fa:	4b54      	ldr	r3, [pc, #336]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	4b52      	ldr	r3, [pc, #328]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e002      	b.n	800790e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule1 = 1;
 8007908:	4b50      	ldr	r3, [pc, #320]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 800790a:	2201      	movs	r2, #1
 800790c:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule1);
 800790e:	4b4f      	ldr	r3, [pc, #316]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b09      	cmp	r3, #9
 8007914:	d907      	bls.n	8007926 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x56>
 8007916:	4b4d      	ldr	r3, [pc, #308]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	494c      	ldr	r1, [pc, #304]	; (8007a50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 800791e:	484d      	ldr	r0, [pc, #308]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007920:	f009 fbec 	bl	80110fc <siprintf>
 8007924:	e006      	b.n	8007934 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule1);
 8007926:	4b49      	ldr	r3, [pc, #292]	; (8007a4c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x17c>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	494a      	ldr	r1, [pc, #296]	; (8007a58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 800792e:	4849      	ldr	r0, [pc, #292]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007930:	f009 fbe4 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007934:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	2301      	movs	r3, #1
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	2300      	movs	r3, #0
 8007940:	2287      	movs	r2, #135	; 0x87
 8007942:	214e      	movs	r1, #78	; 0x4e
 8007944:	4843      	ldr	r0, [pc, #268]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007946:	f7fa f8ed 	bl	8001b24 <EF_PutString>
 800794a:	e078      	b.n	8007a3e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	2be8      	cmp	r3, #232	; 0xe8
 8007950:	d930      	bls.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007958:	d22c      	bcs.n	80079b4 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule1 < 59)
 800795a:	4b40      	ldr	r3, [pc, #256]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b3a      	cmp	r3, #58	; 0x3a
 8007960:	d806      	bhi.n	8007970 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule1++;
 8007962:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4b3c      	ldr	r3, [pc, #240]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e002      	b.n	8007976 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule1 = 0;
 8007970:	4b3a      	ldr	r3, [pc, #232]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007976:	4b39      	ldr	r3, [pc, #228]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b09      	cmp	r3, #9
 800797c:	d907      	bls.n	800798e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xbe>
 800797e:	4b37      	ldr	r3, [pc, #220]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	4932      	ldr	r1, [pc, #200]	; (8007a50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007986:	4833      	ldr	r0, [pc, #204]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007988:	f009 fbb8 	bl	80110fc <siprintf>
 800798c:	e006      	b.n	800799c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 800798e:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	4930      	ldr	r1, [pc, #192]	; (8007a58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007996:	482f      	ldr	r0, [pc, #188]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007998:	f009 fbb0 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800799c:	f24c 6318 	movw	r3, #50712	; 0xc618
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	2301      	movs	r3, #1
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2300      	movs	r3, #0
 80079a8:	2287      	movs	r2, #135	; 0x87
 80079aa:	218a      	movs	r1, #138	; 0x8a
 80079ac:	4829      	ldr	r0, [pc, #164]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 80079ae:	f7fa f8b9 	bl	8001b24 <EF_PutString>
 80079b2:	e044      	b.n	8007a3e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80079ba:	d940      	bls.n	8007a3e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 80079bc:	88fb      	ldrh	r3, [r7, #6]
 80079be:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80079c2:	d23c      	bcs.n	8007a3e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule1 < 49)
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b30      	cmp	r3, #48	; 0x30
 80079ca:	d806      	bhi.n	80079da <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule1 = minuteOffSchedule1 + 10;
 80079cc:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	330a      	adds	r3, #10
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e012      	b.n	8007a00 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule1 = (minuteOffSchedule1 + 10) % 60;
 80079da:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f103 020a 	add.w	r2, r3, #10
 80079e2:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x190>)
 80079e4:	fb83 1302 	smull	r1, r3, r3, r2
 80079e8:	4413      	add	r3, r2
 80079ea:	1159      	asrs	r1, r3, #5
 80079ec:	17d3      	asrs	r3, r2, #31
 80079ee:	1ac9      	subs	r1, r1, r3
 80079f0:	460b      	mov	r3, r1
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	1a5b      	subs	r3, r3, r1
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	1ad1      	subs	r1, r2, r3
 80079fa:	b2ca      	uxtb	r2, r1
 80079fc:	4b17      	ldr	r3, [pc, #92]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 80079fe:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule1 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule1);
 8007a00:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d907      	bls.n	8007a18 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x148>
 8007a08:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4910      	ldr	r1, [pc, #64]	; (8007a50 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x180>)
 8007a10:	4810      	ldr	r0, [pc, #64]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007a12:	f009 fb73 	bl	80110fc <siprintf>
 8007a16:	e006      	b.n	8007a26 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule1);
 8007a18:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x18c>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	490e      	ldr	r1, [pc, #56]	; (8007a58 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x188>)
 8007a20:	480c      	ldr	r0, [pc, #48]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007a22:	f009 fb6b 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007a26:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	2300      	movs	r3, #0
 8007a32:	2287      	movs	r2, #135	; 0x87
 8007a34:	218a      	movs	r1, #138	; 0x8a
 8007a36:	4807      	ldr	r0, [pc, #28]	; (8007a54 <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x184>)
 8007a38:	f7fa f874 	bl	8001b24 <EF_PutString>
	}
}
 8007a3c:	e7ff      	b.n	8007a3e <MenuTFTSchedule1ActivityHourMinuteOFFAdd+0x16e>
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	08018068 	.word	0x08018068
 8007a4c:	20000282 	.word	0x20000282
 8007a50:	080152e4 	.word	0x080152e4
 8007a54:	200002fc 	.word	0x200002fc
 8007a58:	080152ec 	.word	0x080152ec
 8007a5c:	20000284 	.word	0x20000284
 8007a60:	88888889 	.word	0x88888889

08007a64 <MenuTFTSchedule2ActivityDayOfWeekRow>:
//
// Functions to handle touch in Schedule2Activity()
//
// Functions to handle touch in change day section
void MenuTFTSchedule2ActivityDayOfWeekRow(uint16_t x, uint16_t y)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	80fb      	strh	r3, [r7, #6]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
	//Monday - PN
	if((x >= DAY_CHECK_BUTTON_1_X)&&(x <= (DAY_CHECK_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	2b3b      	cmp	r3, #59	; 0x3b
 8007a78:	d91a      	bls.n	8007ab0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b50      	cmp	r3, #80	; 0x50
 8007a7e:	d817      	bhi.n	8007ab0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x4c>
	{
		if(schedule2DayInWeekTab[0]) changeTFTScheduleDayOfWeek(1, 0);//if is ON
 8007a80:	4b68      	ldr	r3, [pc, #416]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <MenuTFTSchedule2ActivityDayOfWeekRow+0x2e>
 8007a88:	2100      	movs	r1, #0
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	f7ff fc5e 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007a90:	e003      	b.n	8007a9a <MenuTFTSchedule2ActivityDayOfWeekRow+0x36>
		else changeTFTScheduleDayOfWeek(1, 1);//if is OFF
 8007a92:	2101      	movs	r1, #1
 8007a94:	2001      	movs	r0, #1
 8007a96:	f7ff fc59 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[0] = !schedule2DayInWeekTab[0]; // update current state in tab holding state of day in week
 8007a9a:	4b62      	ldr	r3, [pc, #392]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2301      	moveq	r3, #1
 8007aa4:	2300      	movne	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	4b5e      	ldr	r3, [pc, #376]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e0b4      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Tuesday - WT
	else if((x >= DAY_CHECK_BUTTON_2_X)&&(x <= (DAY_CHECK_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	2b59      	cmp	r3, #89	; 0x59
 8007ab4:	d91a      	bls.n	8007aec <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	2b6e      	cmp	r3, #110	; 0x6e
 8007aba:	d817      	bhi.n	8007aec <MenuTFTSchedule2ActivityDayOfWeekRow+0x88>
	{
		if(schedule2DayInWeekTab[1]) changeTFTScheduleDayOfWeek(2, 0);//if is ON
 8007abc:	4b59      	ldr	r3, [pc, #356]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <MenuTFTSchedule2ActivityDayOfWeekRow+0x6a>
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	2002      	movs	r0, #2
 8007ac8:	f7ff fc40 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007acc:	e003      	b.n	8007ad6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x72>
		else changeTFTScheduleDayOfWeek(2, 1);//if is OFF
 8007ace:	2101      	movs	r1, #1
 8007ad0:	2002      	movs	r0, #2
 8007ad2:	f7ff fc3b 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[1] = !schedule2DayInWeekTab[1]; // update current state in tab holding state of day in week
 8007ad6:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf0c      	ite	eq
 8007ade:	2301      	moveq	r3, #1
 8007ae0:	2300      	movne	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007ae8:	705a      	strb	r2, [r3, #1]
 8007aea:	e096      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Wednesday - SR
	else if((x >= DAY_CHECK_BUTTON_3_X)&&(x <= (DAY_CHECK_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007aec:	88fb      	ldrh	r3, [r7, #6]
 8007aee:	2b77      	cmp	r3, #119	; 0x77
 8007af0:	d91a      	bls.n	8007b28 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	2b8c      	cmp	r3, #140	; 0x8c
 8007af6:	d817      	bhi.n	8007b28 <MenuTFTSchedule2ActivityDayOfWeekRow+0xc4>
	{
		if(schedule2DayInWeekTab[2]) changeTFTScheduleDayOfWeek(3, 0);//if is ON
 8007af8:	4b4a      	ldr	r3, [pc, #296]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d004      	beq.n	8007b0a <MenuTFTSchedule2ActivityDayOfWeekRow+0xa6>
 8007b00:	2100      	movs	r1, #0
 8007b02:	2003      	movs	r0, #3
 8007b04:	f7ff fc22 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007b08:	e003      	b.n	8007b12 <MenuTFTSchedule2ActivityDayOfWeekRow+0xae>
		else changeTFTScheduleDayOfWeek(3, 1);//if is OFF
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	2003      	movs	r0, #3
 8007b0e:	f7ff fc1d 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[2] = !schedule2DayInWeekTab[2]; // update current state in tab holding state of day in week
 8007b12:	4b44      	ldr	r3, [pc, #272]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b14:	789b      	ldrb	r3, [r3, #2]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bf0c      	ite	eq
 8007b1a:	2301      	moveq	r3, #1
 8007b1c:	2300      	movne	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	4b40      	ldr	r3, [pc, #256]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b24:	709a      	strb	r2, [r3, #2]
 8007b26:	e078      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Thursday - CZ
	else if((x >= DAY_CHECK_BUTTON_4_X)&&(x <= (DAY_CHECK_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 8007b28:	88fb      	ldrh	r3, [r7, #6]
 8007b2a:	2b95      	cmp	r3, #149	; 0x95
 8007b2c:	d91a      	bls.n	8007b64 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
 8007b2e:	88fb      	ldrh	r3, [r7, #6]
 8007b30:	2baa      	cmp	r3, #170	; 0xaa
 8007b32:	d817      	bhi.n	8007b64 <MenuTFTSchedule2ActivityDayOfWeekRow+0x100>
	{
		if(schedule2DayInWeekTab[3]) changeTFTScheduleDayOfWeek(4, 0);//if is ON
 8007b34:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d004      	beq.n	8007b46 <MenuTFTSchedule2ActivityDayOfWeekRow+0xe2>
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	2004      	movs	r0, #4
 8007b40:	f7ff fc04 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007b44:	e003      	b.n	8007b4e <MenuTFTSchedule2ActivityDayOfWeekRow+0xea>
		else changeTFTScheduleDayOfWeek(4, 1);//if is OFF
 8007b46:	2101      	movs	r1, #1
 8007b48:	2004      	movs	r0, #4
 8007b4a:	f7ff fbff 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[3] = !schedule2DayInWeekTab[3]; // update current state in tab holding state of day in week
 8007b4e:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bf0c      	ite	eq
 8007b56:	2301      	moveq	r3, #1
 8007b58:	2300      	movne	r3, #0
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b60:	70da      	strb	r2, [r3, #3]
 8007b62:	e05a      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Friday - PT
	else if((x >= DAY_CHECK_BUTTON_5_X)&&(x <= (DAY_CHECK_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2bb3      	cmp	r3, #179	; 0xb3
 8007b68:	d91a      	bls.n	8007ba0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	2bc8      	cmp	r3, #200	; 0xc8
 8007b6e:	d817      	bhi.n	8007ba0 <MenuTFTSchedule2ActivityDayOfWeekRow+0x13c>
	{
		if(schedule2DayInWeekTab[4]) changeTFTScheduleDayOfWeek(5, 0);//if is ON
 8007b70:	4b2c      	ldr	r3, [pc, #176]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <MenuTFTSchedule2ActivityDayOfWeekRow+0x11e>
 8007b78:	2100      	movs	r1, #0
 8007b7a:	2005      	movs	r0, #5
 8007b7c:	f7ff fbe6 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007b80:	e003      	b.n	8007b8a <MenuTFTSchedule2ActivityDayOfWeekRow+0x126>
		else changeTFTScheduleDayOfWeek(5, 1);//if is OFF
 8007b82:	2101      	movs	r1, #1
 8007b84:	2005      	movs	r0, #5
 8007b86:	f7ff fbe1 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[4] = !schedule2DayInWeekTab[4]; // update current state in tab holding state of day in week
 8007b8a:	4b26      	ldr	r3, [pc, #152]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bf0c      	ite	eq
 8007b92:	2301      	moveq	r3, #1
 8007b94:	2300      	movne	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007b9c:	711a      	strb	r2, [r3, #4]
 8007b9e:	e03c      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Saturday - SB
	else if((x >= DAY_CHECK_BUTTON_6_X)&&(x <= (DAY_CHECK_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	2bd1      	cmp	r3, #209	; 0xd1
 8007ba4:	d91a      	bls.n	8007bdc <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	2be6      	cmp	r3, #230	; 0xe6
 8007baa:	d817      	bhi.n	8007bdc <MenuTFTSchedule2ActivityDayOfWeekRow+0x178>
	{
		if(schedule2DayInWeekTab[5]) changeTFTScheduleDayOfWeek(6, 0);//if is ON
 8007bac:	4b1d      	ldr	r3, [pc, #116]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007bae:	795b      	ldrb	r3, [r3, #5]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <MenuTFTSchedule2ActivityDayOfWeekRow+0x15a>
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	2006      	movs	r0, #6
 8007bb8:	f7ff fbc8 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007bbc:	e003      	b.n	8007bc6 <MenuTFTSchedule2ActivityDayOfWeekRow+0x162>
		else changeTFTScheduleDayOfWeek(6, 1);//if is OFF
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	2006      	movs	r0, #6
 8007bc2:	f7ff fbc3 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[5] = !schedule2DayInWeekTab[5]; // update current state in tab holding state of day in week
 8007bc6:	4b17      	ldr	r3, [pc, #92]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007bc8:	795b      	ldrb	r3, [r3, #5]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf0c      	ite	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007bd8:	715a      	strb	r2, [r3, #5]
 8007bda:	e01e      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	}
	//Sunday - ND
	else if((x >= DAY_CHECK_BUTTON_7_X)&&(x <= (DAY_CHECK_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	2bef      	cmp	r3, #239	; 0xef
 8007be0:	d91b      	bls.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007be8:	d817      	bhi.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
	{
		if(schedule2DayInWeekTab[6]) changeTFTScheduleDayOfWeek(7, 0);//if is ON
 8007bea:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <MenuTFTSchedule2ActivityDayOfWeekRow+0x198>
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	2007      	movs	r0, #7
 8007bf6:	f7ff fba9 	bl	800734c <changeTFTScheduleDayOfWeek>
 8007bfa:	e003      	b.n	8007c04 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1a0>
		else changeTFTScheduleDayOfWeek(7, 1);//if is OFF
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	2007      	movs	r0, #7
 8007c00:	f7ff fba4 	bl	800734c <changeTFTScheduleDayOfWeek>
		schedule2DayInWeekTab[6] = !schedule2DayInWeekTab[6]; // update current state in tab holding state of day in week
 8007c04:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007c06:	799b      	ldrb	r3, [r3, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <MenuTFTSchedule2ActivityDayOfWeekRow+0x1c0>)
 8007c16:	719a      	strb	r2, [r3, #6]
	}
}
 8007c18:	e7ff      	b.n	8007c1a <MenuTFTSchedule2ActivityDayOfWeekRow+0x1b6>
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000270 	.word	0x20000270

08007c28 <MenuTFTSchedule2ActivityHourMinuteONAdd>:

//
// Handle touch in Hour And Minute ON section
void MenuTFTSchedule2ActivityHourMinuteONAdd(uint16_t x, uint16_t y)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	4603      	mov	r3, r0
 8007c30:	460a      	mov	r2, r1
 8007c32:	80fb      	strh	r3, [r7, #6]
 8007c34:	4613      	mov	r3, r2
 8007c36:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007c38:	4859      	ldr	r0, [pc, #356]	; (8007da0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x178>)
 8007c3a:	f7f9 fd59 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	2bba      	cmp	r3, #186	; 0xba
 8007c42:	d92f      	bls.n	8007ca4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	2bdd      	cmp	r3, #221	; 0xdd
 8007c48:	d82c      	bhi.n	8007ca4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x7c>
	{
		if(hourOnSchedule2 < 24)
 8007c4a:	4b56      	ldr	r3, [pc, #344]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b17      	cmp	r3, #23
 8007c50:	d806      	bhi.n	8007c60 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x38>
		{
			hourOnSchedule2++;
 8007c52:	4b54      	ldr	r3, [pc, #336]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b52      	ldr	r3, [pc, #328]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e002      	b.n	8007c66 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x3e>
		}
		else
		{
			hourOnSchedule2 = 1;
 8007c60:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
		}
		if(hourOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOnSchedule2);
 8007c66:	4b4f      	ldr	r3, [pc, #316]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b09      	cmp	r3, #9
 8007c6c:	d907      	bls.n	8007c7e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x56>
 8007c6e:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	494c      	ldr	r1, [pc, #304]	; (8007da8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007c76:	484d      	ldr	r0, [pc, #308]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007c78:	f009 fa40 	bl	80110fc <siprintf>
 8007c7c:	e006      	b.n	8007c8c <MenuTFTSchedule2ActivityHourMinuteONAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOnSchedule2);
 8007c7e:	4b49      	ldr	r3, [pc, #292]	; (8007da4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x17c>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	494a      	ldr	r1, [pc, #296]	; (8007db0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007c86:	4849      	ldr	r0, [pc, #292]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007c88:	f009 fa38 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X-2 , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007c8c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	2301      	movs	r3, #1
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	2300      	movs	r3, #0
 8007c98:	2264      	movs	r2, #100	; 0x64
 8007c9a:	214e      	movs	r1, #78	; 0x4e
 8007c9c:	4843      	ldr	r0, [pc, #268]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007c9e:	f7f9 ff41 	bl	8001b24 <EF_PutString>
 8007ca2:	e078      	b.n	8007d96 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	2be8      	cmp	r3, #232	; 0xe8
 8007ca8:	d930      	bls.n	8007d0c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007cb0:	d22c      	bcs.n	8007d0c <MenuTFTSchedule2ActivityHourMinuteONAdd+0xe4>
	{
		if(minuteOnSchedule2 < 59)
 8007cb2:	4b40      	ldr	r3, [pc, #256]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b3a      	cmp	r3, #58	; 0x3a
 8007cb8:	d806      	bhi.n	8007cc8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa0>
		{
			minuteOnSchedule2++;
 8007cba:	4b3e      	ldr	r3, [pc, #248]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4b3c      	ldr	r3, [pc, #240]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <MenuTFTSchedule2ActivityHourMinuteONAdd+0xa6>
		}
		else
		{
			minuteOnSchedule2 = 0;
 8007cc8:	4b3a      	ldr	r3, [pc, #232]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007cce:	4b39      	ldr	r3, [pc, #228]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d907      	bls.n	8007ce6 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xbe>
 8007cd6:	4b37      	ldr	r3, [pc, #220]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4932      	ldr	r1, [pc, #200]	; (8007da8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007cde:	4833      	ldr	r0, [pc, #204]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007ce0:	f009 fa0c 	bl	80110fc <siprintf>
 8007ce4:	e006      	b.n	8007cf4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007ce6:	4b33      	ldr	r3, [pc, #204]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	4930      	ldr	r1, [pc, #192]	; (8007db0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007cee:	482f      	ldr	r0, [pc, #188]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007cf0:	f009 fa04 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007cf4:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	2264      	movs	r2, #100	; 0x64
 8007d02:	218a      	movs	r1, #138	; 0x8a
 8007d04:	4829      	ldr	r0, [pc, #164]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007d06:	f7f9 ff0d 	bl	8001b24 <EF_PutString>
 8007d0a:	e044      	b.n	8007d96 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007d12:	d940      	bls.n	8007d96 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007d1a:	d23c      	bcs.n	8007d96 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
	{
		if(minuteOnSchedule2 < 49)
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b30      	cmp	r3, #48	; 0x30
 8007d22:	d806      	bhi.n	8007d32 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x10a>
		{
			minuteOnSchedule2 = minuteOnSchedule2 + 10;
 8007d24:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	330a      	adds	r3, #10
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e012      	b.n	8007d58 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x130>
		}
		else
		{
			minuteOnSchedule2 = (minuteOnSchedule2 + 10) % 60;
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f103 020a 	add.w	r2, r3, #10
 8007d3a:	4b1f      	ldr	r3, [pc, #124]	; (8007db8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x190>)
 8007d3c:	fb83 1302 	smull	r1, r3, r3, r2
 8007d40:	4413      	add	r3, r2
 8007d42:	1159      	asrs	r1, r3, #5
 8007d44:	17d3      	asrs	r3, r2, #31
 8007d46:	1ac9      	subs	r1, r1, r3
 8007d48:	460b      	mov	r3, r1
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	1a5b      	subs	r3, r3, r1
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	1ad1      	subs	r1, r2, r3
 8007d52:	b2ca      	uxtb	r2, r1
 8007d54:	4b17      	ldr	r3, [pc, #92]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d56:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOnSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOnSchedule2);
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d907      	bls.n	8007d70 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x148>
 8007d60:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	4910      	ldr	r1, [pc, #64]	; (8007da8 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x180>)
 8007d68:	4810      	ldr	r0, [pc, #64]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007d6a:	f009 f9c7 	bl	80110fc <siprintf>
 8007d6e:	e006      	b.n	8007d7e <MenuTFTSchedule2ActivityHourMinuteONAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOnSchedule2);
 8007d70:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x18c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	490e      	ldr	r1, [pc, #56]	; (8007db0 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x188>)
 8007d78:	480c      	ldr	r0, [pc, #48]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007d7a:	f009 f9bf 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_ON_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007d7e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	2301      	movs	r3, #1
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2264      	movs	r2, #100	; 0x64
 8007d8c:	218a      	movs	r1, #138	; 0x8a
 8007d8e:	4807      	ldr	r0, [pc, #28]	; (8007dac <MenuTFTSchedule2ActivityHourMinuteONAdd+0x184>)
 8007d90:	f7f9 fec8 	bl	8001b24 <EF_PutString>
	}
}
 8007d94:	e7ff      	b.n	8007d96 <MenuTFTSchedule2ActivityHourMinuteONAdd+0x16e>
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	08018068 	.word	0x08018068
 8007da4:	20000285 	.word	0x20000285
 8007da8:	080152e4 	.word	0x080152e4
 8007dac:	200002fc 	.word	0x200002fc
 8007db0:	080152ec 	.word	0x080152ec
 8007db4:	20000287 	.word	0x20000287
 8007db8:	88888889 	.word	0x88888889

08007dbc <MenuTFTSchedule2ActivityHourMinuteOFFAdd>:

//
// Handle touch in Hour And Minute OFF section
void MenuTFTSchedule2ActivityHourMinuteOFFAdd(uint16_t x, uint16_t y)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	460a      	mov	r2, r1
 8007dc6:	80fb      	strh	r3, [r7, #6]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80bb      	strh	r3, [r7, #4]
	EF_SetFont(&arialBlack_20ptFontInfo);
 8007dcc:	4859      	ldr	r0, [pc, #356]	; (8007f34 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x178>)
 8007dce:	f7f9 fc8f 	bl	80016f0 <EF_SetFont>
	// Check if it is Hour to add +1H
	if((x >= ONE_HOUR_ADD_SHEDULE_X)&&(x <= (ONE_HOUR_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2bba      	cmp	r3, #186	; 0xba
 8007dd6:	d92f      	bls.n	8007e38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
 8007dd8:	88fb      	ldrh	r3, [r7, #6]
 8007dda:	2bdd      	cmp	r3, #221	; 0xdd
 8007ddc:	d82c      	bhi.n	8007e38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x7c>
	{
		if(hourOffSchedule2 < 24)
 8007dde:	4b56      	ldr	r3, [pc, #344]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b17      	cmp	r3, #23
 8007de4:	d806      	bhi.n	8007df4 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x38>
		{
			hourOffSchedule2++;
 8007de6:	4b54      	ldr	r3, [pc, #336]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4b52      	ldr	r3, [pc, #328]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x3e>
		}
		else
		{
			hourOffSchedule2 = 1;
 8007df4:	4b50      	ldr	r3, [pc, #320]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
		}
		if(hourOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", hourOffSchedule2);
 8007dfa:	4b4f      	ldr	r3, [pc, #316]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b09      	cmp	r3, #9
 8007e00:	d907      	bls.n	8007e12 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x56>
 8007e02:	4b4d      	ldr	r3, [pc, #308]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	494c      	ldr	r1, [pc, #304]	; (8007f3c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007e0a:	484d      	ldr	r0, [pc, #308]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e0c:	f009 f976 	bl	80110fc <siprintf>
 8007e10:	e006      	b.n	8007e20 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x64>
		else sprintf((char*)Msg, " 0%d ", hourOffSchedule2);
 8007e12:	4b49      	ldr	r3, [pc, #292]	; (8007f38 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x17c>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	494a      	ldr	r1, [pc, #296]	; (8007f44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007e1a:	4849      	ldr	r0, [pc, #292]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e1c:	f009 f96e 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_HOUR_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e20:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	2301      	movs	r3, #1
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2287      	movs	r2, #135	; 0x87
 8007e2e:	2150      	movs	r1, #80	; 0x50
 8007e30:	4843      	ldr	r0, [pc, #268]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e32:	f7f9 fe77 	bl	8001b24 <EF_PutString>
 8007e36:	e078      	b.n	8007f2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>

	}

	// Check if it is Hour to add +1M
	else if((x >= ONE_MINUTE_ADD_SHEDULE_X)&&(x <= (ONE_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007e38:	88fb      	ldrh	r3, [r7, #6]
 8007e3a:	2be8      	cmp	r3, #232	; 0xe8
 8007e3c:	d930      	bls.n	8007ea0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
 8007e3e:	88fb      	ldrh	r3, [r7, #6]
 8007e40:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8007e44:	d22c      	bcs.n	8007ea0 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xe4>
	{
		if(minuteOffSchedule2 < 59)
 8007e46:	4b40      	ldr	r3, [pc, #256]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2b3a      	cmp	r3, #58	; 0x3a
 8007e4c:	d806      	bhi.n	8007e5c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa0>
		{
			minuteOffSchedule2++;
 8007e4e:	4b3e      	ldr	r3, [pc, #248]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	3301      	adds	r3, #1
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	4b3c      	ldr	r3, [pc, #240]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xa6>
		}
		else
		{
			minuteOffSchedule2 = 0;
 8007e5c:	4b3a      	ldr	r3, [pc, #232]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007e62:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b09      	cmp	r3, #9
 8007e68:	d907      	bls.n	8007e7a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xbe>
 8007e6a:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4932      	ldr	r1, [pc, #200]	; (8007f3c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007e72:	4833      	ldr	r0, [pc, #204]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e74:	f009 f942 	bl	80110fc <siprintf>
 8007e78:	e006      	b.n	8007e88 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0xcc>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007e7a:	4b33      	ldr	r3, [pc, #204]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4930      	ldr	r1, [pc, #192]	; (8007f44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007e82:	482f      	ldr	r0, [pc, #188]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e84:	f009 f93a 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007e88:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	2300      	movs	r3, #0
 8007e94:	2287      	movs	r2, #135	; 0x87
 8007e96:	218a      	movs	r1, #138	; 0x8a
 8007e98:	4829      	ldr	r0, [pc, #164]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007e9a:	f7f9 fe43 	bl	8001b24 <EF_PutString>
 8007e9e:	e044      	b.n	8007f2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	}

	// Check if it is Hour to add +10M
	else if((x >= TEN_MINUTE_ADD_SHEDULE_X)&&(x <= (TEN_MINUTE_ADD_SHEDULE_X + HOOUR_MINUTE_BUTTON_W)))
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8007ea6:	d940      	bls.n	8007f2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8007eae:	d23c      	bcs.n	8007f2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
	{
		if(minuteOffSchedule2 < 49)
 8007eb0:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b30      	cmp	r3, #48	; 0x30
 8007eb6:	d806      	bhi.n	8007ec6 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x10a>
		{
			minuteOffSchedule2 = minuteOffSchedule2 + 10;
 8007eb8:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	330a      	adds	r3, #10
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	4b21      	ldr	r3, [pc, #132]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e012      	b.n	8007eec <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x130>
		}
		else
		{
			minuteOffSchedule2 = (minuteOffSchedule2 + 10) % 60;
 8007ec6:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f103 020a 	add.w	r2, r3, #10
 8007ece:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x190>)
 8007ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	1159      	asrs	r1, r3, #5
 8007ed8:	17d3      	asrs	r3, r2, #31
 8007eda:	1ac9      	subs	r1, r1, r3
 8007edc:	460b      	mov	r3, r1
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	1a5b      	subs	r3, r3, r1
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	1ad1      	subs	r1, r2, r3
 8007ee6:	b2ca      	uxtb	r2, r1
 8007ee8:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007eea:	701a      	strb	r2, [r3, #0]
		}
		if(minuteOffSchedule2 >= 10) sprintf((char*)Msg, " %d ", minuteOffSchedule2);
 8007eec:	4b16      	ldr	r3, [pc, #88]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b09      	cmp	r3, #9
 8007ef2:	d907      	bls.n	8007f04 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x148>
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4910      	ldr	r1, [pc, #64]	; (8007f3c <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x180>)
 8007efc:	4810      	ldr	r0, [pc, #64]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007efe:	f009 f8fd 	bl	80110fc <siprintf>
 8007f02:	e006      	b.n	8007f12 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x156>
		else sprintf((char*)Msg, " 0%d ", minuteOffSchedule2);
 8007f04:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x18c>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	490e      	ldr	r1, [pc, #56]	; (8007f44 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x188>)
 8007f0c:	480c      	ldr	r0, [pc, #48]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007f0e:	f009 f8f5 	bl	80110fc <siprintf>
		EF_PutString(Msg, STRING_ON_OFF_MINUTE_X , STRING_OFF_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8007f12:	f24c 6318 	movw	r3, #50712	; 0xc618
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	2301      	movs	r3, #1
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2287      	movs	r2, #135	; 0x87
 8007f20:	218a      	movs	r1, #138	; 0x8a
 8007f22:	4807      	ldr	r0, [pc, #28]	; (8007f40 <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x184>)
 8007f24:	f7f9 fdfe 	bl	8001b24 <EF_PutString>
	}
}
 8007f28:	e7ff      	b.n	8007f2a <MenuTFTSchedule2ActivityHourMinuteOFFAdd+0x16e>
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	08018068 	.word	0x08018068
 8007f38:	20000286 	.word	0x20000286
 8007f3c:	080152e4 	.word	0x080152e4
 8007f40:	200002fc 	.word	0x200002fc
 8007f44:	080152ec 	.word	0x080152ec
 8007f48:	20000288 	.word	0x20000288
 8007f4c:	88888889 	.word	0x88888889

08007f50 <MenuTFTSchedule1ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 1 section
//
void MenuTFTSchedule1ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	460a      	mov	r2, r1
 8007f5a:	80fb      	strh	r3, [r7, #6]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b14      	cmp	r3, #20
 8007f64:	d919      	bls.n	8007f9a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	2b29      	cmp	r3, #41	; 0x29
 8007f6a:	d816      	bhi.n	8007f9a <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule1RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x2e>
 8007f74:	2100      	movs	r1, #0
 8007f76:	2001      	movs	r0, #1
 8007f78:	f7ff fac5 	bl	8007506 <changeTFTScheduleRelayLights>
 8007f7c:	e003      	b.n	8007f86 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 8007f7e:	2101      	movs	r1, #1
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7ff fac0 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[0] = !schedule1RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 8007f86:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	2300      	movne	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	461a      	mov	r2, r3
 8007f96:	4b78      	ldr	r3, [pc, #480]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007f98:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	2b34      	cmp	r3, #52	; 0x34
 8007f9e:	d919      	bls.n	8007fd4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
 8007fa0:	88fb      	ldrh	r3, [r7, #6]
 8007fa2:	2b49      	cmp	r3, #73	; 0x49
 8007fa4:	d816      	bhi.n	8007fd4 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule1RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 8007fa6:	4b74      	ldr	r3, [pc, #464]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x68>
 8007fae:	2100      	movs	r1, #0
 8007fb0:	2002      	movs	r0, #2
 8007fb2:	f7ff faa8 	bl	8007506 <changeTFTScheduleRelayLights>
 8007fb6:	e003      	b.n	8007fc0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 8007fb8:	2101      	movs	r1, #1
 8007fba:	2002      	movs	r0, #2
 8007fbc:	f7ff faa3 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[1] = !schedule1RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 8007fc0:	4b6d      	ldr	r3, [pc, #436]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4b69      	ldr	r3, [pc, #420]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007fd2:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8007fd4:	88fb      	ldrh	r3, [r7, #6]
 8007fd6:	2b54      	cmp	r3, #84	; 0x54
 8007fd8:	d919      	bls.n	800800e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	2b69      	cmp	r3, #105	; 0x69
 8007fde:	d816      	bhi.n	800800e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule1RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 8007fe0:	4b65      	ldr	r3, [pc, #404]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007fe2:	789b      	ldrb	r3, [r3, #2]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xa2>
 8007fe8:	2100      	movs	r1, #0
 8007fea:	2003      	movs	r0, #3
 8007fec:	f7ff fa8b 	bl	8007506 <changeTFTScheduleRelayLights>
 8007ff0:	e003      	b.n	8007ffa <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	2003      	movs	r0, #3
 8007ff6:	f7ff fa86 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[2] = !schedule1RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8007ffa:	4b5f      	ldr	r3, [pc, #380]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8007ffc:	789b      	ldrb	r3, [r3, #2]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bf0c      	ite	eq
 8008002:	2301      	moveq	r3, #1
 8008004:	2300      	movne	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	4b5b      	ldr	r3, [pc, #364]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800800c:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	2b74      	cmp	r3, #116	; 0x74
 8008012:	d919      	bls.n	8008048 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	2b89      	cmp	r3, #137	; 0x89
 8008018:	d816      	bhi.n	8008048 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule1RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 800801a:	4b57      	ldr	r3, [pc, #348]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800801c:	78db      	ldrb	r3, [r3, #3]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xdc>
 8008022:	2100      	movs	r1, #0
 8008024:	2004      	movs	r0, #4
 8008026:	f7ff fa6e 	bl	8007506 <changeTFTScheduleRelayLights>
 800802a:	e003      	b.n	8008034 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 800802c:	2101      	movs	r1, #1
 800802e:	2004      	movs	r0, #4
 8008030:	f7ff fa69 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[3] = !schedule1RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8008034:	4b50      	ldr	r3, [pc, #320]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008036:	78db      	ldrb	r3, [r3, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	4b4c      	ldr	r3, [pc, #304]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008046:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	2b94      	cmp	r3, #148	; 0x94
 800804c:	d919      	bls.n	8008082 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	2ba9      	cmp	r3, #169	; 0xa9
 8008052:	d816      	bhi.n	8008082 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule1RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008054:	4b48      	ldr	r3, [pc, #288]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008056:	791b      	ldrb	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d004      	beq.n	8008066 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x116>
 800805c:	2100      	movs	r1, #0
 800805e:	2005      	movs	r0, #5
 8008060:	f7ff fa51 	bl	8007506 <changeTFTScheduleRelayLights>
 8008064:	e003      	b.n	800806e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8008066:	2101      	movs	r1, #1
 8008068:	2005      	movs	r0, #5
 800806a:	f7ff fa4c 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[4] = !schedule1RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800806e:	4b42      	ldr	r3, [pc, #264]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	bf0c      	ite	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	2300      	movne	r3, #0
 800807a:	b2db      	uxtb	r3, r3
 800807c:	461a      	mov	r2, r3
 800807e:	4b3e      	ldr	r3, [pc, #248]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008080:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 8008082:	88fb      	ldrh	r3, [r7, #6]
 8008084:	2bb4      	cmp	r3, #180	; 0xb4
 8008086:	d919      	bls.n	80080bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	2bc9      	cmp	r3, #201	; 0xc9
 800808c:	d816      	bhi.n	80080bc <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule1RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 800808e:	4b3a      	ldr	r3, [pc, #232]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008090:	795b      	ldrb	r3, [r3, #5]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x150>
 8008096:	2100      	movs	r1, #0
 8008098:	2006      	movs	r0, #6
 800809a:	f7ff fa34 	bl	8007506 <changeTFTScheduleRelayLights>
 800809e:	e003      	b.n	80080a8 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80080a0:	2101      	movs	r1, #1
 80080a2:	2006      	movs	r0, #6
 80080a4:	f7ff fa2f 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[5] = !schedule1RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80080a8:	4b33      	ldr	r3, [pc, #204]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80080aa:	795b      	ldrb	r3, [r3, #5]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	bf0c      	ite	eq
 80080b0:	2301      	moveq	r3, #1
 80080b2:	2300      	movne	r3, #0
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80080ba:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	2bd4      	cmp	r3, #212	; 0xd4
 80080c0:	d919      	bls.n	80080f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	2be9      	cmp	r3, #233	; 0xe9
 80080c6:	d816      	bhi.n	80080f6 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule1RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80080ca:	799b      	ldrb	r3, [r3, #6]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x18a>
 80080d0:	2100      	movs	r1, #0
 80080d2:	2007      	movs	r0, #7
 80080d4:	f7ff fa17 	bl	8007506 <changeTFTScheduleRelayLights>
 80080d8:	e003      	b.n	80080e2 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 80080da:	2101      	movs	r1, #1
 80080dc:	2007      	movs	r0, #7
 80080de:	f7ff fa12 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[6] = !schedule1RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 80080e2:	4b25      	ldr	r3, [pc, #148]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80080e4:	799b      	ldrb	r3, [r3, #6]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	bf0c      	ite	eq
 80080ea:	2301      	moveq	r3, #1
 80080ec:	2300      	movne	r3, #0
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 80080f4:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2bf4      	cmp	r3, #244	; 0xf4
 80080fa:	d91a      	bls.n	8008132 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8008102:	d216      	bcs.n	8008132 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule1RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8008104:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008106:	79db      	ldrb	r3, [r3, #7]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d004      	beq.n	8008116 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1c6>
 800810c:	2100      	movs	r1, #0
 800810e:	2008      	movs	r0, #8
 8008110:	f7ff f9f9 	bl	8007506 <changeTFTScheduleRelayLights>
 8008114:	e003      	b.n	800811e <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8008116:	2101      	movs	r1, #1
 8008118:	2008      	movs	r0, #8
 800811a:	f7ff f9f4 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[7] = !schedule1RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800811e:	4b16      	ldr	r3, [pc, #88]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008120:	79db      	ldrb	r3, [r3, #7]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bf0c      	ite	eq
 8008126:	2301      	moveq	r3, #1
 8008128:	2300      	movne	r3, #0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	4b12      	ldr	r3, [pc, #72]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008130:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008138:	d91a      	bls.n	8008170 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8008140:	d216      	bcs.n	8008170 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule1RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 8008144:	7a1b      	ldrb	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x204>
 800814a:	2100      	movs	r1, #0
 800814c:	2009      	movs	r0, #9
 800814e:	f7ff f9da 	bl	8007506 <changeTFTScheduleRelayLights>
 8008152:	e003      	b.n	800815c <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008154:	2101      	movs	r1, #1
 8008156:	2009      	movs	r0, #9
 8008158:	f7ff f9d5 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule1RelayAndSwitchTab[8] = !schedule1RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800815e:	7a1b      	ldrb	r3, [r3, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf0c      	ite	eq
 8008164:	2301      	moveq	r3, #1
 8008166:	2300      	movne	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <MenuTFTSchedule1ActivityRelaysAndLightsRow+0x228>)
 800816e:	721a      	strb	r2, [r3, #8]
	}

}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	20000264 	.word	0x20000264

0800817c <MenuTFTSchedule2ActivityRelaysAndLightsRow>:

//
// Handle touch in Relays and Lights in Schedule 2 section
//
void MenuTFTSchedule2ActivityRelaysAndLightsRow(uint16_t x, uint16_t y)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	460a      	mov	r2, r1
 8008186:	80fb      	strh	r3, [r7, #6]
 8008188:	4613      	mov	r3, r2
 800818a:	80bb      	strh	r3, [r7, #4]
	// R1
	if((x >= DAY_CHECK_RELAY_BUTTON_1_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_1_X + DAY_CHECK_BUTTON_W)))
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	2b14      	cmp	r3, #20
 8008190:	d919      	bls.n	80081c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	2b29      	cmp	r3, #41	; 0x29
 8008196:	d816      	bhi.n	80081c6 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x4a>
	{
		if(schedule2RelayAndSwitchTab[0]) changeTFTScheduleRelayLights(1, 0);//if is ON -> Turn OFF
 8008198:	4b82      	ldr	r3, [pc, #520]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x2e>
 80081a0:	2100      	movs	r1, #0
 80081a2:	2001      	movs	r0, #1
 80081a4:	f7ff f9af 	bl	8007506 <changeTFTScheduleRelayLights>
 80081a8:	e003      	b.n	80081b2 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x36>
		else changeTFTScheduleRelayLights(1, 1);//if is OFF -> Turn ON
 80081aa:	2101      	movs	r1, #1
 80081ac:	2001      	movs	r0, #1
 80081ae:	f7ff f9aa 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[0] = !schedule2RelayAndSwitchTab[0]; // update current state in tab holding state of day in week
 80081b2:	4b7c      	ldr	r3, [pc, #496]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	bf0c      	ite	eq
 80081ba:	2301      	moveq	r3, #1
 80081bc:	2300      	movne	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	4b78      	ldr	r3, [pc, #480]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081c4:	701a      	strb	r2, [r3, #0]
	}
	// R2
	if((x >= DAY_CHECK_RELAY_BUTTON_2_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_2_X + DAY_CHECK_BUTTON_W)))
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b34      	cmp	r3, #52	; 0x34
 80081ca:	d919      	bls.n	8008200 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	2b49      	cmp	r3, #73	; 0x49
 80081d0:	d816      	bhi.n	8008200 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x84>
	{
		if(schedule2RelayAndSwitchTab[1]) changeTFTScheduleRelayLights(2, 0);//if is ON -> Turn OFF
 80081d2:	4b74      	ldr	r3, [pc, #464]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x68>
 80081da:	2100      	movs	r1, #0
 80081dc:	2002      	movs	r0, #2
 80081de:	f7ff f992 	bl	8007506 <changeTFTScheduleRelayLights>
 80081e2:	e003      	b.n	80081ec <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x70>
		else changeTFTScheduleRelayLights(2, 1);//if is OFF -> Turn ON
 80081e4:	2101      	movs	r1, #1
 80081e6:	2002      	movs	r0, #2
 80081e8:	f7ff f98d 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[1] = !schedule2RelayAndSwitchTab[1]; // update current state in tab holding state of day in week
 80081ec:	4b6d      	ldr	r3, [pc, #436]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081ee:	785b      	ldrb	r3, [r3, #1]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf0c      	ite	eq
 80081f4:	2301      	moveq	r3, #1
 80081f6:	2300      	movne	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	4b69      	ldr	r3, [pc, #420]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80081fe:	705a      	strb	r2, [r3, #1]
	}
	// R3
	if((x >= DAY_CHECK_RELAY_BUTTON_3_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_3_X + DAY_CHECK_BUTTON_W)))
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	2b54      	cmp	r3, #84	; 0x54
 8008204:	d919      	bls.n	800823a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	2b69      	cmp	r3, #105	; 0x69
 800820a:	d816      	bhi.n	800823a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xbe>
	{
		if(schedule2RelayAndSwitchTab[2]) changeTFTScheduleRelayLights(3, 0);//if is ON -> Turn OFF
 800820c:	4b65      	ldr	r3, [pc, #404]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800820e:	789b      	ldrb	r3, [r3, #2]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xa2>
 8008214:	2100      	movs	r1, #0
 8008216:	2003      	movs	r0, #3
 8008218:	f7ff f975 	bl	8007506 <changeTFTScheduleRelayLights>
 800821c:	e003      	b.n	8008226 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xaa>
		else changeTFTScheduleRelayLights(3, 1);//if is OFF -> Turn ON
 800821e:	2101      	movs	r1, #1
 8008220:	2003      	movs	r0, #3
 8008222:	f7ff f970 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[2] = !schedule2RelayAndSwitchTab[2]; // update current state in tab holding state of day in week
 8008226:	4b5f      	ldr	r3, [pc, #380]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008228:	789b      	ldrb	r3, [r3, #2]
 800822a:	2b00      	cmp	r3, #0
 800822c:	bf0c      	ite	eq
 800822e:	2301      	moveq	r3, #1
 8008230:	2300      	movne	r3, #0
 8008232:	b2db      	uxtb	r3, r3
 8008234:	461a      	mov	r2, r3
 8008236:	4b5b      	ldr	r3, [pc, #364]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008238:	709a      	strb	r2, [r3, #2]
	}
	// R4
	if((x >= DAY_CHECK_RELAY_BUTTON_4_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_4_X + DAY_CHECK_BUTTON_W)))
 800823a:	88fb      	ldrh	r3, [r7, #6]
 800823c:	2b74      	cmp	r3, #116	; 0x74
 800823e:	d919      	bls.n	8008274 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	2b89      	cmp	r3, #137	; 0x89
 8008244:	d816      	bhi.n	8008274 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xf8>
	{
		if(schedule2RelayAndSwitchTab[3]) changeTFTScheduleRelayLights(4, 0);//if is ON -> Turn OFF
 8008246:	4b57      	ldr	r3, [pc, #348]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008248:	78db      	ldrb	r3, [r3, #3]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d004      	beq.n	8008258 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xdc>
 800824e:	2100      	movs	r1, #0
 8008250:	2004      	movs	r0, #4
 8008252:	f7ff f958 	bl	8007506 <changeTFTScheduleRelayLights>
 8008256:	e003      	b.n	8008260 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0xe4>
		else changeTFTScheduleRelayLights(4, 1);//if is OFF -> Turn ON
 8008258:	2101      	movs	r1, #1
 800825a:	2004      	movs	r0, #4
 800825c:	f7ff f953 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[3] = !schedule2RelayAndSwitchTab[3]; // update current state in tab holding state of day in week
 8008260:	4b50      	ldr	r3, [pc, #320]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008262:	78db      	ldrb	r3, [r3, #3]
 8008264:	2b00      	cmp	r3, #0
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	4b4c      	ldr	r3, [pc, #304]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008272:	70da      	strb	r2, [r3, #3]
	}
	// WS2812b
	if((x >= DAY_CHECK_RELAY_BUTTON_5_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_5_X + DAY_CHECK_BUTTON_W)))
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	2b94      	cmp	r3, #148	; 0x94
 8008278:	d919      	bls.n	80082ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	2ba9      	cmp	r3, #169	; 0xa9
 800827e:	d816      	bhi.n	80082ae <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x132>
	{
		if(schedule2RelayAndSwitchTab[4]) changeTFTScheduleRelayLights(5, 0);//if is ON -> Turn OFF
 8008280:	4b48      	ldr	r3, [pc, #288]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d004      	beq.n	8008292 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x116>
 8008288:	2100      	movs	r1, #0
 800828a:	2005      	movs	r0, #5
 800828c:	f7ff f93b 	bl	8007506 <changeTFTScheduleRelayLights>
 8008290:	e003      	b.n	800829a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x11e>
		else changeTFTScheduleRelayLights(5, 1);//if is OFF -> Turn ON
 8008292:	2101      	movs	r1, #1
 8008294:	2005      	movs	r0, #5
 8008296:	f7ff f936 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[4] = !schedule2RelayAndSwitchTab[4]; // update current state in tab holding state of day in week
 800829a:	4b42      	ldr	r3, [pc, #264]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800829c:	791b      	ldrb	r3, [r3, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf0c      	ite	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	2300      	movne	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	4b3e      	ldr	r3, [pc, #248]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80082ac:	711a      	strb	r2, [r3, #4]
	}
	// L1
	if((x >= DAY_CHECK_RELAY_BUTTON_6_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_6_X + DAY_CHECK_BUTTON_W)))
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	2bb4      	cmp	r3, #180	; 0xb4
 80082b2:	d919      	bls.n	80082e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
 80082b4:	88fb      	ldrh	r3, [r7, #6]
 80082b6:	2bc9      	cmp	r3, #201	; 0xc9
 80082b8:	d816      	bhi.n	80082e8 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x16c>
	{
		if(schedule2RelayAndSwitchTab[5]) changeTFTScheduleRelayLights(6, 0);//if is ON -> Turn OFF
 80082ba:	4b3a      	ldr	r3, [pc, #232]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x150>
 80082c2:	2100      	movs	r1, #0
 80082c4:	2006      	movs	r0, #6
 80082c6:	f7ff f91e 	bl	8007506 <changeTFTScheduleRelayLights>
 80082ca:	e003      	b.n	80082d4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x158>
		else changeTFTScheduleRelayLights(6, 1);//if is OFF -> Turn ON
 80082cc:	2101      	movs	r1, #1
 80082ce:	2006      	movs	r0, #6
 80082d0:	f7ff f919 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[5] = !schedule2RelayAndSwitchTab[5]; // update current state in tab holding state of day in week
 80082d4:	4b33      	ldr	r3, [pc, #204]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80082d6:	795b      	ldrb	r3, [r3, #5]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	bf0c      	ite	eq
 80082dc:	2301      	moveq	r3, #1
 80082de:	2300      	movne	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	4b2f      	ldr	r3, [pc, #188]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80082e6:	715a      	strb	r2, [r3, #5]
	}
	// L2
	if((x >= DAY_CHECK_RELAY_BUTTON_7_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_7_X + DAY_CHECK_BUTTON_W)))
 80082e8:	88fb      	ldrh	r3, [r7, #6]
 80082ea:	2bd4      	cmp	r3, #212	; 0xd4
 80082ec:	d919      	bls.n	8008322 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2be9      	cmp	r3, #233	; 0xe9
 80082f2:	d816      	bhi.n	8008322 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1a6>
	{
		if(schedule2RelayAndSwitchTab[6]) changeTFTScheduleRelayLights(7, 0);//if is ON -> Turn OFF
 80082f4:	4b2b      	ldr	r3, [pc, #172]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 80082f6:	799b      	ldrb	r3, [r3, #6]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x18a>
 80082fc:	2100      	movs	r1, #0
 80082fe:	2007      	movs	r0, #7
 8008300:	f7ff f901 	bl	8007506 <changeTFTScheduleRelayLights>
 8008304:	e003      	b.n	800830e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x192>
		else changeTFTScheduleRelayLights(7, 1);//if is OFF -> Turn ON
 8008306:	2101      	movs	r1, #1
 8008308:	2007      	movs	r0, #7
 800830a:	f7ff f8fc 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[6] = !schedule2RelayAndSwitchTab[6]; // update current state in tab holding state of day in week
 800830e:	4b25      	ldr	r3, [pc, #148]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008310:	799b      	ldrb	r3, [r3, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	bf0c      	ite	eq
 8008316:	2301      	moveq	r3, #1
 8008318:	2300      	movne	r3, #0
 800831a:	b2db      	uxtb	r3, r3
 800831c:	461a      	mov	r2, r3
 800831e:	4b21      	ldr	r3, [pc, #132]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008320:	719a      	strb	r2, [r3, #6]
	}
	// L3
	if((x >= DAY_CHECK_RELAY_BUTTON_8_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_8_X + DAY_CHECK_BUTTON_W)))
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2bf4      	cmp	r3, #244	; 0xf4
 8008326:	d91a      	bls.n	800835e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800832e:	d216      	bcs.n	800835e <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1e2>
	{
		if(schedule2RelayAndSwitchTab[7]) changeTFTScheduleRelayLights(8, 0);//if is ON -> Turn OFF
 8008330:	4b1c      	ldr	r3, [pc, #112]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008332:	79db      	ldrb	r3, [r3, #7]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1c6>
 8008338:	2100      	movs	r1, #0
 800833a:	2008      	movs	r0, #8
 800833c:	f7ff f8e3 	bl	8007506 <changeTFTScheduleRelayLights>
 8008340:	e003      	b.n	800834a <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x1ce>
		else changeTFTScheduleRelayLights(8, 1);//if is OFF -> Turn ON
 8008342:	2101      	movs	r1, #1
 8008344:	2008      	movs	r0, #8
 8008346:	f7ff f8de 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[7] = !schedule2RelayAndSwitchTab[7]; // update current state in tab holding state of day in week
 800834a:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800834c:	79db      	ldrb	r3, [r3, #7]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bf0c      	ite	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	2300      	movne	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800835c:	71da      	strb	r2, [r3, #7]
	}
	// L4
	if((x >= DAY_CHECK_RELAY_BUTTON_9_X)&&(x <= (DAY_CHECK_RELAY_BUTTON_9_X + DAY_CHECK_BUTTON_W)))
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8008364:	d91a      	bls.n	800839c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 800836c:	d216      	bcs.n	800839c <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x220>
	{
		if(schedule2RelayAndSwitchTab[8]) changeTFTScheduleRelayLights(9, 0);//if is ON -> Turn OFF
 800836e:	4b0d      	ldr	r3, [pc, #52]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 8008370:	7a1b      	ldrb	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x204>
 8008376:	2100      	movs	r1, #0
 8008378:	2009      	movs	r0, #9
 800837a:	f7ff f8c4 	bl	8007506 <changeTFTScheduleRelayLights>
 800837e:	e003      	b.n	8008388 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x20c>
		else changeTFTScheduleRelayLights(9, 1);//if is OFF -> Turn ON
 8008380:	2101      	movs	r1, #1
 8008382:	2009      	movs	r0, #9
 8008384:	f7ff f8bf 	bl	8007506 <changeTFTScheduleRelayLights>
		schedule2RelayAndSwitchTab[8] = !schedule2RelayAndSwitchTab[8]; // update current state in tab holding state of day in week
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800838a:	7a1b      	ldrb	r3, [r3, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf0c      	ite	eq
 8008390:	2301      	moveq	r3, #1
 8008392:	2300      	movne	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	461a      	mov	r2, r3
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <MenuTFTSchedule2ActivityRelaysAndLightsRow+0x228>)
 800839a:	721a      	strb	r2, [r3, #8]
	}
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000278 	.word	0x20000278

080083a8 <UART_ParseLine>:
 * 		DIST=%lu\n				// Current distance to water
 *
 */

void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b094      	sub	sp, #80	; 0x50
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	char BufferReceive[BUFFOR_SIZE];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 f87f 	bl	80094ba <UARTDMA_GetLineFromReceiveBuffer>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d15f      	bne.n	8008482 <UART_ParseLine+0xda>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 80083c2:	f107 0308 	add.w	r3, r7, #8
 80083c6:	4931      	ldr	r1, [pc, #196]	; (800848c <UART_ParseLine+0xe4>)
 80083c8:	4618      	mov	r0, r3
 80083ca:	f009 fcf1 	bl	8011db0 <strtok>
 80083ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 80083d0:	492f      	ldr	r1, [pc, #188]	; (8008490 <UART_ParseLine+0xe8>)
 80083d2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80083d4:	f7f7 ff04 	bl	80001e0 <strcmp>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 80083de:	f000 f869 	bl	80084b4 <UART_ParseLED>
	  {
		  UART_ParseAnswDist();
	  }
	  //TODO: DODAC OBSLUGE PARSOWANIA BLEDOW
	}
}
 80083e2:	e04e      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASTATE") == 0)
 80083e4:	492b      	ldr	r1, [pc, #172]	; (8008494 <UART_ParseLine+0xec>)
 80083e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80083e8:	f7f7 fefa 	bl	80001e0 <strcmp>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <UART_ParseLine+0x50>
		  UART_ParseAnswStatus();
 80083f2:	f000 f8ad 	bl	8008550 <UART_ParseAnswStatus>
}
 80083f6:	e044      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ATEMP") == 0) // Answear about current Temperature
 80083f8:	4927      	ldr	r1, [pc, #156]	; (8008498 <UART_ParseLine+0xf0>)
 80083fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80083fc:	f7f7 fef0 	bl	80001e0 <strcmp>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <UART_ParseLine+0x64>
		  UART_ParseAnswTemp();
 8008406:	f000 f8ab 	bl	8008560 <UART_ParseAnswTemp>
}
 800840a:	e03a      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "APRES") == 0) // Answear about current Presure
 800840c:	4923      	ldr	r1, [pc, #140]	; (800849c <UART_ParseLine+0xf4>)
 800840e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008410:	f7f7 fee6 	bl	80001e0 <strcmp>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <UART_ParseLine+0x78>
		  UART_ParseAnswPres();
 800841a:	f000 f945 	bl	80086a8 <UART_ParseAnswPres>
}
 800841e:	e030      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHSTATE") == 0) // Answear on change status order
 8008420:	491f      	ldr	r1, [pc, #124]	; (80084a0 <UART_ParseLine+0xf8>)
 8008422:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008424:	f7f7 fedc 	bl	80001e0 <strcmp>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d102      	bne.n	8008434 <UART_ParseLine+0x8c>
		  UART_ParseAnswChangeRelayState();
 800842e:	f000 f9bd 	bl	80087ac <UART_ParseAnswChangeRelayState>
}
 8008432:	e026      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ACHLIGHT") == 0) // Answear on change status order
 8008434:	491b      	ldr	r1, [pc, #108]	; (80084a4 <UART_ParseLine+0xfc>)
 8008436:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008438:	f7f7 fed2 	bl	80001e0 <strcmp>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <UART_ParseLine+0xa0>
		  UART_ParseAnswChangeLightState();
 8008442:	f000 f9ba 	bl	80087ba <UART_ParseAnswChangeLightState>
}
 8008446:	e01c      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ASSTATUS") == 0) // Answear about current Switch Status
 8008448:	4917      	ldr	r1, [pc, #92]	; (80084a8 <UART_ParseLine+0x100>)
 800844a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800844c:	f7f7 fec8 	bl	80001e0 <strcmp>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <UART_ParseLine+0xb4>
		  UART_ParseAnswRelayStateStatus();
 8008456:	f000 f9b7 	bl	80087c8 <UART_ParseAnswRelayStateStatus>
}
 800845a:	e012      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "ALSTATUS") == 0) // Answear about current Switch Status
 800845c:	4913      	ldr	r1, [pc, #76]	; (80084ac <UART_ParseLine+0x104>)
 800845e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008460:	f7f7 febe 	bl	80001e0 <strcmp>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <UART_ParseLine+0xc8>
		  UART_ParseAnswLightsStateStatus();
 800846a:	f000 fa13 	bl	8008894 <UART_ParseAnswLightsStateStatus>
}
 800846e:	e008      	b.n	8008482 <UART_ParseLine+0xda>
	  else if (strcmp(ParsePointer, "DIST") == 0) // Answear about current Switch Status
 8008470:	490f      	ldr	r1, [pc, #60]	; (80084b0 <UART_ParseLine+0x108>)
 8008472:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008474:	f7f7 feb4 	bl	80001e0 <strcmp>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <UART_ParseLine+0xda>
		  UART_ParseAnswDist();
 800847e:	f000 f959 	bl	8008734 <UART_ParseAnswDist>
}
 8008482:	bf00      	nop
 8008484:	3750      	adds	r7, #80	; 0x50
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	080152f4 	.word	0x080152f4
 8008490:	080152f8 	.word	0x080152f8
 8008494:	080152fc 	.word	0x080152fc
 8008498:	08015304 	.word	0x08015304
 800849c:	0801530c 	.word	0x0801530c
 80084a0:	08015314 	.word	0x08015314
 80084a4:	08015320 	.word	0x08015320
 80084a8:	0801532c 	.word	0x0801532c
 80084ac:	08015338 	.word	0x08015338
 80084b0:	08015344 	.word	0x08015344

080084b4 <UART_ParseLED>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Parsing testing function to change state of LED
// "LED=1\n"
void UART_ParseLED()
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80084ba:	491f      	ldr	r1, [pc, #124]	; (8008538 <UART_ParseLED+0x84>)
 80084bc:	2000      	movs	r0, #0
 80084be:	f009 fc77 	bl	8011db0 <strtok>
 80084c2:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d031      	beq.n	8008530 <UART_ParseLED+0x7c>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b2f      	cmp	r3, #47	; 0x2f
 80084d2:	d903      	bls.n	80084dc <UART_ParseLED+0x28>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b39      	cmp	r3, #57	; 0x39
 80084da:	d904      	bls.n	80084e6 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR); // Print message
 80084dc:	4917      	ldr	r1, [pc, #92]	; (800853c <UART_ParseLED+0x88>)
 80084de:	4818      	ldr	r0, [pc, #96]	; (8008540 <UART_ParseLED+0x8c>)
 80084e0:	f001 f81c 	bl	800951c <UARTDMA_Print>
			return;	// And exit parsing
 80084e4:	e024      	b.n	8008530 <UART_ParseLED+0x7c>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f007 ff51 	bl	801038e <atoi>
 80084ec:	4603      	mov	r3, r0
 80084ee:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10a      	bne.n	800850c <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_RESET);
 80084f6:	2200      	movs	r2, #0
 80084f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80084fc:	4811      	ldr	r0, [pc, #68]	; (8008544 <UART_ParseLED+0x90>)
 80084fe:	f002 f9b1 	bl	800a864 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=On\r\n");
 8008502:	4911      	ldr	r1, [pc, #68]	; (8008548 <UART_ParseLED+0x94>)
 8008504:	480e      	ldr	r0, [pc, #56]	; (8008540 <UART_ParseLED+0x8c>)
 8008506:	f001 f809 	bl	800951c <UARTDMA_Print>
 800850a:	e011      	b.n	8008530 <UART_ParseLED+0x7c>

		}
		else if(LedState == 0) // LED OFF
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(BP_USER_LED_GPIO_Port, BP_USER_LED_Pin, GPIO_PIN_SET);
 8008512:	2201      	movs	r2, #1
 8008514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008518:	480a      	ldr	r0, [pc, #40]	; (8008544 <UART_ParseLED+0x90>)
 800851a:	f002 f9a3 	bl	800a864 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma2, "LED=Off\r\n");
 800851e:	490b      	ldr	r1, [pc, #44]	; (800854c <UART_ParseLED+0x98>)
 8008520:	4807      	ldr	r0, [pc, #28]	; (8008540 <UART_ParseLED+0x8c>)
 8008522:	f000 fffb 	bl	800951c <UARTDMA_Print>
 8008526:	e003      	b.n	8008530 <UART_ParseLED+0x7c>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, LED_FORMAT_ERROR);
 8008528:	4904      	ldr	r1, [pc, #16]	; (800853c <UART_ParseLED+0x88>)
 800852a:	4805      	ldr	r0, [pc, #20]	; (8008540 <UART_ParseLED+0x8c>)
 800852c:	f000 fff6 	bl	800951c <UARTDMA_Print>
		}
	}
}
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	0801534c 	.word	0x0801534c
 800853c:	08015350 	.word	0x08015350
 8008540:	200004a4 	.word	0x200004a4
 8008544:	40020800 	.word	0x40020800
 8008548:	08015360 	.word	0x08015360
 800854c:	0801536c 	.word	0x0801536c

08008550 <UART_ParseAnswStatus>:

//
// Parsing information about current second uC state
//"ASTATE=1\n"
void UART_ParseAnswStatus()
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
	//TODO: Add handling of state machine
}
 8008554:	bf00      	nop
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
	...

08008560 <UART_ParseAnswTemp>:

//
// Parsing information about current temperature
//"ATEMP=23.45000\n"
void UART_ParseAnswTemp()
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af02      	add	r7, sp, #8
	uint8_t NrCzujnika = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	73fb      	strb	r3, [r7, #15]
	char* ParsePointer = strtok(NULL, ",");
 800856a:	4947      	ldr	r1, [pc, #284]	; (8008688 <UART_ParseAnswTemp+0x128>)
 800856c:	2000      	movs	r0, #0
 800856e:	f009 fc1f 	bl	8011db0 <strtok>
 8008572:	60b8      	str	r0, [r7, #8]
	if(strlen(ParsePointer) > 0) // If string exists
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 8081 	beq.w	8008680 <UART_ParseAnswTemp+0x120>
	{
			NrCzujnika = atoi(ParsePointer);
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	f007 ff05 	bl	801038e <atoi>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
			if(strlen(ParsePointer) > 0)
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d010      	beq.n	80085b2 <UART_ParseAnswTemp+0x52>
			{
				char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 8008590:	493d      	ldr	r1, [pc, #244]	; (8008688 <UART_ParseAnswTemp+0x128>)
 8008592:	2000      	movs	r0, #0
 8008594:	f009 fc0c 	bl	8011db0 <strtok>
 8008598:	6078      	str	r0, [r7, #4]
				CTemp = atof(ParsePointer); // If there are no chars, change string to integer
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f007 fef4 	bl	8010388 <atof>
 80085a0:	ec53 2b10 	vmov	r2, r3, d0
 80085a4:	4610      	mov	r0, r2
 80085a6:	4619      	mov	r1, r3
 80085a8:	f7f8 fb36 	bl	8000c18 <__aeabi_d2f>
 80085ac:	4603      	mov	r3, r0
 80085ae:	4a37      	ldr	r2, [pc, #220]	; (800868c <UART_ParseAnswTemp+0x12c>)
 80085b0:	6013      	str	r3, [r2, #0]
			}
			//Only if on the screen are Parameters, update current Temp
			if(State == MENUTFT_PARAMETERS)
 80085b2:	4b37      	ldr	r3, [pc, #220]	; (8008690 <UART_ParseAnswTemp+0x130>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d162      	bne.n	8008680 <UART_ParseAnswTemp+0x120>
			{
				if(NrCzujnika == 1)
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d119      	bne.n	80085f4 <UART_ParseAnswTemp+0x94>
				{
						EF_SetFont(&arialBlack_20ptFontInfo);
 80085c0:	4834      	ldr	r0, [pc, #208]	; (8008694 <UART_ParseAnswTemp+0x134>)
 80085c2:	f7f9 f895 	bl	80016f0 <EF_SetFont>
						sprintf((char*)Msg, "Temp. zewn: %.2f`C ", CTemp);
 80085c6:	4b31      	ldr	r3, [pc, #196]	; (800868c <UART_ParseAnswTemp+0x12c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f7 ffd4 	bl	8000578 <__aeabi_f2d>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4930      	ldr	r1, [pc, #192]	; (8008698 <UART_ParseAnswTemp+0x138>)
 80085d6:	4831      	ldr	r0, [pc, #196]	; (800869c <UART_ParseAnswTemp+0x13c>)
 80085d8:	f008 fd90 	bl	80110fc <siprintf>
						EF_PutString(Msg, TEMP_ZEW_POZ_X, TEMP_ZEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80085dc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80085e0:	9301      	str	r3, [sp, #4]
 80085e2:	2301      	movs	r3, #1
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	2250      	movs	r2, #80	; 0x50
 80085ea:	2114      	movs	r1, #20
 80085ec:	482b      	ldr	r0, [pc, #172]	; (800869c <UART_ParseAnswTemp+0x13c>)
 80085ee:	f7f9 fa99 	bl	8001b24 <EF_PutString>

				}
			}
		}
		//UARTDMA_Print(&huartdma2, "TEMPUPSUC\n");
	}
 80085f2:	e045      	b.n	8008680 <UART_ParseAnswTemp+0x120>
				else if(NrCzujnika == 2)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d142      	bne.n	8008680 <UART_ParseAnswTemp+0x120>
						if (CTemp == 0.0) // Error in connection to ds18b20
 80085fa:	4b24      	ldr	r3, [pc, #144]	; (800868c <UART_ParseAnswTemp+0x12c>)
 80085fc:	edd3 7a00 	vldr	s15, [r3]
 8008600:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008608:	d11d      	bne.n	8008646 <UART_ParseAnswTemp+0xe6>
							CTemp = LCTemp;
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <UART_ParseAnswTemp+0x140>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a1f      	ldr	r2, [pc, #124]	; (800868c <UART_ParseAnswTemp+0x12c>)
 8008610:	6013      	str	r3, [r2, #0]
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008612:	4820      	ldr	r0, [pc, #128]	; (8008694 <UART_ParseAnswTemp+0x134>)
 8008614:	f7f9 f86c 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 8008618:	4b1c      	ldr	r3, [pc, #112]	; (800868c <UART_ParseAnswTemp+0x12c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f7f7 ffab 	bl	8000578 <__aeabi_f2d>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	491f      	ldr	r1, [pc, #124]	; (80086a4 <UART_ParseAnswTemp+0x144>)
 8008628:	481c      	ldr	r0, [pc, #112]	; (800869c <UART_ParseAnswTemp+0x13c>)
 800862a:	f008 fd67 	bl	80110fc <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 800862e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	2301      	movs	r3, #1
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	226e      	movs	r2, #110	; 0x6e
 800863c:	2114      	movs	r1, #20
 800863e:	4817      	ldr	r0, [pc, #92]	; (800869c <UART_ParseAnswTemp+0x13c>)
 8008640:	f7f9 fa70 	bl	8001b24 <EF_PutString>
	}
 8008644:	e01c      	b.n	8008680 <UART_ParseAnswTemp+0x120>
							EF_SetFont(&arialBlack_20ptFontInfo);
 8008646:	4813      	ldr	r0, [pc, #76]	; (8008694 <UART_ParseAnswTemp+0x134>)
 8008648:	f7f9 f852 	bl	80016f0 <EF_SetFont>
							sprintf((char*)Msg, "Temp. wewn: %.2f`C ", CTemp);
 800864c:	4b0f      	ldr	r3, [pc, #60]	; (800868c <UART_ParseAnswTemp+0x12c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4618      	mov	r0, r3
 8008652:	f7f7 ff91 	bl	8000578 <__aeabi_f2d>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4912      	ldr	r1, [pc, #72]	; (80086a4 <UART_ParseAnswTemp+0x144>)
 800865c:	480f      	ldr	r0, [pc, #60]	; (800869c <UART_ParseAnswTemp+0x13c>)
 800865e:	f008 fd4d 	bl	80110fc <siprintf>
							EF_PutString(Msg, TEMP_WEW_POZ_X, TEMP_WEW_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008662:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008666:	9301      	str	r3, [sp, #4]
 8008668:	2301      	movs	r3, #1
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2300      	movs	r3, #0
 800866e:	226e      	movs	r2, #110	; 0x6e
 8008670:	2114      	movs	r1, #20
 8008672:	480a      	ldr	r0, [pc, #40]	; (800869c <UART_ParseAnswTemp+0x13c>)
 8008674:	f7f9 fa56 	bl	8001b24 <EF_PutString>
							LCTemp = CTemp;
 8008678:	4b04      	ldr	r3, [pc, #16]	; (800868c <UART_ParseAnswTemp+0x12c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a08      	ldr	r2, [pc, #32]	; (80086a0 <UART_ParseAnswTemp+0x140>)
 800867e:	6013      	str	r3, [r2, #0]
	}
 8008680:	bf00      	nop
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	0801534c 	.word	0x0801534c
 800868c:	20000294 	.word	0x20000294
 8008690:	20000290 	.word	0x20000290
 8008694:	08018068 	.word	0x08018068
 8008698:	08015378 	.word	0x08015378
 800869c:	200002fc 	.word	0x200002fc
 80086a0:	20000298 	.word	0x20000298
 80086a4:	0801538c 	.word	0x0801538c

080086a8 <UART_ParseAnswPres>:

//
// Parsing information about current pressure
// "APRES=1014.200\n"
void UART_ParseAnswPres()
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 80086ae:	491b      	ldr	r1, [pc, #108]	; (800871c <UART_ParseAnswPres+0x74>)
 80086b0:	2000      	movs	r0, #0
 80086b2:	f009 fb7d 	bl	8011db0 <strtok>
 80086b6:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d028      	beq.n	8008712 <UART_ParseAnswPres+0x6a>
	{
		CPres = atof(ParsePointer); // If there are no chars, change string to integer
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f007 fe61 	bl	8010388 <atof>
 80086c6:	ec53 2b10 	vmov	r2, r3, d0
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	f7f8 faa3 	bl	8000c18 <__aeabi_d2f>
 80086d2:	4603      	mov	r3, r0
 80086d4:	4a12      	ldr	r2, [pc, #72]	; (8008720 <UART_ParseAnswPres+0x78>)
 80086d6:	6013      	str	r3, [r2, #0]

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <UART_ParseAnswPres+0x7c>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d118      	bne.n	8008712 <UART_ParseAnswPres+0x6a>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 80086e0:	4811      	ldr	r0, [pc, #68]	; (8008728 <UART_ParseAnswPres+0x80>)
 80086e2:	f7f9 f805 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "Ciśnienie: %.1fhPa ", CPres);
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <UART_ParseAnswPres+0x78>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f7 ff44 	bl	8000578 <__aeabi_f2d>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	490d      	ldr	r1, [pc, #52]	; (800872c <UART_ParseAnswPres+0x84>)
 80086f6:	480e      	ldr	r0, [pc, #56]	; (8008730 <UART_ParseAnswPres+0x88>)
 80086f8:	f008 fd00 	bl	80110fc <siprintf>
			EF_PutString(Msg, CISN_POZ_X, CISN_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 80086fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	2301      	movs	r3, #1
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	2300      	movs	r3, #0
 8008708:	22aa      	movs	r2, #170	; 0xaa
 800870a:	2114      	movs	r1, #20
 800870c:	4808      	ldr	r0, [pc, #32]	; (8008730 <UART_ParseAnswPres+0x88>)
 800870e:	f7f9 fa09 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	0801534c 	.word	0x0801534c
 8008720:	2000029c 	.word	0x2000029c
 8008724:	20000290 	.word	0x20000290
 8008728:	08018068 	.word	0x08018068
 800872c:	080153a0 	.word	0x080153a0
 8008730:	200002fc 	.word	0x200002fc

08008734 <UART_ParseAnswDist>:

//
// Parsing information about current distance between sensor and water - water lvl
// "DIST=320\n"
void UART_ParseAnswDist()
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af02      	add	r7, sp, #8
	char* ParsePointer = strtok(NULL, ",");
 800873a:	4916      	ldr	r1, [pc, #88]	; (8008794 <UART_ParseAnswDist+0x60>)
 800873c:	2000      	movs	r0, #0
 800873e:	f009 fb37 	bl	8011db0 <strtok>
 8008742:	6078      	str	r0, [r7, #4]
	if(strlen(ParsePointer) > 0) // If string exists
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d01f      	beq.n	800878c <UART_ParseAnswDist+0x58>
	{
		CDist2water = atoi(ParsePointer); // If there are no chars, change string to integer
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f007 fe1e 	bl	801038e <atoi>
 8008752:	4603      	mov	r3, r0
 8008754:	461a      	mov	r2, r3
 8008756:	4b10      	ldr	r3, [pc, #64]	; (8008798 <UART_ParseAnswDist+0x64>)
 8008758:	601a      	str	r2, [r3, #0]
		// TODO: CHECK IF WATER LVL IS CORRECT

		//Only if on the screen are Parameters, update current Pressure
		if(State == MENUTFT_PARAMETERS)
 800875a:	4b10      	ldr	r3, [pc, #64]	; (800879c <UART_ParseAnswDist+0x68>)
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d114      	bne.n	800878c <UART_ParseAnswDist+0x58>
		{
			EF_SetFont(&arialBlack_20ptFontInfo);
 8008762:	480f      	ldr	r0, [pc, #60]	; (80087a0 <UART_ParseAnswDist+0x6c>)
 8008764:	f7f8 ffc4 	bl	80016f0 <EF_SetFont>
			sprintf((char*)Msg, "-%ldmm  ", CDist2water);
 8008768:	4b0b      	ldr	r3, [pc, #44]	; (8008798 <UART_ParseAnswDist+0x64>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	490d      	ldr	r1, [pc, #52]	; (80087a4 <UART_ParseAnswDist+0x70>)
 8008770:	480d      	ldr	r0, [pc, #52]	; (80087a8 <UART_ParseAnswDist+0x74>)
 8008772:	f008 fcc3 	bl	80110fc <siprintf>
			EF_PutString(Msg, POZ_WODY_POZ_X+153, POZ_WODY_POZ_Y, ILI9341_BLACK, BG_COLOR, ILI9341_LIGHTGREY);
 8008776:	f24c 6318 	movw	r3, #50712	; 0xc618
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	2301      	movs	r3, #1
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	2300      	movs	r3, #0
 8008782:	228c      	movs	r2, #140	; 0x8c
 8008784:	21ad      	movs	r1, #173	; 0xad
 8008786:	4808      	ldr	r0, [pc, #32]	; (80087a8 <UART_ParseAnswDist+0x74>)
 8008788:	f7f9 f9cc 	bl	8001b24 <EF_PutString>
		}
		//UARTDMA_Print(&huartdma2, "PRESUPSUC\n");
	}
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0801534c 	.word	0x0801534c
 8008798:	200002a4 	.word	0x200002a4
 800879c:	20000290 	.word	0x20000290
 80087a0:	08018068 	.word	0x08018068
 80087a4:	080153b8 	.word	0x080153b8
 80087a8:	200002fc 	.word	0x200002fc

080087ac <UART_ParseAnswChangeRelayState>:



void UART_ParseAnswChangeRelayState()
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
	//TODO!
}
 80087b0:	bf00      	nop
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <UART_ParseAnswChangeLightState>:

void UART_ParseAnswChangeLightState()
{
 80087ba:	b480      	push	{r7}
 80087bc:	af00      	add	r7, sp, #0
	//TODO!
}
 80087be:	bf00      	nop
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_ParseAnswRelayStateStatus>:

//
// Parsing information about current state of switch
// "ASTATESTATUS=0,1,1,0\n" // Switch1-> 0, Switch2 -> 1, Switch3 -> 1, Switch4 -> 0
void UART_ParseAnswRelayStateStatus()
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 80087ce:	2300      	movs	r3, #0
 80087d0:	71fb      	strb	r3, [r7, #7]
 80087d2:	e04a      	b.n	800886a <UART_ParseAnswRelayStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80087d4:	4928      	ldr	r1, [pc, #160]	; (8008878 <UART_ParseAnswRelayStateStatus+0xb0>)
 80087d6:	2000      	movs	r0, #0
 80087d8:	f009 faea 	bl	8011db0 <strtok>
 80087dc:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02f      	beq.n	8008846 <UART_ParseAnswRelayStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80087e6:	2300      	movs	r3, #0
 80087e8:	71bb      	strb	r3, [r7, #6]
 80087ea:	e025      	b.n	8008838 <UART_ParseAnswRelayStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80087ec:	79bb      	ldrb	r3, [r7, #6]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b2f      	cmp	r3, #47	; 0x2f
 80087f6:	d905      	bls.n	8008804 <UART_ParseAnswRelayStateStatus+0x3c>
 80087f8:	79bb      	ldrb	r3, [r7, #6]
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	4413      	add	r3, r2
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b39      	cmp	r3, #57	; 0x39
 8008802:	d90e      	bls.n	8008822 <UART_ParseAnswRelayStateStatus+0x5a>
 8008804:	79bb      	ldrb	r3, [r7, #6]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4413      	add	r3, r2
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b2e      	cmp	r3, #46	; 0x2e
 800880e:	d008      	beq.n	8008822 <UART_ParseAnswRelayStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 8008810:	491a      	ldr	r1, [pc, #104]	; (800887c <UART_ParseAnswRelayStateStatus+0xb4>)
 8008812:	481b      	ldr	r0, [pc, #108]	; (8008880 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008814:	f008 fc72 	bl	80110fc <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 8008818:	4919      	ldr	r1, [pc, #100]	; (8008880 <UART_ParseAnswRelayStateStatus+0xb8>)
 800881a:	481a      	ldr	r0, [pc, #104]	; (8008884 <UART_ParseAnswRelayStateStatus+0xbc>)
 800881c:	f000 fe7e 	bl	800951c <UARTDMA_Print>
					return;	// And exit parsing
 8008820:	e026      	b.n	8008870 <UART_ParseAnswRelayStateStatus+0xa8>
				}
				SwitchesButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 8008822:	6838      	ldr	r0, [r7, #0]
 8008824:	f007 fdb3 	bl	801038e <atoi>
 8008828:	4602      	mov	r2, r0
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	b2d1      	uxtb	r1, r2
 800882e:	4a16      	ldr	r2, [pc, #88]	; (8008888 <UART_ParseAnswRelayStateStatus+0xc0>)
 8008830:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8008832:	79bb      	ldrb	r3, [r7, #6]
 8008834:	3301      	adds	r3, #1
 8008836:	71bb      	strb	r3, [r7, #6]
 8008838:	79bb      	ldrb	r3, [r7, #6]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4413      	add	r3, r2
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1d3      	bne.n	80087ec <UART_ParseAnswRelayStateStatus+0x24>
 8008844:	e008      	b.n	8008858 <UART_ParseAnswRelayStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008846:	4911      	ldr	r1, [pc, #68]	; (800888c <UART_ParseAnswRelayStateStatus+0xc4>)
 8008848:	480d      	ldr	r0, [pc, #52]	; (8008880 <UART_ParseAnswRelayStateStatus+0xb8>)
 800884a:	f008 fc57 	bl	80110fc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800884e:	490c      	ldr	r1, [pc, #48]	; (8008880 <UART_ParseAnswRelayStateStatus+0xb8>)
 8008850:	480c      	ldr	r0, [pc, #48]	; (8008884 <UART_ParseAnswRelayStateStatus+0xbc>)
 8008852:	f000 fe63 	bl	800951c <UARTDMA_Print>
			return;	// And exit parsing
 8008856:	e00b      	b.n	8008870 <UART_ParseAnswRelayStateStatus+0xa8>
		}
		//Update current displaying sate fo buttons
		if(State == MENUTFT_SWITCH)	drawCurrentStateOfSwitches();
 8008858:	4b0d      	ldr	r3, [pc, #52]	; (8008890 <UART_ParseAnswRelayStateStatus+0xc8>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d101      	bne.n	8008864 <UART_ParseAnswRelayStateStatus+0x9c>
 8008860:	f7fc fab8 	bl	8004dd4 <drawCurrentStateOfSwitches>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	3301      	adds	r3, #1
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d9b1      	bls.n	80087d4 <UART_ParseAnswRelayStateStatus+0xc>
	}
}
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	0801534c 	.word	0x0801534c
 800887c:	080153c4 	.word	0x080153c4
 8008880:	20000674 	.word	0x20000674
 8008884:	200004a4 	.word	0x200004a4
 8008888:	200002a8 	.word	0x200002a8
 800888c:	080153d8 	.word	0x080153d8
 8008890:	20000290 	.word	0x20000290

08008894 <UART_ParseAnswLightsStateStatus>:

//
// Parsing information about current state of lights
// "ALIGHTSSTATUS=0,1,1,0\n" // Light1-> 0, Light2 -> 1, Light3 -> 1, Light4 -> 0
void UART_ParseAnswLightsStateStatus()
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators

	for(i = 0; i<4; i++) // 4 parameters are expected
 800889a:	2300      	movs	r3, #0
 800889c:	71fb      	strb	r3, [r7, #7]
 800889e:	e04a      	b.n	8008936 <UART_ParseAnswLightsStateStatus+0xa2>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80088a0:	4928      	ldr	r1, [pc, #160]	; (8008944 <UART_ParseAnswLightsStateStatus+0xb0>)
 80088a2:	2000      	movs	r0, #0
 80088a4:	f009 fa84 	bl	8011db0 <strtok>
 80088a8:	6038      	str	r0, [r7, #0]
		if(strlen(ParsePointer) > 0) // If string exists
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d02f      	beq.n	8008912 <UART_ParseAnswLightsStateStatus+0x7e>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80088b2:	2300      	movs	r3, #0
 80088b4:	71bb      	strb	r3, [r7, #6]
 80088b6:	e025      	b.n	8008904 <UART_ParseAnswLightsStateStatus+0x70>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80088b8:	79bb      	ldrb	r3, [r7, #6]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4413      	add	r3, r2
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b2f      	cmp	r3, #47	; 0x2f
 80088c2:	d905      	bls.n	80088d0 <UART_ParseAnswLightsStateStatus+0x3c>
 80088c4:	79bb      	ldrb	r3, [r7, #6]
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4413      	add	r3, r2
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b39      	cmp	r3, #57	; 0x39
 80088ce:	d90e      	bls.n	80088ee <UART_ParseAnswLightsStateStatus+0x5a>
 80088d0:	79bb      	ldrb	r3, [r7, #6]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4413      	add	r3, r2
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b2e      	cmp	r3, #46	; 0x2e
 80088da:	d008      	beq.n	80088ee <UART_ParseAnswLightsStateStatus+0x5a>
				{
					sprintf(Message, "ERROR_WRONG_VALUE\n"); // If not, Error message
 80088dc:	491a      	ldr	r1, [pc, #104]	; (8008948 <UART_ParseAnswLightsStateStatus+0xb4>)
 80088de:	481b      	ldr	r0, [pc, #108]	; (800894c <UART_ParseAnswLightsStateStatus+0xb8>)
 80088e0:	f008 fc0c 	bl	80110fc <siprintf>
					UARTDMA_Print(&huartdma2, Message); // Print message
 80088e4:	4919      	ldr	r1, [pc, #100]	; (800894c <UART_ParseAnswLightsStateStatus+0xb8>)
 80088e6:	481a      	ldr	r0, [pc, #104]	; (8008950 <UART_ParseAnswLightsStateStatus+0xbc>)
 80088e8:	f000 fe18 	bl	800951c <UARTDMA_Print>
					return;	// And exit parsing
 80088ec:	e026      	b.n	800893c <UART_ParseAnswLightsStateStatus+0xa8>
				}
				// Main action to write value
				LightsButtonState[i] = atoi(ParsePointer); // If there are no chars, change string to integer
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	f007 fd4d 	bl	801038e <atoi>
 80088f4:	4602      	mov	r2, r0
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	b2d1      	uxtb	r1, r2
 80088fa:	4a16      	ldr	r2, [pc, #88]	; (8008954 <UART_ParseAnswLightsStateStatus+0xc0>)
 80088fc:	54d1      	strb	r1, [r2, r3]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80088fe:	79bb      	ldrb	r3, [r7, #6]
 8008900:	3301      	adds	r3, #1
 8008902:	71bb      	strb	r3, [r7, #6]
 8008904:	79bb      	ldrb	r3, [r7, #6]
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	4413      	add	r3, r2
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1d3      	bne.n	80088b8 <UART_ParseAnswLightsStateStatus+0x24>
 8008910:	e008      	b.n	8008924 <UART_ParseAnswLightsStateStatus+0x90>
			}
		}
		else
		{
			sprintf(Message, "ERROR_TOO_LESS_PARAMETERS\n"); // If not, Error message
 8008912:	4911      	ldr	r1, [pc, #68]	; (8008958 <UART_ParseAnswLightsStateStatus+0xc4>)
 8008914:	480d      	ldr	r0, [pc, #52]	; (800894c <UART_ParseAnswLightsStateStatus+0xb8>)
 8008916:	f008 fbf1 	bl	80110fc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 800891a:	490c      	ldr	r1, [pc, #48]	; (800894c <UART_ParseAnswLightsStateStatus+0xb8>)
 800891c:	480c      	ldr	r0, [pc, #48]	; (8008950 <UART_ParseAnswLightsStateStatus+0xbc>)
 800891e:	f000 fdfd 	bl	800951c <UARTDMA_Print>
			return;	// And exit parsing
 8008922:	e00b      	b.n	800893c <UART_ParseAnswLightsStateStatus+0xa8>
		}
		//draw button with current state
		if(State == MENUTFT_LIGHTS) drawCurrentStateOfLights();
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <UART_ParseAnswLightsStateStatus+0xc8>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	2b05      	cmp	r3, #5
 800892a:	d101      	bne.n	8008930 <UART_ParseAnswLightsStateStatus+0x9c>
 800892c:	f7fc fb5a 	bl	8004fe4 <drawCurrentStateOfLights>
	for(i = 0; i<4; i++) // 4 parameters are expected
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	3301      	adds	r3, #1
 8008934:	71fb      	strb	r3, [r7, #7]
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d9b1      	bls.n	80088a0 <UART_ParseAnswLightsStateStatus+0xc>
	}
}
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	0801534c 	.word	0x0801534c
 8008948:	080153c4 	.word	0x080153c4
 800894c:	20000674 	.word	0x20000674
 8008950:	200004a4 	.word	0x200004a4
 8008954:	200002ac 	.word	0x200002ac
 8008958:	080153d8 	.word	0x080153d8
 800895c:	20000290 	.word	0x20000290

08008960 <SendComand>:
// Ask for informations
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t SendComand(uint8_t Command)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
	uint8_t SW_Command = Command;
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	73fb      	strb	r3, [r7, #15]

	switch(SW_Command)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b27      	cmp	r3, #39	; 0x27
 8008972:	f200 8129 	bhi.w	8008bc8 <SendComand+0x268>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <SendComand+0x1c>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	08008a1d 	.word	0x08008a1d
 8008980:	08008a27 	.word	0x08008a27
 8008984:	08008a31 	.word	0x08008a31
 8008988:	08008a3b 	.word	0x08008a3b
 800898c:	08008a4f 	.word	0x08008a4f
 8008990:	08008a59 	.word	0x08008a59
 8008994:	08008a63 	.word	0x08008a63
 8008998:	08008a6d 	.word	0x08008a6d
 800899c:	08008a77 	.word	0x08008a77
 80089a0:	08008a81 	.word	0x08008a81
 80089a4:	08008a8b 	.word	0x08008a8b
 80089a8:	08008a95 	.word	0x08008a95
 80089ac:	08008a9f 	.word	0x08008a9f
 80089b0:	08008ac7 	.word	0x08008ac7
 80089b4:	08008ad1 	.word	0x08008ad1
 80089b8:	08008adb 	.word	0x08008adb
 80089bc:	08008ae5 	.word	0x08008ae5
 80089c0:	08008aef 	.word	0x08008aef
 80089c4:	08008af9 	.word	0x08008af9
 80089c8:	08008b03 	.word	0x08008b03
 80089cc:	08008b0d 	.word	0x08008b0d
 80089d0:	08008abd 	.word	0x08008abd
 80089d4:	08008b2b 	.word	0x08008b2b
 80089d8:	08008aa9 	.word	0x08008aa9
 80089dc:	08008ab3 	.word	0x08008ab3
 80089e0:	08008b17 	.word	0x08008b17
 80089e4:	08008b21 	.word	0x08008b21
 80089e8:	08008a45 	.word	0x08008a45
 80089ec:	08008b35 	.word	0x08008b35
 80089f0:	08008b3f 	.word	0x08008b3f
 80089f4:	08008b49 	.word	0x08008b49
 80089f8:	08008b53 	.word	0x08008b53
 80089fc:	08008b5d 	.word	0x08008b5d
 8008a00:	08008b67 	.word	0x08008b67
 8008a04:	08008b71 	.word	0x08008b71
 8008a08:	08008b7b 	.word	0x08008b7b
 8008a0c:	08008b85 	.word	0x08008b85
 8008a10:	08008b8f 	.word	0x08008b8f
 8008a14:	08008bb5 	.word	0x08008bb5
 8008a18:	08008bbf 	.word	0x08008bbf
		{
		case UCMD_LED_ON:
			UARTDMA_Print(&huartdma2, "LED=1\n");
 8008a1c:	496d      	ldr	r1, [pc, #436]	; (8008bd4 <SendComand+0x274>)
 8008a1e:	486e      	ldr	r0, [pc, #440]	; (8008bd8 <SendComand+0x278>)
 8008a20:	f000 fd7c 	bl	800951c <UARTDMA_Print>
			break;
 8008a24:	e0d0      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LED_OFF:
			UARTDMA_Print(&huartdma2, "LED=0\n");
 8008a26:	496d      	ldr	r1, [pc, #436]	; (8008bdc <SendComand+0x27c>)
 8008a28:	486b      	ldr	r0, [pc, #428]	; (8008bd8 <SendComand+0x278>)
 8008a2a:	f000 fd77 	bl	800951c <UARTDMA_Print>
			break;
 8008a2e:	e0cb      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_STATE_ASK:
			UARTDMA_Print(&huartdma2, "STATE=?\n");
 8008a30:	496b      	ldr	r1, [pc, #428]	; (8008be0 <SendComand+0x280>)
 8008a32:	4869      	ldr	r0, [pc, #420]	; (8008bd8 <SendComand+0x278>)
 8008a34:	f000 fd72 	bl	800951c <UARTDMA_Print>
			break;
 8008a38:	e0c6      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_TEMP_1:
			UARTDMA_Print(&huartdma2, "TEMP=1\n");
 8008a3a:	496a      	ldr	r1, [pc, #424]	; (8008be4 <SendComand+0x284>)
 8008a3c:	4866      	ldr	r0, [pc, #408]	; (8008bd8 <SendComand+0x278>)
 8008a3e:	f000 fd6d 	bl	800951c <UARTDMA_Print>
			break;
 8008a42:	e0c1      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_TEMP_2:
			UARTDMA_Print(&huartdma2, "TEMP=2\n");
 8008a44:	4968      	ldr	r1, [pc, #416]	; (8008be8 <SendComand+0x288>)
 8008a46:	4864      	ldr	r0, [pc, #400]	; (8008bd8 <SendComand+0x278>)
 8008a48:	f000 fd68 	bl	800951c <UARTDMA_Print>
			break;
 8008a4c:	e0bc      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_PRES_1:
			UARTDMA_Print(&huartdma2, "PRES=1\n");
 8008a4e:	4967      	ldr	r1, [pc, #412]	; (8008bec <SendComand+0x28c>)
 8008a50:	4861      	ldr	r0, [pc, #388]	; (8008bd8 <SendComand+0x278>)
 8008a52:	f000 fd63 	bl	800951c <UARTDMA_Print>
			break;
 8008a56:	e0b7      	b.n	8008bc8 <SendComand+0x268>

		case UCMD_RELAY_1_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,1\n");
 8008a58:	4965      	ldr	r1, [pc, #404]	; (8008bf0 <SendComand+0x290>)
 8008a5a:	485f      	ldr	r0, [pc, #380]	; (8008bd8 <SendComand+0x278>)
 8008a5c:	f000 fd5e 	bl	800951c <UARTDMA_Print>
			break;
 8008a60:	e0b2      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_1_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=1,0\n");
 8008a62:	4964      	ldr	r1, [pc, #400]	; (8008bf4 <SendComand+0x294>)
 8008a64:	485c      	ldr	r0, [pc, #368]	; (8008bd8 <SendComand+0x278>)
 8008a66:	f000 fd59 	bl	800951c <UARTDMA_Print>
			break;
 8008a6a:	e0ad      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_2_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,1\n");
 8008a6c:	4962      	ldr	r1, [pc, #392]	; (8008bf8 <SendComand+0x298>)
 8008a6e:	485a      	ldr	r0, [pc, #360]	; (8008bd8 <SendComand+0x278>)
 8008a70:	f000 fd54 	bl	800951c <UARTDMA_Print>
			break;
 8008a74:	e0a8      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_2_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=2,0\n");
 8008a76:	4961      	ldr	r1, [pc, #388]	; (8008bfc <SendComand+0x29c>)
 8008a78:	4857      	ldr	r0, [pc, #348]	; (8008bd8 <SendComand+0x278>)
 8008a7a:	f000 fd4f 	bl	800951c <UARTDMA_Print>
			break;
 8008a7e:	e0a3      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_3_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,1\n");
 8008a80:	495f      	ldr	r1, [pc, #380]	; (8008c00 <SendComand+0x2a0>)
 8008a82:	4855      	ldr	r0, [pc, #340]	; (8008bd8 <SendComand+0x278>)
 8008a84:	f000 fd4a 	bl	800951c <UARTDMA_Print>
			break;
 8008a88:	e09e      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_3_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=3,0\n");
 8008a8a:	495e      	ldr	r1, [pc, #376]	; (8008c04 <SendComand+0x2a4>)
 8008a8c:	4852      	ldr	r0, [pc, #328]	; (8008bd8 <SendComand+0x278>)
 8008a8e:	f000 fd45 	bl	800951c <UARTDMA_Print>
			break;
 8008a92:	e099      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_4_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,1\n");
 8008a94:	495c      	ldr	r1, [pc, #368]	; (8008c08 <SendComand+0x2a8>)
 8008a96:	4850      	ldr	r0, [pc, #320]	; (8008bd8 <SendComand+0x278>)
 8008a98:	f000 fd40 	bl	800951c <UARTDMA_Print>
			break;
 8008a9c:	e094      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_4_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=4,0\n");
 8008a9e:	495b      	ldr	r1, [pc, #364]	; (8008c0c <SendComand+0x2ac>)
 8008aa0:	484d      	ldr	r0, [pc, #308]	; (8008bd8 <SendComand+0x278>)
 8008aa2:	f000 fd3b 	bl	800951c <UARTDMA_Print>
			break;
 8008aa6:	e08f      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,1\n");
 8008aa8:	4959      	ldr	r1, [pc, #356]	; (8008c10 <SendComand+0x2b0>)
 8008aaa:	484b      	ldr	r0, [pc, #300]	; (8008bd8 <SendComand+0x278>)
 8008aac:	f000 fd36 	bl	800951c <UARTDMA_Print>
			break;
 8008ab0:	e08a      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHSTATE=0,0\n");
 8008ab2:	4958      	ldr	r1, [pc, #352]	; (8008c14 <SendComand+0x2b4>)
 8008ab4:	4848      	ldr	r0, [pc, #288]	; (8008bd8 <SendComand+0x278>)
 8008ab6:	f000 fd31 	bl	800951c <UARTDMA_Print>
			break;
 8008aba:	e085      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_RELAY_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHSTATE=7,7\n");
 8008abc:	4956      	ldr	r1, [pc, #344]	; (8008c18 <SendComand+0x2b8>)
 8008abe:	4846      	ldr	r0, [pc, #280]	; (8008bd8 <SendComand+0x278>)
 8008ac0:	f000 fd2c 	bl	800951c <UARTDMA_Print>
			break;
 8008ac4:	e080      	b.n	8008bc8 <SendComand+0x268>

		case UCMD_LIGHT_1_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,1\n");
 8008ac6:	4955      	ldr	r1, [pc, #340]	; (8008c1c <SendComand+0x2bc>)
 8008ac8:	4843      	ldr	r0, [pc, #268]	; (8008bd8 <SendComand+0x278>)
 8008aca:	f000 fd27 	bl	800951c <UARTDMA_Print>
			break;
 8008ace:	e07b      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_1_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=1,0\n");
 8008ad0:	4953      	ldr	r1, [pc, #332]	; (8008c20 <SendComand+0x2c0>)
 8008ad2:	4841      	ldr	r0, [pc, #260]	; (8008bd8 <SendComand+0x278>)
 8008ad4:	f000 fd22 	bl	800951c <UARTDMA_Print>
			break;
 8008ad8:	e076      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_2_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,1\n");
 8008ada:	4952      	ldr	r1, [pc, #328]	; (8008c24 <SendComand+0x2c4>)
 8008adc:	483e      	ldr	r0, [pc, #248]	; (8008bd8 <SendComand+0x278>)
 8008ade:	f000 fd1d 	bl	800951c <UARTDMA_Print>
			break;
 8008ae2:	e071      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_2_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=2,0\n");
 8008ae4:	4950      	ldr	r1, [pc, #320]	; (8008c28 <SendComand+0x2c8>)
 8008ae6:	483c      	ldr	r0, [pc, #240]	; (8008bd8 <SendComand+0x278>)
 8008ae8:	f000 fd18 	bl	800951c <UARTDMA_Print>
			break;
 8008aec:	e06c      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_3_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,1\n");
 8008aee:	494f      	ldr	r1, [pc, #316]	; (8008c2c <SendComand+0x2cc>)
 8008af0:	4839      	ldr	r0, [pc, #228]	; (8008bd8 <SendComand+0x278>)
 8008af2:	f000 fd13 	bl	800951c <UARTDMA_Print>
			break;
 8008af6:	e067      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_3_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=3,0\n");
 8008af8:	494d      	ldr	r1, [pc, #308]	; (8008c30 <SendComand+0x2d0>)
 8008afa:	4837      	ldr	r0, [pc, #220]	; (8008bd8 <SendComand+0x278>)
 8008afc:	f000 fd0e 	bl	800951c <UARTDMA_Print>
			break;
 8008b00:	e062      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_4_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,1\n");
 8008b02:	494c      	ldr	r1, [pc, #304]	; (8008c34 <SendComand+0x2d4>)
 8008b04:	4834      	ldr	r0, [pc, #208]	; (8008bd8 <SendComand+0x278>)
 8008b06:	f000 fd09 	bl	800951c <UARTDMA_Print>
			break;
 8008b0a:	e05d      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_4_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=4,0\n");
 8008b0c:	494a      	ldr	r1, [pc, #296]	; (8008c38 <SendComand+0x2d8>)
 8008b0e:	4832      	ldr	r0, [pc, #200]	; (8008bd8 <SendComand+0x278>)
 8008b10:	f000 fd04 	bl	800951c <UARTDMA_Print>
			break;
 8008b14:	e058      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_ON:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,1\n");
 8008b16:	4949      	ldr	r1, [pc, #292]	; (8008c3c <SendComand+0x2dc>)
 8008b18:	482f      	ldr	r0, [pc, #188]	; (8008bd8 <SendComand+0x278>)
 8008b1a:	f000 fcff 	bl	800951c <UARTDMA_Print>
			break;
 8008b1e:	e053      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_ALL_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=0,0\n");
 8008b20:	4947      	ldr	r1, [pc, #284]	; (8008c40 <SendComand+0x2e0>)
 8008b22:	482d      	ldr	r0, [pc, #180]	; (8008bd8 <SendComand+0x278>)
 8008b24:	f000 fcfa 	bl	800951c <UARTDMA_Print>
			break;
 8008b28:	e04e      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_LIGHT_SCHOW_ALL:
			UARTDMA_Print(&huartdma2, "CHLIGHT=7,7\n");
 8008b2a:	4946      	ldr	r1, [pc, #280]	; (8008c44 <SendComand+0x2e4>)
 8008b2c:	482a      	ldr	r0, [pc, #168]	; (8008bd8 <SendComand+0x278>)
 8008b2e:	f000 fcf5 	bl	800951c <UARTDMA_Print>
			break;
 8008b32:	e049      	b.n	8008bc8 <SendComand+0x268>

		case UCMD_WS_LED_WHITE_OFF:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,0\n");
 8008b34:	4944      	ldr	r1, [pc, #272]	; (8008c48 <SendComand+0x2e8>)
 8008b36:	4828      	ldr	r0, [pc, #160]	; (8008bd8 <SendComand+0x278>)
 8008b38:	f000 fcf0 	bl	800951c <UARTDMA_Print>
			break;
 8008b3c:	e044      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,1\n");
 8008b3e:	4943      	ldr	r1, [pc, #268]	; (8008c4c <SendComand+0x2ec>)
 8008b40:	4825      	ldr	r0, [pc, #148]	; (8008bd8 <SendComand+0x278>)
 8008b42:	f000 fceb 	bl	800951c <UARTDMA_Print>
			break;
 8008b46:	e03f      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,2\n");
 8008b48:	4941      	ldr	r1, [pc, #260]	; (8008c50 <SendComand+0x2f0>)
 8008b4a:	4823      	ldr	r0, [pc, #140]	; (8008bd8 <SendComand+0x278>)
 8008b4c:	f000 fce6 	bl	800951c <UARTDMA_Print>
			break;
 8008b50:	e03a      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_WHITE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,3\n");
 8008b52:	4940      	ldr	r1, [pc, #256]	; (8008c54 <SendComand+0x2f4>)
 8008b54:	4820      	ldr	r0, [pc, #128]	; (8008bd8 <SendComand+0x278>)
 8008b56:	f000 fce1 	bl	800951c <UARTDMA_Print>
			break;
 8008b5a:	e035      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MAX:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,4\n");
 8008b5c:	493e      	ldr	r1, [pc, #248]	; (8008c58 <SendComand+0x2f8>)
 8008b5e:	481e      	ldr	r0, [pc, #120]	; (8008bd8 <SendComand+0x278>)
 8008b60:	f000 fcdc 	bl	800951c <UARTDMA_Print>
			break;
 8008b64:	e030      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MID:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,5\n");
 8008b66:	493d      	ldr	r1, [pc, #244]	; (8008c5c <SendComand+0x2fc>)
 8008b68:	481b      	ldr	r0, [pc, #108]	; (8008bd8 <SendComand+0x278>)
 8008b6a:	f000 fcd7 	bl	800951c <UARTDMA_Print>
			break;
 8008b6e:	e02b      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_BLUE_MIN:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,6\n");
 8008b70:	493b      	ldr	r1, [pc, #236]	; (8008c60 <SendComand+0x300>)
 8008b72:	4819      	ldr	r0, [pc, #100]	; (8008bd8 <SendComand+0x278>)
 8008b74:	f000 fcd2 	bl	800951c <UARTDMA_Print>
			break;
 8008b78:	e026      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_DAILY:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,7\n");
 8008b7a:	493a      	ldr	r1, [pc, #232]	; (8008c64 <SendComand+0x304>)
 8008b7c:	4816      	ldr	r0, [pc, #88]	; (8008bd8 <SendComand+0x278>)
 8008b7e:	f000 fccd 	bl	800951c <UARTDMA_Print>
			break;
 8008b82:	e021      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_LED_NIGHT:
			UARTDMA_Print(&huartdma2, "CHLIGHT=9,8\n");
 8008b84:	4938      	ldr	r1, [pc, #224]	; (8008c68 <SendComand+0x308>)
 8008b86:	4814      	ldr	r0, [pc, #80]	; (8008bd8 <SendComand+0x278>)
 8008b88:	f000 fcc8 	bl	800951c <UARTDMA_Print>
			break;
 8008b8c:	e01c      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_NUMBER_LED:
			if(NrOfLeds < 9) NrOfLeds = 9; // Minimum number of Leds is 9
 8008b8e:	4b37      	ldr	r3, [pc, #220]	; (8008c6c <SendComand+0x30c>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d802      	bhi.n	8008b9c <SendComand+0x23c>
 8008b96:	4b35      	ldr	r3, [pc, #212]	; (8008c6c <SendComand+0x30c>)
 8008b98:	2209      	movs	r2, #9
 8008b9a:	701a      	strb	r2, [r3, #0]
			sprintf(Message, "CHLIGHT=9,%d\n", NrOfLeds);
 8008b9c:	4b33      	ldr	r3, [pc, #204]	; (8008c6c <SendComand+0x30c>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4933      	ldr	r1, [pc, #204]	; (8008c70 <SendComand+0x310>)
 8008ba4:	4833      	ldr	r0, [pc, #204]	; (8008c74 <SendComand+0x314>)
 8008ba6:	f008 faa9 	bl	80110fc <siprintf>
			UARTDMA_Print(&huartdma2, Message); // Print message
 8008baa:	4932      	ldr	r1, [pc, #200]	; (8008c74 <SendComand+0x314>)
 8008bac:	480a      	ldr	r0, [pc, #40]	; (8008bd8 <SendComand+0x278>)
 8008bae:	f000 fcb5 	bl	800951c <UARTDMA_Print>
			break;
 8008bb2:	e009      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNRISE:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,1\n");
 8008bb4:	4930      	ldr	r1, [pc, #192]	; (8008c78 <SendComand+0x318>)
 8008bb6:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <SendComand+0x278>)
 8008bb8:	f000 fcb0 	bl	800951c <UARTDMA_Print>
			break;
 8008bbc:	e004      	b.n	8008bc8 <SendComand+0x268>
		case UCMD_WS_ANIMATION_SUNSET:
			UARTDMA_Print(&huartdma2, "CHLIGHT=8,4\n");
 8008bbe:	492f      	ldr	r1, [pc, #188]	; (8008c7c <SendComand+0x31c>)
 8008bc0:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <SendComand+0x278>)
 8008bc2:	f000 fcab 	bl	800951c <UARTDMA_Print>
			break;
 8008bc6:	bf00      	nop
		}
	return 1;
 8008bc8:	2301      	movs	r3, #1
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	080153f4 	.word	0x080153f4
 8008bd8:	200004a4 	.word	0x200004a4
 8008bdc:	080153fc 	.word	0x080153fc
 8008be0:	08015404 	.word	0x08015404
 8008be4:	08015410 	.word	0x08015410
 8008be8:	08015418 	.word	0x08015418
 8008bec:	08015420 	.word	0x08015420
 8008bf0:	08015428 	.word	0x08015428
 8008bf4:	08015438 	.word	0x08015438
 8008bf8:	08015448 	.word	0x08015448
 8008bfc:	08015458 	.word	0x08015458
 8008c00:	08015468 	.word	0x08015468
 8008c04:	08015478 	.word	0x08015478
 8008c08:	08015488 	.word	0x08015488
 8008c0c:	08015498 	.word	0x08015498
 8008c10:	080154a8 	.word	0x080154a8
 8008c14:	080154b8 	.word	0x080154b8
 8008c18:	080154c8 	.word	0x080154c8
 8008c1c:	080154d8 	.word	0x080154d8
 8008c20:	080154e8 	.word	0x080154e8
 8008c24:	080154f8 	.word	0x080154f8
 8008c28:	08015508 	.word	0x08015508
 8008c2c:	08015518 	.word	0x08015518
 8008c30:	08015528 	.word	0x08015528
 8008c34:	08015538 	.word	0x08015538
 8008c38:	08015548 	.word	0x08015548
 8008c3c:	08015558 	.word	0x08015558
 8008c40:	08015568 	.word	0x08015568
 8008c44:	08015578 	.word	0x08015578
 8008c48:	08015588 	.word	0x08015588
 8008c4c:	08015598 	.word	0x08015598
 8008c50:	080155a8 	.word	0x080155a8
 8008c54:	080155b8 	.word	0x080155b8
 8008c58:	080155c8 	.word	0x080155c8
 8008c5c:	080155d8 	.word	0x080155d8
 8008c60:	080155e8 	.word	0x080155e8
 8008c64:	080155f8 	.word	0x080155f8
 8008c68:	08015608 	.word	0x08015608
 8008c6c:	20000033 	.word	0x20000033
 8008c70:	08015618 	.word	0x08015618
 8008c74:	20000674 	.word	0x20000674
 8008c78:	08015628 	.word	0x08015628
 8008c7c:	08015638 	.word	0x08015638

08008c80 <RB_Read>:
  **/
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d101      	bne.n	8008c9a <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 8008c96:	2301      	movs	r3, #1
 8008c98:	e015      	b.n	8008cc6 <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	785b      	ldrb	r3, [r3, #1]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	789a      	ldrb	r2, [r3, #2]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	425a      	negs	r2, r3
 8008cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cba:	bf58      	it	pl
 8008cbc:	4253      	negpl	r3, r2
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b085      	sub	sp, #20
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	425a      	negs	r2, r3
 8008ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cee:	bf58      	it	pl
 8008cf0:	4253      	negpl	r3, r2
 8008cf2:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	7bfa      	ldrb	r2, [r7, #15]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d101      	bne.n	8008d02 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e00a      	b.n	8008d18 <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7bfa      	ldrb	r2, [r7, #15]
 8008d14:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008d28:	4b17      	ldr	r3, [pc, #92]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d2a:	4a18      	ldr	r2, [pc, #96]	; (8008d8c <MX_SPI1_Init+0x68>)
 8008d2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008d2e:	4b16      	ldr	r3, [pc, #88]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008d34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008d36:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008d3c:	4b12      	ldr	r3, [pc, #72]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008d48:	4b0f      	ldr	r3, [pc, #60]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d58:	2210      	movs	r2, #16
 8008d5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008d5c:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008d62:	4b09      	ldr	r3, [pc, #36]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d64:	2200      	movs	r2, #0
 8008d66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d68:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008d6e:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d70:	220a      	movs	r2, #10
 8008d72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008d74:	4804      	ldr	r0, [pc, #16]	; (8008d88 <MX_SPI1_Init+0x64>)
 8008d76:	f005 fb0d 	bl	800e394 <HAL_SPI_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008d80:	f7fc fe64 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008d84:	bf00      	nop
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20000710 	.word	0x20000710
 8008d8c:	40013000 	.word	0x40013000

08008d90 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008d94:	4b17      	ldr	r3, [pc, #92]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <MX_SPI3_Init+0x68>)
 8008d98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008d9a:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008d9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008da0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008da8:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008dba:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008ddc:	220a      	movs	r2, #10
 8008dde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008de0:	4804      	ldr	r0, [pc, #16]	; (8008df4 <MX_SPI3_Init+0x64>)
 8008de2:	f005 fad7 	bl	800e394 <HAL_SPI_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008dec:	f7fc fe2e 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008df0:	bf00      	nop
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	200006b8 	.word	0x200006b8
 8008df8:	40003c00 	.word	0x40003c00

08008dfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08c      	sub	sp, #48	; 0x30
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e04:	f107 031c 	add.w	r3, r7, #28
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	60da      	str	r2, [r3, #12]
 8008e12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a32      	ldr	r2, [pc, #200]	; (8008ee4 <HAL_SPI_MspInit+0xe8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d12c      	bne.n	8008e78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61bb      	str	r3, [r7, #24]
 8008e22:	4b31      	ldr	r3, [pc, #196]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e26:	4a30      	ldr	r2, [pc, #192]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	4a29      	ldr	r2, [pc, #164]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	6313      	str	r3, [r2, #48]	; 0x30
 8008e4a:	4b27      	ldr	r3, [pc, #156]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008e56:	23e0      	movs	r3, #224	; 0xe0
 8008e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e62:	2303      	movs	r3, #3
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008e66:	2305      	movs	r3, #5
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e6a:	f107 031c 	add.w	r3, r7, #28
 8008e6e:	4619      	mov	r1, r3
 8008e70:	481e      	ldr	r0, [pc, #120]	; (8008eec <HAL_SPI_MspInit+0xf0>)
 8008e72:	f001 fb5b 	bl	800a52c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008e76:	e030      	b.n	8008eda <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1c      	ldr	r2, [pc, #112]	; (8008ef0 <HAL_SPI_MspInit+0xf4>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d12b      	bne.n	8008eda <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008e82:	2300      	movs	r3, #0
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e90:	6413      	str	r3, [r2, #64]	; 0x40
 8008e92:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	4a10      	ldr	r2, [pc, #64]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008ea8:	f043 0302 	orr.w	r3, r3, #2
 8008eac:	6313      	str	r3, [r2, #48]	; 0x30
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <HAL_SPI_MspInit+0xec>)
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	f003 0302 	and.w	r3, r3, #2
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008eba:	2338      	movs	r3, #56	; 0x38
 8008ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008eca:	2306      	movs	r3, #6
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ece:	f107 031c 	add.w	r3, r7, #28
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4807      	ldr	r0, [pc, #28]	; (8008ef4 <HAL_SPI_MspInit+0xf8>)
 8008ed6:	f001 fb29 	bl	800a52c <HAL_GPIO_Init>
}
 8008eda:	bf00      	nop
 8008edc:	3730      	adds	r7, #48	; 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	40013000 	.word	0x40013000
 8008ee8:	40023800 	.word	0x40023800
 8008eec:	40020000 	.word	0x40020000
 8008ef0:	40003c00 	.word	0x40003c00
 8008ef4:	40020400 	.word	0x40020400

08008ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008efe:	2300      	movs	r3, #0
 8008f00:	607b      	str	r3, [r7, #4]
 8008f02:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f06:	4a0f      	ldr	r2, [pc, #60]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	4a08      	ldr	r2, [pc, #32]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f28:	6413      	str	r3, [r2, #64]	; 0x40
 8008f2a:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <HAL_MspInit+0x4c>)
 8008f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	40023800 	.word	0x40023800

08008f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008f4c:	e7fe      	b.n	8008f4c <NMI_Handler+0x4>

08008f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008f52:	e7fe      	b.n	8008f52 <HardFault_Handler+0x4>

08008f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008f58:	e7fe      	b.n	8008f58 <MemManage_Handler+0x4>

08008f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008f5e:	e7fe      	b.n	8008f5e <BusFault_Handler+0x4>

08008f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008f64:	e7fe      	b.n	8008f64 <UsageFault_Handler+0x4>

08008f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008f66:	b480      	push	{r7}
 8008f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008f6a:	bf00      	nop
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008f82:	b480      	push	{r7}
 8008f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f86:	bf00      	nop
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f94:	f000 fcd6 	bl	8009944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_IRQ_Pin);
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f001 fc93 	bl	800a8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008fb0:	4802      	ldr	r0, [pc, #8]	; (8008fbc <DMA1_Stream0_IRQHandler+0x10>)
 8008fb2:	f001 f843 	bl	800a03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000444 	.word	0x20000444

08008fc0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008fc4:	4802      	ldr	r0, [pc, #8]	; (8008fd0 <DMA1_Stream1_IRQHandler+0x10>)
 8008fc6:	f001 f839 	bl	800a03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8008fca:	bf00      	nop
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000390 	.word	0x20000390

08008fd4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 8008fd8:	4802      	ldr	r0, [pc, #8]	; (8008fe4 <DMA1_Stream5_IRQHandler+0x10>)
 8008fda:	f000 f9e9 	bl	80093b0 <UARTDMA_DmaReceiveIrqHandler>
	return;
 8008fde:	bf00      	nop
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200004a4 	.word	0x200004a4

08008fe8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008fec:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <DMA1_Stream6_IRQHandler+0x10>)
 8008fee:	f001 f825 	bl	800a03c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008ff2:	bf00      	nop
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20000858 	.word	0x20000858

08008ffc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8009000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009004:	f001 fc62 	bl	800a8cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009008:	bf00      	nop
 800900a:	bd80      	pop	{r7, pc}

0800900c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009010:	4802      	ldr	r0, [pc, #8]	; (800901c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009012:	f005 feb4 	bl	800ed7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009016:	bf00      	nop
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000768 	.word	0x20000768

08009020 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8009024:	4802      	ldr	r0, [pc, #8]	; (8009030 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8009026:	f005 feaa 	bl	800ed7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800902a:	bf00      	nop
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200007b0 	.word	0x200007b0

08009034 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009038:	4802      	ldr	r0, [pc, #8]	; (8009044 <I2C1_EV_IRQHandler+0x10>)
 800903a:	f002 fbe7 	bl	800b80c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800903e:	bf00      	nop
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	200003f0 	.word	0x200003f0

08009048 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800904c:	4802      	ldr	r0, [pc, #8]	; (8009058 <I2C1_ER_IRQHandler+0x10>)
 800904e:	f002 fd4e 	bl	800baee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009052:	bf00      	nop
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200003f0 	.word	0x200003f0

0800905c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8009060:	4803      	ldr	r0, [pc, #12]	; (8009070 <USART2_IRQHandler+0x14>)
 8009062:	f000 f97b 	bl	800935c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009066:	4803      	ldr	r0, [pc, #12]	; (8009074 <USART2_IRQHandler+0x18>)
 8009068:	f006 f94a 	bl	800f300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200004a4 	.word	0x200004a4
 8009074:	200008b8 	.word	0x200008b8

08009078 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800907c:	4802      	ldr	r0, [pc, #8]	; (8009088 <SPI3_IRQHandler+0x10>)
 800907e:	f005 fbb5 	bl	800e7ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8009082:	bf00      	nop
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200006b8 	.word	0x200006b8

0800908c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
	return 1;
 8009090:	2301      	movs	r3, #1
}
 8009092:	4618      	mov	r0, r3
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <_kill>:

int _kill(int pid, int sig)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80090a6:	f007 f977 	bl	8010398 <__errno>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2216      	movs	r2, #22
 80090ae:	601a      	str	r2, [r3, #0]
	return -1;
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <_exit>:

void _exit (int status)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80090c4:	f04f 31ff 	mov.w	r1, #4294967295
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ffe7 	bl	800909c <_kill>
	while (1) {}		/* Make sure we hang here */
 80090ce:	e7fe      	b.n	80090ce <_exit+0x12>

080090d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
 80090e0:	e00a      	b.n	80090f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80090e2:	f3af 8000 	nop.w
 80090e6:	4601      	mov	r1, r0
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	60ba      	str	r2, [r7, #8]
 80090ee:	b2ca      	uxtb	r2, r1
 80090f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	3301      	adds	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	dbf0      	blt.n	80090e2 <_read+0x12>
	}

return len;
 8009100:	687b      	ldr	r3, [r7, #4]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e009      	b.n	8009130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	60ba      	str	r2, [r7, #8]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3301      	adds	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	dbf1      	blt.n	800911c <_write+0x12>
	}
	return len;
 8009138:	687b      	ldr	r3, [r7, #4]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <_close>:

int _close(int file)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
	return -1;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800914e:	4618      	mov	r0, r3
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800916a:	605a      	str	r2, [r3, #4]
	return 0;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <_isatty>:

int _isatty(int file)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
	return 1;
 8009182:	2301      	movs	r3, #1
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
	return 0;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80091b4:	4a14      	ldr	r2, [pc, #80]	; (8009208 <_sbrk+0x5c>)
 80091b6:	4b15      	ldr	r3, [pc, #84]	; (800920c <_sbrk+0x60>)
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80091c0:	4b13      	ldr	r3, [pc, #76]	; (8009210 <_sbrk+0x64>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <_sbrk+0x64>)
 80091ca:	4a12      	ldr	r2, [pc, #72]	; (8009214 <_sbrk+0x68>)
 80091cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80091ce:	4b10      	ldr	r3, [pc, #64]	; (8009210 <_sbrk+0x64>)
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4413      	add	r3, r2
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d207      	bcs.n	80091ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80091dc:	f007 f8dc 	bl	8010398 <__errno>
 80091e0:	4603      	mov	r3, r0
 80091e2:	220c      	movs	r2, #12
 80091e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80091e6:	f04f 33ff 	mov.w	r3, #4294967295
 80091ea:	e009      	b.n	8009200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80091ec:	4b08      	ldr	r3, [pc, #32]	; (8009210 <_sbrk+0x64>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <_sbrk+0x64>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	4a05      	ldr	r2, [pc, #20]	; (8009210 <_sbrk+0x64>)
 80091fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80091fe:	68fb      	ldr	r3, [r7, #12]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20020000 	.word	0x20020000
 800920c:	00000400 	.word	0x00000400
 8009210:	200002b4 	.word	0x200002b4
 8009214:	20000910 	.word	0x20000910

08009218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <SystemInit+0x20>)
 800921e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009222:	4a05      	ldr	r2, [pc, #20]	; (8009238 <SystemInit+0x20>)
 8009224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	e000ed00 	.word	0xe000ed00

0800923c <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009240:	4b0e      	ldr	r3, [pc, #56]	; (800927c <MX_TIM10_Init+0x40>)
 8009242:	4a0f      	ldr	r2, [pc, #60]	; (8009280 <MX_TIM10_Init+0x44>)
 8009244:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8009246:	4b0d      	ldr	r3, [pc, #52]	; (800927c <MX_TIM10_Init+0x40>)
 8009248:	f242 720f 	movw	r2, #9999	; 0x270f
 800924c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800924e:	4b0b      	ldr	r3, [pc, #44]	; (800927c <MX_TIM10_Init+0x40>)
 8009250:	2200      	movs	r2, #0
 8009252:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <MX_TIM10_Init+0x40>)
 8009256:	f242 720f 	movw	r2, #9999	; 0x270f
 800925a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800925c:	4b07      	ldr	r3, [pc, #28]	; (800927c <MX_TIM10_Init+0x40>)
 800925e:	2200      	movs	r2, #0
 8009260:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009262:	4b06      	ldr	r3, [pc, #24]	; (800927c <MX_TIM10_Init+0x40>)
 8009264:	2200      	movs	r2, #0
 8009266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009268:	4804      	ldr	r0, [pc, #16]	; (800927c <MX_TIM10_Init+0x40>)
 800926a:	f005 fca7 	bl	800ebbc <HAL_TIM_Base_Init>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009274:	f7fc fbea 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8009278:	bf00      	nop
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000768 	.word	0x20000768
 8009280:	40014400 	.word	0x40014400

08009284 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8009288:	4b0f      	ldr	r3, [pc, #60]	; (80092c8 <MX_TIM11_Init+0x44>)
 800928a:	4a10      	ldr	r2, [pc, #64]	; (80092cc <MX_TIM11_Init+0x48>)
 800928c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 14999;
 800928e:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <MX_TIM11_Init+0x44>)
 8009290:	f643 2297 	movw	r2, #14999	; 0x3a97
 8009294:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <MX_TIM11_Init+0x44>)
 8009298:	2200      	movs	r2, #0
 800929a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 29999;
 800929c:	4b0a      	ldr	r3, [pc, #40]	; (80092c8 <MX_TIM11_Init+0x44>)
 800929e:	f247 522f 	movw	r2, #29999	; 0x752f
 80092a2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80092a4:	4b08      	ldr	r3, [pc, #32]	; (80092c8 <MX_TIM11_Init+0x44>)
 80092a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <MX_TIM11_Init+0x44>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80092b2:	4805      	ldr	r0, [pc, #20]	; (80092c8 <MX_TIM11_Init+0x44>)
 80092b4:	f005 fc82 	bl	800ebbc <HAL_TIM_Base_Init>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <MX_TIM11_Init+0x3e>
  {
    Error_Handler();
 80092be:	f7fc fbc5 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80092c2:	bf00      	nop
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	200007b0 	.word	0x200007b0
 80092cc:	40014800 	.word	0x40014800

080092d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <HAL_TIM_Base_MspInit+0x80>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d116      	bne.n	8009310 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	4b1b      	ldr	r3, [pc, #108]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 80092e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ea:	4a1a      	ldr	r2, [pc, #104]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 80092ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f0:	6453      	str	r3, [r2, #68]	; 0x44
 80092f2:	4b18      	ldr	r3, [pc, #96]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 80092f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	2019      	movs	r0, #25
 8009304:	f000 fca1 	bl	8009c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009308:	2019      	movs	r0, #25
 800930a:	f000 fcba 	bl	8009c82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800930e:	e01a      	b.n	8009346 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM11)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a10      	ldr	r2, [pc, #64]	; (8009358 <HAL_TIM_Base_MspInit+0x88>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d115      	bne.n	8009346 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 8009320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009322:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 8009324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009328:	6453      	str	r3, [r2, #68]	; 0x44
 800932a:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <HAL_TIM_Base_MspInit+0x84>)
 800932c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009332:	60bb      	str	r3, [r7, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	201a      	movs	r0, #26
 800933c:	f000 fc85 	bl	8009c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009340:	201a      	movs	r0, #26
 8009342:	f000 fc9e 	bl	8009c82 <HAL_NVIC_EnableIRQ>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	40014400 	.word	0x40014400
 8009354:	40023800 	.word	0x40023800
 8009358:	40014800 	.word	0x40014800

0800935c <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b00      	cmp	r3, #0
 8009372:	d017      	beq.n	80093a4 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	60fb      	str	r3, [r7, #12]
	}
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c0:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d056      	beq.n	8009482 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093dc:	2220      	movs	r2, #32
 80093de:	409a      	lsls	r2, r3
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80093f4:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3304      	adds	r3, #4
 80093fa:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80093fc:	2300      	movs	r3, #0
 80093fe:	82fb      	strh	r3, [r7, #22]
 8009400:	e01a      	b.n	8009438 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8009408:	8afb      	ldrh	r3, [r7, #22]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	f7ff fc5e 	bl	8008cd2 <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 8009416:	8afb      	ldrh	r3, [r7, #22]
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	4413      	add	r3, r2
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	2b0a      	cmp	r3, #10
 8009420:	d107      	bne.n	8009432 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009428:	3301      	adds	r3, #1
 800942a:	b2da      	uxtb	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8009432:	8afb      	ldrh	r3, [r7, #22]
 8009434:	3301      	adds	r3, #1
 8009436:	82fb      	strh	r3, [r7, #22]
 8009438:	8afa      	ldrh	r2, [r7, #22]
 800943a:	89fb      	ldrh	r3, [r7, #14]
 800943c:	429a      	cmp	r2, r3
 800943e:	d3e0      	bcc.n	8009402 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009448:	223f      	movs	r2, #63	; 0x3f
 800944a:	409a      	lsls	r2, r3
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	609a      	str	r2, [r3, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	1d1a      	adds	r2, r3, #4
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2240      	movs	r2, #64	; 0x40
 8009468:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f042 0201 	orr.w	r2, r2, #1
 8009480:	601a      	str	r2, [r3, #0]
	}
}
 8009482:	bf00      	nop
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f203 1347 	addw	r3, r3, #327	; 0x147
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff fc16 	bl	8008cd2 <RB_Write>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <UARTDMA_PutCharToTxBuffer+0x26>
	{
		return 1; // Error code
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <UARTDMA_PutCharToTxBuffer+0x28>
	}
	return 0; // Success code
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
	char *OurBufferPtr; // Helper pointer

	OurBufferPtr = OutBuffer; // Set helper pointer
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01f      	beq.n	8009512 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80094d2:	e013      	b.n	80094fc <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OurBufferPtr == '\n') // If end line byte hit
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b0a      	cmp	r3, #10
 80094da:	d10c      	bne.n	80094f6 <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OurBufferPtr = 0; // Change it to end cstring '\0' byte
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
				return 0; // Exit if end line
 80094f2:	2300      	movs	r3, #0
 80094f4:	e00e      	b.n	8009514 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OurBufferPtr++; // Increase pointer
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3301      	adds	r3, #1
 80094fa:	60fb      	str	r3, [r7, #12]
		while(RB_OK == RB_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OurBufferPtr)) // Get from Ring Buffer till end
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3344      	adds	r3, #68	; 0x44
 8009500:	68f9      	ldr	r1, [r7, #12]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff fbbc 	bl	8008c80 <RB_Read>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d0e2      	beq.n	80094d4 <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 800950e:	2300      	movs	r3, #0
 8009510:	e000      	b.n	8009514 <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8009512:	2301      	movs	r3, #1
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800952a:	e012      	b.n	8009552 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 800952c:	7afb      	ldrb	r3, [r7, #11]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff ffaa 	bl	800948a <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 800953c:	7afb      	ldrb	r3, [r7, #11]
 800953e:	2b0a      	cmp	r3, #10
 8009540:	d107      	bne.n	8009552 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 8009548:	3301      	adds	r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	72fb      	strb	r3, [r7, #11]
 8009558:	7afb      	ldrb	r3, [r7, #11]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e6      	bne.n	800952c <UARTDMA_Print+0x10>
		}
	}
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 8009594:	2300      	movs	r3, #0
 8009596:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d028      	beq.n	80095fa <UARTDMA_TransmitEvent+0x6e>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80095a8:	e013      	b.n	80095d2 <UARTDMA_TransmitEvent+0x46>
		{
			if(CharToSend == '\n') // Check end line byte
 80095aa:	7b7b      	ldrb	r3, [r7, #13]
 80095ac:	2b0a      	cmp	r3, #10
 80095ae:	d107      	bne.n	80095c0 <UARTDMA_TransmitEvent+0x34>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 31c9 	ldrb.w	r3, [r3, #457]	; 0x1c9
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b2da      	uxtb	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80095c0:	89fb      	ldrh	r3, [r7, #14]
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	81fa      	strh	r2, [r7, #14]
 80095c6:	4619      	mov	r1, r3
 80095c8:	7b7a      	ldrb	r2, [r7, #13]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	440b      	add	r3, r1
 80095ce:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f203 1347 	addw	r3, r3, #327	; 0x147
 80095d8:	f107 020d 	add.w	r2, r7, #13
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff fb4e 	bl	8008c80 <RB_Read>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0df      	beq.n	80095aa <UARTDMA_TransmitEvent+0x1e>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	33c7      	adds	r3, #199	; 0xc7
 80095f2:	89fa      	ldrh	r2, [r7, #14]
 80095f4:	4619      	mov	r1, r3
 80095f6:	f005 fdd5 	bl	800f1a4 <HAL_UART_Transmit_DMA>
	}
}
 80095fa:	bf00      	nop
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0210 	orr.w	r2, r2, #16
 8009624:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0210 	orr.w	r2, r2, #16
 800963c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0210 	orr.w	r2, r2, #16
 8009654:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3304      	adds	r3, #4
 800965e:	2240      	movs	r2, #64	; 0x40
 8009660:	4619      	mov	r1, r3
 8009662:	f005 fe1d 	bl	800f2a0 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0208 	bic.w	r2, r2, #8
 800967c:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0208 	bic.w	r2, r2, #8
 8009694:	601a      	str	r2, [r3, #0]
}
 8009696:	bf00      	nop
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096a6:	4a12      	ldr	r2, [pc, #72]	; (80096f0 <MX_USART2_UART_Init+0x50>)
 80096a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80096aa:	4b10      	ldr	r3, [pc, #64]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80096b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80096b2:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80096b8:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80096be:	4b0b      	ldr	r3, [pc, #44]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096c6:	220c      	movs	r2, #12
 80096c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096ca:	4b08      	ldr	r3, [pc, #32]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80096d0:	4b06      	ldr	r3, [pc, #24]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80096d6:	4805      	ldr	r0, [pc, #20]	; (80096ec <MX_USART2_UART_Init+0x4c>)
 80096d8:	f005 fd16 	bl	800f108 <HAL_UART_Init>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80096e2:	f7fc f9b3 	bl	8005a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	200008b8 	.word	0x200008b8
 80096f0:	40004400 	.word	0x40004400

080096f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096fc:	f107 0314 	add.w	r3, r7, #20
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	605a      	str	r2, [r3, #4]
 8009706:	609a      	str	r2, [r3, #8]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a47      	ldr	r2, [pc, #284]	; (8009830 <HAL_UART_MspInit+0x13c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	f040 8088 	bne.w	8009828 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	4b45      	ldr	r3, [pc, #276]	; (8009834 <HAL_UART_MspInit+0x140>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	4a44      	ldr	r2, [pc, #272]	; (8009834 <HAL_UART_MspInit+0x140>)
 8009722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009726:	6413      	str	r3, [r2, #64]	; 0x40
 8009728:	4b42      	ldr	r3, [pc, #264]	; (8009834 <HAL_UART_MspInit+0x140>)
 800972a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800972c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	4b3e      	ldr	r3, [pc, #248]	; (8009834 <HAL_UART_MspInit+0x140>)
 800973a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973c:	4a3d      	ldr	r2, [pc, #244]	; (8009834 <HAL_UART_MspInit+0x140>)
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	6313      	str	r3, [r2, #48]	; 0x30
 8009744:	4b3b      	ldr	r3, [pc, #236]	; (8009834 <HAL_UART_MspInit+0x140>)
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009750:	230c      	movs	r3, #12
 8009752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009754:	2302      	movs	r3, #2
 8009756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009758:	2300      	movs	r3, #0
 800975a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800975c:	2303      	movs	r3, #3
 800975e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009760:	2307      	movs	r3, #7
 8009762:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009764:	f107 0314 	add.w	r3, r7, #20
 8009768:	4619      	mov	r1, r3
 800976a:	4833      	ldr	r0, [pc, #204]	; (8009838 <HAL_UART_MspInit+0x144>)
 800976c:	f000 fede 	bl	800a52c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009770:	4b32      	ldr	r3, [pc, #200]	; (800983c <HAL_UART_MspInit+0x148>)
 8009772:	4a33      	ldr	r2, [pc, #204]	; (8009840 <HAL_UART_MspInit+0x14c>)
 8009774:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009776:	4b31      	ldr	r3, [pc, #196]	; (800983c <HAL_UART_MspInit+0x148>)
 8009778:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800977c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800977e:	4b2f      	ldr	r3, [pc, #188]	; (800983c <HAL_UART_MspInit+0x148>)
 8009780:	2200      	movs	r2, #0
 8009782:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009784:	4b2d      	ldr	r3, [pc, #180]	; (800983c <HAL_UART_MspInit+0x148>)
 8009786:	2200      	movs	r2, #0
 8009788:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800978a:	4b2c      	ldr	r3, [pc, #176]	; (800983c <HAL_UART_MspInit+0x148>)
 800978c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009790:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009792:	4b2a      	ldr	r3, [pc, #168]	; (800983c <HAL_UART_MspInit+0x148>)
 8009794:	2200      	movs	r2, #0
 8009796:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009798:	4b28      	ldr	r3, [pc, #160]	; (800983c <HAL_UART_MspInit+0x148>)
 800979a:	2200      	movs	r2, #0
 800979c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800979e:	4b27      	ldr	r3, [pc, #156]	; (800983c <HAL_UART_MspInit+0x148>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80097a4:	4b25      	ldr	r3, [pc, #148]	; (800983c <HAL_UART_MspInit+0x148>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80097aa:	4b24      	ldr	r3, [pc, #144]	; (800983c <HAL_UART_MspInit+0x148>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80097b0:	4822      	ldr	r0, [pc, #136]	; (800983c <HAL_UART_MspInit+0x148>)
 80097b2:	f000 faab 	bl	8009d0c <HAL_DMA_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80097bc:	f7fc f946 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a1e      	ldr	r2, [pc, #120]	; (800983c <HAL_UART_MspInit+0x148>)
 80097c4:	639a      	str	r2, [r3, #56]	; 0x38
 80097c6:	4a1d      	ldr	r2, [pc, #116]	; (800983c <HAL_UART_MspInit+0x148>)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80097cc:	4b1d      	ldr	r3, [pc, #116]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097ce:	4a1e      	ldr	r2, [pc, #120]	; (8009848 <HAL_UART_MspInit+0x154>)
 80097d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80097d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097da:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097dc:	2240      	movs	r2, #64	; 0x40
 80097de:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097e0:	4b18      	ldr	r3, [pc, #96]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80097e6:	4b17      	ldr	r3, [pc, #92]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80097ee:	4b15      	ldr	r3, [pc, #84]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097f0:	2200      	movs	r2, #0
 80097f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097f4:	4b13      	ldr	r3, [pc, #76]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80097fa:	4b12      	ldr	r3, [pc, #72]	; (8009844 <HAL_UART_MspInit+0x150>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009800:	4b10      	ldr	r3, [pc, #64]	; (8009844 <HAL_UART_MspInit+0x150>)
 8009802:	2200      	movs	r2, #0
 8009804:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009806:	4b0f      	ldr	r3, [pc, #60]	; (8009844 <HAL_UART_MspInit+0x150>)
 8009808:	2200      	movs	r2, #0
 800980a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800980c:	480d      	ldr	r0, [pc, #52]	; (8009844 <HAL_UART_MspInit+0x150>)
 800980e:	f000 fa7d 	bl	8009d0c <HAL_DMA_Init>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8009818:	f7fc f918 	bl	8005a4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a09      	ldr	r2, [pc, #36]	; (8009844 <HAL_UART_MspInit+0x150>)
 8009820:	635a      	str	r2, [r3, #52]	; 0x34
 8009822:	4a08      	ldr	r2, [pc, #32]	; (8009844 <HAL_UART_MspInit+0x150>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009828:	bf00      	nop
 800982a:	3728      	adds	r7, #40	; 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	40004400 	.word	0x40004400
 8009834:	40023800 	.word	0x40023800
 8009838:	40020000 	.word	0x40020000
 800983c:	200007f8 	.word	0x200007f8
 8009840:	40026088 	.word	0x40026088
 8009844:	20000858 	.word	0x20000858
 8009848:	400260a0 	.word	0x400260a0

0800984c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800984c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009850:	480d      	ldr	r0, [pc, #52]	; (8009888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8009852:	490e      	ldr	r1, [pc, #56]	; (800988c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8009854:	4a0e      	ldr	r2, [pc, #56]	; (8009890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8009856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009858:	e002      	b.n	8009860 <LoopCopyDataInit>

0800985a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800985a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800985c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800985e:	3304      	adds	r3, #4

08009860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009864:	d3f9      	bcc.n	800985a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009866:	4a0b      	ldr	r2, [pc, #44]	; (8009894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8009868:	4c0b      	ldr	r4, [pc, #44]	; (8009898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800986a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800986c:	e001      	b.n	8009872 <LoopFillZerobss>

0800986e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800986e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009870:	3204      	adds	r2, #4

08009872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009874:	d3fb      	bcc.n	800986e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009876:	f7ff fccf 	bl	8009218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800987a:	f006 fd93 	bl	80103a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800987e:	f7fb ffa9 	bl	80057d4 <main>
  bx  lr    
 8009882:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800988c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8009890:	08028cb8 	.word	0x08028cb8
  ldr r2, =_sbss
 8009894:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8009898:	20000910 	.word	0x20000910

0800989c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800989c:	e7fe      	b.n	800989c <ADC_IRQHandler>
	...

080098a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80098a4:	4b0e      	ldr	r3, [pc, #56]	; (80098e0 <HAL_Init+0x40>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a0d      	ldr	r2, [pc, #52]	; (80098e0 <HAL_Init+0x40>)
 80098aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <HAL_Init+0x40>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a0a      	ldr	r2, [pc, #40]	; (80098e0 <HAL_Init+0x40>)
 80098b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098bc:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <HAL_Init+0x40>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a07      	ldr	r2, [pc, #28]	; (80098e0 <HAL_Init+0x40>)
 80098c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098c8:	2003      	movs	r0, #3
 80098ca:	f000 f9b3 	bl	8009c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098ce:	2000      	movs	r0, #0
 80098d0:	f000 f808 	bl	80098e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098d4:	f7ff fb10 	bl	8008ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	40023c00 	.word	0x40023c00

080098e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <HAL_InitTick+0x54>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	4b12      	ldr	r3, [pc, #72]	; (800993c <HAL_InitTick+0x58>)
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	4619      	mov	r1, r3
 80098f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80098fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f9d9 	bl	8009cba <HAL_SYSTICK_Config>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e00e      	b.n	8009930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b0f      	cmp	r3, #15
 8009916:	d80a      	bhi.n	800992e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009918:	2200      	movs	r2, #0
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	f000 f993 	bl	8009c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009924:	4a06      	ldr	r2, [pc, #24]	; (8009940 <HAL_InitTick+0x5c>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20000034 	.word	0x20000034
 800993c:	2000003c 	.word	0x2000003c
 8009940:	20000038 	.word	0x20000038

08009944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <HAL_IncTick+0x20>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	4b06      	ldr	r3, [pc, #24]	; (8009968 <HAL_IncTick+0x24>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4413      	add	r3, r2
 8009954:	4a04      	ldr	r2, [pc, #16]	; (8009968 <HAL_IncTick+0x24>)
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	2000003c 	.word	0x2000003c
 8009968:	200008fc 	.word	0x200008fc

0800996c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
  return uwTick;
 8009970:	4b03      	ldr	r3, [pc, #12]	; (8009980 <HAL_GetTick+0x14>)
 8009972:	681b      	ldr	r3, [r3, #0]
}
 8009974:	4618      	mov	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	200008fc 	.word	0x200008fc

08009984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800998c:	f7ff ffee 	bl	800996c <HAL_GetTick>
 8009990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999c:	d005      	beq.n	80099aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800999e:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <HAL_Delay+0x44>)
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80099aa:	bf00      	nop
 80099ac:	f7ff ffde 	bl	800996c <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d8f7      	bhi.n	80099ac <HAL_Delay+0x28>
  {
  }
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	2000003c 	.word	0x2000003c

080099cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099dc:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <__NVIC_SetPriorityGrouping+0x44>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099e8:	4013      	ands	r3, r2
 80099ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099fe:	4a04      	ldr	r2, [pc, #16]	; (8009a10 <__NVIC_SetPriorityGrouping+0x44>)
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	60d3      	str	r3, [r2, #12]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	e000ed00 	.word	0xe000ed00

08009a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <__NVIC_GetPriorityGrouping+0x18>)
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	0a1b      	lsrs	r3, r3, #8
 8009a1e:	f003 0307 	and.w	r3, r3, #7
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	db0b      	blt.n	8009a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	f003 021f 	and.w	r2, r3, #31
 8009a48:	4907      	ldr	r1, [pc, #28]	; (8009a68 <__NVIC_EnableIRQ+0x38>)
 8009a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a4e:	095b      	lsrs	r3, r3, #5
 8009a50:	2001      	movs	r0, #1
 8009a52:	fa00 f202 	lsl.w	r2, r0, r2
 8009a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	e000e100 	.word	0xe000e100

08009a6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	db12      	blt.n	8009aa4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	f003 021f 	and.w	r2, r3, #31
 8009a84:	490a      	ldr	r1, [pc, #40]	; (8009ab0 <__NVIC_DisableIRQ+0x44>)
 8009a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009a92:	3320      	adds	r3, #32
 8009a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009a98:	f3bf 8f4f 	dsb	sy
}
 8009a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009a9e:	f3bf 8f6f 	isb	sy
}
 8009aa2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	e000e100 	.word	0xe000e100

08009ab4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	db0e      	blt.n	8009ae4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8009ac6:	4a0b      	ldr	r2, [pc, #44]	; (8009af4 <__NVIC_GetPendingIRQ+0x40>)
 8009ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009acc:	095b      	lsrs	r3, r3, #5
 8009ace:	3340      	adds	r3, #64	; 0x40
 8009ad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	fa22 f303 	lsr.w	r3, r2, r3
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	e000      	b.n	8009ae6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8009ae4:	2300      	movs	r3, #0
  }
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	e000e100 	.word	0xe000e100

08009af8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	db0c      	blt.n	8009b24 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	f003 021f 	and.w	r2, r3, #31
 8009b10:	4907      	ldr	r1, [pc, #28]	; (8009b30 <__NVIC_ClearPendingIRQ+0x38>)
 8009b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2001      	movs	r0, #1
 8009b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b1e:	3360      	adds	r3, #96	; 0x60
 8009b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	e000e100 	.word	0xe000e100

08009b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	6039      	str	r1, [r7, #0]
 8009b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	db0a      	blt.n	8009b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	490c      	ldr	r1, [pc, #48]	; (8009b80 <__NVIC_SetPriority+0x4c>)
 8009b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b52:	0112      	lsls	r2, r2, #4
 8009b54:	b2d2      	uxtb	r2, r2
 8009b56:	440b      	add	r3, r1
 8009b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009b5c:	e00a      	b.n	8009b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	4908      	ldr	r1, [pc, #32]	; (8009b84 <__NVIC_SetPriority+0x50>)
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	f003 030f 	and.w	r3, r3, #15
 8009b6a:	3b04      	subs	r3, #4
 8009b6c:	0112      	lsls	r2, r2, #4
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	440b      	add	r3, r1
 8009b72:	761a      	strb	r2, [r3, #24]
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	e000e100 	.word	0xe000e100
 8009b84:	e000ed00 	.word	0xe000ed00

08009b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b089      	sub	sp, #36	; 0x24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f1c3 0307 	rsb	r3, r3, #7
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	bf28      	it	cs
 8009ba6:	2304      	movcs	r3, #4
 8009ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	3304      	adds	r3, #4
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d902      	bls.n	8009bb8 <NVIC_EncodePriority+0x30>
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	3b03      	subs	r3, #3
 8009bb6:	e000      	b.n	8009bba <NVIC_EncodePriority+0x32>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	43da      	mvns	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	401a      	ands	r2, r3
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009bda:	43d9      	mvns	r1, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009be0:	4313      	orrs	r3, r2
         );
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3724      	adds	r7, #36	; 0x24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c00:	d301      	bcc.n	8009c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009c02:	2301      	movs	r3, #1
 8009c04:	e00f      	b.n	8009c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009c06:	4a0a      	ldr	r2, [pc, #40]	; (8009c30 <SysTick_Config+0x40>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009c0e:	210f      	movs	r1, #15
 8009c10:	f04f 30ff 	mov.w	r0, #4294967295
 8009c14:	f7ff ff8e 	bl	8009b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009c18:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <SysTick_Config+0x40>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009c1e:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <SysTick_Config+0x40>)
 8009c20:	2207      	movs	r2, #7
 8009c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	e000e010 	.word	0xe000e010

08009c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff fec5 	bl	80099cc <__NVIC_SetPriorityGrouping>
}
 8009c42:	bf00      	nop
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b086      	sub	sp, #24
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	4603      	mov	r3, r0
 8009c52:	60b9      	str	r1, [r7, #8]
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c5c:	f7ff feda 	bl	8009a14 <__NVIC_GetPriorityGrouping>
 8009c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	6978      	ldr	r0, [r7, #20]
 8009c68:	f7ff ff8e 	bl	8009b88 <NVIC_EncodePriority>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c72:	4611      	mov	r1, r2
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ff5d 	bl	8009b34 <__NVIC_SetPriority>
}
 8009c7a:	bf00      	nop
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b082      	sub	sp, #8
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	4603      	mov	r3, r0
 8009c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fecd 	bl	8009a30 <__NVIC_EnableIRQ>
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff fedd 	bl	8009a6c <__NVIC_DisableIRQ>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff94 	bl	8009bf0 <SysTick_Config>
 8009cc8:	4603      	mov	r3, r0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b082      	sub	sp, #8
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	4603      	mov	r3, r0
 8009cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8009cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fee7 	bl	8009ab4 <__NVIC_GetPendingIRQ>
 8009ce6:	4603      	mov	r3, r0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fefa 	bl	8009af8 <__NVIC_ClearPendingIRQ>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009d18:	f7ff fe28 	bl	800996c <HAL_GetTick>
 8009d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e099      	b.n	8009e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0201 	bic.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d48:	e00f      	b.n	8009d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009d4a:	f7ff fe0f 	bl	800996c <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d908      	bls.n	8009d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2203      	movs	r2, #3
 8009d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e078      	b.n	8009e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e8      	bne.n	8009d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	4b38      	ldr	r3, [pc, #224]	; (8009e64 <HAL_DMA_Init+0x158>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d107      	bne.n	8009dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	697a      	ldr	r2, [r7, #20]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f023 0307 	bic.w	r3, r3, #7
 8009dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	d117      	bne.n	8009e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00e      	beq.n	8009e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fb0f 	bl	800a434 <DMA_CheckFifoParam>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d008      	beq.n	8009e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2240      	movs	r2, #64	; 0x40
 8009e20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e016      	b.n	8009e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fac6 	bl	800a3c8 <DMA_CalcBaseAndBitshift>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e44:	223f      	movs	r2, #63	; 0x3f
 8009e46:	409a      	lsls	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	f010803f 	.word	0xf010803f

08009e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e76:	2300      	movs	r3, #0
 8009e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_DMA_Start_IT+0x26>
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e040      	b.n	8009f10 <HAL_DMA_Start_IT+0xa8>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d12f      	bne.n	8009f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fa58 	bl	800a36c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec0:	223f      	movs	r2, #63	; 0x3f
 8009ec2:	409a      	lsls	r2, r3
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0216 	orr.w	r2, r2, #22
 8009ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d007      	beq.n	8009ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0208 	orr.w	r2, r2, #8
 8009eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e005      	b.n	8009f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009f26:	f7ff fd21 	bl	800996c <HAL_GetTick>
 8009f2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d008      	beq.n	8009f4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2280      	movs	r2, #128	; 0x80
 8009f3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e052      	b.n	8009ff0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0216 	bic.w	r2, r2, #22
 8009f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <HAL_DMA_Abort+0x62>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d007      	beq.n	8009f8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0208 	bic.w	r2, r2, #8
 8009f88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f022 0201 	bic.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f9a:	e013      	b.n	8009fc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f9c:	f7ff fce6 	bl	800996c <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b05      	cmp	r3, #5
 8009fa8:	d90c      	bls.n	8009fc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2220      	movs	r2, #32
 8009fae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e015      	b.n	8009ff0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e4      	bne.n	8009f9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd6:	223f      	movs	r2, #63	; 0x3f
 8009fd8:	409a      	lsls	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d004      	beq.n	800a016 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2280      	movs	r2, #128	; 0x80
 800a010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e00c      	b.n	800a030 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2205      	movs	r2, #5
 800a01a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 0201 	bic.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a048:	4b92      	ldr	r3, [pc, #584]	; (800a294 <HAL_DMA_IRQHandler+0x258>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a92      	ldr	r2, [pc, #584]	; (800a298 <HAL_DMA_IRQHandler+0x25c>)
 800a04e:	fba2 2303 	umull	r2, r3, r2, r3
 800a052:	0a9b      	lsrs	r3, r3, #10
 800a054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a066:	2208      	movs	r2, #8
 800a068:	409a      	lsls	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d01a      	beq.n	800a0a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d013      	beq.n	800a0a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f022 0204 	bic.w	r2, r2, #4
 800a08e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a094:	2208      	movs	r2, #8
 800a096:	409a      	lsls	r2, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a0:	f043 0201 	orr.w	r2, r3, #1
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	409a      	lsls	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d012      	beq.n	800a0de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00b      	beq.n	800a0de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	409a      	lsls	r2, r3
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d6:	f043 0202 	orr.w	r2, r3, #2
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d012      	beq.n	800a114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a100:	2204      	movs	r2, #4
 800a102:	409a      	lsls	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a10c:	f043 0204 	orr.w	r2, r3, #4
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	2210      	movs	r2, #16
 800a11a:	409a      	lsls	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4013      	ands	r3, r2
 800a120:	2b00      	cmp	r3, #0
 800a122:	d043      	beq.n	800a1ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0308 	and.w	r3, r3, #8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d03c      	beq.n	800a1ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a136:	2210      	movs	r2, #16
 800a138:	409a      	lsls	r2, r3
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d018      	beq.n	800a17e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d108      	bne.n	800a16c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d024      	beq.n	800a1ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
 800a16a:	e01f      	b.n	800a1ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01b      	beq.n	800a1ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	4798      	blx	r3
 800a17c:	e016      	b.n	800a1ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d107      	bne.n	800a19c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0208 	bic.w	r2, r2, #8
 800a19a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	409a      	lsls	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 808e 	beq.w	800a2da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 8086 	beq.w	800a2da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	409a      	lsls	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b05      	cmp	r3, #5
 800a1e4:	d136      	bne.n	800a254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0216 	bic.w	r2, r2, #22
 800a1f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <HAL_DMA_IRQHandler+0x1da>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f022 0208 	bic.w	r2, r2, #8
 800a224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22a:	223f      	movs	r2, #63	; 0x3f
 800a22c:	409a      	lsls	r2, r3
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a246:	2b00      	cmp	r3, #0
 800a248:	d07d      	beq.n	800a346 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	4798      	blx	r3
        }
        return;
 800a252:	e078      	b.n	800a346 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01c      	beq.n	800a29c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d108      	bne.n	800a282 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a274:	2b00      	cmp	r3, #0
 800a276:	d030      	beq.n	800a2da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	4798      	blx	r3
 800a280:	e02b      	b.n	800a2da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d027      	beq.n	800a2da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
 800a292:	e022      	b.n	800a2da <HAL_DMA_IRQHandler+0x29e>
 800a294:	20000034 	.word	0x20000034
 800a298:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10f      	bne.n	800a2ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f022 0210 	bic.w	r2, r2, #16
 800a2b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d032      	beq.n	800a348 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d022      	beq.n	800a334 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0201 	bic.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	3301      	adds	r3, #1
 800a30a:	60bb      	str	r3, [r7, #8]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d307      	bcc.n	800a322 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1f2      	bne.n	800a306 <HAL_DMA_IRQHandler+0x2ca>
 800a320:	e000      	b.n	800a324 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a322:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d005      	beq.n	800a348 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	4798      	blx	r3
 800a344:	e000      	b.n	800a348 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a346:	bf00      	nop
    }
  }
}
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop

0800a350 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a35e:	b2db      	uxtb	r3, r3
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	d108      	bne.n	800a3ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a3aa:	e007      	b.n	800a3bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	60da      	str	r2, [r3, #12]
}
 800a3bc:	bf00      	nop
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	3b10      	subs	r3, #16
 800a3d8:	4a14      	ldr	r2, [pc, #80]	; (800a42c <DMA_CalcBaseAndBitshift+0x64>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	091b      	lsrs	r3, r3, #4
 800a3e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a3e2:	4a13      	ldr	r2, [pc, #76]	; (800a430 <DMA_CalcBaseAndBitshift+0x68>)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d909      	bls.n	800a40a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	1d1a      	adds	r2, r3, #4
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	659a      	str	r2, [r3, #88]	; 0x58
 800a408:	e007      	b.n	800a41a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a412:	f023 0303 	bic.w	r3, r3, #3
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3714      	adds	r7, #20
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	aaaaaaab 	.word	0xaaaaaaab
 800a430:	0802878c 	.word	0x0802878c

0800a434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	699b      	ldr	r3, [r3, #24]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d11f      	bne.n	800a48e <DMA_CheckFifoParam+0x5a>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d856      	bhi.n	800a502 <DMA_CheckFifoParam+0xce>
 800a454:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <DMA_CheckFifoParam+0x28>)
 800a456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45a:	bf00      	nop
 800a45c:	0800a46d 	.word	0x0800a46d
 800a460:	0800a47f 	.word	0x0800a47f
 800a464:	0800a46d 	.word	0x0800a46d
 800a468:	0800a503 	.word	0x0800a503
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d046      	beq.n	800a506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a47c:	e043      	b.n	800a506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a486:	d140      	bne.n	800a50a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a48c:	e03d      	b.n	800a50a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a496:	d121      	bne.n	800a4dc <DMA_CheckFifoParam+0xa8>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d837      	bhi.n	800a50e <DMA_CheckFifoParam+0xda>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <DMA_CheckFifoParam+0x70>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4bb 	.word	0x0800a4bb
 800a4ac:	0800a4b5 	.word	0x0800a4b5
 800a4b0:	0800a4cd 	.word	0x0800a4cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b8:	e030      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d025      	beq.n	800a512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a4ca:	e022      	b.n	800a512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a4d4:	d11f      	bne.n	800a516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a4da:	e01c      	b.n	800a516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d903      	bls.n	800a4ea <DMA_CheckFifoParam+0xb6>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d003      	beq.n	800a4f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a4e8:	e018      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ee:	e015      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00e      	beq.n	800a51a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a500:	e00b      	b.n	800a51a <DMA_CheckFifoParam+0xe6>
      break;
 800a502:	bf00      	nop
 800a504:	e00a      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;
 800a506:	bf00      	nop
 800a508:	e008      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;
 800a50a:	bf00      	nop
 800a50c:	e006      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;
 800a50e:	bf00      	nop
 800a510:	e004      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;
 800a512:	bf00      	nop
 800a514:	e002      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;   
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <DMA_CheckFifoParam+0xe8>
      break;
 800a51a:	bf00      	nop
    }
  } 
  
  return status; 
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop

0800a52c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	; 0x24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a536:	2300      	movs	r3, #0
 800a538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a53e:	2300      	movs	r3, #0
 800a540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]
 800a546:	e159      	b.n	800a7fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a548:	2201      	movs	r2, #1
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4013      	ands	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	429a      	cmp	r2, r3
 800a562:	f040 8148 	bne.w	800a7f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d005      	beq.n	800a57e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d130      	bne.n	800a5e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	2203      	movs	r2, #3
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	43db      	mvns	r3, r3
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	4013      	ands	r3, r2
 800a594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5bc:	43db      	mvns	r3, r3
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	091b      	lsrs	r3, r3, #4
 800a5ca:	f003 0201 	and.w	r2, r3, #1
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d4:	69ba      	ldr	r2, [r7, #24]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d017      	beq.n	800a61c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	2203      	movs	r2, #3
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	69ba      	ldr	r2, [r7, #24]
 800a600:	4013      	ands	r3, r2
 800a602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	fa02 f303 	lsl.w	r3, r2, r3
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	4313      	orrs	r3, r2
 800a614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f003 0303 	and.w	r3, r3, #3
 800a624:	2b02      	cmp	r3, #2
 800a626:	d123      	bne.n	800a670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	08da      	lsrs	r2, r3, #3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3208      	adds	r2, #8
 800a630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	220f      	movs	r2, #15
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	43db      	mvns	r3, r3
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	4013      	ands	r3, r2
 800a64a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	691a      	ldr	r2, [r3, #16]
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	fa02 f303 	lsl.w	r3, r2, r3
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	4313      	orrs	r3, r2
 800a660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	08da      	lsrs	r2, r3, #3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3208      	adds	r2, #8
 800a66a:	69b9      	ldr	r1, [r7, #24]
 800a66c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	2203      	movs	r2, #3
 800a67c:	fa02 f303 	lsl.w	r3, r2, r3
 800a680:	43db      	mvns	r3, r3
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	4013      	ands	r3, r2
 800a686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f003 0203 	and.w	r2, r3, #3
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	fa02 f303 	lsl.w	r3, r2, r3
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80a2 	beq.w	800a7f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
 800a6b6:	4b57      	ldr	r3, [pc, #348]	; (800a814 <HAL_GPIO_Init+0x2e8>)
 800a6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ba:	4a56      	ldr	r2, [pc, #344]	; (800a814 <HAL_GPIO_Init+0x2e8>)
 800a6bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a6c0:	6453      	str	r3, [r2, #68]	; 0x44
 800a6c2:	4b54      	ldr	r3, [pc, #336]	; (800a814 <HAL_GPIO_Init+0x2e8>)
 800a6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a6ce:	4a52      	ldr	r2, [pc, #328]	; (800a818 <HAL_GPIO_Init+0x2ec>)
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	089b      	lsrs	r3, r3, #2
 800a6d4:	3302      	adds	r3, #2
 800a6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	220f      	movs	r2, #15
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4a49      	ldr	r2, [pc, #292]	; (800a81c <HAL_GPIO_Init+0x2f0>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d019      	beq.n	800a72e <HAL_GPIO_Init+0x202>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a48      	ldr	r2, [pc, #288]	; (800a820 <HAL_GPIO_Init+0x2f4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d013      	beq.n	800a72a <HAL_GPIO_Init+0x1fe>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	4a47      	ldr	r2, [pc, #284]	; (800a824 <HAL_GPIO_Init+0x2f8>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d00d      	beq.n	800a726 <HAL_GPIO_Init+0x1fa>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a46      	ldr	r2, [pc, #280]	; (800a828 <HAL_GPIO_Init+0x2fc>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d007      	beq.n	800a722 <HAL_GPIO_Init+0x1f6>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a45      	ldr	r2, [pc, #276]	; (800a82c <HAL_GPIO_Init+0x300>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d101      	bne.n	800a71e <HAL_GPIO_Init+0x1f2>
 800a71a:	2304      	movs	r3, #4
 800a71c:	e008      	b.n	800a730 <HAL_GPIO_Init+0x204>
 800a71e:	2307      	movs	r3, #7
 800a720:	e006      	b.n	800a730 <HAL_GPIO_Init+0x204>
 800a722:	2303      	movs	r3, #3
 800a724:	e004      	b.n	800a730 <HAL_GPIO_Init+0x204>
 800a726:	2302      	movs	r3, #2
 800a728:	e002      	b.n	800a730 <HAL_GPIO_Init+0x204>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <HAL_GPIO_Init+0x204>
 800a72e:	2300      	movs	r3, #0
 800a730:	69fa      	ldr	r2, [r7, #28]
 800a732:	f002 0203 	and.w	r2, r2, #3
 800a736:	0092      	lsls	r2, r2, #2
 800a738:	4093      	lsls	r3, r2
 800a73a:	69ba      	ldr	r2, [r7, #24]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a740:	4935      	ldr	r1, [pc, #212]	; (800a818 <HAL_GPIO_Init+0x2ec>)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	3302      	adds	r3, #2
 800a748:	69ba      	ldr	r2, [r7, #24]
 800a74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a74e:	4b38      	ldr	r3, [pc, #224]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	43db      	mvns	r3, r3
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	4013      	ands	r3, r2
 800a75c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a76a:	69ba      	ldr	r2, [r7, #24]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4313      	orrs	r3, r2
 800a770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a772:	4a2f      	ldr	r2, [pc, #188]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a778:	4b2d      	ldr	r3, [pc, #180]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	43db      	mvns	r3, r3
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	4013      	ands	r3, r2
 800a786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4313      	orrs	r3, r2
 800a79a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a79c:	4a24      	ldr	r2, [pc, #144]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a7a2:	4b23      	ldr	r3, [pc, #140]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	43db      	mvns	r3, r3
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a7c6:	4a1a      	ldr	r2, [pc, #104]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a7cc:	4b18      	ldr	r3, [pc, #96]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	4013      	ands	r3, r2
 800a7da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a7f0:	4a0f      	ldr	r2, [pc, #60]	; (800a830 <HAL_GPIO_Init+0x304>)
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b0f      	cmp	r3, #15
 800a800:	f67f aea2 	bls.w	800a548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	3724      	adds	r7, #36	; 0x24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	40023800 	.word	0x40023800
 800a818:	40013800 	.word	0x40013800
 800a81c:	40020000 	.word	0x40020000
 800a820:	40020400 	.word	0x40020400
 800a824:	40020800 	.word	0x40020800
 800a828:	40020c00 	.word	0x40020c00
 800a82c:	40021000 	.word	0x40021000
 800a830:	40013c00 	.word	0x40013c00

0800a834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691a      	ldr	r2, [r3, #16]
 800a844:	887b      	ldrh	r3, [r7, #2]
 800a846:	4013      	ands	r3, r2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73fb      	strb	r3, [r7, #15]
 800a850:	e001      	b.n	800a856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a852:	2300      	movs	r3, #0
 800a854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a856:	7bfb      	ldrb	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	807b      	strh	r3, [r7, #2]
 800a870:	4613      	mov	r3, r2
 800a872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a874:	787b      	ldrb	r3, [r7, #1]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a87a:	887a      	ldrh	r2, [r7, #2]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a880:	e003      	b.n	800a88a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a882:	887b      	ldrh	r3, [r7, #2]
 800a884:	041a      	lsls	r2, r3, #16
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	619a      	str	r2, [r3, #24]
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a896:	b480      	push	{r7}
 800a898:	b085      	sub	sp, #20
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a8a8:	887a      	ldrh	r2, [r7, #2]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	041a      	lsls	r2, r3, #16
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	43d9      	mvns	r1, r3
 800a8b4:	887b      	ldrh	r3, [r7, #2]
 800a8b6:	400b      	ands	r3, r1
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	619a      	str	r2, [r3, #24]
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
	...

0800a8cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a8d6:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a8d8:	695a      	ldr	r2, [r3, #20]
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	4013      	ands	r3, r2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d006      	beq.n	800a8f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a8e2:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a8e4:	88fb      	ldrh	r3, [r7, #6]
 800a8e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a8e8:	88fb      	ldrh	r3, [r7, #6]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fb f89a 	bl	8005a24 <HAL_GPIO_EXTI_Callback>
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	40013c00 	.word	0x40013c00

0800a8fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	e12b      	b.n	800ab66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7fa fe4c 	bl	80055c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2224      	movs	r2, #36	; 0x24
 800a92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a94e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a95e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a960:	f003 fcf0 	bl	800e344 <HAL_RCC_GetPCLK1Freq>
 800a964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	4a81      	ldr	r2, [pc, #516]	; (800ab70 <HAL_I2C_Init+0x274>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d807      	bhi.n	800a980 <HAL_I2C_Init+0x84>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4a80      	ldr	r2, [pc, #512]	; (800ab74 <HAL_I2C_Init+0x278>)
 800a974:	4293      	cmp	r3, r2
 800a976:	bf94      	ite	ls
 800a978:	2301      	movls	r3, #1
 800a97a:	2300      	movhi	r3, #0
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	e006      	b.n	800a98e <HAL_I2C_Init+0x92>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a7d      	ldr	r2, [pc, #500]	; (800ab78 <HAL_I2C_Init+0x27c>)
 800a984:	4293      	cmp	r3, r2
 800a986:	bf94      	ite	ls
 800a988:	2301      	movls	r3, #1
 800a98a:	2300      	movhi	r3, #0
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e0e7      	b.n	800ab66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4a78      	ldr	r2, [pc, #480]	; (800ab7c <HAL_I2C_Init+0x280>)
 800a99a:	fba2 2303 	umull	r2, r3, r2, r3
 800a99e:	0c9b      	lsrs	r3, r3, #18
 800a9a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68ba      	ldr	r2, [r7, #8]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	4a6a      	ldr	r2, [pc, #424]	; (800ab70 <HAL_I2C_Init+0x274>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d802      	bhi.n	800a9d0 <HAL_I2C_Init+0xd4>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	e009      	b.n	800a9e4 <HAL_I2C_Init+0xe8>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a9d6:	fb02 f303 	mul.w	r3, r2, r3
 800a9da:	4a69      	ldr	r2, [pc, #420]	; (800ab80 <HAL_I2C_Init+0x284>)
 800a9dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e0:	099b      	lsrs	r3, r3, #6
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6812      	ldr	r2, [r2, #0]
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a9f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	495c      	ldr	r1, [pc, #368]	; (800ab70 <HAL_I2C_Init+0x274>)
 800aa00:	428b      	cmp	r3, r1
 800aa02:	d819      	bhi.n	800aa38 <HAL_I2C_Init+0x13c>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	1e59      	subs	r1, r3, #1
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa12:	1c59      	adds	r1, r3, #1
 800aa14:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aa18:	400b      	ands	r3, r1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00a      	beq.n	800aa34 <HAL_I2C_Init+0x138>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1e59      	subs	r1, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa32:	e051      	b.n	800aad8 <HAL_I2C_Init+0x1dc>
 800aa34:	2304      	movs	r3, #4
 800aa36:	e04f      	b.n	800aad8 <HAL_I2C_Init+0x1dc>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d111      	bne.n	800aa64 <HAL_I2C_Init+0x168>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1e58      	subs	r0, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6859      	ldr	r1, [r3, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	440b      	add	r3, r1
 800aa4e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa52:	3301      	adds	r3, #1
 800aa54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bf0c      	ite	eq
 800aa5c:	2301      	moveq	r3, #1
 800aa5e:	2300      	movne	r3, #0
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	e012      	b.n	800aa8a <HAL_I2C_Init+0x18e>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	1e58      	subs	r0, r3, #1
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	009b      	lsls	r3, r3, #2
 800aa70:	440b      	add	r3, r1
 800aa72:	0099      	lsls	r1, r3, #2
 800aa74:	440b      	add	r3, r1
 800aa76:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bf0c      	ite	eq
 800aa84:	2301      	moveq	r3, #1
 800aa86:	2300      	movne	r3, #0
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <HAL_I2C_Init+0x196>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e022      	b.n	800aad8 <HAL_I2C_Init+0x1dc>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10e      	bne.n	800aab8 <HAL_I2C_Init+0x1bc>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1e58      	subs	r0, r3, #1
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6859      	ldr	r1, [r3, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	440b      	add	r3, r1
 800aaa8:	fbb0 f3f3 	udiv	r3, r0, r3
 800aaac:	3301      	adds	r3, #1
 800aaae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab6:	e00f      	b.n	800aad8 <HAL_I2C_Init+0x1dc>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	1e58      	subs	r0, r3, #1
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6859      	ldr	r1, [r3, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	440b      	add	r3, r1
 800aac6:	0099      	lsls	r1, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	fbb0 f3f3 	udiv	r3, r0, r3
 800aace:	3301      	adds	r3, #1
 800aad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	6809      	ldr	r1, [r1, #0]
 800aadc:	4313      	orrs	r3, r2
 800aade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	69da      	ldr	r2, [r3, #28]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ab06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6911      	ldr	r1, [r2, #16]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	68d2      	ldr	r2, [r2, #12]
 800ab12:	4311      	orrs	r1, r2
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	695a      	ldr	r2, [r3, #20]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f042 0201 	orr.w	r2, r2, #1
 800ab46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	000186a0 	.word	0x000186a0
 800ab74:	001e847f 	.word	0x001e847f
 800ab78:	003d08ff 	.word	0x003d08ff
 800ab7c:	431bde83 	.word	0x431bde83
 800ab80:	10624dd3 	.word	0x10624dd3

0800ab84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af02      	add	r7, sp, #8
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	460b      	mov	r3, r1
 800ab92:	817b      	strh	r3, [r7, #10]
 800ab94:	4613      	mov	r3, r2
 800ab96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab98:	f7fe fee8 	bl	800996c <HAL_GetTick>
 800ab9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	f040 80e0 	bne.w	800ad6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	9300      	str	r3, [sp, #0]
 800abb0:	2319      	movs	r3, #25
 800abb2:	2201      	movs	r2, #1
 800abb4:	4970      	ldr	r1, [pc, #448]	; (800ad78 <HAL_I2C_Master_Transmit+0x1f4>)
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f002 fd7a 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800abc2:	2302      	movs	r3, #2
 800abc4:	e0d3      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d101      	bne.n	800abd4 <HAL_I2C_Master_Transmit+0x50>
 800abd0:	2302      	movs	r3, #2
 800abd2:	e0cc      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d007      	beq.n	800abfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f042 0201 	orr.w	r2, r2, #1
 800abf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2221      	movs	r2, #33	; 0x21
 800ac0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2210      	movs	r2, #16
 800ac16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	893a      	ldrh	r2, [r7, #8]
 800ac2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4a50      	ldr	r2, [pc, #320]	; (800ad7c <HAL_I2C_Master_Transmit+0x1f8>)
 800ac3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ac3c:	8979      	ldrh	r1, [r7, #10]
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6a3a      	ldr	r2, [r7, #32]
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f002 f9be 	bl	800cfc4 <I2C_MasterRequestWrite>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e08d      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	613b      	str	r3, [r7, #16]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	613b      	str	r3, [r7, #16]
 800ac66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ac68:	e066      	b.n	800ad38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	6a39      	ldr	r1, [r7, #32]
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f002 fdf4 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00d      	beq.n	800ac96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d107      	bne.n	800ac92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e06b      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	781a      	ldrb	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acbe:	3b01      	subs	r3, #1
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d11b      	bne.n	800ad0c <HAL_I2C_Master_Transmit+0x188>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d017      	beq.n	800ad0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	781a      	ldrb	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	3b01      	subs	r3, #1
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	6a39      	ldr	r1, [r7, #32]
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f002 fde4 	bl	800d8de <I2C_WaitOnBTFFlagUntilTimeout>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00d      	beq.n	800ad38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d107      	bne.n	800ad34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e01a      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d194      	bne.n	800ac6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e000      	b.n	800ad6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ad6c:	2302      	movs	r3, #2
  }
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	00100002 	.word	0x00100002
 800ad7c:	ffff0000 	.word	0xffff0000

0800ad80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08c      	sub	sp, #48	; 0x30
 800ad84:	af02      	add	r7, sp, #8
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	607a      	str	r2, [r7, #4]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	817b      	strh	r3, [r7, #10]
 800ad90:	4613      	mov	r3, r2
 800ad92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad94:	f7fe fdea 	bl	800996c <HAL_GetTick>
 800ad98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b20      	cmp	r3, #32
 800ada4:	f040 820b 	bne.w	800b1be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	2319      	movs	r3, #25
 800adae:	2201      	movs	r2, #1
 800adb0:	497c      	ldr	r1, [pc, #496]	; (800afa4 <HAL_I2C_Master_Receive+0x224>)
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f002 fc7c 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800adbe:	2302      	movs	r3, #2
 800adc0:	e1fe      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d101      	bne.n	800add0 <HAL_I2C_Master_Receive+0x50>
 800adcc:	2302      	movs	r3, #2
 800adce:	e1f7      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d007      	beq.n	800adf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f042 0201 	orr.w	r2, r2, #1
 800adf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2222      	movs	r2, #34	; 0x22
 800ae0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2210      	movs	r2, #16
 800ae12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	893a      	ldrh	r2, [r7, #8]
 800ae26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	4a5c      	ldr	r2, [pc, #368]	; (800afa8 <HAL_I2C_Master_Receive+0x228>)
 800ae36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ae38:	8979      	ldrh	r1, [r7, #10]
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f002 f942 	bl	800d0c8 <I2C_MasterRequestRead>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e1b8      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d113      	bne.n	800ae7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae56:	2300      	movs	r3, #0
 800ae58:	623b      	str	r3, [r7, #32]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	623b      	str	r3, [r7, #32]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	623b      	str	r3, [r7, #32]
 800ae6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	e18c      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d11b      	bne.n	800aebe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae96:	2300      	movs	r3, #0
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	61fb      	str	r3, [r7, #28]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	e16c      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d11b      	bne.n	800aefe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aee6:	2300      	movs	r3, #0
 800aee8:	61bb      	str	r3, [r7, #24]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	61bb      	str	r3, [r7, #24]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	61bb      	str	r3, [r7, #24]
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	e14c      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af0e:	2300      	movs	r3, #0
 800af10:	617b      	str	r3, [r7, #20]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	617b      	str	r3, [r7, #20]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	617b      	str	r3, [r7, #20]
 800af22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800af24:	e138      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	f200 80f1 	bhi.w	800b112 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af34:	2b01      	cmp	r3, #1
 800af36:	d123      	bne.n	800af80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f002 fd41 	bl	800d9c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e139      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5e:	1c5a      	adds	r2, r3, #1
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af68:	3b01      	subs	r3, #1
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800af7e:	e10b      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af84:	2b02      	cmp	r3, #2
 800af86:	d14e      	bne.n	800b026 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	9300      	str	r3, [sp, #0]
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	2200      	movs	r2, #0
 800af90:	4906      	ldr	r1, [pc, #24]	; (800afac <HAL_I2C_Master_Receive+0x22c>)
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f002 fb8c 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d008      	beq.n	800afb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e10e      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
 800afa2:	bf00      	nop
 800afa4:	00100002 	.word	0x00100002
 800afa8:	ffff0000 	.word	0xffff0000
 800afac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afdc:	3b01      	subs	r3, #1
 800afde:	b29a      	uxth	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afe8:	b29b      	uxth	r3, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	b29a      	uxth	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	691a      	ldr	r2, [r3, #16]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	b2d2      	uxtb	r2, r2
 800affe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b024:	e0b8      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	2200      	movs	r2, #0
 800b02e:	4966      	ldr	r1, [pc, #408]	; (800b1c8 <HAL_I2C_Master_Receive+0x448>)
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f002 fb3d 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0bf      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b04e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	691a      	ldr	r2, [r3, #16]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	b2d2      	uxtb	r2, r2
 800b05c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b06c:	3b01      	subs	r3, #1
 800b06e:	b29a      	uxth	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	2200      	movs	r2, #0
 800b08a:	494f      	ldr	r1, [pc, #316]	; (800b1c8 <HAL_I2C_Master_Receive+0x448>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f002 fb0f 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e091      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	b2d2      	uxtb	r2, r2
 800b0b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	b2d2      	uxtb	r2, r2
 800b0ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b106:	b29b      	uxth	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b110:	e042      	b.n	800b198 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f002 fc54 	bl	800d9c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e04c      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	691a      	ldr	r2, [r3, #16]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b142:	3b01      	subs	r3, #1
 800b144:	b29a      	uxth	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b14e:	b29b      	uxth	r3, r3
 800b150:	3b01      	subs	r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	f003 0304 	and.w	r3, r3, #4
 800b162:	2b04      	cmp	r3, #4
 800b164:	d118      	bne.n	800b198 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	b2d2      	uxtb	r2, r2
 800b172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18e:	b29b      	uxth	r3, r3
 800b190:	3b01      	subs	r3, #1
 800b192:	b29a      	uxth	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f47f aec2 	bne.w	800af26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e000      	b.n	800b1c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b1be:	2302      	movs	r3, #2
  }
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3728      	adds	r7, #40	; 0x28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	00010004 	.word	0x00010004

0800b1cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4603      	mov	r3, r0
 800b1dc:	817b      	strh	r3, [r7, #10]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	813b      	strh	r3, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b1e6:	f7fe fbc1 	bl	800996c <HAL_GetTick>
 800b1ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b20      	cmp	r3, #32
 800b1f6:	f040 80d9 	bne.w	800b3ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	2319      	movs	r3, #25
 800b200:	2201      	movs	r2, #1
 800b202:	496d      	ldr	r1, [pc, #436]	; (800b3b8 <HAL_I2C_Mem_Write+0x1ec>)
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f002 fa53 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b210:	2302      	movs	r3, #2
 800b212:	e0cc      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_I2C_Mem_Write+0x56>
 800b21e:	2302      	movs	r3, #2
 800b220:	e0c5      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b01      	cmp	r3, #1
 800b236:	d007      	beq.n	800b248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2221      	movs	r2, #33	; 0x21
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2240      	movs	r2, #64	; 0x40
 800b264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6a3a      	ldr	r2, [r7, #32]
 800b272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b27e:	b29a      	uxth	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	4a4d      	ldr	r2, [pc, #308]	; (800b3bc <HAL_I2C_Mem_Write+0x1f0>)
 800b288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b28a:	88f8      	ldrh	r0, [r7, #6]
 800b28c:	893a      	ldrh	r2, [r7, #8]
 800b28e:	8979      	ldrh	r1, [r7, #10]
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4603      	mov	r3, r0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f001 ffe2 	bl	800d264 <I2C_RequestMemoryWrite>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d052      	beq.n	800b34c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e081      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f002 fad4 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00d      	beq.n	800b2d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d107      	bne.n	800b2d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e06b      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2da:	781a      	ldrb	r2, [r3, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	695b      	ldr	r3, [r3, #20]
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b04      	cmp	r3, #4
 800b312:	d11b      	bne.n	800b34c <HAL_I2C_Mem_Write+0x180>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d017      	beq.n	800b34c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1aa      	bne.n	800b2aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	f002 fac0 	bl	800d8de <I2C_WaitOnBTFFlagUntilTimeout>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00d      	beq.n	800b380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	2b04      	cmp	r3, #4
 800b36a:	d107      	bne.n	800b37c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b37a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e016      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b38e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2220      	movs	r2, #32
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e000      	b.n	800b3ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b3ac:	2302      	movs	r3, #2
  }
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	00100002 	.word	0x00100002
 800b3bc:	ffff0000 	.word	0xffff0000

0800b3c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b08c      	sub	sp, #48	; 0x30
 800b3c4:	af02      	add	r7, sp, #8
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	4608      	mov	r0, r1
 800b3ca:	4611      	mov	r1, r2
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	817b      	strh	r3, [r7, #10]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	813b      	strh	r3, [r7, #8]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b3da:	f7fe fac7 	bl	800996c <HAL_GetTick>
 800b3de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b20      	cmp	r3, #32
 800b3ea:	f040 8208 	bne.w	800b7fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	2319      	movs	r3, #25
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	497b      	ldr	r1, [pc, #492]	; (800b5e4 <HAL_I2C_Mem_Read+0x224>)
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f002 f959 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800b404:	2302      	movs	r3, #2
 800b406:	e1fb      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d101      	bne.n	800b416 <HAL_I2C_Mem_Read+0x56>
 800b412:	2302      	movs	r3, #2
 800b414:	e1f4      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d007      	beq.n	800b43c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b44a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2222      	movs	r2, #34	; 0x22
 800b450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2240      	movs	r2, #64	; 0x40
 800b458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800b46c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4a5b      	ldr	r2, [pc, #364]	; (800b5e8 <HAL_I2C_Mem_Read+0x228>)
 800b47c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b47e:	88f8      	ldrh	r0, [r7, #6]
 800b480:	893a      	ldrh	r2, [r7, #8]
 800b482:	8979      	ldrh	r1, [r7, #10]
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	9301      	str	r3, [sp, #4]
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4603      	mov	r3, r0
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f001 ff7e 	bl	800d390 <I2C_RequestMemoryRead>
 800b494:	4603      	mov	r3, r0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e1b0      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d113      	bne.n	800b4ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	623b      	str	r3, [r7, #32]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	623b      	str	r3, [r7, #32]
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	623b      	str	r3, [r7, #32]
 800b4ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e184      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d11b      	bne.n	800b50e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	61fb      	str	r3, [r7, #28]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e164      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b512:	2b02      	cmp	r3, #2
 800b514:	d11b      	bne.n	800b54e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b524:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	61bb      	str	r3, [r7, #24]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	61bb      	str	r3, [r7, #24]
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	e144      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b54e:	2300      	movs	r3, #0
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	617b      	str	r3, [r7, #20]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	617b      	str	r3, [r7, #20]
 800b562:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b564:	e138      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	f200 80f1 	bhi.w	800b752 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b574:	2b01      	cmp	r3, #1
 800b576:	d123      	bne.n	800b5c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b57a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f002 fa21 	bl	800d9c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e139      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	691a      	ldr	r2, [r3, #16]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b596:	b2d2      	uxtb	r2, r2
 800b598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5be:	e10b      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d14e      	bne.n	800b666 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4906      	ldr	r1, [pc, #24]	; (800b5ec <HAL_I2C_Mem_Read+0x22c>)
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f002 f86c 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d008      	beq.n	800b5f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e10e      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
 800b5e2:	bf00      	nop
 800b5e4:	00100002 	.word	0x00100002
 800b5e8:	ffff0000 	.word	0xffff0000
 800b5ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691a      	ldr	r2, [r3, #16]
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b628:	b29b      	uxth	r3, r3
 800b62a:	3b01      	subs	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	3b01      	subs	r3, #1
 800b65e:	b29a      	uxth	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b664:	e0b8      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	2200      	movs	r2, #0
 800b66e:	4966      	ldr	r1, [pc, #408]	; (800b808 <HAL_I2C_Mem_Read+0x448>)
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f002 f81d 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e0bf      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b68e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	691a      	ldr	r2, [r3, #16]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	494f      	ldr	r1, [pc, #316]	; (800b808 <HAL_I2C_Mem_Read+0x448>)
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f001 ffef 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	e091      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	691a      	ldr	r2, [r3, #16]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	b2d2      	uxtb	r2, r2
 800b6f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b708:	3b01      	subs	r3, #1
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b714:	b29b      	uxth	r3, r3
 800b716:	3b01      	subs	r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	691a      	ldr	r2, [r3, #16]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	b2d2      	uxtb	r2, r2
 800b72a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b730:	1c5a      	adds	r2, r3, #1
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b73a:	3b01      	subs	r3, #1
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b750:	e042      	b.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b754:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f002 f934 	bl	800d9c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e04c      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78e:	b29b      	uxth	r3, r3
 800b790:	3b01      	subs	r3, #1
 800b792:	b29a      	uxth	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	f003 0304 	and.w	r3, r3, #4
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d118      	bne.n	800b7d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b0:	b2d2      	uxtb	r2, r2
 800b7b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f47f aec2 	bne.w	800b566 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	e000      	b.n	800b800 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b7fe:	2302      	movs	r3, #2
  }
}
 800b800:	4618      	mov	r0, r3
 800b802:	3728      	adds	r7, #40	; 0x28
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	00010004 	.word	0x00010004

0800b80c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b82c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b834:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	2b10      	cmp	r3, #16
 800b83a:	d003      	beq.n	800b844 <HAL_I2C_EV_IRQHandler+0x38>
 800b83c:	7bfb      	ldrb	r3, [r7, #15]
 800b83e:	2b40      	cmp	r3, #64	; 0x40
 800b840:	f040 80c1 	bne.w	800b9c6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10d      	bne.n	800b87a <HAL_I2C_EV_IRQHandler+0x6e>
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b864:	d003      	beq.n	800b86e <HAL_I2C_EV_IRQHandler+0x62>
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b86c:	d101      	bne.n	800b872 <HAL_I2C_EV_IRQHandler+0x66>
 800b86e:	2301      	movs	r3, #1
 800b870:	e000      	b.n	800b874 <HAL_I2C_EV_IRQHandler+0x68>
 800b872:	2300      	movs	r3, #0
 800b874:	2b01      	cmp	r3, #1
 800b876:	f000 8132 	beq.w	800bade <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00c      	beq.n	800b89e <HAL_I2C_EV_IRQHandler+0x92>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	0a5b      	lsrs	r3, r3, #9
 800b888:	f003 0301 	and.w	r3, r3, #1
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d006      	beq.n	800b89e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f002 f91c 	bl	800dace <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fd79 	bl	800c38e <I2C_Master_SB>
 800b89c:	e092      	b.n	800b9c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	08db      	lsrs	r3, r3, #3
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d009      	beq.n	800b8be <HAL_I2C_EV_IRQHandler+0xb2>
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	0a5b      	lsrs	r3, r3, #9
 800b8ae:	f003 0301 	and.w	r3, r3, #1
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fdef 	bl	800c49a <I2C_Master_ADD10>
 800b8bc:	e082      	b.n	800b9c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	085b      	lsrs	r3, r3, #1
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d009      	beq.n	800b8de <HAL_I2C_EV_IRQHandler+0xd2>
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	0a5b      	lsrs	r3, r3, #9
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d003      	beq.n	800b8de <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fe09 	bl	800c4ee <I2C_Master_ADDR>
 800b8dc:	e072      	b.n	800b9c4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	089b      	lsrs	r3, r3, #2
 800b8e2:	f003 0301 	and.w	r3, r3, #1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d03b      	beq.n	800b962 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8f8:	f000 80f3 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	09db      	lsrs	r3, r3, #7
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00f      	beq.n	800b928 <HAL_I2C_EV_IRQHandler+0x11c>
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	0a9b      	lsrs	r3, r3, #10
 800b90c:	f003 0301 	and.w	r3, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d009      	beq.n	800b928 <HAL_I2C_EV_IRQHandler+0x11c>
 800b914:	69fb      	ldr	r3, [r7, #28]
 800b916:	089b      	lsrs	r3, r3, #2
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f9f3 	bl	800bd0c <I2C_MasterTransmit_TXE>
 800b926:	e04d      	b.n	800b9c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	089b      	lsrs	r3, r3, #2
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 80d6 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	0a5b      	lsrs	r3, r3, #9
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80cf 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	2b21      	cmp	r3, #33	; 0x21
 800b948:	d103      	bne.n	800b952 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fa7a 	bl	800be44 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b950:	e0c7      	b.n	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800b952:	7bfb      	ldrb	r3, [r7, #15]
 800b954:	2b40      	cmp	r3, #64	; 0x40
 800b956:	f040 80c4 	bne.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fae8 	bl	800bf30 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b960:	e0bf      	b.n	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b96c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b970:	f000 80b7 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	099b      	lsrs	r3, r3, #6
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00f      	beq.n	800b9a0 <HAL_I2C_EV_IRQHandler+0x194>
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	0a9b      	lsrs	r3, r3, #10
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <HAL_I2C_EV_IRQHandler+0x194>
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	089b      	lsrs	r3, r3, #2
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fb5d 	bl	800c058 <I2C_MasterReceive_RXNE>
 800b99e:	e011      	b.n	800b9c4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	089b      	lsrs	r3, r3, #2
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 809a 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	0a5b      	lsrs	r3, r3, #9
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8093 	beq.w	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fbfc 	bl	800c1ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9c2:	e08e      	b.n	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800b9c4:	e08d      	b.n	800bae2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	61fb      	str	r3, [r7, #28]
 800b9d6:	e007      	b.n	800b9e8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	085b      	lsrs	r3, r3, #1
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d012      	beq.n	800ba1a <HAL_I2C_EV_IRQHandler+0x20e>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	0a5b      	lsrs	r3, r3, #9
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	699b      	ldr	r3, [r3, #24]
 800ba0e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ba10:	69b9      	ldr	r1, [r7, #24]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 ffba 	bl	800c98c <I2C_Slave_ADDR>
 800ba18:	e066      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	091b      	lsrs	r3, r3, #4
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d009      	beq.n	800ba3a <HAL_I2C_EV_IRQHandler+0x22e>
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	0a5b      	lsrs	r3, r3, #9
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fff4 	bl	800ca20 <I2C_Slave_STOPF>
 800ba38:	e056      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b21      	cmp	r3, #33	; 0x21
 800ba3e:	d002      	beq.n	800ba46 <HAL_I2C_EV_IRQHandler+0x23a>
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	2b29      	cmp	r3, #41	; 0x29
 800ba44:	d125      	bne.n	800ba92 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	09db      	lsrs	r3, r3, #7
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00f      	beq.n	800ba72 <HAL_I2C_EV_IRQHandler+0x266>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	0a9b      	lsrs	r3, r3, #10
 800ba56:	f003 0301 	and.w	r3, r3, #1
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d009      	beq.n	800ba72 <HAL_I2C_EV_IRQHandler+0x266>
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	089b      	lsrs	r3, r3, #2
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d103      	bne.n	800ba72 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fed0 	bl	800c810 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ba70:	e039      	b.n	800bae6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	089b      	lsrs	r3, r3, #2
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d033      	beq.n	800bae6 <HAL_I2C_EV_IRQHandler+0x2da>
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	0a5b      	lsrs	r3, r3, #9
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d02d      	beq.n	800bae6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 fefd 	bl	800c88a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ba90:	e029      	b.n	800bae6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	099b      	lsrs	r3, r3, #6
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00f      	beq.n	800babe <HAL_I2C_EV_IRQHandler+0x2b2>
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	0a9b      	lsrs	r3, r3, #10
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <HAL_I2C_EV_IRQHandler+0x2b2>
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	089b      	lsrs	r3, r3, #2
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d103      	bne.n	800babe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 ff08 	bl	800c8cc <I2C_SlaveReceive_RXNE>
 800babc:	e014      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	089b      	lsrs	r3, r3, #2
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00e      	beq.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	0a5b      	lsrs	r3, r3, #9
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 ff36 	bl	800c948 <I2C_SlaveReceive_BTF>
 800badc:	e004      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800bade:	bf00      	nop
 800bae0:	e002      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800bae2:	bf00      	nop
 800bae4:	e000      	b.n	800bae8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800bae6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800bae8:	3720      	adds	r7, #32
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08a      	sub	sp, #40	; 0x28
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	695b      	ldr	r3, [r3, #20]
 800bafc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bb12:	6a3b      	ldr	r3, [r7, #32]
 800bb14:	0a1b      	lsrs	r3, r3, #8
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00e      	beq.n	800bb3c <HAL_I2C_ER_IRQHandler+0x4e>
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	0a1b      	lsrs	r3, r3, #8
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d008      	beq.n	800bb3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2c:	f043 0301 	orr.w	r3, r3, #1
 800bb30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	0a5b      	lsrs	r3, r3, #9
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d00e      	beq.n	800bb66 <HAL_I2C_ER_IRQHandler+0x78>
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	0a1b      	lsrs	r3, r3, #8
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	f043 0302 	orr.w	r3, r3, #2
 800bb5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800bb64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	0a9b      	lsrs	r3, r3, #10
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d03f      	beq.n	800bbf2 <HAL_I2C_ER_IRQHandler+0x104>
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	0a1b      	lsrs	r3, r3, #8
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d039      	beq.n	800bbf2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800bb7e:	7efb      	ldrb	r3, [r7, #27]
 800bb80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800bb98:	7ebb      	ldrb	r3, [r7, #26]
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d112      	bne.n	800bbc4 <HAL_I2C_ER_IRQHandler+0xd6>
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10f      	bne.n	800bbc4 <HAL_I2C_ER_IRQHandler+0xd6>
 800bba4:	7cfb      	ldrb	r3, [r7, #19]
 800bba6:	2b21      	cmp	r3, #33	; 0x21
 800bba8:	d008      	beq.n	800bbbc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800bbaa:	7cfb      	ldrb	r3, [r7, #19]
 800bbac:	2b29      	cmp	r3, #41	; 0x29
 800bbae:	d005      	beq.n	800bbbc <HAL_I2C_ER_IRQHandler+0xce>
 800bbb0:	7cfb      	ldrb	r3, [r7, #19]
 800bbb2:	2b28      	cmp	r3, #40	; 0x28
 800bbb4:	d106      	bne.n	800bbc4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2b21      	cmp	r3, #33	; 0x21
 800bbba:	d103      	bne.n	800bbc4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 f85f 	bl	800cc80 <I2C_Slave_AF>
 800bbc2:	e016      	b.n	800bbf2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbcc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800bbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd0:	f043 0304 	orr.w	r3, r3, #4
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800bbd6:	7efb      	ldrb	r3, [r7, #27]
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d002      	beq.n	800bbe2 <HAL_I2C_ER_IRQHandler+0xf4>
 800bbdc:	7efb      	ldrb	r3, [r7, #27]
 800bbde:	2b40      	cmp	r3, #64	; 0x40
 800bbe0:	d107      	bne.n	800bbf2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbf0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	0adb      	lsrs	r3, r3, #11
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <HAL_I2C_ER_IRQHandler+0x12e>
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	0a1b      	lsrs	r3, r3, #8
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800bc1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d008      	beq.n	800bc34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 f896 	bl	800cd60 <I2C_ITError>
  }
}
 800bc34:	bf00      	nop
 800bc36:	3728      	adds	r7, #40	; 0x28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	70fb      	strb	r3, [r7, #3]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d150      	bne.n	800bdd4 <I2C_MasterTransmit_TXE+0xc8>
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	2b21      	cmp	r3, #33	; 0x21
 800bd36:	d14d      	bne.n	800bdd4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d01d      	beq.n	800bd7a <I2C_MasterTransmit_TXE+0x6e>
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b20      	cmp	r3, #32
 800bd42:	d01a      	beq.n	800bd7a <I2C_MasterTransmit_TXE+0x6e>
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd4a:	d016      	beq.n	800bd7a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685a      	ldr	r2, [r3, #4]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2211      	movs	r2, #17
 800bd60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff ff62 	bl	800bc3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bd78:	e060      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd88:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd98:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2220      	movs	r2, #32
 800bda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b40      	cmp	r3, #64	; 0x40
 800bdb2:	d107      	bne.n	800bdc4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7ff ff7d 	bl	800bcbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bdc2:	e03b      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff ff35 	bl	800bc3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800bdd2:	e033      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	2b21      	cmp	r3, #33	; 0x21
 800bdd8:	d005      	beq.n	800bde6 <I2C_MasterTransmit_TXE+0xda>
 800bdda:	7bbb      	ldrb	r3, [r7, #14]
 800bddc:	2b40      	cmp	r3, #64	; 0x40
 800bdde:	d12d      	bne.n	800be3c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
 800bde2:	2b22      	cmp	r3, #34	; 0x22
 800bde4:	d12a      	bne.n	800be3c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d108      	bne.n	800be02 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	685a      	ldr	r2, [r3, #4]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdfe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800be00:	e01c      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b40      	cmp	r3, #64	; 0x40
 800be0c:	d103      	bne.n	800be16 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f88e 	bl	800bf30 <I2C_MemoryTransmit_TXE_BTF>
}
 800be14:	e012      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	3b01      	subs	r3, #1
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800be3a:	e7ff      	b.n	800be3c <I2C_MasterTransmit_TXE+0x130>
 800be3c:	bf00      	nop
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be50:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b21      	cmp	r3, #33	; 0x21
 800be5c:	d164      	bne.n	800bf28 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be62:	b29b      	uxth	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	d012      	beq.n	800be8e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6c:	781a      	ldrb	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be82:	b29b      	uxth	r3, r3
 800be84:	3b01      	subs	r3, #1
 800be86:	b29a      	uxth	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800be8c:	e04c      	b.n	800bf28 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b08      	cmp	r3, #8
 800be92:	d01d      	beq.n	800bed0 <I2C_MasterTransmit_BTF+0x8c>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b20      	cmp	r3, #32
 800be98:	d01a      	beq.n	800bed0 <I2C_MasterTransmit_BTF+0x8c>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bea0:	d016      	beq.n	800bed0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685a      	ldr	r2, [r3, #4]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800beb0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2211      	movs	r2, #17
 800beb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2220      	movs	r2, #32
 800bec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff feb7 	bl	800bc3c <HAL_I2C_MasterTxCpltCallback>
}
 800bece:	e02b      	b.n	800bf28 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bede:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800beee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2220      	movs	r2, #32
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b40      	cmp	r3, #64	; 0x40
 800bf08:	d107      	bne.n	800bf1a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff fed2 	bl	800bcbc <HAL_I2C_MemTxCpltCallback>
}
 800bf18:	e006      	b.n	800bf28 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fe8a 	bl	800bc3c <HAL_I2C_MasterTxCpltCallback>
}
 800bf28:	bf00      	nop
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d11d      	bne.n	800bf84 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d10b      	bne.n	800bf68 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf60:	1c9a      	adds	r2, r3, #2
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800bf66:	e073      	b.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	121b      	asrs	r3, r3, #8
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bf82:	e065      	b.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d10b      	bne.n	800bfa4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bfa2:	e055      	b.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d151      	bne.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	2b22      	cmp	r3, #34	; 0x22
 800bfb0:	d10d      	bne.n	800bfce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfc0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bfcc:	e040      	b.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d015      	beq.n	800c004 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	2b21      	cmp	r3, #33	; 0x21
 800bfdc:	d112      	bne.n	800c004 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c002:	e025      	b.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c008:	b29b      	uxth	r3, r3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d120      	bne.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b21      	cmp	r3, #33	; 0x21
 800c012:	d11d      	bne.n	800c050 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c022:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681a      	ldr	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c032:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fe36 	bl	800bcbc <HAL_I2C_MemTxCpltCallback>
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b22      	cmp	r3, #34	; 0x22
 800c06a:	f040 80a2 	bne.w	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c072:	b29b      	uxth	r3, r3
 800c074:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d921      	bls.n	800c0c0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	691a      	ldr	r2, [r3, #16]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	b2d2      	uxtb	r2, r2
 800c088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	2b03      	cmp	r3, #3
 800c0aa:	f040 8082 	bne.w	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0bc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800c0be:	e078      	b.n	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d074      	beq.n	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d002      	beq.n	800c0d4 <I2C_MasterReceive_RXNE+0x7c>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d16e      	bne.n	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 fc43 	bl	800d960 <I2C_WaitOnSTOPRequestThroughIT>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d142      	bne.n	800c166 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0ee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c0fe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	691a      	ldr	r2, [r3, #16]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	1c5a      	adds	r2, r3, #1
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	3b01      	subs	r3, #1
 800c120:	b29a      	uxth	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2220      	movs	r2, #32
 800c12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b40      	cmp	r3, #64	; 0x40
 800c138:	d10a      	bne.n	800c150 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff fdc1 	bl	800bcd0 <HAL_I2C_MemRxCpltCallback>
}
 800c14e:	e030      	b.n	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2212      	movs	r2, #18
 800c15c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff fd76 	bl	800bc50 <HAL_I2C_MasterRxCpltCallback>
}
 800c164:	e025      	b.n	800c1b2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c174:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	691a      	ldr	r2, [r3, #16]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	1c5a      	adds	r2, r3, #1
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c192:	b29b      	uxth	r3, r3
 800c194:	3b01      	subs	r3, #1
 800c196:	b29a      	uxth	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff fd99 	bl	800bce4 <HAL_I2C_ErrorCallback>
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c1ba:	b580      	push	{r7, lr}
 800c1bc:	b084      	sub	sp, #16
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	d11b      	bne.n	800c20a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	b2d2      	uxtb	r2, r2
 800c1ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	3b01      	subs	r3, #1
 800c202:	b29a      	uxth	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800c208:	e0bd      	b.n	800c386 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2b03      	cmp	r3, #3
 800c212:	d129      	bne.n	800c268 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c222:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b04      	cmp	r3, #4
 800c228:	d00a      	beq.n	800c240 <I2C_MasterReceive_BTF+0x86>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d007      	beq.n	800c240 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c23e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	691a      	ldr	r2, [r3, #16]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c252:	1c5a      	adds	r2, r3, #1
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	3b01      	subs	r3, #1
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c266:	e08e      	b.n	800c386 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d176      	bne.n	800c360 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d002      	beq.n	800c27e <I2C_MasterReceive_BTF+0xc4>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d108      	bne.n	800c290 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e019      	b.n	800c2c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b04      	cmp	r3, #4
 800c294:	d002      	beq.n	800c29c <I2C_MasterReceive_BTF+0xe2>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d108      	bne.n	800c2ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	e00a      	b.n	800c2c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b10      	cmp	r3, #16
 800c2b2:	d007      	beq.n	800c2c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	691a      	ldr	r2, [r3, #16]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	b2d2      	uxtb	r2, r2
 800c2d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	691a      	ldr	r2, [r3, #16]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f4:	b2d2      	uxtb	r2, r2
 800c2f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c306:	b29b      	uxth	r3, r3
 800c308:	3b01      	subs	r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685a      	ldr	r2, [r3, #4]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c31e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2220      	movs	r2, #32
 800c324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	2b40      	cmp	r3, #64	; 0x40
 800c332:	d10a      	bne.n	800c34a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fcc4 	bl	800bcd0 <HAL_I2C_MemRxCpltCallback>
}
 800c348:	e01d      	b.n	800c386 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2212      	movs	r2, #18
 800c356:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fc79 	bl	800bc50 <HAL_I2C_MasterRxCpltCallback>
}
 800c35e:	e012      	b.n	800c386 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	691a      	ldr	r2, [r3, #16]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	3b01      	subs	r3, #1
 800c380:	b29a      	uxth	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b40      	cmp	r3, #64	; 0x40
 800c3a0:	d117      	bne.n	800c3d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d109      	bne.n	800c3be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c3ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800c3bc:	e067      	b.n	800c48e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	f043 0301 	orr.w	r3, r3, #1
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	611a      	str	r2, [r3, #16]
}
 800c3d0:	e05d      	b.n	800c48e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3da:	d133      	bne.n	800c444 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b21      	cmp	r3, #33	; 0x21
 800c3e6:	d109      	bne.n	800c3fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c3f8:	611a      	str	r2, [r3, #16]
 800c3fa:	e008      	b.n	800c40e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f043 0301 	orr.w	r3, r3, #1
 800c406:	b2da      	uxtb	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c412:	2b00      	cmp	r3, #0
 800c414:	d004      	beq.n	800c420 <I2C_Master_SB+0x92>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d108      	bne.n	800c432 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c424:	2b00      	cmp	r3, #0
 800c426:	d032      	beq.n	800c48e <I2C_Master_SB+0x100>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d02d      	beq.n	800c48e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	685a      	ldr	r2, [r3, #4]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c440:	605a      	str	r2, [r3, #4]
}
 800c442:	e024      	b.n	800c48e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10e      	bne.n	800c46a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c450:	b29b      	uxth	r3, r3
 800c452:	11db      	asrs	r3, r3, #7
 800c454:	b2db      	uxtb	r3, r3
 800c456:	f003 0306 	and.w	r3, r3, #6
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	f063 030f 	orn	r3, r3, #15
 800c460:	b2da      	uxtb	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	611a      	str	r2, [r3, #16]
}
 800c468:	e011      	b.n	800c48e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d10d      	bne.n	800c48e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c476:	b29b      	uxth	r3, r3
 800c478:	11db      	asrs	r3, r3, #7
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0306 	and.w	r3, r3, #6
 800c480:	b2db      	uxtb	r3, r3
 800c482:	f063 030e 	orn	r3, r3, #14
 800c486:	b2da      	uxtb	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	611a      	str	r2, [r3, #16]
}
 800c48e:	bf00      	nop
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800c49a:	b480      	push	{r7}
 800c49c:	b083      	sub	sp, #12
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <I2C_Master_ADD10+0x26>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d108      	bne.n	800c4d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d00c      	beq.n	800c4e2 <I2C_Master_ADD10+0x48>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d007      	beq.n	800c4e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4e0:	605a      	str	r2, [r3, #4]
  }
}
 800c4e2:	bf00      	nop
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b091      	sub	sp, #68	; 0x44
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c512:	b2db      	uxtb	r3, r3
 800c514:	2b22      	cmp	r3, #34	; 0x22
 800c516:	f040 8169 	bne.w	800c7ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10f      	bne.n	800c542 <I2C_Master_ADDR+0x54>
 800c522:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c526:	2b40      	cmp	r3, #64	; 0x40
 800c528:	d10b      	bne.n	800c542 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c52a:	2300      	movs	r3, #0
 800c52c:	633b      	str	r3, [r7, #48]	; 0x30
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	695b      	ldr	r3, [r3, #20]
 800c534:	633b      	str	r3, [r7, #48]	; 0x30
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	699b      	ldr	r3, [r3, #24]
 800c53c:	633b      	str	r3, [r7, #48]	; 0x30
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	e160      	b.n	800c804 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c546:	2b00      	cmp	r3, #0
 800c548:	d11d      	bne.n	800c586 <I2C_Master_ADDR+0x98>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c552:	d118      	bne.n	800c586 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c554:	2300      	movs	r3, #0
 800c556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c578:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	651a      	str	r2, [r3, #80]	; 0x50
 800c584:	e13e      	b.n	800c804 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d113      	bne.n	800c5b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c590:	2300      	movs	r3, #0
 800c592:	62bb      	str	r3, [r7, #40]	; 0x28
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	e115      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	f040 808a 	bne.w	800c6d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c5ca:	d137      	bne.n	800c63c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5ea:	d113      	bne.n	800c614 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	627b      	str	r3, [r7, #36]	; 0x24
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	e0e7      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c614:	2300      	movs	r3, #0
 800c616:	623b      	str	r3, [r7, #32]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	695b      	ldr	r3, [r3, #20]
 800c61e:	623b      	str	r3, [r7, #32]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	699b      	ldr	r3, [r3, #24]
 800c626:	623b      	str	r3, [r7, #32]
 800c628:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c638:	601a      	str	r2, [r3, #0]
 800c63a:	e0d3      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800c63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63e:	2b08      	cmp	r3, #8
 800c640:	d02e      	beq.n	800c6a0 <I2C_Master_ADDR+0x1b2>
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	2b20      	cmp	r3, #32
 800c646:	d02b      	beq.n	800c6a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	2b12      	cmp	r3, #18
 800c64c:	d102      	bne.n	800c654 <I2C_Master_ADDR+0x166>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	2b01      	cmp	r3, #1
 800c652:	d125      	bne.n	800c6a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	2b04      	cmp	r3, #4
 800c658:	d00e      	beq.n	800c678 <I2C_Master_ADDR+0x18a>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d00b      	beq.n	800c678 <I2C_Master_ADDR+0x18a>
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	2b10      	cmp	r3, #16
 800c664:	d008      	beq.n	800c678 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	e007      	b.n	800c688 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c686:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c688:	2300      	movs	r3, #0
 800c68a:	61fb      	str	r3, [r7, #28]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	61fb      	str	r3, [r7, #28]
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	e0a1      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	61bb      	str	r3, [r7, #24]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	695b      	ldr	r3, [r3, #20]
 800c6ba:	61bb      	str	r3, [r7, #24]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	61bb      	str	r3, [r7, #24]
 800c6c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	e085      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	2b02      	cmp	r3, #2
 800c6e0:	d14d      	bne.n	800c77e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	d016      	beq.n	800c716 <I2C_Master_ADDR+0x228>
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d013      	beq.n	800c716 <I2C_Master_ADDR+0x228>
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f0:	2b10      	cmp	r3, #16
 800c6f2:	d010      	beq.n	800c716 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c702:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	e007      	b.n	800c726 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c724:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c734:	d117      	bne.n	800c766 <I2C_Master_ADDR+0x278>
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c73c:	d00b      	beq.n	800c756 <I2C_Master_ADDR+0x268>
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	2b01      	cmp	r3, #1
 800c742:	d008      	beq.n	800c756 <I2C_Master_ADDR+0x268>
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	2b08      	cmp	r3, #8
 800c748:	d005      	beq.n	800c756 <I2C_Master_ADDR+0x268>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	2b10      	cmp	r3, #16
 800c74e:	d002      	beq.n	800c756 <I2C_Master_ADDR+0x268>
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	2b20      	cmp	r3, #32
 800c754:	d107      	bne.n	800c766 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c764:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	695b      	ldr	r3, [r3, #20]
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	617b      	str	r3, [r7, #20]
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	e032      	b.n	800c7e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c78c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c79c:	d117      	bne.n	800c7ce <I2C_Master_ADDR+0x2e0>
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c7a4:	d00b      	beq.n	800c7be <I2C_Master_ADDR+0x2d0>
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d008      	beq.n	800c7be <I2C_Master_ADDR+0x2d0>
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	2b08      	cmp	r3, #8
 800c7b0:	d005      	beq.n	800c7be <I2C_Master_ADDR+0x2d0>
 800c7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b4:	2b10      	cmp	r3, #16
 800c7b6:	d002      	beq.n	800c7be <I2C_Master_ADDR+0x2d0>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	2b20      	cmp	r3, #32
 800c7bc:	d107      	bne.n	800c7ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	613b      	str	r3, [r7, #16]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	613b      	str	r3, [r7, #16]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800c7ea:	e00b      	b.n	800c804 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	68fb      	ldr	r3, [r7, #12]
}
 800c802:	e7ff      	b.n	800c804 <I2C_Master_ADDR+0x316>
 800c804:	bf00      	nop
 800c806:	3744      	adds	r7, #68	; 0x44
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c81e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c824:	b29b      	uxth	r3, r3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d02b      	beq.n	800c882 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82e:	781a      	ldrb	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c844:	b29b      	uxth	r3, r3
 800c846:	3b01      	subs	r3, #1
 800c848:	b29a      	uxth	r2, r3
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c852:	b29b      	uxth	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	d114      	bne.n	800c882 <I2C_SlaveTransmit_TXE+0x72>
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	2b29      	cmp	r3, #41	; 0x29
 800c85c:	d111      	bne.n	800c882 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c86c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2221      	movs	r2, #33	; 0x21
 800c872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2228      	movs	r2, #40	; 0x28
 800c878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff f9f1 	bl	800bc64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c882:	bf00      	nop
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c896:	b29b      	uxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d011      	beq.n	800c8c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	781a      	ldrb	r2, [r3, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d02c      	beq.n	800c940 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	691a      	ldr	r2, [r3, #16]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c902:	b29b      	uxth	r3, r3
 800c904:	3b01      	subs	r3, #1
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c910:	b29b      	uxth	r3, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d114      	bne.n	800c940 <I2C_SlaveReceive_RXNE+0x74>
 800c916:	7bfb      	ldrb	r3, [r7, #15]
 800c918:	2b2a      	cmp	r3, #42	; 0x2a
 800c91a:	d111      	bne.n	800c940 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c92a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2222      	movs	r2, #34	; 0x22
 800c930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2228      	movs	r2, #40	; 0x28
 800c936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff f99c 	bl	800bc78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800c940:	bf00      	nop
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c954:	b29b      	uxth	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	d012      	beq.n	800c980 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	691a      	ldr	r2, [r3, #16]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c976:	b29b      	uxth	r3, r3
 800c978:	3b01      	subs	r3, #1
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800c996:	2300      	movs	r3, #0
 800c998:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c9a6:	2b28      	cmp	r3, #40	; 0x28
 800c9a8:	d127      	bne.n	800c9fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	089b      	lsrs	r3, r3, #2
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d101      	bne.n	800c9ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	09db      	lsrs	r3, r3, #7
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d103      	bne.n	800c9de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	81bb      	strh	r3, [r7, #12]
 800c9dc:	e002      	b.n	800c9e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800c9ec:	89ba      	ldrh	r2, [r7, #12]
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff f94a 	bl	800bc8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c9f8:	e00e      	b.n	800ca18 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60bb      	str	r3, [r7, #8]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	695b      	ldr	r3, [r3, #20]
 800ca04:	60bb      	str	r3, [r7, #8]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	699b      	ldr	r3, [r3, #24]
 800ca0c:	60bb      	str	r3, [r7, #8]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ca40:	2300      	movs	r3, #0
 800ca42:	60bb      	str	r3, [r7, #8]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f042 0201 	orr.w	r2, r2, #1
 800ca5a:	601a      	str	r2, [r3, #0]
 800ca5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca7c:	d172      	bne.n	800cb64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	2b22      	cmp	r3, #34	; 0x22
 800ca82:	d002      	beq.n	800ca8a <I2C_Slave_STOPF+0x6a>
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	2b2a      	cmp	r3, #42	; 0x2a
 800ca88:	d135      	bne.n	800caf6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d005      	beq.n	800caae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	f043 0204 	orr.w	r2, r3, #4
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cabc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fd fc44 	bl	800a350 <HAL_DMA_GetState>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d049      	beq.n	800cb62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad2:	4a69      	ldr	r2, [pc, #420]	; (800cc78 <I2C_Slave_STOPF+0x258>)
 800cad4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fd fa8c 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d03d      	beq.n	800cb62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800caf0:	4610      	mov	r0, r2
 800caf2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800caf4:	e035      	b.n	800cb62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d005      	beq.n	800cb1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	f043 0204 	orr.w	r2, r3, #4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fd fc0e 	bl	800a350 <HAL_DMA_GetState>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d014      	beq.n	800cb64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3e:	4a4e      	ldr	r2, [pc, #312]	; (800cc78 <I2C_Slave_STOPF+0x258>)
 800cb40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fd fa56 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d008      	beq.n	800cb64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	4798      	blx	r3
 800cb60:	e000      	b.n	800cb64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cb62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d03e      	beq.n	800cbec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	d112      	bne.n	800cba2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	691a      	ldr	r2, [r3, #16]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbac:	2b40      	cmp	r3, #64	; 0x40
 800cbae:	d112      	bne.n	800cbd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	691a      	ldr	r2, [r3, #16]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbba:	b2d2      	uxtb	r2, r2
 800cbbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc2:	1c5a      	adds	r2, r3, #1
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d005      	beq.n	800cbec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe4:	f043 0204 	orr.w	r2, r3, #4
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d003      	beq.n	800cbfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f8b3 	bl	800cd60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800cbfa:	e039      	b.n	800cc70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800cc00:	d109      	bne.n	800cc16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2200      	movs	r2, #0
 800cc06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2228      	movs	r2, #40	; 0x28
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7ff f831 	bl	800bc78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	2b28      	cmp	r3, #40	; 0x28
 800cc20:	d111      	bne.n	800cc46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a15      	ldr	r2, [pc, #84]	; (800cc7c <I2C_Slave_STOPF+0x25c>)
 800cc26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2220      	movs	r2, #32
 800cc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff f832 	bl	800bca8 <HAL_I2C_ListenCpltCallback>
}
 800cc44:	e014      	b.n	800cc70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	2b22      	cmp	r3, #34	; 0x22
 800cc4c:	d002      	beq.n	800cc54 <I2C_Slave_STOPF+0x234>
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	2b22      	cmp	r3, #34	; 0x22
 800cc52:	d10d      	bne.n	800cc70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2200      	movs	r2, #0
 800cc58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff f804 	bl	800bc78 <HAL_I2C_SlaveRxCpltCallback>
}
 800cc70:	bf00      	nop
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	0800d561 	.word	0x0800d561
 800cc7c:	ffff0000 	.word	0xffff0000

0800cc80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d002      	beq.n	800cca2 <I2C_Slave_AF+0x22>
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d129      	bne.n	800ccf6 <I2C_Slave_AF+0x76>
 800cca2:	7bfb      	ldrb	r3, [r7, #15]
 800cca4:	2b28      	cmp	r3, #40	; 0x28
 800cca6:	d126      	bne.n	800ccf6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a2c      	ldr	r2, [pc, #176]	; (800cd5c <I2C_Slave_AF+0xdc>)
 800ccac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ccbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ccc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7fe ffda 	bl	800bca8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800ccf4:	e02e      	b.n	800cd54 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
 800ccf8:	2b21      	cmp	r3, #33	; 0x21
 800ccfa:	d126      	bne.n	800cd4a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a17      	ldr	r2, [pc, #92]	; (800cd5c <I2C_Slave_AF+0xdc>)
 800cd00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2221      	movs	r2, #33	; 0x21
 800cd06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2220      	movs	r2, #32
 800cd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cd26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cd30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd40:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7fe ff8e 	bl	800bc64 <HAL_I2C_SlaveTxCpltCallback>
}
 800cd48:	e004      	b.n	800cd54 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cd52:	615a      	str	r2, [r3, #20]
}
 800cd54:	bf00      	nop
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}
 800cd5c:	ffff0000 	.word	0xffff0000

0800cd60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	2b10      	cmp	r3, #16
 800cd7c:	d002      	beq.n	800cd84 <I2C_ITError+0x24>
 800cd7e:	7bbb      	ldrb	r3, [r7, #14]
 800cd80:	2b40      	cmp	r3, #64	; 0x40
 800cd82:	d10a      	bne.n	800cd9a <I2C_ITError+0x3a>
 800cd84:	7bfb      	ldrb	r3, [r7, #15]
 800cd86:	2b22      	cmp	r3, #34	; 0x22
 800cd88:	d107      	bne.n	800cd9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
 800cd9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cda0:	2b28      	cmp	r3, #40	; 0x28
 800cda2:	d107      	bne.n	800cdb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2228      	movs	r2, #40	; 0x28
 800cdae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800cdb2:	e015      	b.n	800cde0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdc2:	d00a      	beq.n	800cdda <I2C_ITError+0x7a>
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	2b60      	cmp	r3, #96	; 0x60
 800cdc8:	d007      	beq.n	800cdda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2200      	movs	r2, #0
 800cdde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdee:	d162      	bne.n	800ceb6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d020      	beq.n	800ce50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce12:	4a6a      	ldr	r2, [pc, #424]	; (800cfbc <I2C_ITError+0x25c>)
 800ce14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fd f8ec 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 8089 	beq.w	800cf3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 0201 	bic.w	r2, r2, #1
 800ce36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	4798      	blx	r3
 800ce4e:	e074      	b.n	800cf3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce54:	4a59      	ldr	r2, [pc, #356]	; (800cfbc <I2C_ITError+0x25c>)
 800ce56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fd f8cb 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d068      	beq.n	800cf3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce72:	2b40      	cmp	r3, #64	; 0x40
 800ce74:	d10b      	bne.n	800ce8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	691a      	ldr	r2, [r3, #16]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	1c5a      	adds	r2, r3, #1
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f022 0201 	bic.w	r2, r2, #1
 800ce9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	4798      	blx	r3
 800ceb4:	e041      	b.n	800cf3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	2b60      	cmp	r3, #96	; 0x60
 800cec0:	d125      	bne.n	800cf0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	695b      	ldr	r3, [r3, #20]
 800ced6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceda:	2b40      	cmp	r3, #64	; 0x40
 800cedc:	d10b      	bne.n	800cef6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee8:	b2d2      	uxtb	r2, r2
 800ceea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0201 	bic.w	r2, r2, #1
 800cf04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7fe fef6 	bl	800bcf8 <HAL_I2C_AbortCpltCallback>
 800cf0c:	e015      	b.n	800cf3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf18:	2b40      	cmp	r3, #64	; 0x40
 800cf1a:	d10b      	bne.n	800cf34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	691a      	ldr	r2, [r3, #16]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	1c5a      	adds	r2, r3, #1
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fe fed5 	bl	800bce4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10e      	bne.n	800cf68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d109      	bne.n	800cf68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d104      	bne.n	800cf68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d007      	beq.n	800cf78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	685a      	ldr	r2, [r3, #4]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800cf76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf84:	f003 0304 	and.w	r3, r3, #4
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	d113      	bne.n	800cfb4 <I2C_ITError+0x254>
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	2b28      	cmp	r3, #40	; 0x28
 800cf90:	d110      	bne.n	800cfb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a0a      	ldr	r2, [pc, #40]	; (800cfc0 <I2C_ITError+0x260>)
 800cf96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7fe fe7a 	bl	800bca8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cfb4:	bf00      	nop
 800cfb6:	3710      	adds	r7, #16
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	0800d561 	.word	0x0800d561
 800cfc0:	ffff0000 	.word	0xffff0000

0800cfc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af02      	add	r7, sp, #8
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	607a      	str	r2, [r7, #4]
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b08      	cmp	r3, #8
 800cfde:	d006      	beq.n	800cfee <I2C_MasterRequestWrite+0x2a>
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d003      	beq.n	800cfee <I2C_MasterRequestWrite+0x2a>
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cfec:	d108      	bne.n	800d000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cffc:	601a      	str	r2, [r3, #0]
 800cffe:	e00b      	b.n	800d018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d004:	2b12      	cmp	r3, #18
 800d006:	d107      	bne.n	800d018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681a      	ldr	r2, [r3, #0]
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f000 fb43 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00d      	beq.n	800d04c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03e:	d103      	bne.n	800d048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d048:	2303      	movs	r3, #3
 800d04a:	e035      	b.n	800d0b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d054:	d108      	bne.n	800d068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d056:	897b      	ldrh	r3, [r7, #10]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	461a      	mov	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d064:	611a      	str	r2, [r3, #16]
 800d066:	e01b      	b.n	800d0a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d068:	897b      	ldrh	r3, [r7, #10]
 800d06a:	11db      	asrs	r3, r3, #7
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	f003 0306 	and.w	r3, r3, #6
 800d072:	b2db      	uxtb	r3, r3
 800d074:	f063 030f 	orn	r3, r3, #15
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	490e      	ldr	r1, [pc, #56]	; (800d0c0 <I2C_MasterRequestWrite+0xfc>)
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 fb69 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e010      	b.n	800d0b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d096:	897b      	ldrh	r3, [r7, #10]
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	4907      	ldr	r1, [pc, #28]	; (800d0c4 <I2C_MasterRequestWrite+0x100>)
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f000 fb59 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e000      	b.n	800d0b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3718      	adds	r7, #24
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	00010008 	.word	0x00010008
 800d0c4:	00010002 	.word	0x00010002

0800d0c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b088      	sub	sp, #32
 800d0cc:	af02      	add	r7, sp, #8
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	607a      	str	r2, [r7, #4]
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	2b08      	cmp	r3, #8
 800d0f2:	d006      	beq.n	800d102 <I2C_MasterRequestRead+0x3a>
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d003      	beq.n	800d102 <I2C_MasterRequestRead+0x3a>
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d100:	d108      	bne.n	800d114 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d110:	601a      	str	r2, [r3, #0]
 800d112:	e00b      	b.n	800d12c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d118:	2b11      	cmp	r3, #17
 800d11a:	d107      	bne.n	800d12c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d12a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f000 fab9 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00d      	beq.n	800d160 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d152:	d103      	bne.n	800d15c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d15a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d15c:	2303      	movs	r3, #3
 800d15e:	e079      	b.n	800d254 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d168:	d108      	bne.n	800d17c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d16a:	897b      	ldrh	r3, [r7, #10]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	f043 0301 	orr.w	r3, r3, #1
 800d172:	b2da      	uxtb	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	611a      	str	r2, [r3, #16]
 800d17a:	e05f      	b.n	800d23c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d17c:	897b      	ldrh	r3, [r7, #10]
 800d17e:	11db      	asrs	r3, r3, #7
 800d180:	b2db      	uxtb	r3, r3
 800d182:	f003 0306 	and.w	r3, r3, #6
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f063 030f 	orn	r3, r3, #15
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4930      	ldr	r1, [pc, #192]	; (800d25c <I2C_MasterRequestRead+0x194>)
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 fadf 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e054      	b.n	800d254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d1aa:	897b      	ldrh	r3, [r7, #10]
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	4929      	ldr	r1, [pc, #164]	; (800d260 <I2C_MasterRequestRead+0x198>)
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 facf 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e044      	b.n	800d254 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	613b      	str	r3, [r7, #16]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	613b      	str	r3, [r7, #16]
 800d1de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d1ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	9300      	str	r3, [sp, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f000 fa57 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00d      	beq.n	800d224 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d216:	d103      	bne.n	800d220 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d21e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800d220:	2303      	movs	r3, #3
 800d222:	e017      	b.n	800d254 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d224:	897b      	ldrh	r3, [r7, #10]
 800d226:	11db      	asrs	r3, r3, #7
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	f003 0306 	and.w	r3, r3, #6
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	f063 030e 	orn	r3, r3, #14
 800d234:	b2da      	uxtb	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	4907      	ldr	r1, [pc, #28]	; (800d260 <I2C_MasterRequestRead+0x198>)
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 fa8b 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e000      	b.n	800d254 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	00010008 	.word	0x00010008
 800d260:	00010002 	.word	0x00010002

0800d264 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af02      	add	r7, sp, #8
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	4608      	mov	r0, r1
 800d26e:	4611      	mov	r1, r2
 800d270:	461a      	mov	r2, r3
 800d272:	4603      	mov	r3, r0
 800d274:	817b      	strh	r3, [r7, #10]
 800d276:	460b      	mov	r3, r1
 800d278:	813b      	strh	r3, [r7, #8]
 800d27a:	4613      	mov	r3, r2
 800d27c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d28c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	2200      	movs	r2, #0
 800d296:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 fa08 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00d      	beq.n	800d2c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2b4:	d103      	bne.n	800d2be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e05f      	b.n	800d382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d2c2:	897b      	ldrh	r3, [r7, #10]
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d2d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d4:	6a3a      	ldr	r2, [r7, #32]
 800d2d6:	492d      	ldr	r1, [pc, #180]	; (800d38c <I2C_RequestMemoryWrite+0x128>)
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 fa40 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e04c      	b.n	800d382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	617b      	str	r3, [r7, #20]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	617b      	str	r3, [r7, #20]
 800d2fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d300:	6a39      	ldr	r1, [r7, #32]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f000 faaa 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00d      	beq.n	800d32a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	2b04      	cmp	r3, #4
 800d314:	d107      	bne.n	800d326 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e02b      	b.n	800d382 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d32a:	88fb      	ldrh	r3, [r7, #6]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d105      	bne.n	800d33c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d330:	893b      	ldrh	r3, [r7, #8]
 800d332:	b2da      	uxtb	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	611a      	str	r2, [r3, #16]
 800d33a:	e021      	b.n	800d380 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d33c:	893b      	ldrh	r3, [r7, #8]
 800d33e:	0a1b      	lsrs	r3, r3, #8
 800d340:	b29b      	uxth	r3, r3
 800d342:	b2da      	uxtb	r2, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d34c:	6a39      	ldr	r1, [r7, #32]
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f000 fa84 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d00d      	beq.n	800d376 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d107      	bne.n	800d372 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e005      	b.n	800d382 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d376:	893b      	ldrh	r3, [r7, #8]
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d380:	2300      	movs	r3, #0
}
 800d382:	4618      	mov	r0, r3
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	00010002 	.word	0x00010002

0800d390 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b088      	sub	sp, #32
 800d394:	af02      	add	r7, sp, #8
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	4608      	mov	r0, r1
 800d39a:	4611      	mov	r1, r2
 800d39c:	461a      	mov	r2, r3
 800d39e:	4603      	mov	r3, r0
 800d3a0:	817b      	strh	r3, [r7, #10]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	813b      	strh	r3, [r7, #8]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d3b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f000 f96a 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00d      	beq.n	800d3fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f0:	d103      	bne.n	800d3fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e0aa      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d3fe:	897b      	ldrh	r3, [r7, #10]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	461a      	mov	r2, r3
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d40c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d410:	6a3a      	ldr	r2, [r7, #32]
 800d412:	4952      	ldr	r1, [pc, #328]	; (800d55c <I2C_RequestMemoryRead+0x1cc>)
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f000 f9a2 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e097      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d424:	2300      	movs	r3, #0
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	695b      	ldr	r3, [r3, #20]
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	699b      	ldr	r3, [r3, #24]
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43c:	6a39      	ldr	r1, [r7, #32]
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f000 fa0c 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00d      	beq.n	800d466 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d107      	bne.n	800d462 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e076      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d466:	88fb      	ldrh	r3, [r7, #6]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d105      	bne.n	800d478 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d46c:	893b      	ldrh	r3, [r7, #8]
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	611a      	str	r2, [r3, #16]
 800d476:	e021      	b.n	800d4bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d478:	893b      	ldrh	r3, [r7, #8]
 800d47a:	0a1b      	lsrs	r3, r3, #8
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d488:	6a39      	ldr	r1, [r7, #32]
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f000 f9e6 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	d107      	bne.n	800d4ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e050      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d4b2:	893b      	ldrh	r3, [r7, #8]
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4be:	6a39      	ldr	r1, [r7, #32]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 f9cb 	bl	800d85c <I2C_WaitOnTXEFlagUntilTimeout>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00d      	beq.n	800d4e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d107      	bne.n	800d4e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e035      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f000 f8d3 	bl	800d6b0 <I2C_WaitOnFlagUntilTimeout>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00d      	beq.n	800d52c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d51e:	d103      	bne.n	800d528 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d528:	2303      	movs	r3, #3
 800d52a:	e013      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d52c:	897b      	ldrh	r3, [r7, #10]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	f043 0301 	orr.w	r3, r3, #1
 800d534:	b2da      	uxtb	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53e:	6a3a      	ldr	r2, [r7, #32]
 800d540:	4906      	ldr	r1, [pc, #24]	; (800d55c <I2C_RequestMemoryRead+0x1cc>)
 800d542:	68f8      	ldr	r0, [r7, #12]
 800d544:	f000 f90b 	bl	800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d54e:	2301      	movs	r3, #1
 800d550:	e000      	b.n	800d554 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	00010002 	.word	0x00010002

0800d560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d570:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d578:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800d57a:	4b4b      	ldr	r3, [pc, #300]	; (800d6a8 <I2C_DMAAbort+0x148>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	08db      	lsrs	r3, r3, #3
 800d580:	4a4a      	ldr	r2, [pc, #296]	; (800d6ac <I2C_DMAAbort+0x14c>)
 800d582:	fba2 2303 	umull	r2, r3, r2, r3
 800d586:	0a1a      	lsrs	r2, r3, #8
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	00da      	lsls	r2, r3, #3
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59e:	f043 0220 	orr.w	r2, r3, #32
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800d5a6:	e00a      	b.n	800d5be <I2C_DMAAbort+0x5e>
    }
    count--;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5bc:	d0ea      	beq.n	800d594 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5da:	2200      	movs	r2, #0
 800d5dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	2200      	movs	r2, #0
 800d602:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d610:	2200      	movs	r2, #0
 800d612:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0201 	bic.w	r2, r2, #1
 800d622:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b60      	cmp	r3, #96	; 0x60
 800d62e:	d10e      	bne.n	800d64e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2220      	movs	r2, #32
 800d634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	2200      	movs	r2, #0
 800d644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d646:	6978      	ldr	r0, [r7, #20]
 800d648:	f7fe fb56 	bl	800bcf8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d64c:	e027      	b.n	800d69e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d64e:	7cfb      	ldrb	r3, [r7, #19]
 800d650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d654:	2b28      	cmp	r3, #40	; 0x28
 800d656:	d117      	bne.n	800d688 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0201 	orr.w	r2, r2, #1
 800d666:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2200      	movs	r2, #0
 800d67c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2228      	movs	r2, #40	; 0x28
 800d682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d686:	e007      	b.n	800d698 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	2220      	movs	r2, #32
 800d68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	2200      	movs	r2, #0
 800d694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800d698:	6978      	ldr	r0, [r7, #20]
 800d69a:	f7fe fb23 	bl	800bce4 <HAL_I2C_ErrorCallback>
}
 800d69e:	bf00      	nop
 800d6a0:	3718      	adds	r7, #24
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000034 	.word	0x20000034
 800d6ac:	14f8b589 	.word	0x14f8b589

0800d6b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	603b      	str	r3, [r7, #0]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d6c0:	e025      	b.n	800d70e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c8:	d021      	beq.n	800d70e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ca:	f7fc f94f 	bl	800996c <HAL_GetTick>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	683a      	ldr	r2, [r7, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d302      	bcc.n	800d6e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d116      	bne.n	800d70e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fa:	f043 0220 	orr.w	r2, r3, #32
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e023      	b.n	800d756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	0c1b      	lsrs	r3, r3, #16
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b01      	cmp	r3, #1
 800d716:	d10d      	bne.n	800d734 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	695b      	ldr	r3, [r3, #20]
 800d71e:	43da      	mvns	r2, r3
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4013      	ands	r3, r2
 800d724:	b29b      	uxth	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	bf0c      	ite	eq
 800d72a:	2301      	moveq	r3, #1
 800d72c:	2300      	movne	r3, #0
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	461a      	mov	r2, r3
 800d732:	e00c      	b.n	800d74e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	43da      	mvns	r2, r3
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	4013      	ands	r3, r2
 800d740:	b29b      	uxth	r3, r3
 800d742:	2b00      	cmp	r3, #0
 800d744:	bf0c      	ite	eq
 800d746:	2301      	moveq	r3, #1
 800d748:	2300      	movne	r3, #0
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	461a      	mov	r2, r3
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	429a      	cmp	r2, r3
 800d752:	d0b6      	beq.n	800d6c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	607a      	str	r2, [r7, #4]
 800d76a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d76c:	e051      	b.n	800d812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d77c:	d123      	bne.n	800d7c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d78c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2200      	movs	r2, #0
 800d79c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	f043 0204 	orr.w	r2, r3, #4
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e046      	b.n	800d854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7cc:	d021      	beq.n	800d812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7ce:	f7fc f8cd 	bl	800996c <HAL_GetTick>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d302      	bcc.n	800d7e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d116      	bne.n	800d812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2220      	movs	r2, #32
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	f043 0220 	orr.w	r2, r3, #32
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e020      	b.n	800d854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	0c1b      	lsrs	r3, r3, #16
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d10c      	bne.n	800d836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	43da      	mvns	r2, r3
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	4013      	ands	r3, r2
 800d828:	b29b      	uxth	r3, r3
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	bf14      	ite	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	2300      	moveq	r3, #0
 800d832:	b2db      	uxtb	r3, r3
 800d834:	e00b      	b.n	800d84e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	43da      	mvns	r2, r3
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	4013      	ands	r3, r2
 800d842:	b29b      	uxth	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	bf14      	ite	ne
 800d848:	2301      	movne	r3, #1
 800d84a:	2300      	moveq	r3, #0
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d18d      	bne.n	800d76e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d868:	e02d      	b.n	800d8c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 f900 	bl	800da70 <I2C_IsAcknowledgeFailed>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e02d      	b.n	800d8d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d880:	d021      	beq.n	800d8c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d882:	f7fc f873 	bl	800996c <HAL_GetTick>
 800d886:	4602      	mov	r2, r0
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	1ad3      	subs	r3, r2, r3
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d302      	bcc.n	800d898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d116      	bne.n	800d8c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2200      	movs	r2, #0
 800d89c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2220      	movs	r2, #32
 800d8a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b2:	f043 0220 	orr.w	r2, r3, #32
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e007      	b.n	800d8d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d0:	2b80      	cmp	r3, #128	; 0x80
 800d8d2:	d1ca      	bne.n	800d86a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b084      	sub	sp, #16
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	60f8      	str	r0, [r7, #12]
 800d8e6:	60b9      	str	r1, [r7, #8]
 800d8e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d8ea:	e02d      	b.n	800d948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 f8bf 	bl	800da70 <I2C_IsAcknowledgeFailed>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e02d      	b.n	800d958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d902:	d021      	beq.n	800d948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d904:	f7fc f832 	bl	800996c <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	68ba      	ldr	r2, [r7, #8]
 800d910:	429a      	cmp	r2, r3
 800d912:	d302      	bcc.n	800d91a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d116      	bne.n	800d948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2220      	movs	r2, #32
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d934:	f043 0220 	orr.w	r2, r3, #32
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	e007      	b.n	800d958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	f003 0304 	and.w	r3, r3, #4
 800d952:	2b04      	cmp	r3, #4
 800d954:	d1ca      	bne.n	800d8ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800d96c:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	08db      	lsrs	r3, r3, #3
 800d972:	4a13      	ldr	r2, [pc, #76]	; (800d9c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800d974:	fba2 2303 	umull	r2, r3, r2, r3
 800d978:	0a1a      	lsrs	r2, r3, #8
 800d97a:	4613      	mov	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3b01      	subs	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d107      	bne.n	800d99e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	f043 0220 	orr.w	r2, r3, #32
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e008      	b.n	800d9b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9ac:	d0e9      	beq.n	800d982 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	20000034 	.word	0x20000034
 800d9c0:	14f8b589 	.word	0x14f8b589

0800d9c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d9d0:	e042      	b.n	800da58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	695b      	ldr	r3, [r3, #20]
 800d9d8:	f003 0310 	and.w	r3, r3, #16
 800d9dc:	2b10      	cmp	r3, #16
 800d9de:	d119      	bne.n	800da14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f06f 0210 	mvn.w	r2, #16
 800d9e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	e029      	b.n	800da68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da14:	f7fb ffaa 	bl	800996c <HAL_GetTick>
 800da18:	4602      	mov	r2, r0
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	429a      	cmp	r2, r3
 800da22:	d302      	bcc.n	800da2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d116      	bne.n	800da58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	2200      	movs	r2, #0
 800da2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2220      	movs	r2, #32
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da44:	f043 0220 	orr.w	r2, r3, #32
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2200      	movs	r2, #0
 800da50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e007      	b.n	800da68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d1b5      	bne.n	800d9d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da86:	d11b      	bne.n	800dac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800da90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2220      	movs	r2, #32
 800da9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daac:	f043 0204 	orr.w	r2, r3, #4
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e000      	b.n	800dac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	370c      	adds	r7, #12
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800dace:	b480      	push	{r7}
 800dad0:	b083      	sub	sp, #12
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dada:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dade:	d103      	bne.n	800dae8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800dae6:	e007      	b.n	800daf8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800daf0:	d102      	bne.n	800daf8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2208      	movs	r2, #8
 800daf6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e264      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d075      	beq.n	800dc0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800db22:	4ba3      	ldr	r3, [pc, #652]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f003 030c 	and.w	r3, r3, #12
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d00c      	beq.n	800db48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db2e:	4ba0      	ldr	r3, [pc, #640]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800db36:	2b08      	cmp	r3, #8
 800db38:	d112      	bne.n	800db60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800db3a:	4b9d      	ldr	r3, [pc, #628]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db46:	d10b      	bne.n	800db60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800db48:	4b99      	ldr	r3, [pc, #612]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d05b      	beq.n	800dc0c <HAL_RCC_OscConfig+0x108>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d157      	bne.n	800dc0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e23f      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db68:	d106      	bne.n	800db78 <HAL_RCC_OscConfig+0x74>
 800db6a:	4b91      	ldr	r3, [pc, #580]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	4a90      	ldr	r2, [pc, #576]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	e01d      	b.n	800dbb4 <HAL_RCC_OscConfig+0xb0>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800db80:	d10c      	bne.n	800db9c <HAL_RCC_OscConfig+0x98>
 800db82:	4b8b      	ldr	r3, [pc, #556]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a8a      	ldr	r2, [pc, #552]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db8c:	6013      	str	r3, [r2, #0]
 800db8e:	4b88      	ldr	r3, [pc, #544]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a87      	ldr	r2, [pc, #540]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	e00b      	b.n	800dbb4 <HAL_RCC_OscConfig+0xb0>
 800db9c:	4b84      	ldr	r3, [pc, #528]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a83      	ldr	r2, [pc, #524]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	4b81      	ldr	r3, [pc, #516]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a80      	ldr	r2, [pc, #512]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dbae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d013      	beq.n	800dbe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbbc:	f7fb fed6 	bl	800996c <HAL_GetTick>
 800dbc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbc2:	e008      	b.n	800dbd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dbc4:	f7fb fed2 	bl	800996c <HAL_GetTick>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	2b64      	cmp	r3, #100	; 0x64
 800dbd0:	d901      	bls.n	800dbd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	e204      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dbd6:	4b76      	ldr	r3, [pc, #472]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d0f0      	beq.n	800dbc4 <HAL_RCC_OscConfig+0xc0>
 800dbe2:	e014      	b.n	800dc0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dbe4:	f7fb fec2 	bl	800996c <HAL_GetTick>
 800dbe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dbea:	e008      	b.n	800dbfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800dbec:	f7fb febe 	bl	800996c <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	2b64      	cmp	r3, #100	; 0x64
 800dbf8:	d901      	bls.n	800dbfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	e1f0      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dbfe:	4b6c      	ldr	r3, [pc, #432]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1f0      	bne.n	800dbec <HAL_RCC_OscConfig+0xe8>
 800dc0a:	e000      	b.n	800dc0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f003 0302 	and.w	r3, r3, #2
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d063      	beq.n	800dce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dc1a:	4b65      	ldr	r3, [pc, #404]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc1c:	689b      	ldr	r3, [r3, #8]
 800dc1e:	f003 030c 	and.w	r3, r3, #12
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00b      	beq.n	800dc3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc26:	4b62      	ldr	r3, [pc, #392]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800dc2e:	2b08      	cmp	r3, #8
 800dc30:	d11c      	bne.n	800dc6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dc32:	4b5f      	ldr	r3, [pc, #380]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d116      	bne.n	800dc6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc3e:	4b5c      	ldr	r3, [pc, #368]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0302 	and.w	r3, r3, #2
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d005      	beq.n	800dc56 <HAL_RCC_OscConfig+0x152>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d001      	beq.n	800dc56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dc52:	2301      	movs	r3, #1
 800dc54:	e1c4      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dc56:	4b56      	ldr	r3, [pc, #344]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	00db      	lsls	r3, r3, #3
 800dc64:	4952      	ldr	r1, [pc, #328]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc66:	4313      	orrs	r3, r2
 800dc68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dc6a:	e03a      	b.n	800dce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d020      	beq.n	800dcb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dc74:	4b4f      	ldr	r3, [pc, #316]	; (800ddb4 <HAL_RCC_OscConfig+0x2b0>)
 800dc76:	2201      	movs	r2, #1
 800dc78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc7a:	f7fb fe77 	bl	800996c <HAL_GetTick>
 800dc7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc80:	e008      	b.n	800dc94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dc82:	f7fb fe73 	bl	800996c <HAL_GetTick>
 800dc86:	4602      	mov	r2, r0
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d901      	bls.n	800dc94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dc90:	2303      	movs	r3, #3
 800dc92:	e1a5      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc94:	4b46      	ldr	r3, [pc, #280]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f003 0302 	and.w	r3, r3, #2
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d0f0      	beq.n	800dc82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dca0:	4b43      	ldr	r3, [pc, #268]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	4940      	ldr	r1, [pc, #256]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	600b      	str	r3, [r1, #0]
 800dcb4:	e015      	b.n	800dce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dcb6:	4b3f      	ldr	r3, [pc, #252]	; (800ddb4 <HAL_RCC_OscConfig+0x2b0>)
 800dcb8:	2200      	movs	r2, #0
 800dcba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcbc:	f7fb fe56 	bl	800996c <HAL_GetTick>
 800dcc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dcc2:	e008      	b.n	800dcd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800dcc4:	f7fb fe52 	bl	800996c <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d901      	bls.n	800dcd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e184      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dcd6:	4b36      	ldr	r3, [pc, #216]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 0302 	and.w	r3, r3, #2
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1f0      	bne.n	800dcc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d030      	beq.n	800dd50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d016      	beq.n	800dd24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dcf6:	4b30      	ldr	r3, [pc, #192]	; (800ddb8 <HAL_RCC_OscConfig+0x2b4>)
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcfc:	f7fb fe36 	bl	800996c <HAL_GetTick>
 800dd00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd02:	e008      	b.n	800dd16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dd04:	f7fb fe32 	bl	800996c <HAL_GetTick>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d901      	bls.n	800dd16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dd12:	2303      	movs	r3, #3
 800dd14:	e164      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dd16:	4b26      	ldr	r3, [pc, #152]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0f0      	beq.n	800dd04 <HAL_RCC_OscConfig+0x200>
 800dd22:	e015      	b.n	800dd50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dd24:	4b24      	ldr	r3, [pc, #144]	; (800ddb8 <HAL_RCC_OscConfig+0x2b4>)
 800dd26:	2200      	movs	r2, #0
 800dd28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dd2a:	f7fb fe1f 	bl	800996c <HAL_GetTick>
 800dd2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd30:	e008      	b.n	800dd44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800dd32:	f7fb fe1b 	bl	800996c <HAL_GetTick>
 800dd36:	4602      	mov	r2, r0
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d901      	bls.n	800dd44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e14d      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dd44:	4b1a      	ldr	r3, [pc, #104]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd48:	f003 0302 	and.w	r3, r3, #2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d1f0      	bne.n	800dd32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 80a0 	beq.w	800de9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dd62:	4b13      	ldr	r3, [pc, #76]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10f      	bne.n	800dd8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dd6e:	2300      	movs	r3, #0
 800dd70:	60bb      	str	r3, [r7, #8]
 800dd72:	4b0f      	ldr	r3, [pc, #60]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd76:	4a0e      	ldr	r2, [pc, #56]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd7c:	6413      	str	r3, [r2, #64]	; 0x40
 800dd7e:	4b0c      	ldr	r3, [pc, #48]	; (800ddb0 <HAL_RCC_OscConfig+0x2ac>)
 800dd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd86:	60bb      	str	r3, [r7, #8]
 800dd88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dd8e:	4b0b      	ldr	r3, [pc, #44]	; (800ddbc <HAL_RCC_OscConfig+0x2b8>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d121      	bne.n	800ddde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dd9a:	4b08      	ldr	r3, [pc, #32]	; (800ddbc <HAL_RCC_OscConfig+0x2b8>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <HAL_RCC_OscConfig+0x2b8>)
 800dda0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dda4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dda6:	f7fb fde1 	bl	800996c <HAL_GetTick>
 800ddaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddac:	e011      	b.n	800ddd2 <HAL_RCC_OscConfig+0x2ce>
 800ddae:	bf00      	nop
 800ddb0:	40023800 	.word	0x40023800
 800ddb4:	42470000 	.word	0x42470000
 800ddb8:	42470e80 	.word	0x42470e80
 800ddbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ddc0:	f7fb fdd4 	bl	800996c <HAL_GetTick>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	d901      	bls.n	800ddd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	e106      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ddd2:	4b85      	ldr	r3, [pc, #532]	; (800dfe8 <HAL_RCC_OscConfig+0x4e4>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0f0      	beq.n	800ddc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d106      	bne.n	800ddf4 <HAL_RCC_OscConfig+0x2f0>
 800dde6:	4b81      	ldr	r3, [pc, #516]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800dde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddea:	4a80      	ldr	r2, [pc, #512]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	6713      	str	r3, [r2, #112]	; 0x70
 800ddf2:	e01c      	b.n	800de2e <HAL_RCC_OscConfig+0x32a>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	2b05      	cmp	r3, #5
 800ddfa:	d10c      	bne.n	800de16 <HAL_RCC_OscConfig+0x312>
 800ddfc:	4b7b      	ldr	r3, [pc, #492]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800ddfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de00:	4a7a      	ldr	r2, [pc, #488]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de02:	f043 0304 	orr.w	r3, r3, #4
 800de06:	6713      	str	r3, [r2, #112]	; 0x70
 800de08:	4b78      	ldr	r3, [pc, #480]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de0c:	4a77      	ldr	r2, [pc, #476]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de0e:	f043 0301 	orr.w	r3, r3, #1
 800de12:	6713      	str	r3, [r2, #112]	; 0x70
 800de14:	e00b      	b.n	800de2e <HAL_RCC_OscConfig+0x32a>
 800de16:	4b75      	ldr	r3, [pc, #468]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de1a:	4a74      	ldr	r2, [pc, #464]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de1c:	f023 0301 	bic.w	r3, r3, #1
 800de20:	6713      	str	r3, [r2, #112]	; 0x70
 800de22:	4b72      	ldr	r3, [pc, #456]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	4a71      	ldr	r2, [pc, #452]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de28:	f023 0304 	bic.w	r3, r3, #4
 800de2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	689b      	ldr	r3, [r3, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d015      	beq.n	800de62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de36:	f7fb fd99 	bl	800996c <HAL_GetTick>
 800de3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de3c:	e00a      	b.n	800de54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800de3e:	f7fb fd95 	bl	800996c <HAL_GetTick>
 800de42:	4602      	mov	r2, r0
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	f241 3288 	movw	r2, #5000	; 0x1388
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d901      	bls.n	800de54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800de50:	2303      	movs	r3, #3
 800de52:	e0c5      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800de54:	4b65      	ldr	r3, [pc, #404]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de58:	f003 0302 	and.w	r3, r3, #2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d0ee      	beq.n	800de3e <HAL_RCC_OscConfig+0x33a>
 800de60:	e014      	b.n	800de8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800de62:	f7fb fd83 	bl	800996c <HAL_GetTick>
 800de66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de68:	e00a      	b.n	800de80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800de6a:	f7fb fd7f 	bl	800996c <HAL_GetTick>
 800de6e:	4602      	mov	r2, r0
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	f241 3288 	movw	r2, #5000	; 0x1388
 800de78:	4293      	cmp	r3, r2
 800de7a:	d901      	bls.n	800de80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800de7c:	2303      	movs	r3, #3
 800de7e:	e0af      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800de80:	4b5a      	ldr	r3, [pc, #360]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de84:	f003 0302 	and.w	r3, r3, #2
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1ee      	bne.n	800de6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d105      	bne.n	800de9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800de92:	4b56      	ldr	r3, [pc, #344]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de96:	4a55      	ldr	r2, [pc, #340]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800de98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f000 809b 	beq.w	800dfde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800dea8:	4b50      	ldr	r3, [pc, #320]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	f003 030c 	and.w	r3, r3, #12
 800deb0:	2b08      	cmp	r3, #8
 800deb2:	d05c      	beq.n	800df6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d141      	bne.n	800df40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800debc:	4b4c      	ldr	r3, [pc, #304]	; (800dff0 <HAL_RCC_OscConfig+0x4ec>)
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dec2:	f7fb fd53 	bl	800996c <HAL_GetTick>
 800dec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dec8:	e008      	b.n	800dedc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800deca:	f7fb fd4f 	bl	800996c <HAL_GetTick>
 800dece:	4602      	mov	r2, r0
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d901      	bls.n	800dedc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ded8:	2303      	movs	r3, #3
 800deda:	e081      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dedc:	4b43      	ldr	r3, [pc, #268]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1f0      	bne.n	800deca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	69da      	ldr	r2, [r3, #28]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6a1b      	ldr	r3, [r3, #32]
 800def0:	431a      	orrs	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def6:	019b      	lsls	r3, r3, #6
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defe:	085b      	lsrs	r3, r3, #1
 800df00:	3b01      	subs	r3, #1
 800df02:	041b      	lsls	r3, r3, #16
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0a:	061b      	lsls	r3, r3, #24
 800df0c:	4937      	ldr	r1, [pc, #220]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800df0e:	4313      	orrs	r3, r2
 800df10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800df12:	4b37      	ldr	r3, [pc, #220]	; (800dff0 <HAL_RCC_OscConfig+0x4ec>)
 800df14:	2201      	movs	r2, #1
 800df16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df18:	f7fb fd28 	bl	800996c <HAL_GetTick>
 800df1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df1e:	e008      	b.n	800df32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df20:	f7fb fd24 	bl	800996c <HAL_GetTick>
 800df24:	4602      	mov	r2, r0
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d901      	bls.n	800df32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800df2e:	2303      	movs	r3, #3
 800df30:	e056      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df32:	4b2e      	ldr	r3, [pc, #184]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d0f0      	beq.n	800df20 <HAL_RCC_OscConfig+0x41c>
 800df3e:	e04e      	b.n	800dfde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df40:	4b2b      	ldr	r3, [pc, #172]	; (800dff0 <HAL_RCC_OscConfig+0x4ec>)
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df46:	f7fb fd11 	bl	800996c <HAL_GetTick>
 800df4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df4c:	e008      	b.n	800df60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800df4e:	f7fb fd0d 	bl	800996c <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d901      	bls.n	800df60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800df5c:	2303      	movs	r3, #3
 800df5e:	e03f      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df60:	4b22      	ldr	r3, [pc, #136]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f0      	bne.n	800df4e <HAL_RCC_OscConfig+0x44a>
 800df6c:	e037      	b.n	800dfde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d101      	bne.n	800df7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	e032      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800df7a:	4b1c      	ldr	r3, [pc, #112]	; (800dfec <HAL_RCC_OscConfig+0x4e8>)
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d028      	beq.n	800dfda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800df92:	429a      	cmp	r2, r3
 800df94:	d121      	bne.n	800dfda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d11a      	bne.n	800dfda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800dfaa:	4013      	ands	r3, r2
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800dfb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d111      	bne.n	800dfda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc0:	085b      	lsrs	r3, r3, #1
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d107      	bne.n	800dfda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d001      	beq.n	800dfde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e000      	b.n	800dfe0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3718      	adds	r7, #24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	40007000 	.word	0x40007000
 800dfec:	40023800 	.word	0x40023800
 800dff0:	42470060 	.word	0x42470060

0800dff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e0cc      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e008:	4b68      	ldr	r3, [pc, #416]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0307 	and.w	r3, r3, #7
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	429a      	cmp	r2, r3
 800e014:	d90c      	bls.n	800e030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e016:	4b65      	ldr	r3, [pc, #404]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	b2d2      	uxtb	r2, r2
 800e01c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e01e:	4b63      	ldr	r3, [pc, #396]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	683a      	ldr	r2, [r7, #0]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d001      	beq.n	800e030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e0b8      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f003 0302 	and.w	r3, r3, #2
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d020      	beq.n	800e07e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b00      	cmp	r3, #0
 800e046:	d005      	beq.n	800e054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e048:	4b59      	ldr	r3, [pc, #356]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	4a58      	ldr	r2, [pc, #352]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e04e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f003 0308 	and.w	r3, r3, #8
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d005      	beq.n	800e06c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e060:	4b53      	ldr	r3, [pc, #332]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	4a52      	ldr	r2, [pc, #328]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e06a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e06c:	4b50      	ldr	r3, [pc, #320]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	494d      	ldr	r1, [pc, #308]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d044      	beq.n	800e114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d107      	bne.n	800e0a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e092:	4b47      	ldr	r3, [pc, #284]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d119      	bne.n	800e0d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e07f      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d003      	beq.n	800e0b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d107      	bne.n	800e0c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e0b2:	4b3f      	ldr	r3, [pc, #252]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d109      	bne.n	800e0d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e06f      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e0c2:	4b3b      	ldr	r3, [pc, #236]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d101      	bne.n	800e0d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e067      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e0d2:	4b37      	ldr	r3, [pc, #220]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f023 0203 	bic.w	r2, r3, #3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	4934      	ldr	r1, [pc, #208]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e0e0:	4313      	orrs	r3, r2
 800e0e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e0e4:	f7fb fc42 	bl	800996c <HAL_GetTick>
 800e0e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e0ea:	e00a      	b.n	800e102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e0ec:	f7fb fc3e 	bl	800996c <HAL_GetTick>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	1ad3      	subs	r3, r2, r3
 800e0f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d901      	bls.n	800e102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e0fe:	2303      	movs	r3, #3
 800e100:	e04f      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e102:	4b2b      	ldr	r3, [pc, #172]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	f003 020c 	and.w	r2, r3, #12
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	429a      	cmp	r2, r3
 800e112:	d1eb      	bne.n	800e0ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e114:	4b25      	ldr	r3, [pc, #148]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f003 0307 	and.w	r3, r3, #7
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d20c      	bcs.n	800e13c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e122:	4b22      	ldr	r3, [pc, #136]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e124:	683a      	ldr	r2, [r7, #0]
 800e126:	b2d2      	uxtb	r2, r2
 800e128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e12a:	4b20      	ldr	r3, [pc, #128]	; (800e1ac <HAL_RCC_ClockConfig+0x1b8>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	429a      	cmp	r2, r3
 800e136:	d001      	beq.n	800e13c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e138:	2301      	movs	r3, #1
 800e13a:	e032      	b.n	800e1a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d008      	beq.n	800e15a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e148:	4b19      	ldr	r3, [pc, #100]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	4916      	ldr	r1, [pc, #88]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e156:	4313      	orrs	r3, r2
 800e158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 0308 	and.w	r3, r3, #8
 800e162:	2b00      	cmp	r3, #0
 800e164:	d009      	beq.n	800e17a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e166:	4b12      	ldr	r3, [pc, #72]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	00db      	lsls	r3, r3, #3
 800e174:	490e      	ldr	r1, [pc, #56]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e176:	4313      	orrs	r3, r2
 800e178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e17a:	f000 f821 	bl	800e1c0 <HAL_RCC_GetSysClockFreq>
 800e17e:	4602      	mov	r2, r0
 800e180:	4b0b      	ldr	r3, [pc, #44]	; (800e1b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	091b      	lsrs	r3, r3, #4
 800e186:	f003 030f 	and.w	r3, r3, #15
 800e18a:	490a      	ldr	r1, [pc, #40]	; (800e1b4 <HAL_RCC_ClockConfig+0x1c0>)
 800e18c:	5ccb      	ldrb	r3, [r1, r3]
 800e18e:	fa22 f303 	lsr.w	r3, r2, r3
 800e192:	4a09      	ldr	r2, [pc, #36]	; (800e1b8 <HAL_RCC_ClockConfig+0x1c4>)
 800e194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800e196:	4b09      	ldr	r3, [pc, #36]	; (800e1bc <HAL_RCC_ClockConfig+0x1c8>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fb fba2 	bl	80098e4 <HAL_InitTick>

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	40023c00 	.word	0x40023c00
 800e1b0:	40023800 	.word	0x40023800
 800e1b4:	08028774 	.word	0x08028774
 800e1b8:	20000034 	.word	0x20000034
 800e1bc:	20000038 	.word	0x20000038

0800e1c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e1c0:	b5b0      	push	{r4, r5, r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	6079      	str	r1, [r7, #4]
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	60f9      	str	r1, [r7, #12]
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e1d6:	4952      	ldr	r1, [pc, #328]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e1d8:	6889      	ldr	r1, [r1, #8]
 800e1da:	f001 010c 	and.w	r1, r1, #12
 800e1de:	2908      	cmp	r1, #8
 800e1e0:	d00d      	beq.n	800e1fe <HAL_RCC_GetSysClockFreq+0x3e>
 800e1e2:	2908      	cmp	r1, #8
 800e1e4:	f200 8094 	bhi.w	800e310 <HAL_RCC_GetSysClockFreq+0x150>
 800e1e8:	2900      	cmp	r1, #0
 800e1ea:	d002      	beq.n	800e1f2 <HAL_RCC_GetSysClockFreq+0x32>
 800e1ec:	2904      	cmp	r1, #4
 800e1ee:	d003      	beq.n	800e1f8 <HAL_RCC_GetSysClockFreq+0x38>
 800e1f0:	e08e      	b.n	800e310 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e1f2:	4b4c      	ldr	r3, [pc, #304]	; (800e324 <HAL_RCC_GetSysClockFreq+0x164>)
 800e1f4:	60bb      	str	r3, [r7, #8]
       break;
 800e1f6:	e08e      	b.n	800e316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e1f8:	4b4b      	ldr	r3, [pc, #300]	; (800e328 <HAL_RCC_GetSysClockFreq+0x168>)
 800e1fa:	60bb      	str	r3, [r7, #8]
      break;
 800e1fc:	e08b      	b.n	800e316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e1fe:	4948      	ldr	r1, [pc, #288]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e200:	6849      	ldr	r1, [r1, #4]
 800e202:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800e206:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e208:	4945      	ldr	r1, [pc, #276]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e20a:	6849      	ldr	r1, [r1, #4]
 800e20c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800e210:	2900      	cmp	r1, #0
 800e212:	d024      	beq.n	800e25e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e214:	4942      	ldr	r1, [pc, #264]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e216:	6849      	ldr	r1, [r1, #4]
 800e218:	0989      	lsrs	r1, r1, #6
 800e21a:	4608      	mov	r0, r1
 800e21c:	f04f 0100 	mov.w	r1, #0
 800e220:	f240 14ff 	movw	r4, #511	; 0x1ff
 800e224:	f04f 0500 	mov.w	r5, #0
 800e228:	ea00 0204 	and.w	r2, r0, r4
 800e22c:	ea01 0305 	and.w	r3, r1, r5
 800e230:	493d      	ldr	r1, [pc, #244]	; (800e328 <HAL_RCC_GetSysClockFreq+0x168>)
 800e232:	fb01 f003 	mul.w	r0, r1, r3
 800e236:	2100      	movs	r1, #0
 800e238:	fb01 f102 	mul.w	r1, r1, r2
 800e23c:	1844      	adds	r4, r0, r1
 800e23e:	493a      	ldr	r1, [pc, #232]	; (800e328 <HAL_RCC_GetSysClockFreq+0x168>)
 800e240:	fba2 0101 	umull	r0, r1, r2, r1
 800e244:	1863      	adds	r3, r4, r1
 800e246:	4619      	mov	r1, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	461a      	mov	r2, r3
 800e24c:	f04f 0300 	mov.w	r3, #0
 800e250:	f7f2 fd32 	bl	8000cb8 <__aeabi_uldivmod>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4613      	mov	r3, r2
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	e04a      	b.n	800e2f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e25e:	4b30      	ldr	r3, [pc, #192]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	099b      	lsrs	r3, r3, #6
 800e264:	461a      	mov	r2, r3
 800e266:	f04f 0300 	mov.w	r3, #0
 800e26a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e26e:	f04f 0100 	mov.w	r1, #0
 800e272:	ea02 0400 	and.w	r4, r2, r0
 800e276:	ea03 0501 	and.w	r5, r3, r1
 800e27a:	4620      	mov	r0, r4
 800e27c:	4629      	mov	r1, r5
 800e27e:	f04f 0200 	mov.w	r2, #0
 800e282:	f04f 0300 	mov.w	r3, #0
 800e286:	014b      	lsls	r3, r1, #5
 800e288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800e28c:	0142      	lsls	r2, r0, #5
 800e28e:	4610      	mov	r0, r2
 800e290:	4619      	mov	r1, r3
 800e292:	1b00      	subs	r0, r0, r4
 800e294:	eb61 0105 	sbc.w	r1, r1, r5
 800e298:	f04f 0200 	mov.w	r2, #0
 800e29c:	f04f 0300 	mov.w	r3, #0
 800e2a0:	018b      	lsls	r3, r1, #6
 800e2a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800e2a6:	0182      	lsls	r2, r0, #6
 800e2a8:	1a12      	subs	r2, r2, r0
 800e2aa:	eb63 0301 	sbc.w	r3, r3, r1
 800e2ae:	f04f 0000 	mov.w	r0, #0
 800e2b2:	f04f 0100 	mov.w	r1, #0
 800e2b6:	00d9      	lsls	r1, r3, #3
 800e2b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e2bc:	00d0      	lsls	r0, r2, #3
 800e2be:	4602      	mov	r2, r0
 800e2c0:	460b      	mov	r3, r1
 800e2c2:	1912      	adds	r2, r2, r4
 800e2c4:	eb45 0303 	adc.w	r3, r5, r3
 800e2c8:	f04f 0000 	mov.w	r0, #0
 800e2cc:	f04f 0100 	mov.w	r1, #0
 800e2d0:	0299      	lsls	r1, r3, #10
 800e2d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800e2d6:	0290      	lsls	r0, r2, #10
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4610      	mov	r0, r2
 800e2de:	4619      	mov	r1, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	f04f 0300 	mov.w	r3, #0
 800e2e8:	f7f2 fce6 	bl	8000cb8 <__aeabi_uldivmod>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800e2f4:	4b0a      	ldr	r3, [pc, #40]	; (800e320 <HAL_RCC_GetSysClockFreq+0x160>)
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	0c1b      	lsrs	r3, r3, #16
 800e2fa:	f003 0303 	and.w	r3, r3, #3
 800e2fe:	3301      	adds	r3, #1
 800e300:	005b      	lsls	r3, r3, #1
 800e302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	fbb2 f3f3 	udiv	r3, r2, r3
 800e30c:	60bb      	str	r3, [r7, #8]
      break;
 800e30e:	e002      	b.n	800e316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e310:	4b04      	ldr	r3, [pc, #16]	; (800e324 <HAL_RCC_GetSysClockFreq+0x164>)
 800e312:	60bb      	str	r3, [r7, #8]
      break;
 800e314:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e316:	68bb      	ldr	r3, [r7, #8]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bdb0      	pop	{r4, r5, r7, pc}
 800e320:	40023800 	.word	0x40023800
 800e324:	00f42400 	.word	0x00f42400
 800e328:	017d7840 	.word	0x017d7840

0800e32c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e32c:	b480      	push	{r7}
 800e32e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e330:	4b03      	ldr	r3, [pc, #12]	; (800e340 <HAL_RCC_GetHCLKFreq+0x14>)
 800e332:	681b      	ldr	r3, [r3, #0]
}
 800e334:	4618      	mov	r0, r3
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr
 800e33e:	bf00      	nop
 800e340:	20000034 	.word	0x20000034

0800e344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800e348:	f7ff fff0 	bl	800e32c <HAL_RCC_GetHCLKFreq>
 800e34c:	4602      	mov	r2, r0
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	0a9b      	lsrs	r3, r3, #10
 800e354:	f003 0307 	and.w	r3, r3, #7
 800e358:	4903      	ldr	r1, [pc, #12]	; (800e368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e35a:	5ccb      	ldrb	r3, [r1, r3]
 800e35c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e360:	4618      	mov	r0, r3
 800e362:	bd80      	pop	{r7, pc}
 800e364:	40023800 	.word	0x40023800
 800e368:	08028784 	.word	0x08028784

0800e36c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800e370:	f7ff ffdc 	bl	800e32c <HAL_RCC_GetHCLKFreq>
 800e374:	4602      	mov	r2, r0
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <HAL_RCC_GetPCLK2Freq+0x20>)
 800e378:	689b      	ldr	r3, [r3, #8]
 800e37a:	0b5b      	lsrs	r3, r3, #13
 800e37c:	f003 0307 	and.w	r3, r3, #7
 800e380:	4903      	ldr	r1, [pc, #12]	; (800e390 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e382:	5ccb      	ldrb	r3, [r1, r3]
 800e384:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e388:	4618      	mov	r0, r3
 800e38a:	bd80      	pop	{r7, pc}
 800e38c:	40023800 	.word	0x40023800
 800e390:	08028784 	.word	0x08028784

0800e394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e07b      	b.n	800e49e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d108      	bne.n	800e3c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3b6:	d009      	beq.n	800e3cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	61da      	str	r2, [r3, #28]
 800e3be:	e005      	b.n	800e3cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e3d8:	b2db      	uxtb	r3, r3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f7fa fd08 	bl	8008dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e414:	431a      	orrs	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e41e:	431a      	orrs	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f003 0302 	and.w	r3, r3, #2
 800e428:	431a      	orrs	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	431a      	orrs	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e43c:	431a      	orrs	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	69db      	ldr	r3, [r3, #28]
 800e442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e446:	431a      	orrs	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a1b      	ldr	r3, [r3, #32]
 800e44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e450:	ea42 0103 	orr.w	r1, r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	430a      	orrs	r2, r1
 800e462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	0c1b      	lsrs	r3, r3, #16
 800e46a:	f003 0104 	and.w	r1, r3, #4
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e472:	f003 0210 	and.w	r2, r3, #16
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	430a      	orrs	r2, r1
 800e47c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	69da      	ldr	r2, [r3, #28]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e48c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b08c      	sub	sp, #48	; 0x30
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	60f8      	str	r0, [r7, #12]
 800e4ae:	60b9      	str	r1, [r7, #8]
 800e4b0:	607a      	str	r2, [r7, #4]
 800e4b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d101      	bne.n	800e4cc <HAL_SPI_TransmitReceive+0x26>
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	e18a      	b.n	800e7e2 <HAL_SPI_TransmitReceive+0x33c>
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4d4:	f7fb fa4a 	bl	800996c <HAL_GetTick>
 800e4d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e4ea:	887b      	ldrh	r3, [r7, #2]
 800e4ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d00f      	beq.n	800e516 <HAL_SPI_TransmitReceive+0x70>
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4fc:	d107      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d103      	bne.n	800e50e <HAL_SPI_TransmitReceive+0x68>
 800e506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e50a:	2b04      	cmp	r3, #4
 800e50c:	d003      	beq.n	800e516 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e50e:	2302      	movs	r3, #2
 800e510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e514:	e15b      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <HAL_SPI_TransmitReceive+0x82>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d002      	beq.n	800e528 <HAL_SPI_TransmitReceive+0x82>
 800e522:	887b      	ldrh	r3, [r7, #2]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d103      	bne.n	800e530 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e528:	2301      	movs	r3, #1
 800e52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e52e:	e14e      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d003      	beq.n	800e544 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2205      	movs	r2, #5
 800e540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	887a      	ldrh	r2, [r7, #2]
 800e554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	887a      	ldrh	r2, [r7, #2]
 800e55a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	68ba      	ldr	r2, [r7, #8]
 800e560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	887a      	ldrh	r2, [r7, #2]
 800e566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	887a      	ldrh	r2, [r7, #2]
 800e56c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2200      	movs	r2, #0
 800e572:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e584:	2b40      	cmp	r3, #64	; 0x40
 800e586:	d007      	beq.n	800e598 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5a0:	d178      	bne.n	800e694 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <HAL_SPI_TransmitReceive+0x10a>
 800e5aa:	8b7b      	ldrh	r3, [r7, #26]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d166      	bne.n	800e67e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b4:	881a      	ldrh	r2, [r3, #0]
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5c0:	1c9a      	adds	r2, r3, #2
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5d4:	e053      	b.n	800e67e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f003 0302 	and.w	r3, r3, #2
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d11b      	bne.n	800e61c <HAL_SPI_TransmitReceive+0x176>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d016      	beq.n	800e61c <HAL_SPI_TransmitReceive+0x176>
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d113      	bne.n	800e61c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f8:	881a      	ldrh	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e604:	1c9a      	adds	r2, r3, #2
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e60e:	b29b      	uxth	r3, r3
 800e610:	3b01      	subs	r3, #1
 800e612:	b29a      	uxth	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e618:	2300      	movs	r3, #0
 800e61a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	f003 0301 	and.w	r3, r3, #1
 800e626:	2b01      	cmp	r3, #1
 800e628:	d119      	bne.n	800e65e <HAL_SPI_TransmitReceive+0x1b8>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e62e:	b29b      	uxth	r3, r3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d014      	beq.n	800e65e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	68da      	ldr	r2, [r3, #12]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63e:	b292      	uxth	r2, r2
 800e640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e646:	1c9a      	adds	r2, r3, #2
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e650:	b29b      	uxth	r3, r3
 800e652:	3b01      	subs	r3, #1
 800e654:	b29a      	uxth	r2, r3
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e65a:	2301      	movs	r3, #1
 800e65c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e65e:	f7fb f985 	bl	800996c <HAL_GetTick>
 800e662:	4602      	mov	r2, r0
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d807      	bhi.n	800e67e <HAL_SPI_TransmitReceive+0x1d8>
 800e66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e674:	d003      	beq.n	800e67e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e676:	2303      	movs	r3, #3
 800e678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e67c:	e0a7      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e682:	b29b      	uxth	r3, r3
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1a6      	bne.n	800e5d6 <HAL_SPI_TransmitReceive+0x130>
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1a1      	bne.n	800e5d6 <HAL_SPI_TransmitReceive+0x130>
 800e692:	e07c      	b.n	800e78e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <HAL_SPI_TransmitReceive+0x1fc>
 800e69c:	8b7b      	ldrh	r3, [r7, #26]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d16b      	bne.n	800e77a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	330c      	adds	r3, #12
 800e6ac:	7812      	ldrb	r2, [r2, #0]
 800e6ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6c8:	e057      	b.n	800e77a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f003 0302 	and.w	r3, r3, #2
 800e6d4:	2b02      	cmp	r3, #2
 800e6d6:	d11c      	bne.n	800e712 <HAL_SPI_TransmitReceive+0x26c>
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d017      	beq.n	800e712 <HAL_SPI_TransmitReceive+0x26c>
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d114      	bne.n	800e712 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	330c      	adds	r3, #12
 800e6f2:	7812      	ldrb	r2, [r2, #0]
 800e6f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e704:	b29b      	uxth	r3, r3
 800e706:	3b01      	subs	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e70e:	2300      	movs	r3, #0
 800e710:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d119      	bne.n	800e754 <HAL_SPI_TransmitReceive+0x2ae>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e724:	b29b      	uxth	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	d014      	beq.n	800e754 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68da      	ldr	r2, [r3, #12]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e734:	b2d2      	uxtb	r2, r2
 800e736:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e746:	b29b      	uxth	r3, r3
 800e748:	3b01      	subs	r3, #1
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e750:	2301      	movs	r3, #1
 800e752:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e754:	f7fb f90a 	bl	800996c <HAL_GetTick>
 800e758:	4602      	mov	r2, r0
 800e75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e760:	429a      	cmp	r2, r3
 800e762:	d803      	bhi.n	800e76c <HAL_SPI_TransmitReceive+0x2c6>
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76a:	d102      	bne.n	800e772 <HAL_SPI_TransmitReceive+0x2cc>
 800e76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d103      	bne.n	800e77a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e772:	2303      	movs	r3, #3
 800e774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e778:	e029      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e77e:	b29b      	uxth	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1a2      	bne.n	800e6ca <HAL_SPI_TransmitReceive+0x224>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e788:	b29b      	uxth	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d19d      	bne.n	800e6ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	f000 f9d0 	bl	800eb38 <SPI_EndRxTxTransaction>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d006      	beq.n	800e7ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2220      	movs	r2, #32
 800e7a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e7aa:	e010      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10b      	bne.n	800e7cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	617b      	str	r3, [r7, #20]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	617b      	str	r3, [r7, #20]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	e000      	b.n	800e7ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e7cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e7de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3730      	adds	r7, #48	; 0x30
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	099b      	lsrs	r3, r3, #6
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10f      	bne.n	800e830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e816:	2b00      	cmp	r3, #0
 800e818:	d00a      	beq.n	800e830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	099b      	lsrs	r3, r3, #6
 800e81e:	f003 0301 	and.w	r3, r3, #1
 800e822:	2b00      	cmp	r3, #0
 800e824:	d004      	beq.n	800e830 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	4798      	blx	r3
    return;
 800e82e:	e0d7      	b.n	800e9e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	085b      	lsrs	r3, r3, #1
 800e834:	f003 0301 	and.w	r3, r3, #1
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00a      	beq.n	800e852 <HAL_SPI_IRQHandler+0x66>
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	09db      	lsrs	r3, r3, #7
 800e840:	f003 0301 	and.w	r3, r3, #1
 800e844:	2b00      	cmp	r3, #0
 800e846:	d004      	beq.n	800e852 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	4798      	blx	r3
    return;
 800e850:	e0c6      	b.n	800e9e0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	095b      	lsrs	r3, r3, #5
 800e856:	f003 0301 	and.w	r3, r3, #1
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10c      	bne.n	800e878 <HAL_SPI_IRQHandler+0x8c>
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	099b      	lsrs	r3, r3, #6
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d106      	bne.n	800e878 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	0a1b      	lsrs	r3, r3, #8
 800e86e:	f003 0301 	and.w	r3, r3, #1
 800e872:	2b00      	cmp	r3, #0
 800e874:	f000 80b4 	beq.w	800e9e0 <HAL_SPI_IRQHandler+0x1f4>
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	095b      	lsrs	r3, r3, #5
 800e87c:	f003 0301 	and.w	r3, r3, #1
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 80ad 	beq.w	800e9e0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	099b      	lsrs	r3, r3, #6
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d023      	beq.n	800e8da <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b03      	cmp	r3, #3
 800e89c:	d011      	beq.n	800e8c2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8a2:	f043 0204 	orr.w	r2, r3, #4
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	617b      	str	r3, [r7, #20]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	617b      	str	r3, [r7, #20]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	617b      	str	r3, [r7, #20]
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	e00b      	b.n	800e8da <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	613b      	str	r3, [r7, #16]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	613b      	str	r3, [r7, #16]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	613b      	str	r3, [r7, #16]
 800e8d6:	693b      	ldr	r3, [r7, #16]
        return;
 800e8d8:	e082      	b.n	800e9e0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	095b      	lsrs	r3, r3, #5
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d014      	beq.n	800e910 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ea:	f043 0201 	orr.w	r2, r3, #1
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	0a1b      	lsrs	r3, r3, #8
 800e914:	f003 0301 	and.w	r3, r3, #1
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00c      	beq.n	800e936 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e920:	f043 0208 	orr.w	r2, r3, #8
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e928:	2300      	movs	r3, #0
 800e92a:	60bb      	str	r3, [r7, #8]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	60bb      	str	r3, [r7, #8]
 800e934:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d04f      	beq.n	800e9de <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	685a      	ldr	r2, [r3, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e94c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f003 0302 	and.w	r3, r3, #2
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d104      	bne.n	800e96a <HAL_SPI_IRQHandler+0x17e>
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	f003 0301 	and.w	r3, r3, #1
 800e966:	2b00      	cmp	r3, #0
 800e968:	d034      	beq.n	800e9d4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0203 	bic.w	r2, r2, #3
 800e978:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d011      	beq.n	800e9a6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e986:	4a18      	ldr	r2, [pc, #96]	; (800e9e8 <HAL_SPI_IRQHandler+0x1fc>)
 800e988:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fb fb32 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800e994:	4603      	mov	r3, r0
 800e996:	2b00      	cmp	r3, #0
 800e998:	d005      	beq.n	800e9a6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e99e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d016      	beq.n	800e9dc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9b2:	4a0d      	ldr	r2, [pc, #52]	; (800e9e8 <HAL_SPI_IRQHandler+0x1fc>)
 800e9b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fb fb1c 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800e9d2:	e003      	b.n	800e9dc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f809 	bl	800e9ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e9da:	e000      	b.n	800e9de <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e9dc:	bf00      	nop
    return;
 800e9de:	bf00      	nop
  }
}
 800e9e0:	3720      	adds	r7, #32
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	0800ea01 	.word	0x0800ea01

0800e9ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	2200      	movs	r2, #0
 800ea12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2200      	movs	r2, #0
 800ea18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f7ff ffe6 	bl	800e9ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea20:	bf00      	nop
 800ea22:	3710      	adds	r7, #16
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b088      	sub	sp, #32
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	60b9      	str	r1, [r7, #8]
 800ea32:	603b      	str	r3, [r7, #0]
 800ea34:	4613      	mov	r3, r2
 800ea36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ea38:	f7fa ff98 	bl	800996c <HAL_GetTick>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	1a9b      	subs	r3, r3, r2
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	4413      	add	r3, r2
 800ea46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ea48:	f7fa ff90 	bl	800996c <HAL_GetTick>
 800ea4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ea4e:	4b39      	ldr	r3, [pc, #228]	; (800eb34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	015b      	lsls	r3, r3, #5
 800ea54:	0d1b      	lsrs	r3, r3, #20
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	fb02 f303 	mul.w	r3, r2, r3
 800ea5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea5e:	e054      	b.n	800eb0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea66:	d050      	beq.n	800eb0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ea68:	f7fa ff80 	bl	800996c <HAL_GetTick>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	69fa      	ldr	r2, [r7, #28]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d902      	bls.n	800ea7e <SPI_WaitFlagStateUntilTimeout+0x56>
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d13d      	bne.n	800eafa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	685a      	ldr	r2, [r3, #4]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ea8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea96:	d111      	bne.n	800eabc <SPI_WaitFlagStateUntilTimeout+0x94>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eaa0:	d004      	beq.n	800eaac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaaa:	d107      	bne.n	800eabc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eac4:	d10f      	bne.n	800eae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e017      	b.n	800eb2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d101      	bne.n	800eb04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	3b01      	subs	r3, #1
 800eb08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	4013      	ands	r3, r2
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	bf0c      	ite	eq
 800eb1a:	2301      	moveq	r3, #1
 800eb1c:	2300      	movne	r3, #0
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	461a      	mov	r2, r3
 800eb22:	79fb      	ldrb	r3, [r7, #7]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d19b      	bne.n	800ea60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3720      	adds	r7, #32
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20000034 	.word	0x20000034

0800eb38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb44:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <SPI_EndRxTxTransaction+0x7c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4a1b      	ldr	r2, [pc, #108]	; (800ebb8 <SPI_EndRxTxTransaction+0x80>)
 800eb4a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4e:	0d5b      	lsrs	r3, r3, #21
 800eb50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb54:	fb02 f303 	mul.w	r3, r2, r3
 800eb58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb62:	d112      	bne.n	800eb8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	9300      	str	r3, [sp, #0]
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	2180      	movs	r1, #128	; 0x80
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f7ff ff5a 	bl	800ea28 <SPI_WaitFlagStateUntilTimeout>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d016      	beq.n	800eba8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7e:	f043 0220 	orr.w	r2, r3, #32
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb86:	2303      	movs	r3, #3
 800eb88:	e00f      	b.n	800ebaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00a      	beq.n	800eba6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba0:	2b80      	cmp	r3, #128	; 0x80
 800eba2:	d0f2      	beq.n	800eb8a <SPI_EndRxTxTransaction+0x52>
 800eba4:	e000      	b.n	800eba8 <SPI_EndRxTxTransaction+0x70>
        break;
 800eba6:	bf00      	nop
  }

  return HAL_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000034 	.word	0x20000034
 800ebb8:	165e9f81 	.word	0x165e9f81

0800ebbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e041      	b.n	800ec52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d106      	bne.n	800ebe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f7fa fb74 	bl	80092d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	f000 f9f0 	bl	800efe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
	...

0800ec5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d001      	beq.n	800ec74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec70:	2301      	movs	r3, #1
 800ec72:	e044      	b.n	800ecfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2202      	movs	r2, #2
 800ec78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	68da      	ldr	r2, [r3, #12]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f042 0201 	orr.w	r2, r2, #1
 800ec8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a1e      	ldr	r2, [pc, #120]	; (800ed0c <HAL_TIM_Base_Start_IT+0xb0>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d018      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x6c>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec9e:	d013      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x6c>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a1a      	ldr	r2, [pc, #104]	; (800ed10 <HAL_TIM_Base_Start_IT+0xb4>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d00e      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x6c>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a19      	ldr	r2, [pc, #100]	; (800ed14 <HAL_TIM_Base_Start_IT+0xb8>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d009      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x6c>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a17      	ldr	r2, [pc, #92]	; (800ed18 <HAL_TIM_Base_Start_IT+0xbc>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d004      	beq.n	800ecc8 <HAL_TIM_Base_Start_IT+0x6c>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a16      	ldr	r2, [pc, #88]	; (800ed1c <HAL_TIM_Base_Start_IT+0xc0>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d111      	bne.n	800ecec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f003 0307 	and.w	r3, r3, #7
 800ecd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b06      	cmp	r3, #6
 800ecd8:	d010      	beq.n	800ecfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f042 0201 	orr.w	r2, r2, #1
 800ece8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecea:	e007      	b.n	800ecfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f042 0201 	orr.w	r2, r2, #1
 800ecfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3714      	adds	r7, #20
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	40010000 	.word	0x40010000
 800ed10:	40000400 	.word	0x40000400
 800ed14:	40000800 	.word	0x40000800
 800ed18:	40000c00 	.word	0x40000c00
 800ed1c:	40014000 	.word	0x40014000

0800ed20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	68da      	ldr	r2, [r3, #12]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f022 0201 	bic.w	r2, r2, #1
 800ed36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6a1a      	ldr	r2, [r3, #32]
 800ed3e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ed42:	4013      	ands	r3, r2
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10f      	bne.n	800ed68 <HAL_TIM_Base_Stop_IT+0x48>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6a1a      	ldr	r2, [r3, #32]
 800ed4e:	f240 4344 	movw	r3, #1092	; 0x444
 800ed52:	4013      	ands	r3, r2
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d107      	bne.n	800ed68 <HAL_TIM_Base_Stop_IT+0x48>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f022 0201 	bic.w	r2, r2, #1
 800ed66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	691b      	ldr	r3, [r3, #16]
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	2b02      	cmp	r3, #2
 800ed92:	d122      	bne.n	800edda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	f003 0302 	and.w	r3, r3, #2
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d11b      	bne.n	800edda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f06f 0202 	mvn.w	r2, #2
 800edaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	f003 0303 	and.w	r3, r3, #3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f8ee 	bl	800efa2 <HAL_TIM_IC_CaptureCallback>
 800edc6:	e005      	b.n	800edd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f8e0 	bl	800ef8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f8f1 	bl	800efb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	f003 0304 	and.w	r3, r3, #4
 800ede4:	2b04      	cmp	r3, #4
 800ede6:	d122      	bne.n	800ee2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	68db      	ldr	r3, [r3, #12]
 800edee:	f003 0304 	and.w	r3, r3, #4
 800edf2:	2b04      	cmp	r3, #4
 800edf4:	d11b      	bne.n	800ee2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f06f 0204 	mvn.w	r2, #4
 800edfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2202      	movs	r2, #2
 800ee04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f000 f8c4 	bl	800efa2 <HAL_TIM_IC_CaptureCallback>
 800ee1a:	e005      	b.n	800ee28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 f8b6 	bl	800ef8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f8c7 	bl	800efb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	f003 0308 	and.w	r3, r3, #8
 800ee38:	2b08      	cmp	r3, #8
 800ee3a:	d122      	bne.n	800ee82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	f003 0308 	and.w	r3, r3, #8
 800ee46:	2b08      	cmp	r3, #8
 800ee48:	d11b      	bne.n	800ee82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f06f 0208 	mvn.w	r2, #8
 800ee52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2204      	movs	r2, #4
 800ee58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	69db      	ldr	r3, [r3, #28]
 800ee60:	f003 0303 	and.w	r3, r3, #3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d003      	beq.n	800ee70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 f89a 	bl	800efa2 <HAL_TIM_IC_CaptureCallback>
 800ee6e:	e005      	b.n	800ee7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f88c 	bl	800ef8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 f89d 	bl	800efb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	f003 0310 	and.w	r3, r3, #16
 800ee8c:	2b10      	cmp	r3, #16
 800ee8e:	d122      	bne.n	800eed6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	f003 0310 	and.w	r3, r3, #16
 800ee9a:	2b10      	cmp	r3, #16
 800ee9c:	d11b      	bne.n	800eed6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f06f 0210 	mvn.w	r2, #16
 800eea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2208      	movs	r2, #8
 800eeac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d003      	beq.n	800eec4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f870 	bl	800efa2 <HAL_TIM_IC_CaptureCallback>
 800eec2:	e005      	b.n	800eed0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	f000 f862 	bl	800ef8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 f873 	bl	800efb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d10e      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	f003 0301 	and.w	r3, r3, #1
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d107      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f06f 0201 	mvn.w	r2, #1
 800eefa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7f6 fd5b 	bl	80059b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef0c:	2b80      	cmp	r3, #128	; 0x80
 800ef0e:	d10e      	bne.n	800ef2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef1a:	2b80      	cmp	r3, #128	; 0x80
 800ef1c:	d107      	bne.n	800ef2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ef26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 f8e3 	bl	800f0f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef38:	2b40      	cmp	r3, #64	; 0x40
 800ef3a:	d10e      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef46:	2b40      	cmp	r3, #64	; 0x40
 800ef48:	d107      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 f838 	bl	800efca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	f003 0320 	and.w	r3, r3, #32
 800ef64:	2b20      	cmp	r3, #32
 800ef66:	d10e      	bne.n	800ef86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	f003 0320 	and.w	r3, r3, #32
 800ef72:	2b20      	cmp	r3, #32
 800ef74:	d107      	bne.n	800ef86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f06f 0220 	mvn.w	r2, #32
 800ef7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f8ad 	bl	800f0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef86:	bf00      	nop
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	b083      	sub	sp, #12
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef96:	bf00      	nop
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efa2:	b480      	push	{r7}
 800efa4:	b083      	sub	sp, #12
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efaa:	bf00      	nop
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800efb6:	b480      	push	{r7}
 800efb8:	b083      	sub	sp, #12
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efbe:	bf00      	nop
 800efc0:	370c      	adds	r7, #12
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efca:	b480      	push	{r7}
 800efcc:	b083      	sub	sp, #12
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efd2:	bf00      	nop
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
	...

0800efe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b085      	sub	sp, #20
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a34      	ldr	r2, [pc, #208]	; (800f0c4 <TIM_Base_SetConfig+0xe4>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d00f      	beq.n	800f018 <TIM_Base_SetConfig+0x38>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800effe:	d00b      	beq.n	800f018 <TIM_Base_SetConfig+0x38>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a31      	ldr	r2, [pc, #196]	; (800f0c8 <TIM_Base_SetConfig+0xe8>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d007      	beq.n	800f018 <TIM_Base_SetConfig+0x38>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a30      	ldr	r2, [pc, #192]	; (800f0cc <TIM_Base_SetConfig+0xec>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d003      	beq.n	800f018 <TIM_Base_SetConfig+0x38>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a2f      	ldr	r2, [pc, #188]	; (800f0d0 <TIM_Base_SetConfig+0xf0>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d108      	bne.n	800f02a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f01e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	4313      	orrs	r3, r2
 800f028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a25      	ldr	r2, [pc, #148]	; (800f0c4 <TIM_Base_SetConfig+0xe4>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d01b      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f038:	d017      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4a22      	ldr	r2, [pc, #136]	; (800f0c8 <TIM_Base_SetConfig+0xe8>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d013      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4a21      	ldr	r2, [pc, #132]	; (800f0cc <TIM_Base_SetConfig+0xec>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d00f      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4a20      	ldr	r2, [pc, #128]	; (800f0d0 <TIM_Base_SetConfig+0xf0>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d00b      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4a1f      	ldr	r2, [pc, #124]	; (800f0d4 <TIM_Base_SetConfig+0xf4>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d007      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4a1e      	ldr	r2, [pc, #120]	; (800f0d8 <TIM_Base_SetConfig+0xf8>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d003      	beq.n	800f06a <TIM_Base_SetConfig+0x8a>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a1d      	ldr	r2, [pc, #116]	; (800f0dc <TIM_Base_SetConfig+0xfc>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d108      	bne.n	800f07c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	4313      	orrs	r3, r2
 800f07a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	4313      	orrs	r3, r2
 800f088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	689a      	ldr	r2, [r3, #8]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a08      	ldr	r2, [pc, #32]	; (800f0c4 <TIM_Base_SetConfig+0xe4>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d103      	bne.n	800f0b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	691a      	ldr	r2, [r3, #16]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	615a      	str	r2, [r3, #20]
}
 800f0b6:	bf00      	nop
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	40010000 	.word	0x40010000
 800f0c8:	40000400 	.word	0x40000400
 800f0cc:	40000800 	.word	0x40000800
 800f0d0:	40000c00 	.word	0x40000c00
 800f0d4:	40014000 	.word	0x40014000
 800f0d8:	40014400 	.word	0x40014400
 800f0dc:	40014800 	.word	0x40014800

0800f0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f0e8:	bf00      	nop
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d101      	bne.n	800f11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f116:	2301      	movs	r3, #1
 800f118:	e03f      	b.n	800f19a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d106      	bne.n	800f134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7fa fae0 	bl	80096f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2224      	movs	r2, #36	; 0x24
 800f138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68da      	ldr	r2, [r3, #12]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f14a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 ff53 	bl	800fff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	691a      	ldr	r2, [r3, #16]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	695a      	ldr	r2, [r3, #20]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68da      	ldr	r2, [r3, #12]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2220      	movs	r2, #32
 800f194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
	...

0800f1a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b08c      	sub	sp, #48	; 0x30
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b20      	cmp	r3, #32
 800f1bc:	d165      	bne.n	800f28a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <HAL_UART_Transmit_DMA+0x26>
 800f1c4:	88fb      	ldrh	r3, [r7, #6]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e05e      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d101      	bne.n	800f1dc <HAL_UART_Transmit_DMA+0x38>
 800f1d8:	2302      	movs	r3, #2
 800f1da:	e057      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	88fa      	ldrh	r2, [r7, #6]
 800f1ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	88fa      	ldrh	r2, [r7, #6]
 800f1f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2221      	movs	r2, #33	; 0x21
 800f200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f208:	4a22      	ldr	r2, [pc, #136]	; (800f294 <HAL_UART_Transmit_DMA+0xf0>)
 800f20a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f210:	4a21      	ldr	r2, [pc, #132]	; (800f298 <HAL_UART_Transmit_DMA+0xf4>)
 800f212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f218:	4a20      	ldr	r2, [pc, #128]	; (800f29c <HAL_UART_Transmit_DMA+0xf8>)
 800f21a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f220:	2200      	movs	r2, #0
 800f222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f224:	f107 0308 	add.w	r3, r7, #8
 800f228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f230:	6819      	ldr	r1, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3304      	adds	r3, #4
 800f238:	461a      	mov	r2, r3
 800f23a:	88fb      	ldrh	r3, [r7, #6]
 800f23c:	f7fa fe14 	bl	8009e68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3314      	adds	r3, #20
 800f258:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	617b      	str	r3, [r7, #20]
   return(result);
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f268:	62bb      	str	r3, [r7, #40]	; 0x28
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	3314      	adds	r3, #20
 800f270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f272:	627a      	str	r2, [r7, #36]	; 0x24
 800f274:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6a39      	ldr	r1, [r7, #32]
 800f278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e5      	bne.n	800f252 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	e000      	b.n	800f28c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800f28a:	2302      	movs	r3, #2
  }
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3730      	adds	r7, #48	; 0x30
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	0800f899 	.word	0x0800f899
 800f298:	0800f933 	.word	0x0800f933
 800f29c:	0800faab 	.word	0x0800faab

0800f2a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b20      	cmp	r3, #32
 800f2b8:	d11d      	bne.n	800f2f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <HAL_UART_Receive_DMA+0x26>
 800f2c0:	88fb      	ldrh	r3, [r7, #6]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d101      	bne.n	800f2ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e016      	b.n	800f2f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	d101      	bne.n	800f2d8 <HAL_UART_Receive_DMA+0x38>
 800f2d4:	2302      	movs	r3, #2
 800f2d6:	e00f      	b.n	800f2f8 <HAL_UART_Receive_DMA+0x58>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f2e6:	88fb      	ldrh	r3, [r7, #6]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 fc27 	bl	800fb40 <UART_Start_Receive_DMA>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	e000      	b.n	800f2f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f2f6:	2302      	movs	r3, #2
  }
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b0ba      	sub	sp, #232	; 0xe8
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	695b      	ldr	r3, [r3, #20]
 800f322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f326:	2300      	movs	r3, #0
 800f328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f32c:	2300      	movs	r3, #0
 800f32e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f336:	f003 030f 	and.w	r3, r3, #15
 800f33a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f33e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10f      	bne.n	800f366 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f34a:	f003 0320 	and.w	r3, r3, #32
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d009      	beq.n	800f366 <HAL_UART_IRQHandler+0x66>
 800f352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f356:	f003 0320 	and.w	r3, r3, #32
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fd8f 	bl	800fe82 <UART_Receive_IT>
      return;
 800f364:	e256      	b.n	800f814 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f000 80de 	beq.w	800f52c <HAL_UART_IRQHandler+0x22c>
 800f370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f374:	f003 0301 	and.w	r3, r3, #1
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d106      	bne.n	800f38a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f380:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f384:	2b00      	cmp	r3, #0
 800f386:	f000 80d1 	beq.w	800f52c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	d00b      	beq.n	800f3ae <HAL_UART_IRQHandler+0xae>
 800f396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d005      	beq.n	800f3ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a6:	f043 0201 	orr.w	r2, r3, #1
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3b2:	f003 0304 	and.w	r3, r3, #4
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d00b      	beq.n	800f3d2 <HAL_UART_IRQHandler+0xd2>
 800f3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3be:	f003 0301 	and.w	r3, r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d005      	beq.n	800f3d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ca:	f043 0202 	orr.w	r2, r3, #2
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3d6:	f003 0302 	and.w	r3, r3, #2
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00b      	beq.n	800f3f6 <HAL_UART_IRQHandler+0xf6>
 800f3de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3e2:	f003 0301 	and.w	r3, r3, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d005      	beq.n	800f3f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	f043 0204 	orr.w	r2, r3, #4
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3fa:	f003 0308 	and.w	r3, r3, #8
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d011      	beq.n	800f426 <HAL_UART_IRQHandler+0x126>
 800f402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f406:	f003 0320 	and.w	r3, r3, #32
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d105      	bne.n	800f41a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f412:	f003 0301 	and.w	r3, r3, #1
 800f416:	2b00      	cmp	r3, #0
 800f418:	d005      	beq.n	800f426 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	f043 0208 	orr.w	r2, r3, #8
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	f000 81ed 	beq.w	800f80a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f434:	f003 0320 	and.w	r3, r3, #32
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d008      	beq.n	800f44e <HAL_UART_IRQHandler+0x14e>
 800f43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f440:	f003 0320 	and.w	r3, r3, #32
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fd1a 	bl	800fe82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f458:	2b40      	cmp	r3, #64	; 0x40
 800f45a:	bf0c      	ite	eq
 800f45c:	2301      	moveq	r3, #1
 800f45e:	2300      	movne	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46a:	f003 0308 	and.w	r3, r3, #8
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d103      	bne.n	800f47a <HAL_UART_IRQHandler+0x17a>
 800f472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f476:	2b00      	cmp	r3, #0
 800f478:	d04f      	beq.n	800f51a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fc22 	bl	800fcc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	695b      	ldr	r3, [r3, #20]
 800f486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f48a:	2b40      	cmp	r3, #64	; 0x40
 800f48c:	d141      	bne.n	800f512 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	3314      	adds	r3, #20
 800f494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f49c:	e853 3f00 	ldrex	r3, [r3]
 800f4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f4a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	3314      	adds	r3, #20
 800f4b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f4ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f4be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f4c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f4ca:	e841 2300 	strex	r3, r2, [r1]
 800f4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f4d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1d9      	bne.n	800f48e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d013      	beq.n	800f50a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e6:	4a7d      	ldr	r2, [pc, #500]	; (800f6dc <HAL_UART_IRQHandler+0x3dc>)
 800f4e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fa fd82 	bl	8009ff8 <HAL_DMA_Abort_IT>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d016      	beq.n	800f528 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f504:	4610      	mov	r0, r2
 800f506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f508:	e00e      	b.n	800f528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f9ae 	bl	800f86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f510:	e00a      	b.n	800f528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f9aa 	bl	800f86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f518:	e006      	b.n	800f528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f9a6 	bl	800f86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f526:	e170      	b.n	800f80a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f528:	bf00      	nop
    return;
 800f52a:	e16e      	b.n	800f80a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f530:	2b01      	cmp	r3, #1
 800f532:	f040 814a 	bne.w	800f7ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f53a:	f003 0310 	and.w	r3, r3, #16
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 8143 	beq.w	800f7ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f548:	f003 0310 	and.w	r3, r3, #16
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f000 813c 	beq.w	800f7ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f552:	2300      	movs	r3, #0
 800f554:	60bb      	str	r3, [r7, #8]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	60bb      	str	r3, [r7, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	685b      	ldr	r3, [r3, #4]
 800f564:	60bb      	str	r3, [r7, #8]
 800f566:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f572:	2b40      	cmp	r3, #64	; 0x40
 800f574:	f040 80b4 	bne.w	800f6e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 8140 	beq.w	800f80e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f596:	429a      	cmp	r2, r3
 800f598:	f080 8139 	bcs.w	800f80e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f5a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5ae:	f000 8088 	beq.w	800f6c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	330c      	adds	r3, #12
 800f5b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f5c0:	e853 3f00 	ldrex	r3, [r3]
 800f5c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f5c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f5cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	330c      	adds	r3, #12
 800f5da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f5de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f5e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f5ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f5ee:	e841 2300 	strex	r3, r2, [r1]
 800f5f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f5f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d1d9      	bne.n	800f5b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	3314      	adds	r3, #20
 800f604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f608:	e853 3f00 	ldrex	r3, [r3]
 800f60c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f60e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f610:	f023 0301 	bic.w	r3, r3, #1
 800f614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3314      	adds	r3, #20
 800f61e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f622:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f626:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f62a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f62e:	e841 2300 	strex	r3, r2, [r1]
 800f632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f636:	2b00      	cmp	r3, #0
 800f638:	d1e1      	bne.n	800f5fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3314      	adds	r3, #20
 800f640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f644:	e853 3f00 	ldrex	r3, [r3]
 800f648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f64a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f64c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3314      	adds	r3, #20
 800f65a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f65e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f666:	e841 2300 	strex	r3, r2, [r1]
 800f66a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f66c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1e3      	bne.n	800f63a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2220      	movs	r2, #32
 800f676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	330c      	adds	r3, #12
 800f686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f68a:	e853 3f00 	ldrex	r3, [r3]
 800f68e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f692:	f023 0310 	bic.w	r3, r3, #16
 800f696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	330c      	adds	r3, #12
 800f6a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f6a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800f6a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f6aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6ac:	e841 2300 	strex	r3, r2, [r1]
 800f6b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1e3      	bne.n	800f680 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fa fc2b 	bl	8009f18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f8d4 	bl	800f880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f6d8:	e099      	b.n	800f80e <HAL_UART_IRQHandler+0x50e>
 800f6da:	bf00      	nop
 800f6dc:	0800fd8b 	.word	0x0800fd8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f000 808b 	beq.w	800f812 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800f6fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 8086 	beq.w	800f812 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	330c      	adds	r3, #12
 800f70c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f710:	e853 3f00 	ldrex	r3, [r3]
 800f714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f71c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	330c      	adds	r3, #12
 800f726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f72a:	647a      	str	r2, [r7, #68]	; 0x44
 800f72c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f732:	e841 2300 	strex	r3, r2, [r1]
 800f736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e3      	bne.n	800f706 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	3314      	adds	r3, #20
 800f744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f748:	e853 3f00 	ldrex	r3, [r3]
 800f74c:	623b      	str	r3, [r7, #32]
   return(result);
 800f74e:	6a3b      	ldr	r3, [r7, #32]
 800f750:	f023 0301 	bic.w	r3, r3, #1
 800f754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	3314      	adds	r3, #20
 800f75e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f762:	633a      	str	r2, [r7, #48]	; 0x30
 800f764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f76a:	e841 2300 	strex	r3, r2, [r1]
 800f76e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	2b00      	cmp	r3, #0
 800f774:	d1e3      	bne.n	800f73e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2220      	movs	r2, #32
 800f77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	330c      	adds	r3, #12
 800f78a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	e853 3f00 	ldrex	r3, [r3]
 800f792:	60fb      	str	r3, [r7, #12]
   return(result);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f023 0310 	bic.w	r3, r3, #16
 800f79a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	330c      	adds	r3, #12
 800f7a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f7a8:	61fa      	str	r2, [r7, #28]
 800f7aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ac:	69b9      	ldr	r1, [r7, #24]
 800f7ae:	69fa      	ldr	r2, [r7, #28]
 800f7b0:	e841 2300 	strex	r3, r2, [r1]
 800f7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d1e3      	bne.n	800f784 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f7bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 f85c 	bl	800f880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f7c8:	e023      	b.n	800f812 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f7ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d009      	beq.n	800f7ea <HAL_UART_IRQHandler+0x4ea>
 800f7d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fae5 	bl	800fdb2 <UART_Transmit_IT>
    return;
 800f7e8:	e014      	b.n	800f814 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f7ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00e      	beq.n	800f814 <HAL_UART_IRQHandler+0x514>
 800f7f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d008      	beq.n	800f814 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fb25 	bl	800fe52 <UART_EndTransmit_IT>
    return;
 800f808:	e004      	b.n	800f814 <HAL_UART_IRQHandler+0x514>
    return;
 800f80a:	bf00      	nop
 800f80c:	e002      	b.n	800f814 <HAL_UART_IRQHandler+0x514>
      return;
 800f80e:	bf00      	nop
 800f810:	e000      	b.n	800f814 <HAL_UART_IRQHandler+0x514>
      return;
 800f812:	bf00      	nop
  }
}
 800f814:	37e8      	adds	r7, #232	; 0xe8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop

0800f81c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f84c:	bf00      	nop
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f860:	bf00      	nop
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f874:	bf00      	nop
 800f876:	370c      	adds	r7, #12
 800f878:	46bd      	mov	sp, r7
 800f87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87e:	4770      	bx	lr

0800f880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
 800f888:	460b      	mov	r3, r1
 800f88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f88c:	bf00      	nop
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b090      	sub	sp, #64	; 0x40
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d137      	bne.n	800f924 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	3314      	adds	r3, #20
 800f8c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c4:	e853 3f00 	ldrex	r3, [r3]
 800f8c8:	623b      	str	r3, [r7, #32]
   return(result);
 800f8ca:	6a3b      	ldr	r3, [r7, #32]
 800f8cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3314      	adds	r3, #20
 800f8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8da:	633a      	str	r2, [r7, #48]	; 0x30
 800f8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e5      	bne.n	800f8ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	330c      	adds	r3, #12
 800f8f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	e853 3f00 	ldrex	r3, [r3]
 800f8fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f904:	637b      	str	r3, [r7, #52]	; 0x34
 800f906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	330c      	adds	r3, #12
 800f90c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f90e:	61fa      	str	r2, [r7, #28]
 800f910:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f912:	69b9      	ldr	r1, [r7, #24]
 800f914:	69fa      	ldr	r2, [r7, #28]
 800f916:	e841 2300 	strex	r3, r2, [r1]
 800f91a:	617b      	str	r3, [r7, #20]
   return(result);
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1e5      	bne.n	800f8ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f922:	e002      	b.n	800f92a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f926:	f7ff ff79 	bl	800f81c <HAL_UART_TxCpltCallback>
}
 800f92a:	bf00      	nop
 800f92c:	3740      	adds	r7, #64	; 0x40
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f940:	68f8      	ldr	r0, [r7, #12]
 800f942:	f7ff ff75 	bl	800f830 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f946:	bf00      	nop
 800f948:	3710      	adds	r7, #16
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b09c      	sub	sp, #112	; 0x70
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f95a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f966:	2b00      	cmp	r3, #0
 800f968:	d172      	bne.n	800fa50 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f96a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f96c:	2200      	movs	r2, #0
 800f96e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	330c      	adds	r3, #12
 800f976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f97a:	e853 3f00 	ldrex	r3, [r3]
 800f97e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f986:	66bb      	str	r3, [r7, #104]	; 0x68
 800f988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	330c      	adds	r3, #12
 800f98e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f990:	65ba      	str	r2, [r7, #88]	; 0x58
 800f992:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f998:	e841 2300 	strex	r3, r2, [r1]
 800f99c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d1e5      	bne.n	800f970 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	3314      	adds	r3, #20
 800f9aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ae:	e853 3f00 	ldrex	r3, [r3]
 800f9b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b6:	f023 0301 	bic.w	r3, r3, #1
 800f9ba:	667b      	str	r3, [r7, #100]	; 0x64
 800f9bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	3314      	adds	r3, #20
 800f9c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f9c4:	647a      	str	r2, [r7, #68]	; 0x44
 800f9c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9cc:	e841 2300 	strex	r3, r2, [r1]
 800f9d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f9d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d1e5      	bne.n	800f9a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	3314      	adds	r3, #20
 800f9de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e2:	e853 3f00 	ldrex	r3, [r3]
 800f9e6:	623b      	str	r3, [r7, #32]
   return(result);
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9ee:	663b      	str	r3, [r7, #96]	; 0x60
 800f9f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	3314      	adds	r3, #20
 800f9f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9f8:	633a      	str	r2, [r7, #48]	; 0x30
 800f9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa00:	e841 2300 	strex	r3, r2, [r1]
 800fa04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1e5      	bne.n	800f9d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa0e:	2220      	movs	r2, #32
 800fa10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d119      	bne.n	800fa50 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	330c      	adds	r3, #12
 800fa22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	e853 3f00 	ldrex	r3, [r3]
 800fa2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f023 0310 	bic.w	r3, r3, #16
 800fa32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	330c      	adds	r3, #12
 800fa3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa3c:	61fa      	str	r2, [r7, #28]
 800fa3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa40:	69b9      	ldr	r1, [r7, #24]
 800fa42:	69fa      	ldr	r2, [r7, #28]
 800fa44:	e841 2300 	strex	r3, r2, [r1]
 800fa48:	617b      	str	r3, [r7, #20]
   return(result);
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d1e5      	bne.n	800fa1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa54:	2b01      	cmp	r3, #1
 800fa56:	d106      	bne.n	800fa66 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa60:	f7ff ff0e 	bl	800f880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa64:	e002      	b.n	800fa6c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800fa66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa68:	f7ff feec 	bl	800f844 <HAL_UART_RxCpltCallback>
}
 800fa6c:	bf00      	nop
 800fa6e:	3770      	adds	r7, #112	; 0x70
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d108      	bne.n	800fa9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fa8e:	085b      	lsrs	r3, r3, #1
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	4619      	mov	r1, r3
 800fa94:	68f8      	ldr	r0, [r7, #12]
 800fa96:	f7ff fef3 	bl	800f880 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa9a:	e002      	b.n	800faa2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f7ff fedb 	bl	800f858 <HAL_UART_RxHalfCpltCallback>
}
 800faa2:	bf00      	nop
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b084      	sub	sp, #16
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fab2:	2300      	movs	r3, #0
 800fab4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fac6:	2b80      	cmp	r3, #128	; 0x80
 800fac8:	bf0c      	ite	eq
 800faca:	2301      	moveq	r3, #1
 800facc:	2300      	movne	r3, #0
 800face:	b2db      	uxtb	r3, r3
 800fad0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fad8:	b2db      	uxtb	r3, r3
 800fada:	2b21      	cmp	r3, #33	; 0x21
 800fadc:	d108      	bne.n	800faf0 <UART_DMAError+0x46>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d005      	beq.n	800faf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	2200      	movs	r2, #0
 800fae8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800faea:	68b8      	ldr	r0, [r7, #8]
 800faec:	f000 f8c2 	bl	800fc74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fafa:	2b40      	cmp	r3, #64	; 0x40
 800fafc:	bf0c      	ite	eq
 800fafe:	2301      	moveq	r3, #1
 800fb00:	2300      	movne	r3, #0
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	2b22      	cmp	r3, #34	; 0x22
 800fb10:	d108      	bne.n	800fb24 <UART_DMAError+0x7a>
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d005      	beq.n	800fb24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fb1e:	68b8      	ldr	r0, [r7, #8]
 800fb20:	f000 f8d0 	bl	800fcc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb28:	f043 0210 	orr.w	r2, r3, #16
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb30:	68b8      	ldr	r0, [r7, #8]
 800fb32:	f7ff fe9b 	bl	800f86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb36:	bf00      	nop
 800fb38:	3710      	adds	r7, #16
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
	...

0800fb40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b098      	sub	sp, #96	; 0x60
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	60f8      	str	r0, [r7, #12]
 800fb48:	60b9      	str	r1, [r7, #8]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	88fa      	ldrh	r2, [r7, #6]
 800fb58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2222      	movs	r2, #34	; 0x22
 800fb64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb6c:	4a3e      	ldr	r2, [pc, #248]	; (800fc68 <UART_Start_Receive_DMA+0x128>)
 800fb6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb74:	4a3d      	ldr	r2, [pc, #244]	; (800fc6c <UART_Start_Receive_DMA+0x12c>)
 800fb76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7c:	4a3c      	ldr	r2, [pc, #240]	; (800fc70 <UART_Start_Receive_DMA+0x130>)
 800fb7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb84:	2200      	movs	r2, #0
 800fb86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fb88:	f107 0308 	add.w	r3, r7, #8
 800fb8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	3304      	adds	r3, #4
 800fb98:	4619      	mov	r1, r3
 800fb9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	88fb      	ldrh	r3, [r7, #6]
 800fba0:	f7fa f962 	bl	8009e68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fba4:	2300      	movs	r3, #0
 800fba6:	613b      	str	r3, [r7, #16]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	613b      	str	r3, [r7, #16]
 800fbb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	330c      	adds	r3, #12
 800fbc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbcc:	e853 3f00 	ldrex	r3, [r3]
 800fbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	330c      	adds	r3, #12
 800fbe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbe2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fbe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fbe8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fbea:	e841 2300 	strex	r3, r2, [r1]
 800fbee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fbf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d1e5      	bne.n	800fbc2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	3314      	adds	r3, #20
 800fbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc00:	e853 3f00 	ldrex	r3, [r3]
 800fc04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc08:	f043 0301 	orr.w	r3, r3, #1
 800fc0c:	657b      	str	r3, [r7, #84]	; 0x54
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	3314      	adds	r3, #20
 800fc14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc16:	63ba      	str	r2, [r7, #56]	; 0x38
 800fc18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc1e:	e841 2300 	strex	r3, r2, [r1]
 800fc22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1e5      	bne.n	800fbf6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3314      	adds	r3, #20
 800fc30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc32:	69bb      	ldr	r3, [r7, #24]
 800fc34:	e853 3f00 	ldrex	r3, [r3]
 800fc38:	617b      	str	r3, [r7, #20]
   return(result);
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc40:	653b      	str	r3, [r7, #80]	; 0x50
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	3314      	adds	r3, #20
 800fc48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc4a:	627a      	str	r2, [r7, #36]	; 0x24
 800fc4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc4e:	6a39      	ldr	r1, [r7, #32]
 800fc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc52:	e841 2300 	strex	r3, r2, [r1]
 800fc56:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1e5      	bne.n	800fc2a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fc5e:	2300      	movs	r3, #0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3760      	adds	r7, #96	; 0x60
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	0800f94f 	.word	0x0800f94f
 800fc6c:	0800fa75 	.word	0x0800fa75
 800fc70:	0800faab 	.word	0x0800faab

0800fc74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b089      	sub	sp, #36	; 0x24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	330c      	adds	r3, #12
 800fc82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	e853 3f00 	ldrex	r3, [r3]
 800fc8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fc92:	61fb      	str	r3, [r7, #28]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	330c      	adds	r3, #12
 800fc9a:	69fa      	ldr	r2, [r7, #28]
 800fc9c:	61ba      	str	r2, [r7, #24]
 800fc9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca0:	6979      	ldr	r1, [r7, #20]
 800fca2:	69ba      	ldr	r2, [r7, #24]
 800fca4:	e841 2300 	strex	r3, r2, [r1]
 800fca8:	613b      	str	r3, [r7, #16]
   return(result);
 800fcaa:	693b      	ldr	r3, [r7, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1e5      	bne.n	800fc7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2220      	movs	r2, #32
 800fcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800fcb8:	bf00      	nop
 800fcba:	3724      	adds	r7, #36	; 0x24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b095      	sub	sp, #84	; 0x54
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	330c      	adds	r3, #12
 800fcd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd6:	e853 3f00 	ldrex	r3, [r3]
 800fcda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	330c      	adds	r3, #12
 800fcea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcec:	643a      	str	r2, [r7, #64]	; 0x40
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcf4:	e841 2300 	strex	r3, r2, [r1]
 800fcf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d1e5      	bne.n	800fccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3314      	adds	r3, #20
 800fd06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd08:	6a3b      	ldr	r3, [r7, #32]
 800fd0a:	e853 3f00 	ldrex	r3, [r3]
 800fd0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	f023 0301 	bic.w	r3, r3, #1
 800fd16:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	3314      	adds	r3, #20
 800fd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd20:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd28:	e841 2300 	strex	r3, r2, [r1]
 800fd2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d1e5      	bne.n	800fd00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d119      	bne.n	800fd70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	330c      	adds	r3, #12
 800fd42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	e853 3f00 	ldrex	r3, [r3]
 800fd4a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	f023 0310 	bic.w	r3, r3, #16
 800fd52:	647b      	str	r3, [r7, #68]	; 0x44
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	330c      	adds	r3, #12
 800fd5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd5c:	61ba      	str	r2, [r7, #24]
 800fd5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd60:	6979      	ldr	r1, [r7, #20]
 800fd62:	69ba      	ldr	r2, [r7, #24]
 800fd64:	e841 2300 	strex	r3, r2, [r1]
 800fd68:	613b      	str	r3, [r7, #16]
   return(result);
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1e5      	bne.n	800fd3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2220      	movs	r2, #32
 800fd74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fd7e:	bf00      	nop
 800fd80:	3754      	adds	r7, #84	; 0x54
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b084      	sub	sp, #16
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2200      	movs	r2, #0
 800fda2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f7ff fd61 	bl	800f86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fdaa:	bf00      	nop
 800fdac:	3710      	adds	r7, #16
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fdb2:	b480      	push	{r7}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	2b21      	cmp	r3, #33	; 0x21
 800fdc4:	d13e      	bne.n	800fe44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdce:	d114      	bne.n	800fdfa <UART_Transmit_IT+0x48>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d110      	bne.n	800fdfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a1b      	ldr	r3, [r3, #32]
 800fddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	881b      	ldrh	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fdec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	1c9a      	adds	r2, r3, #2
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	621a      	str	r2, [r3, #32]
 800fdf8:	e008      	b.n	800fe0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	1c59      	adds	r1, r3, #1
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	6211      	str	r1, [r2, #32]
 800fe04:	781a      	ldrb	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	3b01      	subs	r3, #1
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d10f      	bne.n	800fe40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	68da      	ldr	r2, [r3, #12]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68da      	ldr	r2, [r3, #12]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	e000      	b.n	800fe46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fe44:	2302      	movs	r3, #2
  }
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3714      	adds	r7, #20
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b082      	sub	sp, #8
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68da      	ldr	r2, [r3, #12]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2220      	movs	r2, #32
 800fe6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff fcd2 	bl	800f81c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fe78:	2300      	movs	r3, #0
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3708      	adds	r7, #8
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b08c      	sub	sp, #48	; 0x30
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe90:	b2db      	uxtb	r3, r3
 800fe92:	2b22      	cmp	r3, #34	; 0x22
 800fe94:	f040 80ab 	bne.w	800ffee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	689b      	ldr	r3, [r3, #8]
 800fe9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fea0:	d117      	bne.n	800fed2 <UART_Receive_IT+0x50>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d113      	bne.n	800fed2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800feaa:	2300      	movs	r3, #0
 800feac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	b29b      	uxth	r3, r3
 800febc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feca:	1c9a      	adds	r2, r3, #2
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	629a      	str	r2, [r3, #40]	; 0x28
 800fed0:	e026      	b.n	800ff20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800fed8:	2300      	movs	r3, #0
 800feda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fee4:	d007      	beq.n	800fef6 <UART_Receive_IT+0x74>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10a      	bne.n	800ff04 <UART_Receive_IT+0x82>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	b2da      	uxtb	r2, r3
 800fefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff00:	701a      	strb	r2, [r3, #0]
 800ff02:	e008      	b.n	800ff16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff10:	b2da      	uxtb	r2, r3
 800ff12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	3b01      	subs	r3, #1
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d15a      	bne.n	800ffea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	68da      	ldr	r2, [r3, #12]
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f022 0220 	bic.w	r2, r2, #32
 800ff42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	68da      	ldr	r2, [r3, #12]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ff52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	695a      	ldr	r2, [r3, #20]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f022 0201 	bic.w	r2, r2, #1
 800ff62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2220      	movs	r2, #32
 800ff68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d135      	bne.n	800ffe0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2200      	movs	r2, #0
 800ff78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	330c      	adds	r3, #12
 800ff80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	e853 3f00 	ldrex	r3, [r3]
 800ff88:	613b      	str	r3, [r7, #16]
   return(result);
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	f023 0310 	bic.w	r3, r3, #16
 800ff90:	627b      	str	r3, [r7, #36]	; 0x24
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	330c      	adds	r3, #12
 800ff98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff9a:	623a      	str	r2, [r7, #32]
 800ff9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9e:	69f9      	ldr	r1, [r7, #28]
 800ffa0:	6a3a      	ldr	r2, [r7, #32]
 800ffa2:	e841 2300 	strex	r3, r2, [r1]
 800ffa6:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d1e5      	bne.n	800ff7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f003 0310 	and.w	r3, r3, #16
 800ffb8:	2b10      	cmp	r3, #16
 800ffba:	d10a      	bne.n	800ffd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	60fb      	str	r3, [r7, #12]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	60fb      	str	r3, [r7, #12]
 800ffd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7ff fc51 	bl	800f880 <HAL_UARTEx_RxEventCallback>
 800ffde:	e002      	b.n	800ffe6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7ff fc2f 	bl	800f844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	e002      	b.n	800fff0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ffea:	2300      	movs	r3, #0
 800ffec:	e000      	b.n	800fff0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ffee:	2302      	movs	r3, #2
  }
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3730      	adds	r7, #48	; 0x30
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	b09f      	sub	sp, #124	; 0x7c
 800fffe:	af00      	add	r7, sp, #0
 8010000:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801000c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801000e:	68d9      	ldr	r1, [r3, #12]
 8010010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010012:	681a      	ldr	r2, [r3, #0]
 8010014:	ea40 0301 	orr.w	r3, r0, r1
 8010018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801001a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801001c:	689a      	ldr	r2, [r3, #8]
 801001e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	431a      	orrs	r2, r3
 8010024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	431a      	orrs	r2, r3
 801002a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801002c:	69db      	ldr	r3, [r3, #28]
 801002e:	4313      	orrs	r3, r2
 8010030:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801003c:	f021 010c 	bic.w	r1, r1, #12
 8010040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010042:	681a      	ldr	r2, [r3, #0]
 8010044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010046:	430b      	orrs	r3, r1
 8010048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801004a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	695b      	ldr	r3, [r3, #20]
 8010050:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8010054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010056:	6999      	ldr	r1, [r3, #24]
 8010058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	ea40 0301 	orr.w	r3, r0, r1
 8010060:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	4bc5      	ldr	r3, [pc, #788]	; (801037c <UART_SetConfig+0x384>)
 8010068:	429a      	cmp	r2, r3
 801006a:	d004      	beq.n	8010076 <UART_SetConfig+0x7e>
 801006c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	4bc3      	ldr	r3, [pc, #780]	; (8010380 <UART_SetConfig+0x388>)
 8010072:	429a      	cmp	r2, r3
 8010074:	d103      	bne.n	801007e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010076:	f7fe f979 	bl	800e36c <HAL_RCC_GetPCLK2Freq>
 801007a:	6778      	str	r0, [r7, #116]	; 0x74
 801007c:	e002      	b.n	8010084 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801007e:	f7fe f961 	bl	800e344 <HAL_RCC_GetPCLK1Freq>
 8010082:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010086:	69db      	ldr	r3, [r3, #28]
 8010088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801008c:	f040 80b6 	bne.w	80101fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010092:	461c      	mov	r4, r3
 8010094:	f04f 0500 	mov.w	r5, #0
 8010098:	4622      	mov	r2, r4
 801009a:	462b      	mov	r3, r5
 801009c:	1891      	adds	r1, r2, r2
 801009e:	6439      	str	r1, [r7, #64]	; 0x40
 80100a0:	415b      	adcs	r3, r3
 80100a2:	647b      	str	r3, [r7, #68]	; 0x44
 80100a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80100a8:	1912      	adds	r2, r2, r4
 80100aa:	eb45 0303 	adc.w	r3, r5, r3
 80100ae:	f04f 0000 	mov.w	r0, #0
 80100b2:	f04f 0100 	mov.w	r1, #0
 80100b6:	00d9      	lsls	r1, r3, #3
 80100b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80100bc:	00d0      	lsls	r0, r2, #3
 80100be:	4602      	mov	r2, r0
 80100c0:	460b      	mov	r3, r1
 80100c2:	1911      	adds	r1, r2, r4
 80100c4:	6639      	str	r1, [r7, #96]	; 0x60
 80100c6:	416b      	adcs	r3, r5
 80100c8:	667b      	str	r3, [r7, #100]	; 0x64
 80100ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	461a      	mov	r2, r3
 80100d0:	f04f 0300 	mov.w	r3, #0
 80100d4:	1891      	adds	r1, r2, r2
 80100d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80100d8:	415b      	adcs	r3, r3
 80100da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80100e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80100e4:	f7f0 fde8 	bl	8000cb8 <__aeabi_uldivmod>
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	4ba5      	ldr	r3, [pc, #660]	; (8010384 <UART_SetConfig+0x38c>)
 80100ee:	fba3 2302 	umull	r2, r3, r3, r2
 80100f2:	095b      	lsrs	r3, r3, #5
 80100f4:	011e      	lsls	r6, r3, #4
 80100f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80100f8:	461c      	mov	r4, r3
 80100fa:	f04f 0500 	mov.w	r5, #0
 80100fe:	4622      	mov	r2, r4
 8010100:	462b      	mov	r3, r5
 8010102:	1891      	adds	r1, r2, r2
 8010104:	6339      	str	r1, [r7, #48]	; 0x30
 8010106:	415b      	adcs	r3, r3
 8010108:	637b      	str	r3, [r7, #52]	; 0x34
 801010a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801010e:	1912      	adds	r2, r2, r4
 8010110:	eb45 0303 	adc.w	r3, r5, r3
 8010114:	f04f 0000 	mov.w	r0, #0
 8010118:	f04f 0100 	mov.w	r1, #0
 801011c:	00d9      	lsls	r1, r3, #3
 801011e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010122:	00d0      	lsls	r0, r2, #3
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	1911      	adds	r1, r2, r4
 801012a:	65b9      	str	r1, [r7, #88]	; 0x58
 801012c:	416b      	adcs	r3, r5
 801012e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	461a      	mov	r2, r3
 8010136:	f04f 0300 	mov.w	r3, #0
 801013a:	1891      	adds	r1, r2, r2
 801013c:	62b9      	str	r1, [r7, #40]	; 0x28
 801013e:	415b      	adcs	r3, r3
 8010140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010146:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801014a:	f7f0 fdb5 	bl	8000cb8 <__aeabi_uldivmod>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4b8c      	ldr	r3, [pc, #560]	; (8010384 <UART_SetConfig+0x38c>)
 8010154:	fba3 1302 	umull	r1, r3, r3, r2
 8010158:	095b      	lsrs	r3, r3, #5
 801015a:	2164      	movs	r1, #100	; 0x64
 801015c:	fb01 f303 	mul.w	r3, r1, r3
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	3332      	adds	r3, #50	; 0x32
 8010166:	4a87      	ldr	r2, [pc, #540]	; (8010384 <UART_SetConfig+0x38c>)
 8010168:	fba2 2303 	umull	r2, r3, r2, r3
 801016c:	095b      	lsrs	r3, r3, #5
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010174:	441e      	add	r6, r3
 8010176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010178:	4618      	mov	r0, r3
 801017a:	f04f 0100 	mov.w	r1, #0
 801017e:	4602      	mov	r2, r0
 8010180:	460b      	mov	r3, r1
 8010182:	1894      	adds	r4, r2, r2
 8010184:	623c      	str	r4, [r7, #32]
 8010186:	415b      	adcs	r3, r3
 8010188:	627b      	str	r3, [r7, #36]	; 0x24
 801018a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801018e:	1812      	adds	r2, r2, r0
 8010190:	eb41 0303 	adc.w	r3, r1, r3
 8010194:	f04f 0400 	mov.w	r4, #0
 8010198:	f04f 0500 	mov.w	r5, #0
 801019c:	00dd      	lsls	r5, r3, #3
 801019e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80101a2:	00d4      	lsls	r4, r2, #3
 80101a4:	4622      	mov	r2, r4
 80101a6:	462b      	mov	r3, r5
 80101a8:	1814      	adds	r4, r2, r0
 80101aa:	653c      	str	r4, [r7, #80]	; 0x50
 80101ac:	414b      	adcs	r3, r1
 80101ae:	657b      	str	r3, [r7, #84]	; 0x54
 80101b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	461a      	mov	r2, r3
 80101b6:	f04f 0300 	mov.w	r3, #0
 80101ba:	1891      	adds	r1, r2, r2
 80101bc:	61b9      	str	r1, [r7, #24]
 80101be:	415b      	adcs	r3, r3
 80101c0:	61fb      	str	r3, [r7, #28]
 80101c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80101c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80101ca:	f7f0 fd75 	bl	8000cb8 <__aeabi_uldivmod>
 80101ce:	4602      	mov	r2, r0
 80101d0:	460b      	mov	r3, r1
 80101d2:	4b6c      	ldr	r3, [pc, #432]	; (8010384 <UART_SetConfig+0x38c>)
 80101d4:	fba3 1302 	umull	r1, r3, r3, r2
 80101d8:	095b      	lsrs	r3, r3, #5
 80101da:	2164      	movs	r1, #100	; 0x64
 80101dc:	fb01 f303 	mul.w	r3, r1, r3
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	3332      	adds	r3, #50	; 0x32
 80101e6:	4a67      	ldr	r2, [pc, #412]	; (8010384 <UART_SetConfig+0x38c>)
 80101e8:	fba2 2303 	umull	r2, r3, r2, r3
 80101ec:	095b      	lsrs	r3, r3, #5
 80101ee:	f003 0207 	and.w	r2, r3, #7
 80101f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4432      	add	r2, r6
 80101f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80101fa:	e0b9      	b.n	8010370 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80101fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101fe:	461c      	mov	r4, r3
 8010200:	f04f 0500 	mov.w	r5, #0
 8010204:	4622      	mov	r2, r4
 8010206:	462b      	mov	r3, r5
 8010208:	1891      	adds	r1, r2, r2
 801020a:	6139      	str	r1, [r7, #16]
 801020c:	415b      	adcs	r3, r3
 801020e:	617b      	str	r3, [r7, #20]
 8010210:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010214:	1912      	adds	r2, r2, r4
 8010216:	eb45 0303 	adc.w	r3, r5, r3
 801021a:	f04f 0000 	mov.w	r0, #0
 801021e:	f04f 0100 	mov.w	r1, #0
 8010222:	00d9      	lsls	r1, r3, #3
 8010224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010228:	00d0      	lsls	r0, r2, #3
 801022a:	4602      	mov	r2, r0
 801022c:	460b      	mov	r3, r1
 801022e:	eb12 0804 	adds.w	r8, r2, r4
 8010232:	eb43 0905 	adc.w	r9, r3, r5
 8010236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	f04f 0100 	mov.w	r1, #0
 8010240:	f04f 0200 	mov.w	r2, #0
 8010244:	f04f 0300 	mov.w	r3, #0
 8010248:	008b      	lsls	r3, r1, #2
 801024a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801024e:	0082      	lsls	r2, r0, #2
 8010250:	4640      	mov	r0, r8
 8010252:	4649      	mov	r1, r9
 8010254:	f7f0 fd30 	bl	8000cb8 <__aeabi_uldivmod>
 8010258:	4602      	mov	r2, r0
 801025a:	460b      	mov	r3, r1
 801025c:	4b49      	ldr	r3, [pc, #292]	; (8010384 <UART_SetConfig+0x38c>)
 801025e:	fba3 2302 	umull	r2, r3, r3, r2
 8010262:	095b      	lsrs	r3, r3, #5
 8010264:	011e      	lsls	r6, r3, #4
 8010266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010268:	4618      	mov	r0, r3
 801026a:	f04f 0100 	mov.w	r1, #0
 801026e:	4602      	mov	r2, r0
 8010270:	460b      	mov	r3, r1
 8010272:	1894      	adds	r4, r2, r2
 8010274:	60bc      	str	r4, [r7, #8]
 8010276:	415b      	adcs	r3, r3
 8010278:	60fb      	str	r3, [r7, #12]
 801027a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801027e:	1812      	adds	r2, r2, r0
 8010280:	eb41 0303 	adc.w	r3, r1, r3
 8010284:	f04f 0400 	mov.w	r4, #0
 8010288:	f04f 0500 	mov.w	r5, #0
 801028c:	00dd      	lsls	r5, r3, #3
 801028e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010292:	00d4      	lsls	r4, r2, #3
 8010294:	4622      	mov	r2, r4
 8010296:	462b      	mov	r3, r5
 8010298:	1814      	adds	r4, r2, r0
 801029a:	64bc      	str	r4, [r7, #72]	; 0x48
 801029c:	414b      	adcs	r3, r1
 801029e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	4618      	mov	r0, r3
 80102a6:	f04f 0100 	mov.w	r1, #0
 80102aa:	f04f 0200 	mov.w	r2, #0
 80102ae:	f04f 0300 	mov.w	r3, #0
 80102b2:	008b      	lsls	r3, r1, #2
 80102b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80102b8:	0082      	lsls	r2, r0, #2
 80102ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80102be:	f7f0 fcfb 	bl	8000cb8 <__aeabi_uldivmod>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4b2f      	ldr	r3, [pc, #188]	; (8010384 <UART_SetConfig+0x38c>)
 80102c8:	fba3 1302 	umull	r1, r3, r3, r2
 80102cc:	095b      	lsrs	r3, r3, #5
 80102ce:	2164      	movs	r1, #100	; 0x64
 80102d0:	fb01 f303 	mul.w	r3, r1, r3
 80102d4:	1ad3      	subs	r3, r2, r3
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	3332      	adds	r3, #50	; 0x32
 80102da:	4a2a      	ldr	r2, [pc, #168]	; (8010384 <UART_SetConfig+0x38c>)
 80102dc:	fba2 2303 	umull	r2, r3, r2, r3
 80102e0:	095b      	lsrs	r3, r3, #5
 80102e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102e6:	441e      	add	r6, r3
 80102e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102ea:	4618      	mov	r0, r3
 80102ec:	f04f 0100 	mov.w	r1, #0
 80102f0:	4602      	mov	r2, r0
 80102f2:	460b      	mov	r3, r1
 80102f4:	1894      	adds	r4, r2, r2
 80102f6:	603c      	str	r4, [r7, #0]
 80102f8:	415b      	adcs	r3, r3
 80102fa:	607b      	str	r3, [r7, #4]
 80102fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010300:	1812      	adds	r2, r2, r0
 8010302:	eb41 0303 	adc.w	r3, r1, r3
 8010306:	f04f 0400 	mov.w	r4, #0
 801030a:	f04f 0500 	mov.w	r5, #0
 801030e:	00dd      	lsls	r5, r3, #3
 8010310:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010314:	00d4      	lsls	r4, r2, #3
 8010316:	4622      	mov	r2, r4
 8010318:	462b      	mov	r3, r5
 801031a:	eb12 0a00 	adds.w	sl, r2, r0
 801031e:	eb43 0b01 	adc.w	fp, r3, r1
 8010322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	4618      	mov	r0, r3
 8010328:	f04f 0100 	mov.w	r1, #0
 801032c:	f04f 0200 	mov.w	r2, #0
 8010330:	f04f 0300 	mov.w	r3, #0
 8010334:	008b      	lsls	r3, r1, #2
 8010336:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801033a:	0082      	lsls	r2, r0, #2
 801033c:	4650      	mov	r0, sl
 801033e:	4659      	mov	r1, fp
 8010340:	f7f0 fcba 	bl	8000cb8 <__aeabi_uldivmod>
 8010344:	4602      	mov	r2, r0
 8010346:	460b      	mov	r3, r1
 8010348:	4b0e      	ldr	r3, [pc, #56]	; (8010384 <UART_SetConfig+0x38c>)
 801034a:	fba3 1302 	umull	r1, r3, r3, r2
 801034e:	095b      	lsrs	r3, r3, #5
 8010350:	2164      	movs	r1, #100	; 0x64
 8010352:	fb01 f303 	mul.w	r3, r1, r3
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	011b      	lsls	r3, r3, #4
 801035a:	3332      	adds	r3, #50	; 0x32
 801035c:	4a09      	ldr	r2, [pc, #36]	; (8010384 <UART_SetConfig+0x38c>)
 801035e:	fba2 2303 	umull	r2, r3, r2, r3
 8010362:	095b      	lsrs	r3, r3, #5
 8010364:	f003 020f 	and.w	r2, r3, #15
 8010368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4432      	add	r2, r6
 801036e:	609a      	str	r2, [r3, #8]
}
 8010370:	bf00      	nop
 8010372:	377c      	adds	r7, #124	; 0x7c
 8010374:	46bd      	mov	sp, r7
 8010376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037a:	bf00      	nop
 801037c:	40011000 	.word	0x40011000
 8010380:	40011400 	.word	0x40011400
 8010384:	51eb851f 	.word	0x51eb851f

08010388 <atof>:
 8010388:	2100      	movs	r1, #0
 801038a:	f001 bd05 	b.w	8011d98 <strtod>

0801038e <atoi>:
 801038e:	220a      	movs	r2, #10
 8010390:	2100      	movs	r1, #0
 8010392:	f001 bdef 	b.w	8011f74 <strtol>
	...

08010398 <__errno>:
 8010398:	4b01      	ldr	r3, [pc, #4]	; (80103a0 <__errno+0x8>)
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	20000040 	.word	0x20000040

080103a4 <__libc_init_array>:
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	4d0d      	ldr	r5, [pc, #52]	; (80103dc <__libc_init_array+0x38>)
 80103a8:	4c0d      	ldr	r4, [pc, #52]	; (80103e0 <__libc_init_array+0x3c>)
 80103aa:	1b64      	subs	r4, r4, r5
 80103ac:	10a4      	asrs	r4, r4, #2
 80103ae:	2600      	movs	r6, #0
 80103b0:	42a6      	cmp	r6, r4
 80103b2:	d109      	bne.n	80103c8 <__libc_init_array+0x24>
 80103b4:	4d0b      	ldr	r5, [pc, #44]	; (80103e4 <__libc_init_array+0x40>)
 80103b6:	4c0c      	ldr	r4, [pc, #48]	; (80103e8 <__libc_init_array+0x44>)
 80103b8:	f004 fcb8 	bl	8014d2c <_init>
 80103bc:	1b64      	subs	r4, r4, r5
 80103be:	10a4      	asrs	r4, r4, #2
 80103c0:	2600      	movs	r6, #0
 80103c2:	42a6      	cmp	r6, r4
 80103c4:	d105      	bne.n	80103d2 <__libc_init_array+0x2e>
 80103c6:	bd70      	pop	{r4, r5, r6, pc}
 80103c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103cc:	4798      	blx	r3
 80103ce:	3601      	adds	r6, #1
 80103d0:	e7ee      	b.n	80103b0 <__libc_init_array+0xc>
 80103d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d6:	4798      	blx	r3
 80103d8:	3601      	adds	r6, #1
 80103da:	e7f2      	b.n	80103c2 <__libc_init_array+0x1e>
 80103dc:	08028cb0 	.word	0x08028cb0
 80103e0:	08028cb0 	.word	0x08028cb0
 80103e4:	08028cb0 	.word	0x08028cb0
 80103e8:	08028cb4 	.word	0x08028cb4

080103ec <memset>:
 80103ec:	4402      	add	r2, r0
 80103ee:	4603      	mov	r3, r0
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d100      	bne.n	80103f6 <memset+0xa>
 80103f4:	4770      	bx	lr
 80103f6:	f803 1b01 	strb.w	r1, [r3], #1
 80103fa:	e7f9      	b.n	80103f0 <memset+0x4>

080103fc <__cvt>:
 80103fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010400:	ec55 4b10 	vmov	r4, r5, d0
 8010404:	2d00      	cmp	r5, #0
 8010406:	460e      	mov	r6, r1
 8010408:	4619      	mov	r1, r3
 801040a:	462b      	mov	r3, r5
 801040c:	bfbb      	ittet	lt
 801040e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010412:	461d      	movlt	r5, r3
 8010414:	2300      	movge	r3, #0
 8010416:	232d      	movlt	r3, #45	; 0x2d
 8010418:	700b      	strb	r3, [r1, #0]
 801041a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801041c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010420:	4691      	mov	r9, r2
 8010422:	f023 0820 	bic.w	r8, r3, #32
 8010426:	bfbc      	itt	lt
 8010428:	4622      	movlt	r2, r4
 801042a:	4614      	movlt	r4, r2
 801042c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010430:	d005      	beq.n	801043e <__cvt+0x42>
 8010432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010436:	d100      	bne.n	801043a <__cvt+0x3e>
 8010438:	3601      	adds	r6, #1
 801043a:	2102      	movs	r1, #2
 801043c:	e000      	b.n	8010440 <__cvt+0x44>
 801043e:	2103      	movs	r1, #3
 8010440:	ab03      	add	r3, sp, #12
 8010442:	9301      	str	r3, [sp, #4]
 8010444:	ab02      	add	r3, sp, #8
 8010446:	9300      	str	r3, [sp, #0]
 8010448:	ec45 4b10 	vmov	d0, r4, r5
 801044c:	4653      	mov	r3, sl
 801044e:	4632      	mov	r2, r6
 8010450:	f001 fe46 	bl	80120e0 <_dtoa_r>
 8010454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010458:	4607      	mov	r7, r0
 801045a:	d102      	bne.n	8010462 <__cvt+0x66>
 801045c:	f019 0f01 	tst.w	r9, #1
 8010460:	d022      	beq.n	80104a8 <__cvt+0xac>
 8010462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010466:	eb07 0906 	add.w	r9, r7, r6
 801046a:	d110      	bne.n	801048e <__cvt+0x92>
 801046c:	783b      	ldrb	r3, [r7, #0]
 801046e:	2b30      	cmp	r3, #48	; 0x30
 8010470:	d10a      	bne.n	8010488 <__cvt+0x8c>
 8010472:	2200      	movs	r2, #0
 8010474:	2300      	movs	r3, #0
 8010476:	4620      	mov	r0, r4
 8010478:	4629      	mov	r1, r5
 801047a:	f7f0 fb3d 	bl	8000af8 <__aeabi_dcmpeq>
 801047e:	b918      	cbnz	r0, 8010488 <__cvt+0x8c>
 8010480:	f1c6 0601 	rsb	r6, r6, #1
 8010484:	f8ca 6000 	str.w	r6, [sl]
 8010488:	f8da 3000 	ldr.w	r3, [sl]
 801048c:	4499      	add	r9, r3
 801048e:	2200      	movs	r2, #0
 8010490:	2300      	movs	r3, #0
 8010492:	4620      	mov	r0, r4
 8010494:	4629      	mov	r1, r5
 8010496:	f7f0 fb2f 	bl	8000af8 <__aeabi_dcmpeq>
 801049a:	b108      	cbz	r0, 80104a0 <__cvt+0xa4>
 801049c:	f8cd 900c 	str.w	r9, [sp, #12]
 80104a0:	2230      	movs	r2, #48	; 0x30
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	454b      	cmp	r3, r9
 80104a6:	d307      	bcc.n	80104b8 <__cvt+0xbc>
 80104a8:	9b03      	ldr	r3, [sp, #12]
 80104aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104ac:	1bdb      	subs	r3, r3, r7
 80104ae:	4638      	mov	r0, r7
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	b004      	add	sp, #16
 80104b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b8:	1c59      	adds	r1, r3, #1
 80104ba:	9103      	str	r1, [sp, #12]
 80104bc:	701a      	strb	r2, [r3, #0]
 80104be:	e7f0      	b.n	80104a2 <__cvt+0xa6>

080104c0 <__exponent>:
 80104c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104c2:	4603      	mov	r3, r0
 80104c4:	2900      	cmp	r1, #0
 80104c6:	bfb8      	it	lt
 80104c8:	4249      	neglt	r1, r1
 80104ca:	f803 2b02 	strb.w	r2, [r3], #2
 80104ce:	bfb4      	ite	lt
 80104d0:	222d      	movlt	r2, #45	; 0x2d
 80104d2:	222b      	movge	r2, #43	; 0x2b
 80104d4:	2909      	cmp	r1, #9
 80104d6:	7042      	strb	r2, [r0, #1]
 80104d8:	dd2a      	ble.n	8010530 <__exponent+0x70>
 80104da:	f10d 0407 	add.w	r4, sp, #7
 80104de:	46a4      	mov	ip, r4
 80104e0:	270a      	movs	r7, #10
 80104e2:	46a6      	mov	lr, r4
 80104e4:	460a      	mov	r2, r1
 80104e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80104ea:	fb07 1516 	mls	r5, r7, r6, r1
 80104ee:	3530      	adds	r5, #48	; 0x30
 80104f0:	2a63      	cmp	r2, #99	; 0x63
 80104f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80104f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80104fa:	4631      	mov	r1, r6
 80104fc:	dcf1      	bgt.n	80104e2 <__exponent+0x22>
 80104fe:	3130      	adds	r1, #48	; 0x30
 8010500:	f1ae 0502 	sub.w	r5, lr, #2
 8010504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010508:	1c44      	adds	r4, r0, #1
 801050a:	4629      	mov	r1, r5
 801050c:	4561      	cmp	r1, ip
 801050e:	d30a      	bcc.n	8010526 <__exponent+0x66>
 8010510:	f10d 0209 	add.w	r2, sp, #9
 8010514:	eba2 020e 	sub.w	r2, r2, lr
 8010518:	4565      	cmp	r5, ip
 801051a:	bf88      	it	hi
 801051c:	2200      	movhi	r2, #0
 801051e:	4413      	add	r3, r2
 8010520:	1a18      	subs	r0, r3, r0
 8010522:	b003      	add	sp, #12
 8010524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801052a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801052e:	e7ed      	b.n	801050c <__exponent+0x4c>
 8010530:	2330      	movs	r3, #48	; 0x30
 8010532:	3130      	adds	r1, #48	; 0x30
 8010534:	7083      	strb	r3, [r0, #2]
 8010536:	70c1      	strb	r1, [r0, #3]
 8010538:	1d03      	adds	r3, r0, #4
 801053a:	e7f1      	b.n	8010520 <__exponent+0x60>

0801053c <_printf_float>:
 801053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010540:	ed2d 8b02 	vpush	{d8}
 8010544:	b08d      	sub	sp, #52	; 0x34
 8010546:	460c      	mov	r4, r1
 8010548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801054c:	4616      	mov	r6, r2
 801054e:	461f      	mov	r7, r3
 8010550:	4605      	mov	r5, r0
 8010552:	f002 ff33 	bl	80133bc <_localeconv_r>
 8010556:	f8d0 a000 	ldr.w	sl, [r0]
 801055a:	4650      	mov	r0, sl
 801055c:	f7ef fe4a 	bl	80001f4 <strlen>
 8010560:	2300      	movs	r3, #0
 8010562:	930a      	str	r3, [sp, #40]	; 0x28
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	9305      	str	r3, [sp, #20]
 8010568:	f8d8 3000 	ldr.w	r3, [r8]
 801056c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010570:	3307      	adds	r3, #7
 8010572:	f023 0307 	bic.w	r3, r3, #7
 8010576:	f103 0208 	add.w	r2, r3, #8
 801057a:	f8c8 2000 	str.w	r2, [r8]
 801057e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801058a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801058e:	9307      	str	r3, [sp, #28]
 8010590:	f8cd 8018 	str.w	r8, [sp, #24]
 8010594:	ee08 0a10 	vmov	s16, r0
 8010598:	4b9f      	ldr	r3, [pc, #636]	; (8010818 <_printf_float+0x2dc>)
 801059a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801059e:	f04f 32ff 	mov.w	r2, #4294967295
 80105a2:	f7f0 fadb 	bl	8000b5c <__aeabi_dcmpun>
 80105a6:	bb88      	cbnz	r0, 801060c <_printf_float+0xd0>
 80105a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105ac:	4b9a      	ldr	r3, [pc, #616]	; (8010818 <_printf_float+0x2dc>)
 80105ae:	f04f 32ff 	mov.w	r2, #4294967295
 80105b2:	f7f0 fab5 	bl	8000b20 <__aeabi_dcmple>
 80105b6:	bb48      	cbnz	r0, 801060c <_printf_float+0xd0>
 80105b8:	2200      	movs	r2, #0
 80105ba:	2300      	movs	r3, #0
 80105bc:	4640      	mov	r0, r8
 80105be:	4649      	mov	r1, r9
 80105c0:	f7f0 faa4 	bl	8000b0c <__aeabi_dcmplt>
 80105c4:	b110      	cbz	r0, 80105cc <_printf_float+0x90>
 80105c6:	232d      	movs	r3, #45	; 0x2d
 80105c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105cc:	4b93      	ldr	r3, [pc, #588]	; (801081c <_printf_float+0x2e0>)
 80105ce:	4894      	ldr	r0, [pc, #592]	; (8010820 <_printf_float+0x2e4>)
 80105d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80105d4:	bf94      	ite	ls
 80105d6:	4698      	movls	r8, r3
 80105d8:	4680      	movhi	r8, r0
 80105da:	2303      	movs	r3, #3
 80105dc:	6123      	str	r3, [r4, #16]
 80105de:	9b05      	ldr	r3, [sp, #20]
 80105e0:	f023 0204 	bic.w	r2, r3, #4
 80105e4:	6022      	str	r2, [r4, #0]
 80105e6:	f04f 0900 	mov.w	r9, #0
 80105ea:	9700      	str	r7, [sp, #0]
 80105ec:	4633      	mov	r3, r6
 80105ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80105f0:	4621      	mov	r1, r4
 80105f2:	4628      	mov	r0, r5
 80105f4:	f000 f9d8 	bl	80109a8 <_printf_common>
 80105f8:	3001      	adds	r0, #1
 80105fa:	f040 8090 	bne.w	801071e <_printf_float+0x1e2>
 80105fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010602:	b00d      	add	sp, #52	; 0x34
 8010604:	ecbd 8b02 	vpop	{d8}
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	4642      	mov	r2, r8
 801060e:	464b      	mov	r3, r9
 8010610:	4640      	mov	r0, r8
 8010612:	4649      	mov	r1, r9
 8010614:	f7f0 faa2 	bl	8000b5c <__aeabi_dcmpun>
 8010618:	b140      	cbz	r0, 801062c <_printf_float+0xf0>
 801061a:	464b      	mov	r3, r9
 801061c:	2b00      	cmp	r3, #0
 801061e:	bfbc      	itt	lt
 8010620:	232d      	movlt	r3, #45	; 0x2d
 8010622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010626:	487f      	ldr	r0, [pc, #508]	; (8010824 <_printf_float+0x2e8>)
 8010628:	4b7f      	ldr	r3, [pc, #508]	; (8010828 <_printf_float+0x2ec>)
 801062a:	e7d1      	b.n	80105d0 <_printf_float+0x94>
 801062c:	6863      	ldr	r3, [r4, #4]
 801062e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010632:	9206      	str	r2, [sp, #24]
 8010634:	1c5a      	adds	r2, r3, #1
 8010636:	d13f      	bne.n	80106b8 <_printf_float+0x17c>
 8010638:	2306      	movs	r3, #6
 801063a:	6063      	str	r3, [r4, #4]
 801063c:	9b05      	ldr	r3, [sp, #20]
 801063e:	6861      	ldr	r1, [r4, #4]
 8010640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010644:	2300      	movs	r3, #0
 8010646:	9303      	str	r3, [sp, #12]
 8010648:	ab0a      	add	r3, sp, #40	; 0x28
 801064a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801064e:	ab09      	add	r3, sp, #36	; 0x24
 8010650:	ec49 8b10 	vmov	d0, r8, r9
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	6022      	str	r2, [r4, #0]
 8010658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801065c:	4628      	mov	r0, r5
 801065e:	f7ff fecd 	bl	80103fc <__cvt>
 8010662:	9b06      	ldr	r3, [sp, #24]
 8010664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010666:	2b47      	cmp	r3, #71	; 0x47
 8010668:	4680      	mov	r8, r0
 801066a:	d108      	bne.n	801067e <_printf_float+0x142>
 801066c:	1cc8      	adds	r0, r1, #3
 801066e:	db02      	blt.n	8010676 <_printf_float+0x13a>
 8010670:	6863      	ldr	r3, [r4, #4]
 8010672:	4299      	cmp	r1, r3
 8010674:	dd41      	ble.n	80106fa <_printf_float+0x1be>
 8010676:	f1ab 0b02 	sub.w	fp, fp, #2
 801067a:	fa5f fb8b 	uxtb.w	fp, fp
 801067e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010682:	d820      	bhi.n	80106c6 <_printf_float+0x18a>
 8010684:	3901      	subs	r1, #1
 8010686:	465a      	mov	r2, fp
 8010688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801068c:	9109      	str	r1, [sp, #36]	; 0x24
 801068e:	f7ff ff17 	bl	80104c0 <__exponent>
 8010692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010694:	1813      	adds	r3, r2, r0
 8010696:	2a01      	cmp	r2, #1
 8010698:	4681      	mov	r9, r0
 801069a:	6123      	str	r3, [r4, #16]
 801069c:	dc02      	bgt.n	80106a4 <_printf_float+0x168>
 801069e:	6822      	ldr	r2, [r4, #0]
 80106a0:	07d2      	lsls	r2, r2, #31
 80106a2:	d501      	bpl.n	80106a8 <_printf_float+0x16c>
 80106a4:	3301      	adds	r3, #1
 80106a6:	6123      	str	r3, [r4, #16]
 80106a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d09c      	beq.n	80105ea <_printf_float+0xae>
 80106b0:	232d      	movs	r3, #45	; 0x2d
 80106b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106b6:	e798      	b.n	80105ea <_printf_float+0xae>
 80106b8:	9a06      	ldr	r2, [sp, #24]
 80106ba:	2a47      	cmp	r2, #71	; 0x47
 80106bc:	d1be      	bne.n	801063c <_printf_float+0x100>
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1bc      	bne.n	801063c <_printf_float+0x100>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e7b9      	b.n	801063a <_printf_float+0xfe>
 80106c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80106ca:	d118      	bne.n	80106fe <_printf_float+0x1c2>
 80106cc:	2900      	cmp	r1, #0
 80106ce:	6863      	ldr	r3, [r4, #4]
 80106d0:	dd0b      	ble.n	80106ea <_printf_float+0x1ae>
 80106d2:	6121      	str	r1, [r4, #16]
 80106d4:	b913      	cbnz	r3, 80106dc <_printf_float+0x1a0>
 80106d6:	6822      	ldr	r2, [r4, #0]
 80106d8:	07d0      	lsls	r0, r2, #31
 80106da:	d502      	bpl.n	80106e2 <_printf_float+0x1a6>
 80106dc:	3301      	adds	r3, #1
 80106de:	440b      	add	r3, r1
 80106e0:	6123      	str	r3, [r4, #16]
 80106e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80106e4:	f04f 0900 	mov.w	r9, #0
 80106e8:	e7de      	b.n	80106a8 <_printf_float+0x16c>
 80106ea:	b913      	cbnz	r3, 80106f2 <_printf_float+0x1b6>
 80106ec:	6822      	ldr	r2, [r4, #0]
 80106ee:	07d2      	lsls	r2, r2, #31
 80106f0:	d501      	bpl.n	80106f6 <_printf_float+0x1ba>
 80106f2:	3302      	adds	r3, #2
 80106f4:	e7f4      	b.n	80106e0 <_printf_float+0x1a4>
 80106f6:	2301      	movs	r3, #1
 80106f8:	e7f2      	b.n	80106e0 <_printf_float+0x1a4>
 80106fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80106fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010700:	4299      	cmp	r1, r3
 8010702:	db05      	blt.n	8010710 <_printf_float+0x1d4>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	6121      	str	r1, [r4, #16]
 8010708:	07d8      	lsls	r0, r3, #31
 801070a:	d5ea      	bpl.n	80106e2 <_printf_float+0x1a6>
 801070c:	1c4b      	adds	r3, r1, #1
 801070e:	e7e7      	b.n	80106e0 <_printf_float+0x1a4>
 8010710:	2900      	cmp	r1, #0
 8010712:	bfd4      	ite	le
 8010714:	f1c1 0202 	rsble	r2, r1, #2
 8010718:	2201      	movgt	r2, #1
 801071a:	4413      	add	r3, r2
 801071c:	e7e0      	b.n	80106e0 <_printf_float+0x1a4>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	055a      	lsls	r2, r3, #21
 8010722:	d407      	bmi.n	8010734 <_printf_float+0x1f8>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	4642      	mov	r2, r8
 8010728:	4631      	mov	r1, r6
 801072a:	4628      	mov	r0, r5
 801072c:	47b8      	blx	r7
 801072e:	3001      	adds	r0, #1
 8010730:	d12c      	bne.n	801078c <_printf_float+0x250>
 8010732:	e764      	b.n	80105fe <_printf_float+0xc2>
 8010734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010738:	f240 80e0 	bls.w	80108fc <_printf_float+0x3c0>
 801073c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010740:	2200      	movs	r2, #0
 8010742:	2300      	movs	r3, #0
 8010744:	f7f0 f9d8 	bl	8000af8 <__aeabi_dcmpeq>
 8010748:	2800      	cmp	r0, #0
 801074a:	d034      	beq.n	80107b6 <_printf_float+0x27a>
 801074c:	4a37      	ldr	r2, [pc, #220]	; (801082c <_printf_float+0x2f0>)
 801074e:	2301      	movs	r3, #1
 8010750:	4631      	mov	r1, r6
 8010752:	4628      	mov	r0, r5
 8010754:	47b8      	blx	r7
 8010756:	3001      	adds	r0, #1
 8010758:	f43f af51 	beq.w	80105fe <_printf_float+0xc2>
 801075c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010760:	429a      	cmp	r2, r3
 8010762:	db02      	blt.n	801076a <_printf_float+0x22e>
 8010764:	6823      	ldr	r3, [r4, #0]
 8010766:	07d8      	lsls	r0, r3, #31
 8010768:	d510      	bpl.n	801078c <_printf_float+0x250>
 801076a:	ee18 3a10 	vmov	r3, s16
 801076e:	4652      	mov	r2, sl
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f af41 	beq.w	80105fe <_printf_float+0xc2>
 801077c:	f04f 0800 	mov.w	r8, #0
 8010780:	f104 091a 	add.w	r9, r4, #26
 8010784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010786:	3b01      	subs	r3, #1
 8010788:	4543      	cmp	r3, r8
 801078a:	dc09      	bgt.n	80107a0 <_printf_float+0x264>
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	079b      	lsls	r3, r3, #30
 8010790:	f100 8105 	bmi.w	801099e <_printf_float+0x462>
 8010794:	68e0      	ldr	r0, [r4, #12]
 8010796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010798:	4298      	cmp	r0, r3
 801079a:	bfb8      	it	lt
 801079c:	4618      	movlt	r0, r3
 801079e:	e730      	b.n	8010602 <_printf_float+0xc6>
 80107a0:	2301      	movs	r3, #1
 80107a2:	464a      	mov	r2, r9
 80107a4:	4631      	mov	r1, r6
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b8      	blx	r7
 80107aa:	3001      	adds	r0, #1
 80107ac:	f43f af27 	beq.w	80105fe <_printf_float+0xc2>
 80107b0:	f108 0801 	add.w	r8, r8, #1
 80107b4:	e7e6      	b.n	8010784 <_printf_float+0x248>
 80107b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	dc39      	bgt.n	8010830 <_printf_float+0x2f4>
 80107bc:	4a1b      	ldr	r2, [pc, #108]	; (801082c <_printf_float+0x2f0>)
 80107be:	2301      	movs	r3, #1
 80107c0:	4631      	mov	r1, r6
 80107c2:	4628      	mov	r0, r5
 80107c4:	47b8      	blx	r7
 80107c6:	3001      	adds	r0, #1
 80107c8:	f43f af19 	beq.w	80105fe <_printf_float+0xc2>
 80107cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80107d0:	4313      	orrs	r3, r2
 80107d2:	d102      	bne.n	80107da <_printf_float+0x29e>
 80107d4:	6823      	ldr	r3, [r4, #0]
 80107d6:	07d9      	lsls	r1, r3, #31
 80107d8:	d5d8      	bpl.n	801078c <_printf_float+0x250>
 80107da:	ee18 3a10 	vmov	r3, s16
 80107de:	4652      	mov	r2, sl
 80107e0:	4631      	mov	r1, r6
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b8      	blx	r7
 80107e6:	3001      	adds	r0, #1
 80107e8:	f43f af09 	beq.w	80105fe <_printf_float+0xc2>
 80107ec:	f04f 0900 	mov.w	r9, #0
 80107f0:	f104 0a1a 	add.w	sl, r4, #26
 80107f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f6:	425b      	negs	r3, r3
 80107f8:	454b      	cmp	r3, r9
 80107fa:	dc01      	bgt.n	8010800 <_printf_float+0x2c4>
 80107fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107fe:	e792      	b.n	8010726 <_printf_float+0x1ea>
 8010800:	2301      	movs	r3, #1
 8010802:	4652      	mov	r2, sl
 8010804:	4631      	mov	r1, r6
 8010806:	4628      	mov	r0, r5
 8010808:	47b8      	blx	r7
 801080a:	3001      	adds	r0, #1
 801080c:	f43f aef7 	beq.w	80105fe <_printf_float+0xc2>
 8010810:	f109 0901 	add.w	r9, r9, #1
 8010814:	e7ee      	b.n	80107f4 <_printf_float+0x2b8>
 8010816:	bf00      	nop
 8010818:	7fefffff 	.word	0x7fefffff
 801081c:	08028798 	.word	0x08028798
 8010820:	0802879c 	.word	0x0802879c
 8010824:	080287a4 	.word	0x080287a4
 8010828:	080287a0 	.word	0x080287a0
 801082c:	080287a8 	.word	0x080287a8
 8010830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010834:	429a      	cmp	r2, r3
 8010836:	bfa8      	it	ge
 8010838:	461a      	movge	r2, r3
 801083a:	2a00      	cmp	r2, #0
 801083c:	4691      	mov	r9, r2
 801083e:	dc37      	bgt.n	80108b0 <_printf_float+0x374>
 8010840:	f04f 0b00 	mov.w	fp, #0
 8010844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010848:	f104 021a 	add.w	r2, r4, #26
 801084c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801084e:	9305      	str	r3, [sp, #20]
 8010850:	eba3 0309 	sub.w	r3, r3, r9
 8010854:	455b      	cmp	r3, fp
 8010856:	dc33      	bgt.n	80108c0 <_printf_float+0x384>
 8010858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801085c:	429a      	cmp	r2, r3
 801085e:	db3b      	blt.n	80108d8 <_printf_float+0x39c>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	07da      	lsls	r2, r3, #31
 8010864:	d438      	bmi.n	80108d8 <_printf_float+0x39c>
 8010866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010868:	9b05      	ldr	r3, [sp, #20]
 801086a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	eba2 0901 	sub.w	r9, r2, r1
 8010872:	4599      	cmp	r9, r3
 8010874:	bfa8      	it	ge
 8010876:	4699      	movge	r9, r3
 8010878:	f1b9 0f00 	cmp.w	r9, #0
 801087c:	dc35      	bgt.n	80108ea <_printf_float+0x3ae>
 801087e:	f04f 0800 	mov.w	r8, #0
 8010882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010886:	f104 0a1a 	add.w	sl, r4, #26
 801088a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801088e:	1a9b      	subs	r3, r3, r2
 8010890:	eba3 0309 	sub.w	r3, r3, r9
 8010894:	4543      	cmp	r3, r8
 8010896:	f77f af79 	ble.w	801078c <_printf_float+0x250>
 801089a:	2301      	movs	r3, #1
 801089c:	4652      	mov	r2, sl
 801089e:	4631      	mov	r1, r6
 80108a0:	4628      	mov	r0, r5
 80108a2:	47b8      	blx	r7
 80108a4:	3001      	adds	r0, #1
 80108a6:	f43f aeaa 	beq.w	80105fe <_printf_float+0xc2>
 80108aa:	f108 0801 	add.w	r8, r8, #1
 80108ae:	e7ec      	b.n	801088a <_printf_float+0x34e>
 80108b0:	4613      	mov	r3, r2
 80108b2:	4631      	mov	r1, r6
 80108b4:	4642      	mov	r2, r8
 80108b6:	4628      	mov	r0, r5
 80108b8:	47b8      	blx	r7
 80108ba:	3001      	adds	r0, #1
 80108bc:	d1c0      	bne.n	8010840 <_printf_float+0x304>
 80108be:	e69e      	b.n	80105fe <_printf_float+0xc2>
 80108c0:	2301      	movs	r3, #1
 80108c2:	4631      	mov	r1, r6
 80108c4:	4628      	mov	r0, r5
 80108c6:	9205      	str	r2, [sp, #20]
 80108c8:	47b8      	blx	r7
 80108ca:	3001      	adds	r0, #1
 80108cc:	f43f ae97 	beq.w	80105fe <_printf_float+0xc2>
 80108d0:	9a05      	ldr	r2, [sp, #20]
 80108d2:	f10b 0b01 	add.w	fp, fp, #1
 80108d6:	e7b9      	b.n	801084c <_printf_float+0x310>
 80108d8:	ee18 3a10 	vmov	r3, s16
 80108dc:	4652      	mov	r2, sl
 80108de:	4631      	mov	r1, r6
 80108e0:	4628      	mov	r0, r5
 80108e2:	47b8      	blx	r7
 80108e4:	3001      	adds	r0, #1
 80108e6:	d1be      	bne.n	8010866 <_printf_float+0x32a>
 80108e8:	e689      	b.n	80105fe <_printf_float+0xc2>
 80108ea:	9a05      	ldr	r2, [sp, #20]
 80108ec:	464b      	mov	r3, r9
 80108ee:	4442      	add	r2, r8
 80108f0:	4631      	mov	r1, r6
 80108f2:	4628      	mov	r0, r5
 80108f4:	47b8      	blx	r7
 80108f6:	3001      	adds	r0, #1
 80108f8:	d1c1      	bne.n	801087e <_printf_float+0x342>
 80108fa:	e680      	b.n	80105fe <_printf_float+0xc2>
 80108fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108fe:	2a01      	cmp	r2, #1
 8010900:	dc01      	bgt.n	8010906 <_printf_float+0x3ca>
 8010902:	07db      	lsls	r3, r3, #31
 8010904:	d538      	bpl.n	8010978 <_printf_float+0x43c>
 8010906:	2301      	movs	r3, #1
 8010908:	4642      	mov	r2, r8
 801090a:	4631      	mov	r1, r6
 801090c:	4628      	mov	r0, r5
 801090e:	47b8      	blx	r7
 8010910:	3001      	adds	r0, #1
 8010912:	f43f ae74 	beq.w	80105fe <_printf_float+0xc2>
 8010916:	ee18 3a10 	vmov	r3, s16
 801091a:	4652      	mov	r2, sl
 801091c:	4631      	mov	r1, r6
 801091e:	4628      	mov	r0, r5
 8010920:	47b8      	blx	r7
 8010922:	3001      	adds	r0, #1
 8010924:	f43f ae6b 	beq.w	80105fe <_printf_float+0xc2>
 8010928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801092c:	2200      	movs	r2, #0
 801092e:	2300      	movs	r3, #0
 8010930:	f7f0 f8e2 	bl	8000af8 <__aeabi_dcmpeq>
 8010934:	b9d8      	cbnz	r0, 801096e <_printf_float+0x432>
 8010936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010938:	f108 0201 	add.w	r2, r8, #1
 801093c:	3b01      	subs	r3, #1
 801093e:	4631      	mov	r1, r6
 8010940:	4628      	mov	r0, r5
 8010942:	47b8      	blx	r7
 8010944:	3001      	adds	r0, #1
 8010946:	d10e      	bne.n	8010966 <_printf_float+0x42a>
 8010948:	e659      	b.n	80105fe <_printf_float+0xc2>
 801094a:	2301      	movs	r3, #1
 801094c:	4652      	mov	r2, sl
 801094e:	4631      	mov	r1, r6
 8010950:	4628      	mov	r0, r5
 8010952:	47b8      	blx	r7
 8010954:	3001      	adds	r0, #1
 8010956:	f43f ae52 	beq.w	80105fe <_printf_float+0xc2>
 801095a:	f108 0801 	add.w	r8, r8, #1
 801095e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010960:	3b01      	subs	r3, #1
 8010962:	4543      	cmp	r3, r8
 8010964:	dcf1      	bgt.n	801094a <_printf_float+0x40e>
 8010966:	464b      	mov	r3, r9
 8010968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801096c:	e6dc      	b.n	8010728 <_printf_float+0x1ec>
 801096e:	f04f 0800 	mov.w	r8, #0
 8010972:	f104 0a1a 	add.w	sl, r4, #26
 8010976:	e7f2      	b.n	801095e <_printf_float+0x422>
 8010978:	2301      	movs	r3, #1
 801097a:	4642      	mov	r2, r8
 801097c:	e7df      	b.n	801093e <_printf_float+0x402>
 801097e:	2301      	movs	r3, #1
 8010980:	464a      	mov	r2, r9
 8010982:	4631      	mov	r1, r6
 8010984:	4628      	mov	r0, r5
 8010986:	47b8      	blx	r7
 8010988:	3001      	adds	r0, #1
 801098a:	f43f ae38 	beq.w	80105fe <_printf_float+0xc2>
 801098e:	f108 0801 	add.w	r8, r8, #1
 8010992:	68e3      	ldr	r3, [r4, #12]
 8010994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010996:	1a5b      	subs	r3, r3, r1
 8010998:	4543      	cmp	r3, r8
 801099a:	dcf0      	bgt.n	801097e <_printf_float+0x442>
 801099c:	e6fa      	b.n	8010794 <_printf_float+0x258>
 801099e:	f04f 0800 	mov.w	r8, #0
 80109a2:	f104 0919 	add.w	r9, r4, #25
 80109a6:	e7f4      	b.n	8010992 <_printf_float+0x456>

080109a8 <_printf_common>:
 80109a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ac:	4616      	mov	r6, r2
 80109ae:	4699      	mov	r9, r3
 80109b0:	688a      	ldr	r2, [r1, #8]
 80109b2:	690b      	ldr	r3, [r1, #16]
 80109b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109b8:	4293      	cmp	r3, r2
 80109ba:	bfb8      	it	lt
 80109bc:	4613      	movlt	r3, r2
 80109be:	6033      	str	r3, [r6, #0]
 80109c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109c4:	4607      	mov	r7, r0
 80109c6:	460c      	mov	r4, r1
 80109c8:	b10a      	cbz	r2, 80109ce <_printf_common+0x26>
 80109ca:	3301      	adds	r3, #1
 80109cc:	6033      	str	r3, [r6, #0]
 80109ce:	6823      	ldr	r3, [r4, #0]
 80109d0:	0699      	lsls	r1, r3, #26
 80109d2:	bf42      	ittt	mi
 80109d4:	6833      	ldrmi	r3, [r6, #0]
 80109d6:	3302      	addmi	r3, #2
 80109d8:	6033      	strmi	r3, [r6, #0]
 80109da:	6825      	ldr	r5, [r4, #0]
 80109dc:	f015 0506 	ands.w	r5, r5, #6
 80109e0:	d106      	bne.n	80109f0 <_printf_common+0x48>
 80109e2:	f104 0a19 	add.w	sl, r4, #25
 80109e6:	68e3      	ldr	r3, [r4, #12]
 80109e8:	6832      	ldr	r2, [r6, #0]
 80109ea:	1a9b      	subs	r3, r3, r2
 80109ec:	42ab      	cmp	r3, r5
 80109ee:	dc26      	bgt.n	8010a3e <_printf_common+0x96>
 80109f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109f4:	1e13      	subs	r3, r2, #0
 80109f6:	6822      	ldr	r2, [r4, #0]
 80109f8:	bf18      	it	ne
 80109fa:	2301      	movne	r3, #1
 80109fc:	0692      	lsls	r2, r2, #26
 80109fe:	d42b      	bmi.n	8010a58 <_printf_common+0xb0>
 8010a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a04:	4649      	mov	r1, r9
 8010a06:	4638      	mov	r0, r7
 8010a08:	47c0      	blx	r8
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	d01e      	beq.n	8010a4c <_printf_common+0xa4>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	68e5      	ldr	r5, [r4, #12]
 8010a12:	6832      	ldr	r2, [r6, #0]
 8010a14:	f003 0306 	and.w	r3, r3, #6
 8010a18:	2b04      	cmp	r3, #4
 8010a1a:	bf08      	it	eq
 8010a1c:	1aad      	subeq	r5, r5, r2
 8010a1e:	68a3      	ldr	r3, [r4, #8]
 8010a20:	6922      	ldr	r2, [r4, #16]
 8010a22:	bf0c      	ite	eq
 8010a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a28:	2500      	movne	r5, #0
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	bfc4      	itt	gt
 8010a2e:	1a9b      	subgt	r3, r3, r2
 8010a30:	18ed      	addgt	r5, r5, r3
 8010a32:	2600      	movs	r6, #0
 8010a34:	341a      	adds	r4, #26
 8010a36:	42b5      	cmp	r5, r6
 8010a38:	d11a      	bne.n	8010a70 <_printf_common+0xc8>
 8010a3a:	2000      	movs	r0, #0
 8010a3c:	e008      	b.n	8010a50 <_printf_common+0xa8>
 8010a3e:	2301      	movs	r3, #1
 8010a40:	4652      	mov	r2, sl
 8010a42:	4649      	mov	r1, r9
 8010a44:	4638      	mov	r0, r7
 8010a46:	47c0      	blx	r8
 8010a48:	3001      	adds	r0, #1
 8010a4a:	d103      	bne.n	8010a54 <_printf_common+0xac>
 8010a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a54:	3501      	adds	r5, #1
 8010a56:	e7c6      	b.n	80109e6 <_printf_common+0x3e>
 8010a58:	18e1      	adds	r1, r4, r3
 8010a5a:	1c5a      	adds	r2, r3, #1
 8010a5c:	2030      	movs	r0, #48	; 0x30
 8010a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a62:	4422      	add	r2, r4
 8010a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a6c:	3302      	adds	r3, #2
 8010a6e:	e7c7      	b.n	8010a00 <_printf_common+0x58>
 8010a70:	2301      	movs	r3, #1
 8010a72:	4622      	mov	r2, r4
 8010a74:	4649      	mov	r1, r9
 8010a76:	4638      	mov	r0, r7
 8010a78:	47c0      	blx	r8
 8010a7a:	3001      	adds	r0, #1
 8010a7c:	d0e6      	beq.n	8010a4c <_printf_common+0xa4>
 8010a7e:	3601      	adds	r6, #1
 8010a80:	e7d9      	b.n	8010a36 <_printf_common+0x8e>
	...

08010a84 <_printf_i>:
 8010a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a88:	460c      	mov	r4, r1
 8010a8a:	4691      	mov	r9, r2
 8010a8c:	7e27      	ldrb	r7, [r4, #24]
 8010a8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010a90:	2f78      	cmp	r7, #120	; 0x78
 8010a92:	4680      	mov	r8, r0
 8010a94:	469a      	mov	sl, r3
 8010a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a9a:	d807      	bhi.n	8010aac <_printf_i+0x28>
 8010a9c:	2f62      	cmp	r7, #98	; 0x62
 8010a9e:	d80a      	bhi.n	8010ab6 <_printf_i+0x32>
 8010aa0:	2f00      	cmp	r7, #0
 8010aa2:	f000 80d8 	beq.w	8010c56 <_printf_i+0x1d2>
 8010aa6:	2f58      	cmp	r7, #88	; 0x58
 8010aa8:	f000 80a3 	beq.w	8010bf2 <_printf_i+0x16e>
 8010aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ab4:	e03a      	b.n	8010b2c <_printf_i+0xa8>
 8010ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010aba:	2b15      	cmp	r3, #21
 8010abc:	d8f6      	bhi.n	8010aac <_printf_i+0x28>
 8010abe:	a001      	add	r0, pc, #4	; (adr r0, 8010ac4 <_printf_i+0x40>)
 8010ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010ac4:	08010b1d 	.word	0x08010b1d
 8010ac8:	08010b31 	.word	0x08010b31
 8010acc:	08010aad 	.word	0x08010aad
 8010ad0:	08010aad 	.word	0x08010aad
 8010ad4:	08010aad 	.word	0x08010aad
 8010ad8:	08010aad 	.word	0x08010aad
 8010adc:	08010b31 	.word	0x08010b31
 8010ae0:	08010aad 	.word	0x08010aad
 8010ae4:	08010aad 	.word	0x08010aad
 8010ae8:	08010aad 	.word	0x08010aad
 8010aec:	08010aad 	.word	0x08010aad
 8010af0:	08010c3d 	.word	0x08010c3d
 8010af4:	08010b61 	.word	0x08010b61
 8010af8:	08010c1f 	.word	0x08010c1f
 8010afc:	08010aad 	.word	0x08010aad
 8010b00:	08010aad 	.word	0x08010aad
 8010b04:	08010c5f 	.word	0x08010c5f
 8010b08:	08010aad 	.word	0x08010aad
 8010b0c:	08010b61 	.word	0x08010b61
 8010b10:	08010aad 	.word	0x08010aad
 8010b14:	08010aad 	.word	0x08010aad
 8010b18:	08010c27 	.word	0x08010c27
 8010b1c:	680b      	ldr	r3, [r1, #0]
 8010b1e:	1d1a      	adds	r2, r3, #4
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	600a      	str	r2, [r1, #0]
 8010b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e0a3      	b.n	8010c78 <_printf_i+0x1f4>
 8010b30:	6825      	ldr	r5, [r4, #0]
 8010b32:	6808      	ldr	r0, [r1, #0]
 8010b34:	062e      	lsls	r6, r5, #24
 8010b36:	f100 0304 	add.w	r3, r0, #4
 8010b3a:	d50a      	bpl.n	8010b52 <_printf_i+0xce>
 8010b3c:	6805      	ldr	r5, [r0, #0]
 8010b3e:	600b      	str	r3, [r1, #0]
 8010b40:	2d00      	cmp	r5, #0
 8010b42:	da03      	bge.n	8010b4c <_printf_i+0xc8>
 8010b44:	232d      	movs	r3, #45	; 0x2d
 8010b46:	426d      	negs	r5, r5
 8010b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b4c:	485e      	ldr	r0, [pc, #376]	; (8010cc8 <_printf_i+0x244>)
 8010b4e:	230a      	movs	r3, #10
 8010b50:	e019      	b.n	8010b86 <_printf_i+0x102>
 8010b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010b56:	6805      	ldr	r5, [r0, #0]
 8010b58:	600b      	str	r3, [r1, #0]
 8010b5a:	bf18      	it	ne
 8010b5c:	b22d      	sxthne	r5, r5
 8010b5e:	e7ef      	b.n	8010b40 <_printf_i+0xbc>
 8010b60:	680b      	ldr	r3, [r1, #0]
 8010b62:	6825      	ldr	r5, [r4, #0]
 8010b64:	1d18      	adds	r0, r3, #4
 8010b66:	6008      	str	r0, [r1, #0]
 8010b68:	0628      	lsls	r0, r5, #24
 8010b6a:	d501      	bpl.n	8010b70 <_printf_i+0xec>
 8010b6c:	681d      	ldr	r5, [r3, #0]
 8010b6e:	e002      	b.n	8010b76 <_printf_i+0xf2>
 8010b70:	0669      	lsls	r1, r5, #25
 8010b72:	d5fb      	bpl.n	8010b6c <_printf_i+0xe8>
 8010b74:	881d      	ldrh	r5, [r3, #0]
 8010b76:	4854      	ldr	r0, [pc, #336]	; (8010cc8 <_printf_i+0x244>)
 8010b78:	2f6f      	cmp	r7, #111	; 0x6f
 8010b7a:	bf0c      	ite	eq
 8010b7c:	2308      	moveq	r3, #8
 8010b7e:	230a      	movne	r3, #10
 8010b80:	2100      	movs	r1, #0
 8010b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b86:	6866      	ldr	r6, [r4, #4]
 8010b88:	60a6      	str	r6, [r4, #8]
 8010b8a:	2e00      	cmp	r6, #0
 8010b8c:	bfa2      	ittt	ge
 8010b8e:	6821      	ldrge	r1, [r4, #0]
 8010b90:	f021 0104 	bicge.w	r1, r1, #4
 8010b94:	6021      	strge	r1, [r4, #0]
 8010b96:	b90d      	cbnz	r5, 8010b9c <_printf_i+0x118>
 8010b98:	2e00      	cmp	r6, #0
 8010b9a:	d04d      	beq.n	8010c38 <_printf_i+0x1b4>
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8010ba6:	5dc7      	ldrb	r7, [r0, r7]
 8010ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bac:	462f      	mov	r7, r5
 8010bae:	42bb      	cmp	r3, r7
 8010bb0:	460d      	mov	r5, r1
 8010bb2:	d9f4      	bls.n	8010b9e <_printf_i+0x11a>
 8010bb4:	2b08      	cmp	r3, #8
 8010bb6:	d10b      	bne.n	8010bd0 <_printf_i+0x14c>
 8010bb8:	6823      	ldr	r3, [r4, #0]
 8010bba:	07df      	lsls	r7, r3, #31
 8010bbc:	d508      	bpl.n	8010bd0 <_printf_i+0x14c>
 8010bbe:	6923      	ldr	r3, [r4, #16]
 8010bc0:	6861      	ldr	r1, [r4, #4]
 8010bc2:	4299      	cmp	r1, r3
 8010bc4:	bfde      	ittt	le
 8010bc6:	2330      	movle	r3, #48	; 0x30
 8010bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010bd0:	1b92      	subs	r2, r2, r6
 8010bd2:	6122      	str	r2, [r4, #16]
 8010bd4:	f8cd a000 	str.w	sl, [sp]
 8010bd8:	464b      	mov	r3, r9
 8010bda:	aa03      	add	r2, sp, #12
 8010bdc:	4621      	mov	r1, r4
 8010bde:	4640      	mov	r0, r8
 8010be0:	f7ff fee2 	bl	80109a8 <_printf_common>
 8010be4:	3001      	adds	r0, #1
 8010be6:	d14c      	bne.n	8010c82 <_printf_i+0x1fe>
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bec:	b004      	add	sp, #16
 8010bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bf2:	4835      	ldr	r0, [pc, #212]	; (8010cc8 <_printf_i+0x244>)
 8010bf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	680e      	ldr	r6, [r1, #0]
 8010bfc:	061f      	lsls	r7, r3, #24
 8010bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c02:	600e      	str	r6, [r1, #0]
 8010c04:	d514      	bpl.n	8010c30 <_printf_i+0x1ac>
 8010c06:	07d9      	lsls	r1, r3, #31
 8010c08:	bf44      	itt	mi
 8010c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8010c0e:	6023      	strmi	r3, [r4, #0]
 8010c10:	b91d      	cbnz	r5, 8010c1a <_printf_i+0x196>
 8010c12:	6823      	ldr	r3, [r4, #0]
 8010c14:	f023 0320 	bic.w	r3, r3, #32
 8010c18:	6023      	str	r3, [r4, #0]
 8010c1a:	2310      	movs	r3, #16
 8010c1c:	e7b0      	b.n	8010b80 <_printf_i+0xfc>
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	f043 0320 	orr.w	r3, r3, #32
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	2378      	movs	r3, #120	; 0x78
 8010c28:	4828      	ldr	r0, [pc, #160]	; (8010ccc <_printf_i+0x248>)
 8010c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c2e:	e7e3      	b.n	8010bf8 <_printf_i+0x174>
 8010c30:	065e      	lsls	r6, r3, #25
 8010c32:	bf48      	it	mi
 8010c34:	b2ad      	uxthmi	r5, r5
 8010c36:	e7e6      	b.n	8010c06 <_printf_i+0x182>
 8010c38:	4616      	mov	r6, r2
 8010c3a:	e7bb      	b.n	8010bb4 <_printf_i+0x130>
 8010c3c:	680b      	ldr	r3, [r1, #0]
 8010c3e:	6826      	ldr	r6, [r4, #0]
 8010c40:	6960      	ldr	r0, [r4, #20]
 8010c42:	1d1d      	adds	r5, r3, #4
 8010c44:	600d      	str	r5, [r1, #0]
 8010c46:	0635      	lsls	r5, r6, #24
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	d501      	bpl.n	8010c50 <_printf_i+0x1cc>
 8010c4c:	6018      	str	r0, [r3, #0]
 8010c4e:	e002      	b.n	8010c56 <_printf_i+0x1d2>
 8010c50:	0671      	lsls	r1, r6, #25
 8010c52:	d5fb      	bpl.n	8010c4c <_printf_i+0x1c8>
 8010c54:	8018      	strh	r0, [r3, #0]
 8010c56:	2300      	movs	r3, #0
 8010c58:	6123      	str	r3, [r4, #16]
 8010c5a:	4616      	mov	r6, r2
 8010c5c:	e7ba      	b.n	8010bd4 <_printf_i+0x150>
 8010c5e:	680b      	ldr	r3, [r1, #0]
 8010c60:	1d1a      	adds	r2, r3, #4
 8010c62:	600a      	str	r2, [r1, #0]
 8010c64:	681e      	ldr	r6, [r3, #0]
 8010c66:	6862      	ldr	r2, [r4, #4]
 8010c68:	2100      	movs	r1, #0
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ef fad0 	bl	8000210 <memchr>
 8010c70:	b108      	cbz	r0, 8010c76 <_printf_i+0x1f2>
 8010c72:	1b80      	subs	r0, r0, r6
 8010c74:	6060      	str	r0, [r4, #4]
 8010c76:	6863      	ldr	r3, [r4, #4]
 8010c78:	6123      	str	r3, [r4, #16]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c80:	e7a8      	b.n	8010bd4 <_printf_i+0x150>
 8010c82:	6923      	ldr	r3, [r4, #16]
 8010c84:	4632      	mov	r2, r6
 8010c86:	4649      	mov	r1, r9
 8010c88:	4640      	mov	r0, r8
 8010c8a:	47d0      	blx	sl
 8010c8c:	3001      	adds	r0, #1
 8010c8e:	d0ab      	beq.n	8010be8 <_printf_i+0x164>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	079b      	lsls	r3, r3, #30
 8010c94:	d413      	bmi.n	8010cbe <_printf_i+0x23a>
 8010c96:	68e0      	ldr	r0, [r4, #12]
 8010c98:	9b03      	ldr	r3, [sp, #12]
 8010c9a:	4298      	cmp	r0, r3
 8010c9c:	bfb8      	it	lt
 8010c9e:	4618      	movlt	r0, r3
 8010ca0:	e7a4      	b.n	8010bec <_printf_i+0x168>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	4632      	mov	r2, r6
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	4640      	mov	r0, r8
 8010caa:	47d0      	blx	sl
 8010cac:	3001      	adds	r0, #1
 8010cae:	d09b      	beq.n	8010be8 <_printf_i+0x164>
 8010cb0:	3501      	adds	r5, #1
 8010cb2:	68e3      	ldr	r3, [r4, #12]
 8010cb4:	9903      	ldr	r1, [sp, #12]
 8010cb6:	1a5b      	subs	r3, r3, r1
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	dcf2      	bgt.n	8010ca2 <_printf_i+0x21e>
 8010cbc:	e7eb      	b.n	8010c96 <_printf_i+0x212>
 8010cbe:	2500      	movs	r5, #0
 8010cc0:	f104 0619 	add.w	r6, r4, #25
 8010cc4:	e7f5      	b.n	8010cb2 <_printf_i+0x22e>
 8010cc6:	bf00      	nop
 8010cc8:	080287aa 	.word	0x080287aa
 8010ccc:	080287bb 	.word	0x080287bb

08010cd0 <_scanf_float>:
 8010cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd4:	b087      	sub	sp, #28
 8010cd6:	4617      	mov	r7, r2
 8010cd8:	9303      	str	r3, [sp, #12]
 8010cda:	688b      	ldr	r3, [r1, #8]
 8010cdc:	1e5a      	subs	r2, r3, #1
 8010cde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010ce2:	bf83      	ittte	hi
 8010ce4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010ce8:	195b      	addhi	r3, r3, r5
 8010cea:	9302      	strhi	r3, [sp, #8]
 8010cec:	2300      	movls	r3, #0
 8010cee:	bf86      	itte	hi
 8010cf0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010cf4:	608b      	strhi	r3, [r1, #8]
 8010cf6:	9302      	strls	r3, [sp, #8]
 8010cf8:	680b      	ldr	r3, [r1, #0]
 8010cfa:	468b      	mov	fp, r1
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010d02:	f84b 3b1c 	str.w	r3, [fp], #28
 8010d06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010d0a:	4680      	mov	r8, r0
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	465e      	mov	r6, fp
 8010d10:	46aa      	mov	sl, r5
 8010d12:	46a9      	mov	r9, r5
 8010d14:	9501      	str	r5, [sp, #4]
 8010d16:	68a2      	ldr	r2, [r4, #8]
 8010d18:	b152      	cbz	r2, 8010d30 <_scanf_float+0x60>
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8010d20:	d864      	bhi.n	8010dec <_scanf_float+0x11c>
 8010d22:	2b40      	cmp	r3, #64	; 0x40
 8010d24:	d83c      	bhi.n	8010da0 <_scanf_float+0xd0>
 8010d26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010d2a:	b2c8      	uxtb	r0, r1
 8010d2c:	280e      	cmp	r0, #14
 8010d2e:	d93a      	bls.n	8010da6 <_scanf_float+0xd6>
 8010d30:	f1b9 0f00 	cmp.w	r9, #0
 8010d34:	d003      	beq.n	8010d3e <_scanf_float+0x6e>
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d3c:	6023      	str	r3, [r4, #0]
 8010d3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010d42:	f1ba 0f01 	cmp.w	sl, #1
 8010d46:	f200 8113 	bhi.w	8010f70 <_scanf_float+0x2a0>
 8010d4a:	455e      	cmp	r6, fp
 8010d4c:	f200 8105 	bhi.w	8010f5a <_scanf_float+0x28a>
 8010d50:	2501      	movs	r5, #1
 8010d52:	4628      	mov	r0, r5
 8010d54:	b007      	add	sp, #28
 8010d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010d5e:	2a0d      	cmp	r2, #13
 8010d60:	d8e6      	bhi.n	8010d30 <_scanf_float+0x60>
 8010d62:	a101      	add	r1, pc, #4	; (adr r1, 8010d68 <_scanf_float+0x98>)
 8010d64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010d68:	08010ea7 	.word	0x08010ea7
 8010d6c:	08010d31 	.word	0x08010d31
 8010d70:	08010d31 	.word	0x08010d31
 8010d74:	08010d31 	.word	0x08010d31
 8010d78:	08010f07 	.word	0x08010f07
 8010d7c:	08010edf 	.word	0x08010edf
 8010d80:	08010d31 	.word	0x08010d31
 8010d84:	08010d31 	.word	0x08010d31
 8010d88:	08010eb5 	.word	0x08010eb5
 8010d8c:	08010d31 	.word	0x08010d31
 8010d90:	08010d31 	.word	0x08010d31
 8010d94:	08010d31 	.word	0x08010d31
 8010d98:	08010d31 	.word	0x08010d31
 8010d9c:	08010e6d 	.word	0x08010e6d
 8010da0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010da4:	e7db      	b.n	8010d5e <_scanf_float+0x8e>
 8010da6:	290e      	cmp	r1, #14
 8010da8:	d8c2      	bhi.n	8010d30 <_scanf_float+0x60>
 8010daa:	a001      	add	r0, pc, #4	; (adr r0, 8010db0 <_scanf_float+0xe0>)
 8010dac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010db0:	08010e5f 	.word	0x08010e5f
 8010db4:	08010d31 	.word	0x08010d31
 8010db8:	08010e5f 	.word	0x08010e5f
 8010dbc:	08010ef3 	.word	0x08010ef3
 8010dc0:	08010d31 	.word	0x08010d31
 8010dc4:	08010e0d 	.word	0x08010e0d
 8010dc8:	08010e49 	.word	0x08010e49
 8010dcc:	08010e49 	.word	0x08010e49
 8010dd0:	08010e49 	.word	0x08010e49
 8010dd4:	08010e49 	.word	0x08010e49
 8010dd8:	08010e49 	.word	0x08010e49
 8010ddc:	08010e49 	.word	0x08010e49
 8010de0:	08010e49 	.word	0x08010e49
 8010de4:	08010e49 	.word	0x08010e49
 8010de8:	08010e49 	.word	0x08010e49
 8010dec:	2b6e      	cmp	r3, #110	; 0x6e
 8010dee:	d809      	bhi.n	8010e04 <_scanf_float+0x134>
 8010df0:	2b60      	cmp	r3, #96	; 0x60
 8010df2:	d8b2      	bhi.n	8010d5a <_scanf_float+0x8a>
 8010df4:	2b54      	cmp	r3, #84	; 0x54
 8010df6:	d077      	beq.n	8010ee8 <_scanf_float+0x218>
 8010df8:	2b59      	cmp	r3, #89	; 0x59
 8010dfa:	d199      	bne.n	8010d30 <_scanf_float+0x60>
 8010dfc:	2d07      	cmp	r5, #7
 8010dfe:	d197      	bne.n	8010d30 <_scanf_float+0x60>
 8010e00:	2508      	movs	r5, #8
 8010e02:	e029      	b.n	8010e58 <_scanf_float+0x188>
 8010e04:	2b74      	cmp	r3, #116	; 0x74
 8010e06:	d06f      	beq.n	8010ee8 <_scanf_float+0x218>
 8010e08:	2b79      	cmp	r3, #121	; 0x79
 8010e0a:	e7f6      	b.n	8010dfa <_scanf_float+0x12a>
 8010e0c:	6821      	ldr	r1, [r4, #0]
 8010e0e:	05c8      	lsls	r0, r1, #23
 8010e10:	d51a      	bpl.n	8010e48 <_scanf_float+0x178>
 8010e12:	9b02      	ldr	r3, [sp, #8]
 8010e14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010e18:	6021      	str	r1, [r4, #0]
 8010e1a:	f109 0901 	add.w	r9, r9, #1
 8010e1e:	b11b      	cbz	r3, 8010e28 <_scanf_float+0x158>
 8010e20:	3b01      	subs	r3, #1
 8010e22:	3201      	adds	r2, #1
 8010e24:	9302      	str	r3, [sp, #8]
 8010e26:	60a2      	str	r2, [r4, #8]
 8010e28:	68a3      	ldr	r3, [r4, #8]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	60a3      	str	r3, [r4, #8]
 8010e2e:	6923      	ldr	r3, [r4, #16]
 8010e30:	3301      	adds	r3, #1
 8010e32:	6123      	str	r3, [r4, #16]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3b01      	subs	r3, #1
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	607b      	str	r3, [r7, #4]
 8010e3c:	f340 8084 	ble.w	8010f48 <_scanf_float+0x278>
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	3301      	adds	r3, #1
 8010e44:	603b      	str	r3, [r7, #0]
 8010e46:	e766      	b.n	8010d16 <_scanf_float+0x46>
 8010e48:	eb1a 0f05 	cmn.w	sl, r5
 8010e4c:	f47f af70 	bne.w	8010d30 <_scanf_float+0x60>
 8010e50:	6822      	ldr	r2, [r4, #0]
 8010e52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010e56:	6022      	str	r2, [r4, #0]
 8010e58:	f806 3b01 	strb.w	r3, [r6], #1
 8010e5c:	e7e4      	b.n	8010e28 <_scanf_float+0x158>
 8010e5e:	6822      	ldr	r2, [r4, #0]
 8010e60:	0610      	lsls	r0, r2, #24
 8010e62:	f57f af65 	bpl.w	8010d30 <_scanf_float+0x60>
 8010e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010e6a:	e7f4      	b.n	8010e56 <_scanf_float+0x186>
 8010e6c:	f1ba 0f00 	cmp.w	sl, #0
 8010e70:	d10e      	bne.n	8010e90 <_scanf_float+0x1c0>
 8010e72:	f1b9 0f00 	cmp.w	r9, #0
 8010e76:	d10e      	bne.n	8010e96 <_scanf_float+0x1c6>
 8010e78:	6822      	ldr	r2, [r4, #0]
 8010e7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010e7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010e82:	d108      	bne.n	8010e96 <_scanf_float+0x1c6>
 8010e84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010e88:	6022      	str	r2, [r4, #0]
 8010e8a:	f04f 0a01 	mov.w	sl, #1
 8010e8e:	e7e3      	b.n	8010e58 <_scanf_float+0x188>
 8010e90:	f1ba 0f02 	cmp.w	sl, #2
 8010e94:	d055      	beq.n	8010f42 <_scanf_float+0x272>
 8010e96:	2d01      	cmp	r5, #1
 8010e98:	d002      	beq.n	8010ea0 <_scanf_float+0x1d0>
 8010e9a:	2d04      	cmp	r5, #4
 8010e9c:	f47f af48 	bne.w	8010d30 <_scanf_float+0x60>
 8010ea0:	3501      	adds	r5, #1
 8010ea2:	b2ed      	uxtb	r5, r5
 8010ea4:	e7d8      	b.n	8010e58 <_scanf_float+0x188>
 8010ea6:	f1ba 0f01 	cmp.w	sl, #1
 8010eaa:	f47f af41 	bne.w	8010d30 <_scanf_float+0x60>
 8010eae:	f04f 0a02 	mov.w	sl, #2
 8010eb2:	e7d1      	b.n	8010e58 <_scanf_float+0x188>
 8010eb4:	b97d      	cbnz	r5, 8010ed6 <_scanf_float+0x206>
 8010eb6:	f1b9 0f00 	cmp.w	r9, #0
 8010eba:	f47f af3c 	bne.w	8010d36 <_scanf_float+0x66>
 8010ebe:	6822      	ldr	r2, [r4, #0]
 8010ec0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010ec4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010ec8:	f47f af39 	bne.w	8010d3e <_scanf_float+0x6e>
 8010ecc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010ed0:	6022      	str	r2, [r4, #0]
 8010ed2:	2501      	movs	r5, #1
 8010ed4:	e7c0      	b.n	8010e58 <_scanf_float+0x188>
 8010ed6:	2d03      	cmp	r5, #3
 8010ed8:	d0e2      	beq.n	8010ea0 <_scanf_float+0x1d0>
 8010eda:	2d05      	cmp	r5, #5
 8010edc:	e7de      	b.n	8010e9c <_scanf_float+0x1cc>
 8010ede:	2d02      	cmp	r5, #2
 8010ee0:	f47f af26 	bne.w	8010d30 <_scanf_float+0x60>
 8010ee4:	2503      	movs	r5, #3
 8010ee6:	e7b7      	b.n	8010e58 <_scanf_float+0x188>
 8010ee8:	2d06      	cmp	r5, #6
 8010eea:	f47f af21 	bne.w	8010d30 <_scanf_float+0x60>
 8010eee:	2507      	movs	r5, #7
 8010ef0:	e7b2      	b.n	8010e58 <_scanf_float+0x188>
 8010ef2:	6822      	ldr	r2, [r4, #0]
 8010ef4:	0591      	lsls	r1, r2, #22
 8010ef6:	f57f af1b 	bpl.w	8010d30 <_scanf_float+0x60>
 8010efa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010efe:	6022      	str	r2, [r4, #0]
 8010f00:	f8cd 9004 	str.w	r9, [sp, #4]
 8010f04:	e7a8      	b.n	8010e58 <_scanf_float+0x188>
 8010f06:	6822      	ldr	r2, [r4, #0]
 8010f08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010f0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010f10:	d006      	beq.n	8010f20 <_scanf_float+0x250>
 8010f12:	0550      	lsls	r0, r2, #21
 8010f14:	f57f af0c 	bpl.w	8010d30 <_scanf_float+0x60>
 8010f18:	f1b9 0f00 	cmp.w	r9, #0
 8010f1c:	f43f af0f 	beq.w	8010d3e <_scanf_float+0x6e>
 8010f20:	0591      	lsls	r1, r2, #22
 8010f22:	bf58      	it	pl
 8010f24:	9901      	ldrpl	r1, [sp, #4]
 8010f26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010f2a:	bf58      	it	pl
 8010f2c:	eba9 0101 	subpl.w	r1, r9, r1
 8010f30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010f34:	bf58      	it	pl
 8010f36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010f3a:	6022      	str	r2, [r4, #0]
 8010f3c:	f04f 0900 	mov.w	r9, #0
 8010f40:	e78a      	b.n	8010e58 <_scanf_float+0x188>
 8010f42:	f04f 0a03 	mov.w	sl, #3
 8010f46:	e787      	b.n	8010e58 <_scanf_float+0x188>
 8010f48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4798      	blx	r3
 8010f52:	2800      	cmp	r0, #0
 8010f54:	f43f aedf 	beq.w	8010d16 <_scanf_float+0x46>
 8010f58:	e6ea      	b.n	8010d30 <_scanf_float+0x60>
 8010f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f62:	463a      	mov	r2, r7
 8010f64:	4640      	mov	r0, r8
 8010f66:	4798      	blx	r3
 8010f68:	6923      	ldr	r3, [r4, #16]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	6123      	str	r3, [r4, #16]
 8010f6e:	e6ec      	b.n	8010d4a <_scanf_float+0x7a>
 8010f70:	1e6b      	subs	r3, r5, #1
 8010f72:	2b06      	cmp	r3, #6
 8010f74:	d825      	bhi.n	8010fc2 <_scanf_float+0x2f2>
 8010f76:	2d02      	cmp	r5, #2
 8010f78:	d836      	bhi.n	8010fe8 <_scanf_float+0x318>
 8010f7a:	455e      	cmp	r6, fp
 8010f7c:	f67f aee8 	bls.w	8010d50 <_scanf_float+0x80>
 8010f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010f88:	463a      	mov	r2, r7
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	4798      	blx	r3
 8010f8e:	6923      	ldr	r3, [r4, #16]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	6123      	str	r3, [r4, #16]
 8010f94:	e7f1      	b.n	8010f7a <_scanf_float+0x2aa>
 8010f96:	9802      	ldr	r0, [sp, #8]
 8010f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010f9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010fa0:	9002      	str	r0, [sp, #8]
 8010fa2:	463a      	mov	r2, r7
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4798      	blx	r3
 8010fa8:	6923      	ldr	r3, [r4, #16]
 8010faa:	3b01      	subs	r3, #1
 8010fac:	6123      	str	r3, [r4, #16]
 8010fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010fb2:	fa5f fa8a 	uxtb.w	sl, sl
 8010fb6:	f1ba 0f02 	cmp.w	sl, #2
 8010fba:	d1ec      	bne.n	8010f96 <_scanf_float+0x2c6>
 8010fbc:	3d03      	subs	r5, #3
 8010fbe:	b2ed      	uxtb	r5, r5
 8010fc0:	1b76      	subs	r6, r6, r5
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	05da      	lsls	r2, r3, #23
 8010fc6:	d52f      	bpl.n	8011028 <_scanf_float+0x358>
 8010fc8:	055b      	lsls	r3, r3, #21
 8010fca:	d510      	bpl.n	8010fee <_scanf_float+0x31e>
 8010fcc:	455e      	cmp	r6, fp
 8010fce:	f67f aebf 	bls.w	8010d50 <_scanf_float+0x80>
 8010fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010fd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010fda:	463a      	mov	r2, r7
 8010fdc:	4640      	mov	r0, r8
 8010fde:	4798      	blx	r3
 8010fe0:	6923      	ldr	r3, [r4, #16]
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	6123      	str	r3, [r4, #16]
 8010fe6:	e7f1      	b.n	8010fcc <_scanf_float+0x2fc>
 8010fe8:	46aa      	mov	sl, r5
 8010fea:	9602      	str	r6, [sp, #8]
 8010fec:	e7df      	b.n	8010fae <_scanf_float+0x2de>
 8010fee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010ff2:	6923      	ldr	r3, [r4, #16]
 8010ff4:	2965      	cmp	r1, #101	; 0x65
 8010ff6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ffa:	f106 35ff 	add.w	r5, r6, #4294967295
 8010ffe:	6123      	str	r3, [r4, #16]
 8011000:	d00c      	beq.n	801101c <_scanf_float+0x34c>
 8011002:	2945      	cmp	r1, #69	; 0x45
 8011004:	d00a      	beq.n	801101c <_scanf_float+0x34c>
 8011006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801100a:	463a      	mov	r2, r7
 801100c:	4640      	mov	r0, r8
 801100e:	4798      	blx	r3
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011016:	3b01      	subs	r3, #1
 8011018:	1eb5      	subs	r5, r6, #2
 801101a:	6123      	str	r3, [r4, #16]
 801101c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011020:	463a      	mov	r2, r7
 8011022:	4640      	mov	r0, r8
 8011024:	4798      	blx	r3
 8011026:	462e      	mov	r6, r5
 8011028:	6825      	ldr	r5, [r4, #0]
 801102a:	f015 0510 	ands.w	r5, r5, #16
 801102e:	d158      	bne.n	80110e2 <_scanf_float+0x412>
 8011030:	7035      	strb	r5, [r6, #0]
 8011032:	6823      	ldr	r3, [r4, #0]
 8011034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801103c:	d11c      	bne.n	8011078 <_scanf_float+0x3a8>
 801103e:	9b01      	ldr	r3, [sp, #4]
 8011040:	454b      	cmp	r3, r9
 8011042:	eba3 0209 	sub.w	r2, r3, r9
 8011046:	d124      	bne.n	8011092 <_scanf_float+0x3c2>
 8011048:	2200      	movs	r2, #0
 801104a:	4659      	mov	r1, fp
 801104c:	4640      	mov	r0, r8
 801104e:	f000 fe9d 	bl	8011d8c <_strtod_r>
 8011052:	9b03      	ldr	r3, [sp, #12]
 8011054:	6821      	ldr	r1, [r4, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f011 0f02 	tst.w	r1, #2
 801105c:	ec57 6b10 	vmov	r6, r7, d0
 8011060:	f103 0204 	add.w	r2, r3, #4
 8011064:	d020      	beq.n	80110a8 <_scanf_float+0x3d8>
 8011066:	9903      	ldr	r1, [sp, #12]
 8011068:	600a      	str	r2, [r1, #0]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	e9c3 6700 	strd	r6, r7, [r3]
 8011070:	68e3      	ldr	r3, [r4, #12]
 8011072:	3301      	adds	r3, #1
 8011074:	60e3      	str	r3, [r4, #12]
 8011076:	e66c      	b.n	8010d52 <_scanf_float+0x82>
 8011078:	9b04      	ldr	r3, [sp, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d0e4      	beq.n	8011048 <_scanf_float+0x378>
 801107e:	9905      	ldr	r1, [sp, #20]
 8011080:	230a      	movs	r3, #10
 8011082:	462a      	mov	r2, r5
 8011084:	3101      	adds	r1, #1
 8011086:	4640      	mov	r0, r8
 8011088:	f000 ff72 	bl	8011f70 <_strtol_r>
 801108c:	9b04      	ldr	r3, [sp, #16]
 801108e:	9e05      	ldr	r6, [sp, #20]
 8011090:	1ac2      	subs	r2, r0, r3
 8011092:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011096:	429e      	cmp	r6, r3
 8011098:	bf28      	it	cs
 801109a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801109e:	4912      	ldr	r1, [pc, #72]	; (80110e8 <_scanf_float+0x418>)
 80110a0:	4630      	mov	r0, r6
 80110a2:	f000 f82b 	bl	80110fc <siprintf>
 80110a6:	e7cf      	b.n	8011048 <_scanf_float+0x378>
 80110a8:	f011 0f04 	tst.w	r1, #4
 80110ac:	9903      	ldr	r1, [sp, #12]
 80110ae:	600a      	str	r2, [r1, #0]
 80110b0:	d1db      	bne.n	801106a <_scanf_float+0x39a>
 80110b2:	f8d3 8000 	ldr.w	r8, [r3]
 80110b6:	ee10 2a10 	vmov	r2, s0
 80110ba:	ee10 0a10 	vmov	r0, s0
 80110be:	463b      	mov	r3, r7
 80110c0:	4639      	mov	r1, r7
 80110c2:	f7ef fd4b 	bl	8000b5c <__aeabi_dcmpun>
 80110c6:	b128      	cbz	r0, 80110d4 <_scanf_float+0x404>
 80110c8:	4808      	ldr	r0, [pc, #32]	; (80110ec <_scanf_float+0x41c>)
 80110ca:	f000 f811 	bl	80110f0 <nanf>
 80110ce:	ed88 0a00 	vstr	s0, [r8]
 80110d2:	e7cd      	b.n	8011070 <_scanf_float+0x3a0>
 80110d4:	4630      	mov	r0, r6
 80110d6:	4639      	mov	r1, r7
 80110d8:	f7ef fd9e 	bl	8000c18 <__aeabi_d2f>
 80110dc:	f8c8 0000 	str.w	r0, [r8]
 80110e0:	e7c6      	b.n	8011070 <_scanf_float+0x3a0>
 80110e2:	2500      	movs	r5, #0
 80110e4:	e635      	b.n	8010d52 <_scanf_float+0x82>
 80110e6:	bf00      	nop
 80110e8:	080287cc 	.word	0x080287cc
 80110ec:	080288db 	.word	0x080288db

080110f0 <nanf>:
 80110f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80110f8 <nanf+0x8>
 80110f4:	4770      	bx	lr
 80110f6:	bf00      	nop
 80110f8:	7fc00000 	.word	0x7fc00000

080110fc <siprintf>:
 80110fc:	b40e      	push	{r1, r2, r3}
 80110fe:	b500      	push	{lr}
 8011100:	b09c      	sub	sp, #112	; 0x70
 8011102:	ab1d      	add	r3, sp, #116	; 0x74
 8011104:	9002      	str	r0, [sp, #8]
 8011106:	9006      	str	r0, [sp, #24]
 8011108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801110c:	4809      	ldr	r0, [pc, #36]	; (8011134 <siprintf+0x38>)
 801110e:	9107      	str	r1, [sp, #28]
 8011110:	9104      	str	r1, [sp, #16]
 8011112:	4909      	ldr	r1, [pc, #36]	; (8011138 <siprintf+0x3c>)
 8011114:	f853 2b04 	ldr.w	r2, [r3], #4
 8011118:	9105      	str	r1, [sp, #20]
 801111a:	6800      	ldr	r0, [r0, #0]
 801111c:	9301      	str	r3, [sp, #4]
 801111e:	a902      	add	r1, sp, #8
 8011120:	f002 ff48 	bl	8013fb4 <_svfiprintf_r>
 8011124:	9b02      	ldr	r3, [sp, #8]
 8011126:	2200      	movs	r2, #0
 8011128:	701a      	strb	r2, [r3, #0]
 801112a:	b01c      	add	sp, #112	; 0x70
 801112c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011130:	b003      	add	sp, #12
 8011132:	4770      	bx	lr
 8011134:	20000040 	.word	0x20000040
 8011138:	ffff0208 	.word	0xffff0208

0801113c <sulp>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	4604      	mov	r4, r0
 8011140:	460d      	mov	r5, r1
 8011142:	ec45 4b10 	vmov	d0, r4, r5
 8011146:	4616      	mov	r6, r2
 8011148:	f002 fcd0 	bl	8013aec <__ulp>
 801114c:	ec51 0b10 	vmov	r0, r1, d0
 8011150:	b17e      	cbz	r6, 8011172 <sulp+0x36>
 8011152:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011156:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801115a:	2b00      	cmp	r3, #0
 801115c:	dd09      	ble.n	8011172 <sulp+0x36>
 801115e:	051b      	lsls	r3, r3, #20
 8011160:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011164:	2400      	movs	r4, #0
 8011166:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801116a:	4622      	mov	r2, r4
 801116c:	462b      	mov	r3, r5
 801116e:	f7ef fa5b 	bl	8000628 <__aeabi_dmul>
 8011172:	bd70      	pop	{r4, r5, r6, pc}
 8011174:	0000      	movs	r0, r0
	...

08011178 <_strtod_l>:
 8011178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801117c:	b0a3      	sub	sp, #140	; 0x8c
 801117e:	461f      	mov	r7, r3
 8011180:	2300      	movs	r3, #0
 8011182:	931e      	str	r3, [sp, #120]	; 0x78
 8011184:	4ba4      	ldr	r3, [pc, #656]	; (8011418 <_strtod_l+0x2a0>)
 8011186:	9219      	str	r2, [sp, #100]	; 0x64
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	9307      	str	r3, [sp, #28]
 801118c:	4604      	mov	r4, r0
 801118e:	4618      	mov	r0, r3
 8011190:	4688      	mov	r8, r1
 8011192:	f7ef f82f 	bl	80001f4 <strlen>
 8011196:	f04f 0a00 	mov.w	sl, #0
 801119a:	4605      	mov	r5, r0
 801119c:	f04f 0b00 	mov.w	fp, #0
 80111a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80111a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80111a6:	781a      	ldrb	r2, [r3, #0]
 80111a8:	2a2b      	cmp	r2, #43	; 0x2b
 80111aa:	d04c      	beq.n	8011246 <_strtod_l+0xce>
 80111ac:	d839      	bhi.n	8011222 <_strtod_l+0xaa>
 80111ae:	2a0d      	cmp	r2, #13
 80111b0:	d832      	bhi.n	8011218 <_strtod_l+0xa0>
 80111b2:	2a08      	cmp	r2, #8
 80111b4:	d832      	bhi.n	801121c <_strtod_l+0xa4>
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	d03c      	beq.n	8011234 <_strtod_l+0xbc>
 80111ba:	2300      	movs	r3, #0
 80111bc:	930e      	str	r3, [sp, #56]	; 0x38
 80111be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80111c0:	7833      	ldrb	r3, [r6, #0]
 80111c2:	2b30      	cmp	r3, #48	; 0x30
 80111c4:	f040 80b4 	bne.w	8011330 <_strtod_l+0x1b8>
 80111c8:	7873      	ldrb	r3, [r6, #1]
 80111ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80111ce:	2b58      	cmp	r3, #88	; 0x58
 80111d0:	d16c      	bne.n	80112ac <_strtod_l+0x134>
 80111d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	ab1e      	add	r3, sp, #120	; 0x78
 80111d8:	9702      	str	r7, [sp, #8]
 80111da:	9300      	str	r3, [sp, #0]
 80111dc:	4a8f      	ldr	r2, [pc, #572]	; (801141c <_strtod_l+0x2a4>)
 80111de:	ab1f      	add	r3, sp, #124	; 0x7c
 80111e0:	a91d      	add	r1, sp, #116	; 0x74
 80111e2:	4620      	mov	r0, r4
 80111e4:	f001 fde2 	bl	8012dac <__gethex>
 80111e8:	f010 0707 	ands.w	r7, r0, #7
 80111ec:	4605      	mov	r5, r0
 80111ee:	d005      	beq.n	80111fc <_strtod_l+0x84>
 80111f0:	2f06      	cmp	r7, #6
 80111f2:	d12a      	bne.n	801124a <_strtod_l+0xd2>
 80111f4:	3601      	adds	r6, #1
 80111f6:	2300      	movs	r3, #0
 80111f8:	961d      	str	r6, [sp, #116]	; 0x74
 80111fa:	930e      	str	r3, [sp, #56]	; 0x38
 80111fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f040 8596 	bne.w	8011d30 <_strtod_l+0xbb8>
 8011204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011206:	b1db      	cbz	r3, 8011240 <_strtod_l+0xc8>
 8011208:	4652      	mov	r2, sl
 801120a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801120e:	ec43 2b10 	vmov	d0, r2, r3
 8011212:	b023      	add	sp, #140	; 0x8c
 8011214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011218:	2a20      	cmp	r2, #32
 801121a:	d1ce      	bne.n	80111ba <_strtod_l+0x42>
 801121c:	3301      	adds	r3, #1
 801121e:	931d      	str	r3, [sp, #116]	; 0x74
 8011220:	e7c0      	b.n	80111a4 <_strtod_l+0x2c>
 8011222:	2a2d      	cmp	r2, #45	; 0x2d
 8011224:	d1c9      	bne.n	80111ba <_strtod_l+0x42>
 8011226:	2201      	movs	r2, #1
 8011228:	920e      	str	r2, [sp, #56]	; 0x38
 801122a:	1c5a      	adds	r2, r3, #1
 801122c:	921d      	str	r2, [sp, #116]	; 0x74
 801122e:	785b      	ldrb	r3, [r3, #1]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d1c4      	bne.n	80111be <_strtod_l+0x46>
 8011234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011236:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801123a:	2b00      	cmp	r3, #0
 801123c:	f040 8576 	bne.w	8011d2c <_strtod_l+0xbb4>
 8011240:	4652      	mov	r2, sl
 8011242:	465b      	mov	r3, fp
 8011244:	e7e3      	b.n	801120e <_strtod_l+0x96>
 8011246:	2200      	movs	r2, #0
 8011248:	e7ee      	b.n	8011228 <_strtod_l+0xb0>
 801124a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801124c:	b13a      	cbz	r2, 801125e <_strtod_l+0xe6>
 801124e:	2135      	movs	r1, #53	; 0x35
 8011250:	a820      	add	r0, sp, #128	; 0x80
 8011252:	f002 fd56 	bl	8013d02 <__copybits>
 8011256:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011258:	4620      	mov	r0, r4
 801125a:	f002 f91b 	bl	8013494 <_Bfree>
 801125e:	3f01      	subs	r7, #1
 8011260:	2f05      	cmp	r7, #5
 8011262:	d807      	bhi.n	8011274 <_strtod_l+0xfc>
 8011264:	e8df f007 	tbb	[pc, r7]
 8011268:	1d180b0e 	.word	0x1d180b0e
 801126c:	030e      	.short	0x030e
 801126e:	f04f 0b00 	mov.w	fp, #0
 8011272:	46da      	mov	sl, fp
 8011274:	0728      	lsls	r0, r5, #28
 8011276:	d5c1      	bpl.n	80111fc <_strtod_l+0x84>
 8011278:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801127c:	e7be      	b.n	80111fc <_strtod_l+0x84>
 801127e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8011282:	e7f7      	b.n	8011274 <_strtod_l+0xfc>
 8011284:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011288:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801128a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801128e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011292:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011296:	e7ed      	b.n	8011274 <_strtod_l+0xfc>
 8011298:	f8df b184 	ldr.w	fp, [pc, #388]	; 8011420 <_strtod_l+0x2a8>
 801129c:	f04f 0a00 	mov.w	sl, #0
 80112a0:	e7e8      	b.n	8011274 <_strtod_l+0xfc>
 80112a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80112a6:	f04f 3aff 	mov.w	sl, #4294967295
 80112aa:	e7e3      	b.n	8011274 <_strtod_l+0xfc>
 80112ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112ae:	1c5a      	adds	r2, r3, #1
 80112b0:	921d      	str	r2, [sp, #116]	; 0x74
 80112b2:	785b      	ldrb	r3, [r3, #1]
 80112b4:	2b30      	cmp	r3, #48	; 0x30
 80112b6:	d0f9      	beq.n	80112ac <_strtod_l+0x134>
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d09f      	beq.n	80111fc <_strtod_l+0x84>
 80112bc:	2301      	movs	r3, #1
 80112be:	f04f 0900 	mov.w	r9, #0
 80112c2:	9304      	str	r3, [sp, #16]
 80112c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80112c6:	930a      	str	r3, [sp, #40]	; 0x28
 80112c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80112cc:	464f      	mov	r7, r9
 80112ce:	220a      	movs	r2, #10
 80112d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80112d2:	7806      	ldrb	r6, [r0, #0]
 80112d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80112d8:	b2d9      	uxtb	r1, r3
 80112da:	2909      	cmp	r1, #9
 80112dc:	d92a      	bls.n	8011334 <_strtod_l+0x1bc>
 80112de:	9907      	ldr	r1, [sp, #28]
 80112e0:	462a      	mov	r2, r5
 80112e2:	f003 f8d9 	bl	8014498 <strncmp>
 80112e6:	b398      	cbz	r0, 8011350 <_strtod_l+0x1d8>
 80112e8:	2000      	movs	r0, #0
 80112ea:	4633      	mov	r3, r6
 80112ec:	463d      	mov	r5, r7
 80112ee:	9007      	str	r0, [sp, #28]
 80112f0:	4602      	mov	r2, r0
 80112f2:	2b65      	cmp	r3, #101	; 0x65
 80112f4:	d001      	beq.n	80112fa <_strtod_l+0x182>
 80112f6:	2b45      	cmp	r3, #69	; 0x45
 80112f8:	d118      	bne.n	801132c <_strtod_l+0x1b4>
 80112fa:	b91d      	cbnz	r5, 8011304 <_strtod_l+0x18c>
 80112fc:	9b04      	ldr	r3, [sp, #16]
 80112fe:	4303      	orrs	r3, r0
 8011300:	d098      	beq.n	8011234 <_strtod_l+0xbc>
 8011302:	2500      	movs	r5, #0
 8011304:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8011308:	f108 0301 	add.w	r3, r8, #1
 801130c:	931d      	str	r3, [sp, #116]	; 0x74
 801130e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011312:	2b2b      	cmp	r3, #43	; 0x2b
 8011314:	d075      	beq.n	8011402 <_strtod_l+0x28a>
 8011316:	2b2d      	cmp	r3, #45	; 0x2d
 8011318:	d07b      	beq.n	8011412 <_strtod_l+0x29a>
 801131a:	f04f 0c00 	mov.w	ip, #0
 801131e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011322:	2909      	cmp	r1, #9
 8011324:	f240 8082 	bls.w	801142c <_strtod_l+0x2b4>
 8011328:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801132c:	2600      	movs	r6, #0
 801132e:	e09d      	b.n	801146c <_strtod_l+0x2f4>
 8011330:	2300      	movs	r3, #0
 8011332:	e7c4      	b.n	80112be <_strtod_l+0x146>
 8011334:	2f08      	cmp	r7, #8
 8011336:	bfd8      	it	le
 8011338:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801133a:	f100 0001 	add.w	r0, r0, #1
 801133e:	bfda      	itte	le
 8011340:	fb02 3301 	mlale	r3, r2, r1, r3
 8011344:	9309      	strle	r3, [sp, #36]	; 0x24
 8011346:	fb02 3909 	mlagt	r9, r2, r9, r3
 801134a:	3701      	adds	r7, #1
 801134c:	901d      	str	r0, [sp, #116]	; 0x74
 801134e:	e7bf      	b.n	80112d0 <_strtod_l+0x158>
 8011350:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011352:	195a      	adds	r2, r3, r5
 8011354:	921d      	str	r2, [sp, #116]	; 0x74
 8011356:	5d5b      	ldrb	r3, [r3, r5]
 8011358:	2f00      	cmp	r7, #0
 801135a:	d037      	beq.n	80113cc <_strtod_l+0x254>
 801135c:	9007      	str	r0, [sp, #28]
 801135e:	463d      	mov	r5, r7
 8011360:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011364:	2a09      	cmp	r2, #9
 8011366:	d912      	bls.n	801138e <_strtod_l+0x216>
 8011368:	2201      	movs	r2, #1
 801136a:	e7c2      	b.n	80112f2 <_strtod_l+0x17a>
 801136c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801136e:	1c5a      	adds	r2, r3, #1
 8011370:	921d      	str	r2, [sp, #116]	; 0x74
 8011372:	785b      	ldrb	r3, [r3, #1]
 8011374:	3001      	adds	r0, #1
 8011376:	2b30      	cmp	r3, #48	; 0x30
 8011378:	d0f8      	beq.n	801136c <_strtod_l+0x1f4>
 801137a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801137e:	2a08      	cmp	r2, #8
 8011380:	f200 84db 	bhi.w	8011d3a <_strtod_l+0xbc2>
 8011384:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011386:	9007      	str	r0, [sp, #28]
 8011388:	2000      	movs	r0, #0
 801138a:	920a      	str	r2, [sp, #40]	; 0x28
 801138c:	4605      	mov	r5, r0
 801138e:	3b30      	subs	r3, #48	; 0x30
 8011390:	f100 0201 	add.w	r2, r0, #1
 8011394:	d014      	beq.n	80113c0 <_strtod_l+0x248>
 8011396:	9907      	ldr	r1, [sp, #28]
 8011398:	4411      	add	r1, r2
 801139a:	9107      	str	r1, [sp, #28]
 801139c:	462a      	mov	r2, r5
 801139e:	eb00 0e05 	add.w	lr, r0, r5
 80113a2:	210a      	movs	r1, #10
 80113a4:	4572      	cmp	r2, lr
 80113a6:	d113      	bne.n	80113d0 <_strtod_l+0x258>
 80113a8:	182a      	adds	r2, r5, r0
 80113aa:	2a08      	cmp	r2, #8
 80113ac:	f105 0501 	add.w	r5, r5, #1
 80113b0:	4405      	add	r5, r0
 80113b2:	dc1c      	bgt.n	80113ee <_strtod_l+0x276>
 80113b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113b6:	220a      	movs	r2, #10
 80113b8:	fb02 3301 	mla	r3, r2, r1, r3
 80113bc:	9309      	str	r3, [sp, #36]	; 0x24
 80113be:	2200      	movs	r2, #0
 80113c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80113c2:	1c59      	adds	r1, r3, #1
 80113c4:	911d      	str	r1, [sp, #116]	; 0x74
 80113c6:	785b      	ldrb	r3, [r3, #1]
 80113c8:	4610      	mov	r0, r2
 80113ca:	e7c9      	b.n	8011360 <_strtod_l+0x1e8>
 80113cc:	4638      	mov	r0, r7
 80113ce:	e7d2      	b.n	8011376 <_strtod_l+0x1fe>
 80113d0:	2a08      	cmp	r2, #8
 80113d2:	dc04      	bgt.n	80113de <_strtod_l+0x266>
 80113d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80113d6:	434e      	muls	r6, r1
 80113d8:	9609      	str	r6, [sp, #36]	; 0x24
 80113da:	3201      	adds	r2, #1
 80113dc:	e7e2      	b.n	80113a4 <_strtod_l+0x22c>
 80113de:	f102 0c01 	add.w	ip, r2, #1
 80113e2:	f1bc 0f10 	cmp.w	ip, #16
 80113e6:	bfd8      	it	le
 80113e8:	fb01 f909 	mulle.w	r9, r1, r9
 80113ec:	e7f5      	b.n	80113da <_strtod_l+0x262>
 80113ee:	2d10      	cmp	r5, #16
 80113f0:	bfdc      	itt	le
 80113f2:	220a      	movle	r2, #10
 80113f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80113f8:	e7e1      	b.n	80113be <_strtod_l+0x246>
 80113fa:	2300      	movs	r3, #0
 80113fc:	9307      	str	r3, [sp, #28]
 80113fe:	2201      	movs	r2, #1
 8011400:	e77c      	b.n	80112fc <_strtod_l+0x184>
 8011402:	f04f 0c00 	mov.w	ip, #0
 8011406:	f108 0302 	add.w	r3, r8, #2
 801140a:	931d      	str	r3, [sp, #116]	; 0x74
 801140c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011410:	e785      	b.n	801131e <_strtod_l+0x1a6>
 8011412:	f04f 0c01 	mov.w	ip, #1
 8011416:	e7f6      	b.n	8011406 <_strtod_l+0x28e>
 8011418:	08028ac4 	.word	0x08028ac4
 801141c:	080287d4 	.word	0x080287d4
 8011420:	7ff00000 	.word	0x7ff00000
 8011424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011426:	1c59      	adds	r1, r3, #1
 8011428:	911d      	str	r1, [sp, #116]	; 0x74
 801142a:	785b      	ldrb	r3, [r3, #1]
 801142c:	2b30      	cmp	r3, #48	; 0x30
 801142e:	d0f9      	beq.n	8011424 <_strtod_l+0x2ac>
 8011430:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8011434:	2908      	cmp	r1, #8
 8011436:	f63f af79 	bhi.w	801132c <_strtod_l+0x1b4>
 801143a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801143e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011440:	9308      	str	r3, [sp, #32]
 8011442:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011444:	1c59      	adds	r1, r3, #1
 8011446:	911d      	str	r1, [sp, #116]	; 0x74
 8011448:	785b      	ldrb	r3, [r3, #1]
 801144a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801144e:	2e09      	cmp	r6, #9
 8011450:	d937      	bls.n	80114c2 <_strtod_l+0x34a>
 8011452:	9e08      	ldr	r6, [sp, #32]
 8011454:	1b89      	subs	r1, r1, r6
 8011456:	2908      	cmp	r1, #8
 8011458:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801145c:	dc02      	bgt.n	8011464 <_strtod_l+0x2ec>
 801145e:	4576      	cmp	r6, lr
 8011460:	bfa8      	it	ge
 8011462:	4676      	movge	r6, lr
 8011464:	f1bc 0f00 	cmp.w	ip, #0
 8011468:	d000      	beq.n	801146c <_strtod_l+0x2f4>
 801146a:	4276      	negs	r6, r6
 801146c:	2d00      	cmp	r5, #0
 801146e:	d14f      	bne.n	8011510 <_strtod_l+0x398>
 8011470:	9904      	ldr	r1, [sp, #16]
 8011472:	4301      	orrs	r1, r0
 8011474:	f47f aec2 	bne.w	80111fc <_strtod_l+0x84>
 8011478:	2a00      	cmp	r2, #0
 801147a:	f47f aedb 	bne.w	8011234 <_strtod_l+0xbc>
 801147e:	2b69      	cmp	r3, #105	; 0x69
 8011480:	d027      	beq.n	80114d2 <_strtod_l+0x35a>
 8011482:	dc24      	bgt.n	80114ce <_strtod_l+0x356>
 8011484:	2b49      	cmp	r3, #73	; 0x49
 8011486:	d024      	beq.n	80114d2 <_strtod_l+0x35a>
 8011488:	2b4e      	cmp	r3, #78	; 0x4e
 801148a:	f47f aed3 	bne.w	8011234 <_strtod_l+0xbc>
 801148e:	499e      	ldr	r1, [pc, #632]	; (8011708 <_strtod_l+0x590>)
 8011490:	a81d      	add	r0, sp, #116	; 0x74
 8011492:	f001 fee3 	bl	801325c <__match>
 8011496:	2800      	cmp	r0, #0
 8011498:	f43f aecc 	beq.w	8011234 <_strtod_l+0xbc>
 801149c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	2b28      	cmp	r3, #40	; 0x28
 80114a2:	d12d      	bne.n	8011500 <_strtod_l+0x388>
 80114a4:	4999      	ldr	r1, [pc, #612]	; (801170c <_strtod_l+0x594>)
 80114a6:	aa20      	add	r2, sp, #128	; 0x80
 80114a8:	a81d      	add	r0, sp, #116	; 0x74
 80114aa:	f001 feeb 	bl	8013284 <__hexnan>
 80114ae:	2805      	cmp	r0, #5
 80114b0:	d126      	bne.n	8011500 <_strtod_l+0x388>
 80114b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80114b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80114bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80114c0:	e69c      	b.n	80111fc <_strtod_l+0x84>
 80114c2:	210a      	movs	r1, #10
 80114c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80114c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80114cc:	e7b9      	b.n	8011442 <_strtod_l+0x2ca>
 80114ce:	2b6e      	cmp	r3, #110	; 0x6e
 80114d0:	e7db      	b.n	801148a <_strtod_l+0x312>
 80114d2:	498f      	ldr	r1, [pc, #572]	; (8011710 <_strtod_l+0x598>)
 80114d4:	a81d      	add	r0, sp, #116	; 0x74
 80114d6:	f001 fec1 	bl	801325c <__match>
 80114da:	2800      	cmp	r0, #0
 80114dc:	f43f aeaa 	beq.w	8011234 <_strtod_l+0xbc>
 80114e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114e2:	498c      	ldr	r1, [pc, #560]	; (8011714 <_strtod_l+0x59c>)
 80114e4:	3b01      	subs	r3, #1
 80114e6:	a81d      	add	r0, sp, #116	; 0x74
 80114e8:	931d      	str	r3, [sp, #116]	; 0x74
 80114ea:	f001 feb7 	bl	801325c <__match>
 80114ee:	b910      	cbnz	r0, 80114f6 <_strtod_l+0x37e>
 80114f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80114f2:	3301      	adds	r3, #1
 80114f4:	931d      	str	r3, [sp, #116]	; 0x74
 80114f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011724 <_strtod_l+0x5ac>
 80114fa:	f04f 0a00 	mov.w	sl, #0
 80114fe:	e67d      	b.n	80111fc <_strtod_l+0x84>
 8011500:	4885      	ldr	r0, [pc, #532]	; (8011718 <_strtod_l+0x5a0>)
 8011502:	f002 ffb1 	bl	8014468 <nan>
 8011506:	ed8d 0b04 	vstr	d0, [sp, #16]
 801150a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801150e:	e675      	b.n	80111fc <_strtod_l+0x84>
 8011510:	9b07      	ldr	r3, [sp, #28]
 8011512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011514:	1af3      	subs	r3, r6, r3
 8011516:	2f00      	cmp	r7, #0
 8011518:	bf08      	it	eq
 801151a:	462f      	moveq	r7, r5
 801151c:	2d10      	cmp	r5, #16
 801151e:	9308      	str	r3, [sp, #32]
 8011520:	46a8      	mov	r8, r5
 8011522:	bfa8      	it	ge
 8011524:	f04f 0810 	movge.w	r8, #16
 8011528:	f7ef f804 	bl	8000534 <__aeabi_ui2d>
 801152c:	2d09      	cmp	r5, #9
 801152e:	4682      	mov	sl, r0
 8011530:	468b      	mov	fp, r1
 8011532:	dd13      	ble.n	801155c <_strtod_l+0x3e4>
 8011534:	4b79      	ldr	r3, [pc, #484]	; (801171c <_strtod_l+0x5a4>)
 8011536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801153a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801153e:	f7ef f873 	bl	8000628 <__aeabi_dmul>
 8011542:	4682      	mov	sl, r0
 8011544:	4648      	mov	r0, r9
 8011546:	468b      	mov	fp, r1
 8011548:	f7ee fff4 	bl	8000534 <__aeabi_ui2d>
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4650      	mov	r0, sl
 8011552:	4659      	mov	r1, fp
 8011554:	f7ee feb2 	bl	80002bc <__adddf3>
 8011558:	4682      	mov	sl, r0
 801155a:	468b      	mov	fp, r1
 801155c:	2d0f      	cmp	r5, #15
 801155e:	dc38      	bgt.n	80115d2 <_strtod_l+0x45a>
 8011560:	9b08      	ldr	r3, [sp, #32]
 8011562:	2b00      	cmp	r3, #0
 8011564:	f43f ae4a 	beq.w	80111fc <_strtod_l+0x84>
 8011568:	dd24      	ble.n	80115b4 <_strtod_l+0x43c>
 801156a:	2b16      	cmp	r3, #22
 801156c:	dc0b      	bgt.n	8011586 <_strtod_l+0x40e>
 801156e:	4d6b      	ldr	r5, [pc, #428]	; (801171c <_strtod_l+0x5a4>)
 8011570:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011574:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011578:	4652      	mov	r2, sl
 801157a:	465b      	mov	r3, fp
 801157c:	f7ef f854 	bl	8000628 <__aeabi_dmul>
 8011580:	4682      	mov	sl, r0
 8011582:	468b      	mov	fp, r1
 8011584:	e63a      	b.n	80111fc <_strtod_l+0x84>
 8011586:	9a08      	ldr	r2, [sp, #32]
 8011588:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801158c:	4293      	cmp	r3, r2
 801158e:	db20      	blt.n	80115d2 <_strtod_l+0x45a>
 8011590:	4c62      	ldr	r4, [pc, #392]	; (801171c <_strtod_l+0x5a4>)
 8011592:	f1c5 050f 	rsb	r5, r5, #15
 8011596:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801159a:	4652      	mov	r2, sl
 801159c:	465b      	mov	r3, fp
 801159e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115a2:	f7ef f841 	bl	8000628 <__aeabi_dmul>
 80115a6:	9b08      	ldr	r3, [sp, #32]
 80115a8:	1b5d      	subs	r5, r3, r5
 80115aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80115ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80115b2:	e7e3      	b.n	801157c <_strtod_l+0x404>
 80115b4:	9b08      	ldr	r3, [sp, #32]
 80115b6:	3316      	adds	r3, #22
 80115b8:	db0b      	blt.n	80115d2 <_strtod_l+0x45a>
 80115ba:	9b07      	ldr	r3, [sp, #28]
 80115bc:	4a57      	ldr	r2, [pc, #348]	; (801171c <_strtod_l+0x5a4>)
 80115be:	1b9e      	subs	r6, r3, r6
 80115c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80115c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80115c8:	4650      	mov	r0, sl
 80115ca:	4659      	mov	r1, fp
 80115cc:	f7ef f956 	bl	800087c <__aeabi_ddiv>
 80115d0:	e7d6      	b.n	8011580 <_strtod_l+0x408>
 80115d2:	9b08      	ldr	r3, [sp, #32]
 80115d4:	eba5 0808 	sub.w	r8, r5, r8
 80115d8:	4498      	add	r8, r3
 80115da:	f1b8 0f00 	cmp.w	r8, #0
 80115de:	dd71      	ble.n	80116c4 <_strtod_l+0x54c>
 80115e0:	f018 030f 	ands.w	r3, r8, #15
 80115e4:	d00a      	beq.n	80115fc <_strtod_l+0x484>
 80115e6:	494d      	ldr	r1, [pc, #308]	; (801171c <_strtod_l+0x5a4>)
 80115e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80115ec:	4652      	mov	r2, sl
 80115ee:	465b      	mov	r3, fp
 80115f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115f4:	f7ef f818 	bl	8000628 <__aeabi_dmul>
 80115f8:	4682      	mov	sl, r0
 80115fa:	468b      	mov	fp, r1
 80115fc:	f038 080f 	bics.w	r8, r8, #15
 8011600:	d04d      	beq.n	801169e <_strtod_l+0x526>
 8011602:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011606:	dd22      	ble.n	801164e <_strtod_l+0x4d6>
 8011608:	2500      	movs	r5, #0
 801160a:	462e      	mov	r6, r5
 801160c:	9509      	str	r5, [sp, #36]	; 0x24
 801160e:	9507      	str	r5, [sp, #28]
 8011610:	2322      	movs	r3, #34	; 0x22
 8011612:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011724 <_strtod_l+0x5ac>
 8011616:	6023      	str	r3, [r4, #0]
 8011618:	f04f 0a00 	mov.w	sl, #0
 801161c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801161e:	2b00      	cmp	r3, #0
 8011620:	f43f adec 	beq.w	80111fc <_strtod_l+0x84>
 8011624:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011626:	4620      	mov	r0, r4
 8011628:	f001 ff34 	bl	8013494 <_Bfree>
 801162c:	9907      	ldr	r1, [sp, #28]
 801162e:	4620      	mov	r0, r4
 8011630:	f001 ff30 	bl	8013494 <_Bfree>
 8011634:	4631      	mov	r1, r6
 8011636:	4620      	mov	r0, r4
 8011638:	f001 ff2c 	bl	8013494 <_Bfree>
 801163c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801163e:	4620      	mov	r0, r4
 8011640:	f001 ff28 	bl	8013494 <_Bfree>
 8011644:	4629      	mov	r1, r5
 8011646:	4620      	mov	r0, r4
 8011648:	f001 ff24 	bl	8013494 <_Bfree>
 801164c:	e5d6      	b.n	80111fc <_strtod_l+0x84>
 801164e:	2300      	movs	r3, #0
 8011650:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011654:	4650      	mov	r0, sl
 8011656:	4659      	mov	r1, fp
 8011658:	4699      	mov	r9, r3
 801165a:	f1b8 0f01 	cmp.w	r8, #1
 801165e:	dc21      	bgt.n	80116a4 <_strtod_l+0x52c>
 8011660:	b10b      	cbz	r3, 8011666 <_strtod_l+0x4ee>
 8011662:	4682      	mov	sl, r0
 8011664:	468b      	mov	fp, r1
 8011666:	4b2e      	ldr	r3, [pc, #184]	; (8011720 <_strtod_l+0x5a8>)
 8011668:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801166c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011670:	4652      	mov	r2, sl
 8011672:	465b      	mov	r3, fp
 8011674:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011678:	f7ee ffd6 	bl	8000628 <__aeabi_dmul>
 801167c:	4b29      	ldr	r3, [pc, #164]	; (8011724 <_strtod_l+0x5ac>)
 801167e:	460a      	mov	r2, r1
 8011680:	400b      	ands	r3, r1
 8011682:	4929      	ldr	r1, [pc, #164]	; (8011728 <_strtod_l+0x5b0>)
 8011684:	428b      	cmp	r3, r1
 8011686:	4682      	mov	sl, r0
 8011688:	d8be      	bhi.n	8011608 <_strtod_l+0x490>
 801168a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801168e:	428b      	cmp	r3, r1
 8011690:	bf86      	itte	hi
 8011692:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801172c <_strtod_l+0x5b4>
 8011696:	f04f 3aff 	movhi.w	sl, #4294967295
 801169a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801169e:	2300      	movs	r3, #0
 80116a0:	9304      	str	r3, [sp, #16]
 80116a2:	e081      	b.n	80117a8 <_strtod_l+0x630>
 80116a4:	f018 0f01 	tst.w	r8, #1
 80116a8:	d007      	beq.n	80116ba <_strtod_l+0x542>
 80116aa:	4b1d      	ldr	r3, [pc, #116]	; (8011720 <_strtod_l+0x5a8>)
 80116ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	f7ee ffb8 	bl	8000628 <__aeabi_dmul>
 80116b8:	2301      	movs	r3, #1
 80116ba:	f109 0901 	add.w	r9, r9, #1
 80116be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80116c2:	e7ca      	b.n	801165a <_strtod_l+0x4e2>
 80116c4:	d0eb      	beq.n	801169e <_strtod_l+0x526>
 80116c6:	f1c8 0800 	rsb	r8, r8, #0
 80116ca:	f018 020f 	ands.w	r2, r8, #15
 80116ce:	d00a      	beq.n	80116e6 <_strtod_l+0x56e>
 80116d0:	4b12      	ldr	r3, [pc, #72]	; (801171c <_strtod_l+0x5a4>)
 80116d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116d6:	4650      	mov	r0, sl
 80116d8:	4659      	mov	r1, fp
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	f7ef f8cd 	bl	800087c <__aeabi_ddiv>
 80116e2:	4682      	mov	sl, r0
 80116e4:	468b      	mov	fp, r1
 80116e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80116ea:	d0d8      	beq.n	801169e <_strtod_l+0x526>
 80116ec:	f1b8 0f1f 	cmp.w	r8, #31
 80116f0:	dd1e      	ble.n	8011730 <_strtod_l+0x5b8>
 80116f2:	2500      	movs	r5, #0
 80116f4:	462e      	mov	r6, r5
 80116f6:	9509      	str	r5, [sp, #36]	; 0x24
 80116f8:	9507      	str	r5, [sp, #28]
 80116fa:	2322      	movs	r3, #34	; 0x22
 80116fc:	f04f 0a00 	mov.w	sl, #0
 8011700:	f04f 0b00 	mov.w	fp, #0
 8011704:	6023      	str	r3, [r4, #0]
 8011706:	e789      	b.n	801161c <_strtod_l+0x4a4>
 8011708:	080287a5 	.word	0x080287a5
 801170c:	080287e8 	.word	0x080287e8
 8011710:	0802879d 	.word	0x0802879d
 8011714:	080289e0 	.word	0x080289e0
 8011718:	080288db 	.word	0x080288db
 801171c:	08028b60 	.word	0x08028b60
 8011720:	08028b38 	.word	0x08028b38
 8011724:	7ff00000 	.word	0x7ff00000
 8011728:	7ca00000 	.word	0x7ca00000
 801172c:	7fefffff 	.word	0x7fefffff
 8011730:	f018 0310 	ands.w	r3, r8, #16
 8011734:	bf18      	it	ne
 8011736:	236a      	movne	r3, #106	; 0x6a
 8011738:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011af0 <_strtod_l+0x978>
 801173c:	9304      	str	r3, [sp, #16]
 801173e:	4650      	mov	r0, sl
 8011740:	4659      	mov	r1, fp
 8011742:	2300      	movs	r3, #0
 8011744:	f018 0f01 	tst.w	r8, #1
 8011748:	d004      	beq.n	8011754 <_strtod_l+0x5dc>
 801174a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801174e:	f7ee ff6b 	bl	8000628 <__aeabi_dmul>
 8011752:	2301      	movs	r3, #1
 8011754:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011758:	f109 0908 	add.w	r9, r9, #8
 801175c:	d1f2      	bne.n	8011744 <_strtod_l+0x5cc>
 801175e:	b10b      	cbz	r3, 8011764 <_strtod_l+0x5ec>
 8011760:	4682      	mov	sl, r0
 8011762:	468b      	mov	fp, r1
 8011764:	9b04      	ldr	r3, [sp, #16]
 8011766:	b1bb      	cbz	r3, 8011798 <_strtod_l+0x620>
 8011768:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801176c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011770:	2b00      	cmp	r3, #0
 8011772:	4659      	mov	r1, fp
 8011774:	dd10      	ble.n	8011798 <_strtod_l+0x620>
 8011776:	2b1f      	cmp	r3, #31
 8011778:	f340 8128 	ble.w	80119cc <_strtod_l+0x854>
 801177c:	2b34      	cmp	r3, #52	; 0x34
 801177e:	bfde      	ittt	le
 8011780:	3b20      	suble	r3, #32
 8011782:	f04f 32ff 	movle.w	r2, #4294967295
 8011786:	fa02 f303 	lslle.w	r3, r2, r3
 801178a:	f04f 0a00 	mov.w	sl, #0
 801178e:	bfcc      	ite	gt
 8011790:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011794:	ea03 0b01 	andle.w	fp, r3, r1
 8011798:	2200      	movs	r2, #0
 801179a:	2300      	movs	r3, #0
 801179c:	4650      	mov	r0, sl
 801179e:	4659      	mov	r1, fp
 80117a0:	f7ef f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d1a4      	bne.n	80116f2 <_strtod_l+0x57a>
 80117a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117aa:	9300      	str	r3, [sp, #0]
 80117ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117ae:	462b      	mov	r3, r5
 80117b0:	463a      	mov	r2, r7
 80117b2:	4620      	mov	r0, r4
 80117b4:	f001 feda 	bl	801356c <__s2b>
 80117b8:	9009      	str	r0, [sp, #36]	; 0x24
 80117ba:	2800      	cmp	r0, #0
 80117bc:	f43f af24 	beq.w	8011608 <_strtod_l+0x490>
 80117c0:	9b07      	ldr	r3, [sp, #28]
 80117c2:	1b9e      	subs	r6, r3, r6
 80117c4:	9b08      	ldr	r3, [sp, #32]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	bfb4      	ite	lt
 80117ca:	4633      	movlt	r3, r6
 80117cc:	2300      	movge	r3, #0
 80117ce:	9310      	str	r3, [sp, #64]	; 0x40
 80117d0:	9b08      	ldr	r3, [sp, #32]
 80117d2:	2500      	movs	r5, #0
 80117d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80117d8:	9318      	str	r3, [sp, #96]	; 0x60
 80117da:	462e      	mov	r6, r5
 80117dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117de:	4620      	mov	r0, r4
 80117e0:	6859      	ldr	r1, [r3, #4]
 80117e2:	f001 fe17 	bl	8013414 <_Balloc>
 80117e6:	9007      	str	r0, [sp, #28]
 80117e8:	2800      	cmp	r0, #0
 80117ea:	f43f af11 	beq.w	8011610 <_strtod_l+0x498>
 80117ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f0:	691a      	ldr	r2, [r3, #16]
 80117f2:	3202      	adds	r2, #2
 80117f4:	f103 010c 	add.w	r1, r3, #12
 80117f8:	0092      	lsls	r2, r2, #2
 80117fa:	300c      	adds	r0, #12
 80117fc:	f001 fdfc 	bl	80133f8 <memcpy>
 8011800:	ec4b ab10 	vmov	d0, sl, fp
 8011804:	aa20      	add	r2, sp, #128	; 0x80
 8011806:	a91f      	add	r1, sp, #124	; 0x7c
 8011808:	4620      	mov	r0, r4
 801180a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801180e:	f002 f9e9 	bl	8013be4 <__d2b>
 8011812:	901e      	str	r0, [sp, #120]	; 0x78
 8011814:	2800      	cmp	r0, #0
 8011816:	f43f aefb 	beq.w	8011610 <_strtod_l+0x498>
 801181a:	2101      	movs	r1, #1
 801181c:	4620      	mov	r0, r4
 801181e:	f001 ff3f 	bl	80136a0 <__i2b>
 8011822:	4606      	mov	r6, r0
 8011824:	2800      	cmp	r0, #0
 8011826:	f43f aef3 	beq.w	8011610 <_strtod_l+0x498>
 801182a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801182c:	9904      	ldr	r1, [sp, #16]
 801182e:	2b00      	cmp	r3, #0
 8011830:	bfab      	itete	ge
 8011832:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011834:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011836:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011838:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801183c:	bfac      	ite	ge
 801183e:	eb03 0902 	addge.w	r9, r3, r2
 8011842:	1ad7      	sublt	r7, r2, r3
 8011844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011846:	eba3 0801 	sub.w	r8, r3, r1
 801184a:	4490      	add	r8, r2
 801184c:	4ba3      	ldr	r3, [pc, #652]	; (8011adc <_strtod_l+0x964>)
 801184e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011852:	4598      	cmp	r8, r3
 8011854:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011858:	f280 80cc 	bge.w	80119f4 <_strtod_l+0x87c>
 801185c:	eba3 0308 	sub.w	r3, r3, r8
 8011860:	2b1f      	cmp	r3, #31
 8011862:	eba2 0203 	sub.w	r2, r2, r3
 8011866:	f04f 0101 	mov.w	r1, #1
 801186a:	f300 80b6 	bgt.w	80119da <_strtod_l+0x862>
 801186e:	fa01 f303 	lsl.w	r3, r1, r3
 8011872:	9311      	str	r3, [sp, #68]	; 0x44
 8011874:	2300      	movs	r3, #0
 8011876:	930c      	str	r3, [sp, #48]	; 0x30
 8011878:	eb09 0802 	add.w	r8, r9, r2
 801187c:	9b04      	ldr	r3, [sp, #16]
 801187e:	45c1      	cmp	r9, r8
 8011880:	4417      	add	r7, r2
 8011882:	441f      	add	r7, r3
 8011884:	464b      	mov	r3, r9
 8011886:	bfa8      	it	ge
 8011888:	4643      	movge	r3, r8
 801188a:	42bb      	cmp	r3, r7
 801188c:	bfa8      	it	ge
 801188e:	463b      	movge	r3, r7
 8011890:	2b00      	cmp	r3, #0
 8011892:	bfc2      	ittt	gt
 8011894:	eba8 0803 	subgt.w	r8, r8, r3
 8011898:	1aff      	subgt	r7, r7, r3
 801189a:	eba9 0903 	subgt.w	r9, r9, r3
 801189e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	dd17      	ble.n	80118d4 <_strtod_l+0x75c>
 80118a4:	4631      	mov	r1, r6
 80118a6:	461a      	mov	r2, r3
 80118a8:	4620      	mov	r0, r4
 80118aa:	f001 ffb5 	bl	8013818 <__pow5mult>
 80118ae:	4606      	mov	r6, r0
 80118b0:	2800      	cmp	r0, #0
 80118b2:	f43f aead 	beq.w	8011610 <_strtod_l+0x498>
 80118b6:	4601      	mov	r1, r0
 80118b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80118ba:	4620      	mov	r0, r4
 80118bc:	f001 ff06 	bl	80136cc <__multiply>
 80118c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80118c2:	2800      	cmp	r0, #0
 80118c4:	f43f aea4 	beq.w	8011610 <_strtod_l+0x498>
 80118c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118ca:	4620      	mov	r0, r4
 80118cc:	f001 fde2 	bl	8013494 <_Bfree>
 80118d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118d2:	931e      	str	r3, [sp, #120]	; 0x78
 80118d4:	f1b8 0f00 	cmp.w	r8, #0
 80118d8:	f300 8091 	bgt.w	80119fe <_strtod_l+0x886>
 80118dc:	9b08      	ldr	r3, [sp, #32]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	dd08      	ble.n	80118f4 <_strtod_l+0x77c>
 80118e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80118e4:	9907      	ldr	r1, [sp, #28]
 80118e6:	4620      	mov	r0, r4
 80118e8:	f001 ff96 	bl	8013818 <__pow5mult>
 80118ec:	9007      	str	r0, [sp, #28]
 80118ee:	2800      	cmp	r0, #0
 80118f0:	f43f ae8e 	beq.w	8011610 <_strtod_l+0x498>
 80118f4:	2f00      	cmp	r7, #0
 80118f6:	dd08      	ble.n	801190a <_strtod_l+0x792>
 80118f8:	9907      	ldr	r1, [sp, #28]
 80118fa:	463a      	mov	r2, r7
 80118fc:	4620      	mov	r0, r4
 80118fe:	f001 ffe5 	bl	80138cc <__lshift>
 8011902:	9007      	str	r0, [sp, #28]
 8011904:	2800      	cmp	r0, #0
 8011906:	f43f ae83 	beq.w	8011610 <_strtod_l+0x498>
 801190a:	f1b9 0f00 	cmp.w	r9, #0
 801190e:	dd08      	ble.n	8011922 <_strtod_l+0x7aa>
 8011910:	4631      	mov	r1, r6
 8011912:	464a      	mov	r2, r9
 8011914:	4620      	mov	r0, r4
 8011916:	f001 ffd9 	bl	80138cc <__lshift>
 801191a:	4606      	mov	r6, r0
 801191c:	2800      	cmp	r0, #0
 801191e:	f43f ae77 	beq.w	8011610 <_strtod_l+0x498>
 8011922:	9a07      	ldr	r2, [sp, #28]
 8011924:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011926:	4620      	mov	r0, r4
 8011928:	f002 f858 	bl	80139dc <__mdiff>
 801192c:	4605      	mov	r5, r0
 801192e:	2800      	cmp	r0, #0
 8011930:	f43f ae6e 	beq.w	8011610 <_strtod_l+0x498>
 8011934:	68c3      	ldr	r3, [r0, #12]
 8011936:	930f      	str	r3, [sp, #60]	; 0x3c
 8011938:	2300      	movs	r3, #0
 801193a:	60c3      	str	r3, [r0, #12]
 801193c:	4631      	mov	r1, r6
 801193e:	f002 f831 	bl	80139a4 <__mcmp>
 8011942:	2800      	cmp	r0, #0
 8011944:	da65      	bge.n	8011a12 <_strtod_l+0x89a>
 8011946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011948:	ea53 030a 	orrs.w	r3, r3, sl
 801194c:	f040 8087 	bne.w	8011a5e <_strtod_l+0x8e6>
 8011950:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011954:	2b00      	cmp	r3, #0
 8011956:	f040 8082 	bne.w	8011a5e <_strtod_l+0x8e6>
 801195a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801195e:	0d1b      	lsrs	r3, r3, #20
 8011960:	051b      	lsls	r3, r3, #20
 8011962:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011966:	d97a      	bls.n	8011a5e <_strtod_l+0x8e6>
 8011968:	696b      	ldr	r3, [r5, #20]
 801196a:	b913      	cbnz	r3, 8011972 <_strtod_l+0x7fa>
 801196c:	692b      	ldr	r3, [r5, #16]
 801196e:	2b01      	cmp	r3, #1
 8011970:	dd75      	ble.n	8011a5e <_strtod_l+0x8e6>
 8011972:	4629      	mov	r1, r5
 8011974:	2201      	movs	r2, #1
 8011976:	4620      	mov	r0, r4
 8011978:	f001 ffa8 	bl	80138cc <__lshift>
 801197c:	4631      	mov	r1, r6
 801197e:	4605      	mov	r5, r0
 8011980:	f002 f810 	bl	80139a4 <__mcmp>
 8011984:	2800      	cmp	r0, #0
 8011986:	dd6a      	ble.n	8011a5e <_strtod_l+0x8e6>
 8011988:	9904      	ldr	r1, [sp, #16]
 801198a:	4a55      	ldr	r2, [pc, #340]	; (8011ae0 <_strtod_l+0x968>)
 801198c:	465b      	mov	r3, fp
 801198e:	2900      	cmp	r1, #0
 8011990:	f000 8085 	beq.w	8011a9e <_strtod_l+0x926>
 8011994:	ea02 010b 	and.w	r1, r2, fp
 8011998:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801199c:	dc7f      	bgt.n	8011a9e <_strtod_l+0x926>
 801199e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80119a2:	f77f aeaa 	ble.w	80116fa <_strtod_l+0x582>
 80119a6:	4a4f      	ldr	r2, [pc, #316]	; (8011ae4 <_strtod_l+0x96c>)
 80119a8:	2300      	movs	r3, #0
 80119aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80119ae:	4650      	mov	r0, sl
 80119b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80119b4:	4659      	mov	r1, fp
 80119b6:	f7ee fe37 	bl	8000628 <__aeabi_dmul>
 80119ba:	460b      	mov	r3, r1
 80119bc:	4303      	orrs	r3, r0
 80119be:	bf08      	it	eq
 80119c0:	2322      	moveq	r3, #34	; 0x22
 80119c2:	4682      	mov	sl, r0
 80119c4:	468b      	mov	fp, r1
 80119c6:	bf08      	it	eq
 80119c8:	6023      	streq	r3, [r4, #0]
 80119ca:	e62b      	b.n	8011624 <_strtod_l+0x4ac>
 80119cc:	f04f 32ff 	mov.w	r2, #4294967295
 80119d0:	fa02 f303 	lsl.w	r3, r2, r3
 80119d4:	ea03 0a0a 	and.w	sl, r3, sl
 80119d8:	e6de      	b.n	8011798 <_strtod_l+0x620>
 80119da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80119de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80119e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80119e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80119ea:	fa01 f308 	lsl.w	r3, r1, r8
 80119ee:	930c      	str	r3, [sp, #48]	; 0x30
 80119f0:	9111      	str	r1, [sp, #68]	; 0x44
 80119f2:	e741      	b.n	8011878 <_strtod_l+0x700>
 80119f4:	2300      	movs	r3, #0
 80119f6:	930c      	str	r3, [sp, #48]	; 0x30
 80119f8:	2301      	movs	r3, #1
 80119fa:	9311      	str	r3, [sp, #68]	; 0x44
 80119fc:	e73c      	b.n	8011878 <_strtod_l+0x700>
 80119fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011a00:	4642      	mov	r2, r8
 8011a02:	4620      	mov	r0, r4
 8011a04:	f001 ff62 	bl	80138cc <__lshift>
 8011a08:	901e      	str	r0, [sp, #120]	; 0x78
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	f47f af66 	bne.w	80118dc <_strtod_l+0x764>
 8011a10:	e5fe      	b.n	8011610 <_strtod_l+0x498>
 8011a12:	465f      	mov	r7, fp
 8011a14:	d16e      	bne.n	8011af4 <_strtod_l+0x97c>
 8011a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011a1c:	b342      	cbz	r2, 8011a70 <_strtod_l+0x8f8>
 8011a1e:	4a32      	ldr	r2, [pc, #200]	; (8011ae8 <_strtod_l+0x970>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d128      	bne.n	8011a76 <_strtod_l+0x8fe>
 8011a24:	9b04      	ldr	r3, [sp, #16]
 8011a26:	4650      	mov	r0, sl
 8011a28:	b1eb      	cbz	r3, 8011a66 <_strtod_l+0x8ee>
 8011a2a:	4a2d      	ldr	r2, [pc, #180]	; (8011ae0 <_strtod_l+0x968>)
 8011a2c:	403a      	ands	r2, r7
 8011a2e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011a32:	f04f 31ff 	mov.w	r1, #4294967295
 8011a36:	d819      	bhi.n	8011a6c <_strtod_l+0x8f4>
 8011a38:	0d12      	lsrs	r2, r2, #20
 8011a3a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8011a42:	4298      	cmp	r0, r3
 8011a44:	d117      	bne.n	8011a76 <_strtod_l+0x8fe>
 8011a46:	4b29      	ldr	r3, [pc, #164]	; (8011aec <_strtod_l+0x974>)
 8011a48:	429f      	cmp	r7, r3
 8011a4a:	d102      	bne.n	8011a52 <_strtod_l+0x8da>
 8011a4c:	3001      	adds	r0, #1
 8011a4e:	f43f addf 	beq.w	8011610 <_strtod_l+0x498>
 8011a52:	4b23      	ldr	r3, [pc, #140]	; (8011ae0 <_strtod_l+0x968>)
 8011a54:	403b      	ands	r3, r7
 8011a56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011a5a:	f04f 0a00 	mov.w	sl, #0
 8011a5e:	9b04      	ldr	r3, [sp, #16]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1a0      	bne.n	80119a6 <_strtod_l+0x82e>
 8011a64:	e5de      	b.n	8011624 <_strtod_l+0x4ac>
 8011a66:	f04f 33ff 	mov.w	r3, #4294967295
 8011a6a:	e7ea      	b.n	8011a42 <_strtod_l+0x8ca>
 8011a6c:	460b      	mov	r3, r1
 8011a6e:	e7e8      	b.n	8011a42 <_strtod_l+0x8ca>
 8011a70:	ea53 030a 	orrs.w	r3, r3, sl
 8011a74:	d088      	beq.n	8011988 <_strtod_l+0x810>
 8011a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a78:	b1db      	cbz	r3, 8011ab2 <_strtod_l+0x93a>
 8011a7a:	423b      	tst	r3, r7
 8011a7c:	d0ef      	beq.n	8011a5e <_strtod_l+0x8e6>
 8011a7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a80:	9a04      	ldr	r2, [sp, #16]
 8011a82:	4650      	mov	r0, sl
 8011a84:	4659      	mov	r1, fp
 8011a86:	b1c3      	cbz	r3, 8011aba <_strtod_l+0x942>
 8011a88:	f7ff fb58 	bl	801113c <sulp>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a94:	f7ee fc12 	bl	80002bc <__adddf3>
 8011a98:	4682      	mov	sl, r0
 8011a9a:	468b      	mov	fp, r1
 8011a9c:	e7df      	b.n	8011a5e <_strtod_l+0x8e6>
 8011a9e:	4013      	ands	r3, r2
 8011aa0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011aa4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011aa8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011aac:	f04f 3aff 	mov.w	sl, #4294967295
 8011ab0:	e7d5      	b.n	8011a5e <_strtod_l+0x8e6>
 8011ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ab4:	ea13 0f0a 	tst.w	r3, sl
 8011ab8:	e7e0      	b.n	8011a7c <_strtod_l+0x904>
 8011aba:	f7ff fb3f 	bl	801113c <sulp>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ac6:	f7ee fbf7 	bl	80002b8 <__aeabi_dsub>
 8011aca:	2200      	movs	r2, #0
 8011acc:	2300      	movs	r3, #0
 8011ace:	4682      	mov	sl, r0
 8011ad0:	468b      	mov	fp, r1
 8011ad2:	f7ef f811 	bl	8000af8 <__aeabi_dcmpeq>
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d0c1      	beq.n	8011a5e <_strtod_l+0x8e6>
 8011ada:	e60e      	b.n	80116fa <_strtod_l+0x582>
 8011adc:	fffffc02 	.word	0xfffffc02
 8011ae0:	7ff00000 	.word	0x7ff00000
 8011ae4:	39500000 	.word	0x39500000
 8011ae8:	000fffff 	.word	0x000fffff
 8011aec:	7fefffff 	.word	0x7fefffff
 8011af0:	08028800 	.word	0x08028800
 8011af4:	4631      	mov	r1, r6
 8011af6:	4628      	mov	r0, r5
 8011af8:	f002 f8d0 	bl	8013c9c <__ratio>
 8011afc:	ec59 8b10 	vmov	r8, r9, d0
 8011b00:	ee10 0a10 	vmov	r0, s0
 8011b04:	2200      	movs	r2, #0
 8011b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b0a:	4649      	mov	r1, r9
 8011b0c:	f7ef f808 	bl	8000b20 <__aeabi_dcmple>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	d07c      	beq.n	8011c0e <_strtod_l+0xa96>
 8011b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d04c      	beq.n	8011bb4 <_strtod_l+0xa3c>
 8011b1a:	4b95      	ldr	r3, [pc, #596]	; (8011d70 <_strtod_l+0xbf8>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011b22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011d70 <_strtod_l+0xbf8>
 8011b26:	f04f 0800 	mov.w	r8, #0
 8011b2a:	4b92      	ldr	r3, [pc, #584]	; (8011d74 <_strtod_l+0xbfc>)
 8011b2c:	403b      	ands	r3, r7
 8011b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8011b30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011b32:	4b91      	ldr	r3, [pc, #580]	; (8011d78 <_strtod_l+0xc00>)
 8011b34:	429a      	cmp	r2, r3
 8011b36:	f040 80b2 	bne.w	8011c9e <_strtod_l+0xb26>
 8011b3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011b42:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011b46:	ec4b ab10 	vmov	d0, sl, fp
 8011b4a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8011b4e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011b52:	f001 ffcb 	bl	8013aec <__ulp>
 8011b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011b5a:	ec53 2b10 	vmov	r2, r3, d0
 8011b5e:	f7ee fd63 	bl	8000628 <__aeabi_dmul>
 8011b62:	4652      	mov	r2, sl
 8011b64:	465b      	mov	r3, fp
 8011b66:	f7ee fba9 	bl	80002bc <__adddf3>
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	4981      	ldr	r1, [pc, #516]	; (8011d74 <_strtod_l+0xbfc>)
 8011b6e:	4a83      	ldr	r2, [pc, #524]	; (8011d7c <_strtod_l+0xc04>)
 8011b70:	4019      	ands	r1, r3
 8011b72:	4291      	cmp	r1, r2
 8011b74:	4682      	mov	sl, r0
 8011b76:	d95e      	bls.n	8011c36 <_strtod_l+0xabe>
 8011b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b7a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d103      	bne.n	8011b8a <_strtod_l+0xa12>
 8011b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b84:	3301      	adds	r3, #1
 8011b86:	f43f ad43 	beq.w	8011610 <_strtod_l+0x498>
 8011b8a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011d88 <_strtod_l+0xc10>
 8011b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8011b92:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011b94:	4620      	mov	r0, r4
 8011b96:	f001 fc7d 	bl	8013494 <_Bfree>
 8011b9a:	9907      	ldr	r1, [sp, #28]
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f001 fc79 	bl	8013494 <_Bfree>
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f001 fc75 	bl	8013494 <_Bfree>
 8011baa:	4629      	mov	r1, r5
 8011bac:	4620      	mov	r0, r4
 8011bae:	f001 fc71 	bl	8013494 <_Bfree>
 8011bb2:	e613      	b.n	80117dc <_strtod_l+0x664>
 8011bb4:	f1ba 0f00 	cmp.w	sl, #0
 8011bb8:	d11b      	bne.n	8011bf2 <_strtod_l+0xa7a>
 8011bba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bbe:	b9f3      	cbnz	r3, 8011bfe <_strtod_l+0xa86>
 8011bc0:	4b6b      	ldr	r3, [pc, #428]	; (8011d70 <_strtod_l+0xbf8>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	4640      	mov	r0, r8
 8011bc6:	4649      	mov	r1, r9
 8011bc8:	f7ee ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8011bcc:	b9d0      	cbnz	r0, 8011c04 <_strtod_l+0xa8c>
 8011bce:	4640      	mov	r0, r8
 8011bd0:	4649      	mov	r1, r9
 8011bd2:	4b6b      	ldr	r3, [pc, #428]	; (8011d80 <_strtod_l+0xc08>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	f7ee fd27 	bl	8000628 <__aeabi_dmul>
 8011bda:	4680      	mov	r8, r0
 8011bdc:	4689      	mov	r9, r1
 8011bde:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011be2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8011be6:	931b      	str	r3, [sp, #108]	; 0x6c
 8011be8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8011bec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011bf0:	e79b      	b.n	8011b2a <_strtod_l+0x9b2>
 8011bf2:	f1ba 0f01 	cmp.w	sl, #1
 8011bf6:	d102      	bne.n	8011bfe <_strtod_l+0xa86>
 8011bf8:	2f00      	cmp	r7, #0
 8011bfa:	f43f ad7e 	beq.w	80116fa <_strtod_l+0x582>
 8011bfe:	4b61      	ldr	r3, [pc, #388]	; (8011d84 <_strtod_l+0xc0c>)
 8011c00:	2200      	movs	r2, #0
 8011c02:	e78c      	b.n	8011b1e <_strtod_l+0x9a6>
 8011c04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011d80 <_strtod_l+0xc08>
 8011c08:	f04f 0800 	mov.w	r8, #0
 8011c0c:	e7e7      	b.n	8011bde <_strtod_l+0xa66>
 8011c0e:	4b5c      	ldr	r3, [pc, #368]	; (8011d80 <_strtod_l+0xc08>)
 8011c10:	4640      	mov	r0, r8
 8011c12:	4649      	mov	r1, r9
 8011c14:	2200      	movs	r2, #0
 8011c16:	f7ee fd07 	bl	8000628 <__aeabi_dmul>
 8011c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c1c:	4680      	mov	r8, r0
 8011c1e:	4689      	mov	r9, r1
 8011c20:	b933      	cbnz	r3, 8011c30 <_strtod_l+0xab8>
 8011c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c26:	9012      	str	r0, [sp, #72]	; 0x48
 8011c28:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011c2e:	e7dd      	b.n	8011bec <_strtod_l+0xa74>
 8011c30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011c34:	e7f9      	b.n	8011c2a <_strtod_l+0xab2>
 8011c36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011c3a:	9b04      	ldr	r3, [sp, #16]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d1a8      	bne.n	8011b92 <_strtod_l+0xa1a>
 8011c40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011c46:	0d1b      	lsrs	r3, r3, #20
 8011c48:	051b      	lsls	r3, r3, #20
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d1a1      	bne.n	8011b92 <_strtod_l+0xa1a>
 8011c4e:	4640      	mov	r0, r8
 8011c50:	4649      	mov	r1, r9
 8011c52:	f7ef f849 	bl	8000ce8 <__aeabi_d2lz>
 8011c56:	f7ee fcb9 	bl	80005cc <__aeabi_l2d>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	4640      	mov	r0, r8
 8011c60:	4649      	mov	r1, r9
 8011c62:	f7ee fb29 	bl	80002b8 <__aeabi_dsub>
 8011c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011c6c:	ea43 030a 	orr.w	r3, r3, sl
 8011c70:	4313      	orrs	r3, r2
 8011c72:	4680      	mov	r8, r0
 8011c74:	4689      	mov	r9, r1
 8011c76:	d053      	beq.n	8011d20 <_strtod_l+0xba8>
 8011c78:	a335      	add	r3, pc, #212	; (adr r3, 8011d50 <_strtod_l+0xbd8>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	f7ee ff45 	bl	8000b0c <__aeabi_dcmplt>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	f47f acce 	bne.w	8011624 <_strtod_l+0x4ac>
 8011c88:	a333      	add	r3, pc, #204	; (adr r3, 8011d58 <_strtod_l+0xbe0>)
 8011c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8e:	4640      	mov	r0, r8
 8011c90:	4649      	mov	r1, r9
 8011c92:	f7ee ff59 	bl	8000b48 <__aeabi_dcmpgt>
 8011c96:	2800      	cmp	r0, #0
 8011c98:	f43f af7b 	beq.w	8011b92 <_strtod_l+0xa1a>
 8011c9c:	e4c2      	b.n	8011624 <_strtod_l+0x4ac>
 8011c9e:	9b04      	ldr	r3, [sp, #16]
 8011ca0:	b333      	cbz	r3, 8011cf0 <_strtod_l+0xb78>
 8011ca2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ca4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011ca8:	d822      	bhi.n	8011cf0 <_strtod_l+0xb78>
 8011caa:	a32d      	add	r3, pc, #180	; (adr r3, 8011d60 <_strtod_l+0xbe8>)
 8011cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb0:	4640      	mov	r0, r8
 8011cb2:	4649      	mov	r1, r9
 8011cb4:	f7ee ff34 	bl	8000b20 <__aeabi_dcmple>
 8011cb8:	b1a0      	cbz	r0, 8011ce4 <_strtod_l+0xb6c>
 8011cba:	4649      	mov	r1, r9
 8011cbc:	4640      	mov	r0, r8
 8011cbe:	f7ee ff8b 	bl	8000bd8 <__aeabi_d2uiz>
 8011cc2:	2801      	cmp	r0, #1
 8011cc4:	bf38      	it	cc
 8011cc6:	2001      	movcc	r0, #1
 8011cc8:	f7ee fc34 	bl	8000534 <__aeabi_ui2d>
 8011ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cce:	4680      	mov	r8, r0
 8011cd0:	4689      	mov	r9, r1
 8011cd2:	bb13      	cbnz	r3, 8011d1a <_strtod_l+0xba2>
 8011cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cd8:	9014      	str	r0, [sp, #80]	; 0x50
 8011cda:	9315      	str	r3, [sp, #84]	; 0x54
 8011cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011ce0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ce8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011cec:	1a9b      	subs	r3, r3, r2
 8011cee:	930d      	str	r3, [sp, #52]	; 0x34
 8011cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011cf4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011cf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011cfc:	f001 fef6 	bl	8013aec <__ulp>
 8011d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011d04:	ec53 2b10 	vmov	r2, r3, d0
 8011d08:	f7ee fc8e 	bl	8000628 <__aeabi_dmul>
 8011d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011d10:	f7ee fad4 	bl	80002bc <__adddf3>
 8011d14:	4682      	mov	sl, r0
 8011d16:	468b      	mov	fp, r1
 8011d18:	e78f      	b.n	8011c3a <_strtod_l+0xac2>
 8011d1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8011d1e:	e7dd      	b.n	8011cdc <_strtod_l+0xb64>
 8011d20:	a311      	add	r3, pc, #68	; (adr r3, 8011d68 <_strtod_l+0xbf0>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	f7ee fef1 	bl	8000b0c <__aeabi_dcmplt>
 8011d2a:	e7b4      	b.n	8011c96 <_strtod_l+0xb1e>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	930e      	str	r3, [sp, #56]	; 0x38
 8011d30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011d34:	6013      	str	r3, [r2, #0]
 8011d36:	f7ff ba65 	b.w	8011204 <_strtod_l+0x8c>
 8011d3a:	2b65      	cmp	r3, #101	; 0x65
 8011d3c:	f43f ab5d 	beq.w	80113fa <_strtod_l+0x282>
 8011d40:	2b45      	cmp	r3, #69	; 0x45
 8011d42:	f43f ab5a 	beq.w	80113fa <_strtod_l+0x282>
 8011d46:	2201      	movs	r2, #1
 8011d48:	f7ff bb92 	b.w	8011470 <_strtod_l+0x2f8>
 8011d4c:	f3af 8000 	nop.w
 8011d50:	94a03595 	.word	0x94a03595
 8011d54:	3fdfffff 	.word	0x3fdfffff
 8011d58:	35afe535 	.word	0x35afe535
 8011d5c:	3fe00000 	.word	0x3fe00000
 8011d60:	ffc00000 	.word	0xffc00000
 8011d64:	41dfffff 	.word	0x41dfffff
 8011d68:	94a03595 	.word	0x94a03595
 8011d6c:	3fcfffff 	.word	0x3fcfffff
 8011d70:	3ff00000 	.word	0x3ff00000
 8011d74:	7ff00000 	.word	0x7ff00000
 8011d78:	7fe00000 	.word	0x7fe00000
 8011d7c:	7c9fffff 	.word	0x7c9fffff
 8011d80:	3fe00000 	.word	0x3fe00000
 8011d84:	bff00000 	.word	0xbff00000
 8011d88:	7fefffff 	.word	0x7fefffff

08011d8c <_strtod_r>:
 8011d8c:	4b01      	ldr	r3, [pc, #4]	; (8011d94 <_strtod_r+0x8>)
 8011d8e:	f7ff b9f3 	b.w	8011178 <_strtod_l>
 8011d92:	bf00      	nop
 8011d94:	200000a8 	.word	0x200000a8

08011d98 <strtod>:
 8011d98:	460a      	mov	r2, r1
 8011d9a:	4601      	mov	r1, r0
 8011d9c:	4802      	ldr	r0, [pc, #8]	; (8011da8 <strtod+0x10>)
 8011d9e:	4b03      	ldr	r3, [pc, #12]	; (8011dac <strtod+0x14>)
 8011da0:	6800      	ldr	r0, [r0, #0]
 8011da2:	f7ff b9e9 	b.w	8011178 <_strtod_l>
 8011da6:	bf00      	nop
 8011da8:	20000040 	.word	0x20000040
 8011dac:	200000a8 	.word	0x200000a8

08011db0 <strtok>:
 8011db0:	4b16      	ldr	r3, [pc, #88]	; (8011e0c <strtok+0x5c>)
 8011db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011db4:	681e      	ldr	r6, [r3, #0]
 8011db6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8011db8:	4605      	mov	r5, r0
 8011dba:	b9fc      	cbnz	r4, 8011dfc <strtok+0x4c>
 8011dbc:	2050      	movs	r0, #80	; 0x50
 8011dbe:	9101      	str	r1, [sp, #4]
 8011dc0:	f001 fb00 	bl	80133c4 <malloc>
 8011dc4:	9901      	ldr	r1, [sp, #4]
 8011dc6:	65b0      	str	r0, [r6, #88]	; 0x58
 8011dc8:	4602      	mov	r2, r0
 8011dca:	b920      	cbnz	r0, 8011dd6 <strtok+0x26>
 8011dcc:	4b10      	ldr	r3, [pc, #64]	; (8011e10 <strtok+0x60>)
 8011dce:	4811      	ldr	r0, [pc, #68]	; (8011e14 <strtok+0x64>)
 8011dd0:	2157      	movs	r1, #87	; 0x57
 8011dd2:	f000 f8d9 	bl	8011f88 <__assert_func>
 8011dd6:	e9c0 4400 	strd	r4, r4, [r0]
 8011dda:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011dde:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011de2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8011de6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8011dea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011dee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011df2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8011df6:	6184      	str	r4, [r0, #24]
 8011df8:	7704      	strb	r4, [r0, #28]
 8011dfa:	6244      	str	r4, [r0, #36]	; 0x24
 8011dfc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011dfe:	2301      	movs	r3, #1
 8011e00:	4628      	mov	r0, r5
 8011e02:	b002      	add	sp, #8
 8011e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e08:	f000 b806 	b.w	8011e18 <__strtok_r>
 8011e0c:	20000040 	.word	0x20000040
 8011e10:	08028828 	.word	0x08028828
 8011e14:	0802883f 	.word	0x0802883f

08011e18 <__strtok_r>:
 8011e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e1a:	b908      	cbnz	r0, 8011e20 <__strtok_r+0x8>
 8011e1c:	6810      	ldr	r0, [r2, #0]
 8011e1e:	b188      	cbz	r0, 8011e44 <__strtok_r+0x2c>
 8011e20:	4604      	mov	r4, r0
 8011e22:	4620      	mov	r0, r4
 8011e24:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011e28:	460f      	mov	r7, r1
 8011e2a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011e2e:	b91e      	cbnz	r6, 8011e38 <__strtok_r+0x20>
 8011e30:	b965      	cbnz	r5, 8011e4c <__strtok_r+0x34>
 8011e32:	6015      	str	r5, [r2, #0]
 8011e34:	4628      	mov	r0, r5
 8011e36:	e005      	b.n	8011e44 <__strtok_r+0x2c>
 8011e38:	42b5      	cmp	r5, r6
 8011e3a:	d1f6      	bne.n	8011e2a <__strtok_r+0x12>
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d1f0      	bne.n	8011e22 <__strtok_r+0xa>
 8011e40:	6014      	str	r4, [r2, #0]
 8011e42:	7003      	strb	r3, [r0, #0]
 8011e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e46:	461c      	mov	r4, r3
 8011e48:	e00c      	b.n	8011e64 <__strtok_r+0x4c>
 8011e4a:	b915      	cbnz	r5, 8011e52 <__strtok_r+0x3a>
 8011e4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e50:	460e      	mov	r6, r1
 8011e52:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011e56:	42ab      	cmp	r3, r5
 8011e58:	d1f7      	bne.n	8011e4a <__strtok_r+0x32>
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d0f3      	beq.n	8011e46 <__strtok_r+0x2e>
 8011e5e:	2300      	movs	r3, #0
 8011e60:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011e64:	6014      	str	r4, [r2, #0]
 8011e66:	e7ed      	b.n	8011e44 <__strtok_r+0x2c>

08011e68 <_strtol_l.isra.0>:
 8011e68:	2b01      	cmp	r3, #1
 8011e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e6e:	d001      	beq.n	8011e74 <_strtol_l.isra.0+0xc>
 8011e70:	2b24      	cmp	r3, #36	; 0x24
 8011e72:	d906      	bls.n	8011e82 <_strtol_l.isra.0+0x1a>
 8011e74:	f7fe fa90 	bl	8010398 <__errno>
 8011e78:	2316      	movs	r3, #22
 8011e7a:	6003      	str	r3, [r0, #0]
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e82:	4f3a      	ldr	r7, [pc, #232]	; (8011f6c <_strtol_l.isra.0+0x104>)
 8011e84:	468e      	mov	lr, r1
 8011e86:	4676      	mov	r6, lr
 8011e88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011e8c:	5de5      	ldrb	r5, [r4, r7]
 8011e8e:	f015 0508 	ands.w	r5, r5, #8
 8011e92:	d1f8      	bne.n	8011e86 <_strtol_l.isra.0+0x1e>
 8011e94:	2c2d      	cmp	r4, #45	; 0x2d
 8011e96:	d134      	bne.n	8011f02 <_strtol_l.isra.0+0x9a>
 8011e98:	f89e 4000 	ldrb.w	r4, [lr]
 8011e9c:	f04f 0801 	mov.w	r8, #1
 8011ea0:	f106 0e02 	add.w	lr, r6, #2
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d05c      	beq.n	8011f62 <_strtol_l.isra.0+0xfa>
 8011ea8:	2b10      	cmp	r3, #16
 8011eaa:	d10c      	bne.n	8011ec6 <_strtol_l.isra.0+0x5e>
 8011eac:	2c30      	cmp	r4, #48	; 0x30
 8011eae:	d10a      	bne.n	8011ec6 <_strtol_l.isra.0+0x5e>
 8011eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8011eb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011eb8:	2c58      	cmp	r4, #88	; 0x58
 8011eba:	d14d      	bne.n	8011f58 <_strtol_l.isra.0+0xf0>
 8011ebc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011ec0:	2310      	movs	r3, #16
 8011ec2:	f10e 0e02 	add.w	lr, lr, #2
 8011ec6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8011eca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011ece:	2600      	movs	r6, #0
 8011ed0:	fbbc f9f3 	udiv	r9, ip, r3
 8011ed4:	4635      	mov	r5, r6
 8011ed6:	fb03 ca19 	mls	sl, r3, r9, ip
 8011eda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8011ede:	2f09      	cmp	r7, #9
 8011ee0:	d818      	bhi.n	8011f14 <_strtol_l.isra.0+0xac>
 8011ee2:	463c      	mov	r4, r7
 8011ee4:	42a3      	cmp	r3, r4
 8011ee6:	dd24      	ble.n	8011f32 <_strtol_l.isra.0+0xca>
 8011ee8:	2e00      	cmp	r6, #0
 8011eea:	db1f      	blt.n	8011f2c <_strtol_l.isra.0+0xc4>
 8011eec:	45a9      	cmp	r9, r5
 8011eee:	d31d      	bcc.n	8011f2c <_strtol_l.isra.0+0xc4>
 8011ef0:	d101      	bne.n	8011ef6 <_strtol_l.isra.0+0x8e>
 8011ef2:	45a2      	cmp	sl, r4
 8011ef4:	db1a      	blt.n	8011f2c <_strtol_l.isra.0+0xc4>
 8011ef6:	fb05 4503 	mla	r5, r5, r3, r4
 8011efa:	2601      	movs	r6, #1
 8011efc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011f00:	e7eb      	b.n	8011eda <_strtol_l.isra.0+0x72>
 8011f02:	2c2b      	cmp	r4, #43	; 0x2b
 8011f04:	bf08      	it	eq
 8011f06:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011f0a:	46a8      	mov	r8, r5
 8011f0c:	bf08      	it	eq
 8011f0e:	f106 0e02 	addeq.w	lr, r6, #2
 8011f12:	e7c7      	b.n	8011ea4 <_strtol_l.isra.0+0x3c>
 8011f14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011f18:	2f19      	cmp	r7, #25
 8011f1a:	d801      	bhi.n	8011f20 <_strtol_l.isra.0+0xb8>
 8011f1c:	3c37      	subs	r4, #55	; 0x37
 8011f1e:	e7e1      	b.n	8011ee4 <_strtol_l.isra.0+0x7c>
 8011f20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011f24:	2f19      	cmp	r7, #25
 8011f26:	d804      	bhi.n	8011f32 <_strtol_l.isra.0+0xca>
 8011f28:	3c57      	subs	r4, #87	; 0x57
 8011f2a:	e7db      	b.n	8011ee4 <_strtol_l.isra.0+0x7c>
 8011f2c:	f04f 36ff 	mov.w	r6, #4294967295
 8011f30:	e7e4      	b.n	8011efc <_strtol_l.isra.0+0x94>
 8011f32:	2e00      	cmp	r6, #0
 8011f34:	da05      	bge.n	8011f42 <_strtol_l.isra.0+0xda>
 8011f36:	2322      	movs	r3, #34	; 0x22
 8011f38:	6003      	str	r3, [r0, #0]
 8011f3a:	4665      	mov	r5, ip
 8011f3c:	b942      	cbnz	r2, 8011f50 <_strtol_l.isra.0+0xe8>
 8011f3e:	4628      	mov	r0, r5
 8011f40:	e79d      	b.n	8011e7e <_strtol_l.isra.0+0x16>
 8011f42:	f1b8 0f00 	cmp.w	r8, #0
 8011f46:	d000      	beq.n	8011f4a <_strtol_l.isra.0+0xe2>
 8011f48:	426d      	negs	r5, r5
 8011f4a:	2a00      	cmp	r2, #0
 8011f4c:	d0f7      	beq.n	8011f3e <_strtol_l.isra.0+0xd6>
 8011f4e:	b10e      	cbz	r6, 8011f54 <_strtol_l.isra.0+0xec>
 8011f50:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011f54:	6011      	str	r1, [r2, #0]
 8011f56:	e7f2      	b.n	8011f3e <_strtol_l.isra.0+0xd6>
 8011f58:	2430      	movs	r4, #48	; 0x30
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1b3      	bne.n	8011ec6 <_strtol_l.isra.0+0x5e>
 8011f5e:	2308      	movs	r3, #8
 8011f60:	e7b1      	b.n	8011ec6 <_strtol_l.isra.0+0x5e>
 8011f62:	2c30      	cmp	r4, #48	; 0x30
 8011f64:	d0a4      	beq.n	8011eb0 <_strtol_l.isra.0+0x48>
 8011f66:	230a      	movs	r3, #10
 8011f68:	e7ad      	b.n	8011ec6 <_strtol_l.isra.0+0x5e>
 8011f6a:	bf00      	nop
 8011f6c:	080288dd 	.word	0x080288dd

08011f70 <_strtol_r>:
 8011f70:	f7ff bf7a 	b.w	8011e68 <_strtol_l.isra.0>

08011f74 <strtol>:
 8011f74:	4613      	mov	r3, r2
 8011f76:	460a      	mov	r2, r1
 8011f78:	4601      	mov	r1, r0
 8011f7a:	4802      	ldr	r0, [pc, #8]	; (8011f84 <strtol+0x10>)
 8011f7c:	6800      	ldr	r0, [r0, #0]
 8011f7e:	f7ff bf73 	b.w	8011e68 <_strtol_l.isra.0>
 8011f82:	bf00      	nop
 8011f84:	20000040 	.word	0x20000040

08011f88 <__assert_func>:
 8011f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f8a:	4614      	mov	r4, r2
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	4b09      	ldr	r3, [pc, #36]	; (8011fb4 <__assert_func+0x2c>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4605      	mov	r5, r0
 8011f94:	68d8      	ldr	r0, [r3, #12]
 8011f96:	b14c      	cbz	r4, 8011fac <__assert_func+0x24>
 8011f98:	4b07      	ldr	r3, [pc, #28]	; (8011fb8 <__assert_func+0x30>)
 8011f9a:	9100      	str	r1, [sp, #0]
 8011f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fa0:	4906      	ldr	r1, [pc, #24]	; (8011fbc <__assert_func+0x34>)
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	f000 fe88 	bl	8012cb8 <fiprintf>
 8011fa8:	f002 fb56 	bl	8014658 <abort>
 8011fac:	4b04      	ldr	r3, [pc, #16]	; (8011fc0 <__assert_func+0x38>)
 8011fae:	461c      	mov	r4, r3
 8011fb0:	e7f3      	b.n	8011f9a <__assert_func+0x12>
 8011fb2:	bf00      	nop
 8011fb4:	20000040 	.word	0x20000040
 8011fb8:	080288a0 	.word	0x080288a0
 8011fbc:	080288ad 	.word	0x080288ad
 8011fc0:	080288db 	.word	0x080288db

08011fc4 <quorem>:
 8011fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc8:	6903      	ldr	r3, [r0, #16]
 8011fca:	690c      	ldr	r4, [r1, #16]
 8011fcc:	42a3      	cmp	r3, r4
 8011fce:	4607      	mov	r7, r0
 8011fd0:	f2c0 8081 	blt.w	80120d6 <quorem+0x112>
 8011fd4:	3c01      	subs	r4, #1
 8011fd6:	f101 0814 	add.w	r8, r1, #20
 8011fda:	f100 0514 	add.w	r5, r0, #20
 8011fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fe2:	9301      	str	r3, [sp, #4]
 8011fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fec:	3301      	adds	r3, #1
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ffc:	d331      	bcc.n	8012062 <quorem+0x9e>
 8011ffe:	f04f 0e00 	mov.w	lr, #0
 8012002:	4640      	mov	r0, r8
 8012004:	46ac      	mov	ip, r5
 8012006:	46f2      	mov	sl, lr
 8012008:	f850 2b04 	ldr.w	r2, [r0], #4
 801200c:	b293      	uxth	r3, r2
 801200e:	fb06 e303 	mla	r3, r6, r3, lr
 8012012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012016:	b29b      	uxth	r3, r3
 8012018:	ebaa 0303 	sub.w	r3, sl, r3
 801201c:	0c12      	lsrs	r2, r2, #16
 801201e:	f8dc a000 	ldr.w	sl, [ip]
 8012022:	fb06 e202 	mla	r2, r6, r2, lr
 8012026:	fa13 f38a 	uxtah	r3, r3, sl
 801202a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801202e:	fa1f fa82 	uxth.w	sl, r2
 8012032:	f8dc 2000 	ldr.w	r2, [ip]
 8012036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801203a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801203e:	b29b      	uxth	r3, r3
 8012040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012044:	4581      	cmp	r9, r0
 8012046:	f84c 3b04 	str.w	r3, [ip], #4
 801204a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801204e:	d2db      	bcs.n	8012008 <quorem+0x44>
 8012050:	f855 300b 	ldr.w	r3, [r5, fp]
 8012054:	b92b      	cbnz	r3, 8012062 <quorem+0x9e>
 8012056:	9b01      	ldr	r3, [sp, #4]
 8012058:	3b04      	subs	r3, #4
 801205a:	429d      	cmp	r5, r3
 801205c:	461a      	mov	r2, r3
 801205e:	d32e      	bcc.n	80120be <quorem+0xfa>
 8012060:	613c      	str	r4, [r7, #16]
 8012062:	4638      	mov	r0, r7
 8012064:	f001 fc9e 	bl	80139a4 <__mcmp>
 8012068:	2800      	cmp	r0, #0
 801206a:	db24      	blt.n	80120b6 <quorem+0xf2>
 801206c:	3601      	adds	r6, #1
 801206e:	4628      	mov	r0, r5
 8012070:	f04f 0c00 	mov.w	ip, #0
 8012074:	f858 2b04 	ldr.w	r2, [r8], #4
 8012078:	f8d0 e000 	ldr.w	lr, [r0]
 801207c:	b293      	uxth	r3, r2
 801207e:	ebac 0303 	sub.w	r3, ip, r3
 8012082:	0c12      	lsrs	r2, r2, #16
 8012084:	fa13 f38e 	uxtah	r3, r3, lr
 8012088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801208c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012090:	b29b      	uxth	r3, r3
 8012092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012096:	45c1      	cmp	r9, r8
 8012098:	f840 3b04 	str.w	r3, [r0], #4
 801209c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80120a0:	d2e8      	bcs.n	8012074 <quorem+0xb0>
 80120a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120aa:	b922      	cbnz	r2, 80120b6 <quorem+0xf2>
 80120ac:	3b04      	subs	r3, #4
 80120ae:	429d      	cmp	r5, r3
 80120b0:	461a      	mov	r2, r3
 80120b2:	d30a      	bcc.n	80120ca <quorem+0x106>
 80120b4:	613c      	str	r4, [r7, #16]
 80120b6:	4630      	mov	r0, r6
 80120b8:	b003      	add	sp, #12
 80120ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120be:	6812      	ldr	r2, [r2, #0]
 80120c0:	3b04      	subs	r3, #4
 80120c2:	2a00      	cmp	r2, #0
 80120c4:	d1cc      	bne.n	8012060 <quorem+0x9c>
 80120c6:	3c01      	subs	r4, #1
 80120c8:	e7c7      	b.n	801205a <quorem+0x96>
 80120ca:	6812      	ldr	r2, [r2, #0]
 80120cc:	3b04      	subs	r3, #4
 80120ce:	2a00      	cmp	r2, #0
 80120d0:	d1f0      	bne.n	80120b4 <quorem+0xf0>
 80120d2:	3c01      	subs	r4, #1
 80120d4:	e7eb      	b.n	80120ae <quorem+0xea>
 80120d6:	2000      	movs	r0, #0
 80120d8:	e7ee      	b.n	80120b8 <quorem+0xf4>
 80120da:	0000      	movs	r0, r0
 80120dc:	0000      	movs	r0, r0
	...

080120e0 <_dtoa_r>:
 80120e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e4:	ed2d 8b02 	vpush	{d8}
 80120e8:	ec57 6b10 	vmov	r6, r7, d0
 80120ec:	b095      	sub	sp, #84	; 0x54
 80120ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80120f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80120f4:	9105      	str	r1, [sp, #20]
 80120f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80120fa:	4604      	mov	r4, r0
 80120fc:	9209      	str	r2, [sp, #36]	; 0x24
 80120fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8012100:	b975      	cbnz	r5, 8012120 <_dtoa_r+0x40>
 8012102:	2010      	movs	r0, #16
 8012104:	f001 f95e 	bl	80133c4 <malloc>
 8012108:	4602      	mov	r2, r0
 801210a:	6260      	str	r0, [r4, #36]	; 0x24
 801210c:	b920      	cbnz	r0, 8012118 <_dtoa_r+0x38>
 801210e:	4bb2      	ldr	r3, [pc, #712]	; (80123d8 <_dtoa_r+0x2f8>)
 8012110:	21ea      	movs	r1, #234	; 0xea
 8012112:	48b2      	ldr	r0, [pc, #712]	; (80123dc <_dtoa_r+0x2fc>)
 8012114:	f7ff ff38 	bl	8011f88 <__assert_func>
 8012118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801211c:	6005      	str	r5, [r0, #0]
 801211e:	60c5      	str	r5, [r0, #12]
 8012120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012122:	6819      	ldr	r1, [r3, #0]
 8012124:	b151      	cbz	r1, 801213c <_dtoa_r+0x5c>
 8012126:	685a      	ldr	r2, [r3, #4]
 8012128:	604a      	str	r2, [r1, #4]
 801212a:	2301      	movs	r3, #1
 801212c:	4093      	lsls	r3, r2
 801212e:	608b      	str	r3, [r1, #8]
 8012130:	4620      	mov	r0, r4
 8012132:	f001 f9af 	bl	8013494 <_Bfree>
 8012136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012138:	2200      	movs	r2, #0
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	1e3b      	subs	r3, r7, #0
 801213e:	bfb9      	ittee	lt
 8012140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012144:	9303      	strlt	r3, [sp, #12]
 8012146:	2300      	movge	r3, #0
 8012148:	f8c8 3000 	strge.w	r3, [r8]
 801214c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012150:	4ba3      	ldr	r3, [pc, #652]	; (80123e0 <_dtoa_r+0x300>)
 8012152:	bfbc      	itt	lt
 8012154:	2201      	movlt	r2, #1
 8012156:	f8c8 2000 	strlt.w	r2, [r8]
 801215a:	ea33 0309 	bics.w	r3, r3, r9
 801215e:	d11b      	bne.n	8012198 <_dtoa_r+0xb8>
 8012160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012162:	f242 730f 	movw	r3, #9999	; 0x270f
 8012166:	6013      	str	r3, [r2, #0]
 8012168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801216c:	4333      	orrs	r3, r6
 801216e:	f000 857a 	beq.w	8012c66 <_dtoa_r+0xb86>
 8012172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012174:	b963      	cbnz	r3, 8012190 <_dtoa_r+0xb0>
 8012176:	4b9b      	ldr	r3, [pc, #620]	; (80123e4 <_dtoa_r+0x304>)
 8012178:	e024      	b.n	80121c4 <_dtoa_r+0xe4>
 801217a:	4b9b      	ldr	r3, [pc, #620]	; (80123e8 <_dtoa_r+0x308>)
 801217c:	9300      	str	r3, [sp, #0]
 801217e:	3308      	adds	r3, #8
 8012180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012182:	6013      	str	r3, [r2, #0]
 8012184:	9800      	ldr	r0, [sp, #0]
 8012186:	b015      	add	sp, #84	; 0x54
 8012188:	ecbd 8b02 	vpop	{d8}
 801218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012190:	4b94      	ldr	r3, [pc, #592]	; (80123e4 <_dtoa_r+0x304>)
 8012192:	9300      	str	r3, [sp, #0]
 8012194:	3303      	adds	r3, #3
 8012196:	e7f3      	b.n	8012180 <_dtoa_r+0xa0>
 8012198:	ed9d 7b02 	vldr	d7, [sp, #8]
 801219c:	2200      	movs	r2, #0
 801219e:	ec51 0b17 	vmov	r0, r1, d7
 80121a2:	2300      	movs	r3, #0
 80121a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80121a8:	f7ee fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80121ac:	4680      	mov	r8, r0
 80121ae:	b158      	cbz	r0, 80121c8 <_dtoa_r+0xe8>
 80121b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80121b2:	2301      	movs	r3, #1
 80121b4:	6013      	str	r3, [r2, #0]
 80121b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 8551 	beq.w	8012c60 <_dtoa_r+0xb80>
 80121be:	488b      	ldr	r0, [pc, #556]	; (80123ec <_dtoa_r+0x30c>)
 80121c0:	6018      	str	r0, [r3, #0]
 80121c2:	1e43      	subs	r3, r0, #1
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	e7dd      	b.n	8012184 <_dtoa_r+0xa4>
 80121c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121cc:	aa12      	add	r2, sp, #72	; 0x48
 80121ce:	a913      	add	r1, sp, #76	; 0x4c
 80121d0:	4620      	mov	r0, r4
 80121d2:	f001 fd07 	bl	8013be4 <__d2b>
 80121d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121da:	4683      	mov	fp, r0
 80121dc:	2d00      	cmp	r5, #0
 80121de:	d07c      	beq.n	80122da <_dtoa_r+0x1fa>
 80121e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80121e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80121ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80121f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80121f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80121fa:	4b7d      	ldr	r3, [pc, #500]	; (80123f0 <_dtoa_r+0x310>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	4630      	mov	r0, r6
 8012200:	4639      	mov	r1, r7
 8012202:	f7ee f859 	bl	80002b8 <__aeabi_dsub>
 8012206:	a36e      	add	r3, pc, #440	; (adr r3, 80123c0 <_dtoa_r+0x2e0>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	f7ee fa0c 	bl	8000628 <__aeabi_dmul>
 8012210:	a36d      	add	r3, pc, #436	; (adr r3, 80123c8 <_dtoa_r+0x2e8>)
 8012212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012216:	f7ee f851 	bl	80002bc <__adddf3>
 801221a:	4606      	mov	r6, r0
 801221c:	4628      	mov	r0, r5
 801221e:	460f      	mov	r7, r1
 8012220:	f7ee f998 	bl	8000554 <__aeabi_i2d>
 8012224:	a36a      	add	r3, pc, #424	; (adr r3, 80123d0 <_dtoa_r+0x2f0>)
 8012226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222a:	f7ee f9fd 	bl	8000628 <__aeabi_dmul>
 801222e:	4602      	mov	r2, r0
 8012230:	460b      	mov	r3, r1
 8012232:	4630      	mov	r0, r6
 8012234:	4639      	mov	r1, r7
 8012236:	f7ee f841 	bl	80002bc <__adddf3>
 801223a:	4606      	mov	r6, r0
 801223c:	460f      	mov	r7, r1
 801223e:	f7ee fca3 	bl	8000b88 <__aeabi_d2iz>
 8012242:	2200      	movs	r2, #0
 8012244:	4682      	mov	sl, r0
 8012246:	2300      	movs	r3, #0
 8012248:	4630      	mov	r0, r6
 801224a:	4639      	mov	r1, r7
 801224c:	f7ee fc5e 	bl	8000b0c <__aeabi_dcmplt>
 8012250:	b148      	cbz	r0, 8012266 <_dtoa_r+0x186>
 8012252:	4650      	mov	r0, sl
 8012254:	f7ee f97e 	bl	8000554 <__aeabi_i2d>
 8012258:	4632      	mov	r2, r6
 801225a:	463b      	mov	r3, r7
 801225c:	f7ee fc4c 	bl	8000af8 <__aeabi_dcmpeq>
 8012260:	b908      	cbnz	r0, 8012266 <_dtoa_r+0x186>
 8012262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012266:	f1ba 0f16 	cmp.w	sl, #22
 801226a:	d854      	bhi.n	8012316 <_dtoa_r+0x236>
 801226c:	4b61      	ldr	r3, [pc, #388]	; (80123f4 <_dtoa_r+0x314>)
 801226e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801227a:	f7ee fc47 	bl	8000b0c <__aeabi_dcmplt>
 801227e:	2800      	cmp	r0, #0
 8012280:	d04b      	beq.n	801231a <_dtoa_r+0x23a>
 8012282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012286:	2300      	movs	r3, #0
 8012288:	930e      	str	r3, [sp, #56]	; 0x38
 801228a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801228c:	1b5d      	subs	r5, r3, r5
 801228e:	1e6b      	subs	r3, r5, #1
 8012290:	9304      	str	r3, [sp, #16]
 8012292:	bf43      	ittte	mi
 8012294:	2300      	movmi	r3, #0
 8012296:	f1c5 0801 	rsbmi	r8, r5, #1
 801229a:	9304      	strmi	r3, [sp, #16]
 801229c:	f04f 0800 	movpl.w	r8, #0
 80122a0:	f1ba 0f00 	cmp.w	sl, #0
 80122a4:	db3b      	blt.n	801231e <_dtoa_r+0x23e>
 80122a6:	9b04      	ldr	r3, [sp, #16]
 80122a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80122ac:	4453      	add	r3, sl
 80122ae:	9304      	str	r3, [sp, #16]
 80122b0:	2300      	movs	r3, #0
 80122b2:	9306      	str	r3, [sp, #24]
 80122b4:	9b05      	ldr	r3, [sp, #20]
 80122b6:	2b09      	cmp	r3, #9
 80122b8:	d869      	bhi.n	801238e <_dtoa_r+0x2ae>
 80122ba:	2b05      	cmp	r3, #5
 80122bc:	bfc4      	itt	gt
 80122be:	3b04      	subgt	r3, #4
 80122c0:	9305      	strgt	r3, [sp, #20]
 80122c2:	9b05      	ldr	r3, [sp, #20]
 80122c4:	f1a3 0302 	sub.w	r3, r3, #2
 80122c8:	bfcc      	ite	gt
 80122ca:	2500      	movgt	r5, #0
 80122cc:	2501      	movle	r5, #1
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d869      	bhi.n	80123a6 <_dtoa_r+0x2c6>
 80122d2:	e8df f003 	tbb	[pc, r3]
 80122d6:	4e2c      	.short	0x4e2c
 80122d8:	5a4c      	.short	0x5a4c
 80122da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80122de:	441d      	add	r5, r3
 80122e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80122e4:	2b20      	cmp	r3, #32
 80122e6:	bfc1      	itttt	gt
 80122e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80122ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80122f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80122f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80122f8:	bfda      	itte	le
 80122fa:	f1c3 0320 	rsble	r3, r3, #32
 80122fe:	fa06 f003 	lslle.w	r0, r6, r3
 8012302:	4318      	orrgt	r0, r3
 8012304:	f7ee f916 	bl	8000534 <__aeabi_ui2d>
 8012308:	2301      	movs	r3, #1
 801230a:	4606      	mov	r6, r0
 801230c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012310:	3d01      	subs	r5, #1
 8012312:	9310      	str	r3, [sp, #64]	; 0x40
 8012314:	e771      	b.n	80121fa <_dtoa_r+0x11a>
 8012316:	2301      	movs	r3, #1
 8012318:	e7b6      	b.n	8012288 <_dtoa_r+0x1a8>
 801231a:	900e      	str	r0, [sp, #56]	; 0x38
 801231c:	e7b5      	b.n	801228a <_dtoa_r+0x1aa>
 801231e:	f1ca 0300 	rsb	r3, sl, #0
 8012322:	9306      	str	r3, [sp, #24]
 8012324:	2300      	movs	r3, #0
 8012326:	eba8 080a 	sub.w	r8, r8, sl
 801232a:	930d      	str	r3, [sp, #52]	; 0x34
 801232c:	e7c2      	b.n	80122b4 <_dtoa_r+0x1d4>
 801232e:	2300      	movs	r3, #0
 8012330:	9308      	str	r3, [sp, #32]
 8012332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012334:	2b00      	cmp	r3, #0
 8012336:	dc39      	bgt.n	80123ac <_dtoa_r+0x2cc>
 8012338:	f04f 0901 	mov.w	r9, #1
 801233c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012340:	464b      	mov	r3, r9
 8012342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012348:	2200      	movs	r2, #0
 801234a:	6042      	str	r2, [r0, #4]
 801234c:	2204      	movs	r2, #4
 801234e:	f102 0614 	add.w	r6, r2, #20
 8012352:	429e      	cmp	r6, r3
 8012354:	6841      	ldr	r1, [r0, #4]
 8012356:	d92f      	bls.n	80123b8 <_dtoa_r+0x2d8>
 8012358:	4620      	mov	r0, r4
 801235a:	f001 f85b 	bl	8013414 <_Balloc>
 801235e:	9000      	str	r0, [sp, #0]
 8012360:	2800      	cmp	r0, #0
 8012362:	d14b      	bne.n	80123fc <_dtoa_r+0x31c>
 8012364:	4b24      	ldr	r3, [pc, #144]	; (80123f8 <_dtoa_r+0x318>)
 8012366:	4602      	mov	r2, r0
 8012368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801236c:	e6d1      	b.n	8012112 <_dtoa_r+0x32>
 801236e:	2301      	movs	r3, #1
 8012370:	e7de      	b.n	8012330 <_dtoa_r+0x250>
 8012372:	2300      	movs	r3, #0
 8012374:	9308      	str	r3, [sp, #32]
 8012376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012378:	eb0a 0903 	add.w	r9, sl, r3
 801237c:	f109 0301 	add.w	r3, r9, #1
 8012380:	2b01      	cmp	r3, #1
 8012382:	9301      	str	r3, [sp, #4]
 8012384:	bfb8      	it	lt
 8012386:	2301      	movlt	r3, #1
 8012388:	e7dd      	b.n	8012346 <_dtoa_r+0x266>
 801238a:	2301      	movs	r3, #1
 801238c:	e7f2      	b.n	8012374 <_dtoa_r+0x294>
 801238e:	2501      	movs	r5, #1
 8012390:	2300      	movs	r3, #0
 8012392:	9305      	str	r3, [sp, #20]
 8012394:	9508      	str	r5, [sp, #32]
 8012396:	f04f 39ff 	mov.w	r9, #4294967295
 801239a:	2200      	movs	r2, #0
 801239c:	f8cd 9004 	str.w	r9, [sp, #4]
 80123a0:	2312      	movs	r3, #18
 80123a2:	9209      	str	r2, [sp, #36]	; 0x24
 80123a4:	e7cf      	b.n	8012346 <_dtoa_r+0x266>
 80123a6:	2301      	movs	r3, #1
 80123a8:	9308      	str	r3, [sp, #32]
 80123aa:	e7f4      	b.n	8012396 <_dtoa_r+0x2b6>
 80123ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80123b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80123b4:	464b      	mov	r3, r9
 80123b6:	e7c6      	b.n	8012346 <_dtoa_r+0x266>
 80123b8:	3101      	adds	r1, #1
 80123ba:	6041      	str	r1, [r0, #4]
 80123bc:	0052      	lsls	r2, r2, #1
 80123be:	e7c6      	b.n	801234e <_dtoa_r+0x26e>
 80123c0:	636f4361 	.word	0x636f4361
 80123c4:	3fd287a7 	.word	0x3fd287a7
 80123c8:	8b60c8b3 	.word	0x8b60c8b3
 80123cc:	3fc68a28 	.word	0x3fc68a28
 80123d0:	509f79fb 	.word	0x509f79fb
 80123d4:	3fd34413 	.word	0x3fd34413
 80123d8:	08028828 	.word	0x08028828
 80123dc:	080289ea 	.word	0x080289ea
 80123e0:	7ff00000 	.word	0x7ff00000
 80123e4:	080289e6 	.word	0x080289e6
 80123e8:	080289dd 	.word	0x080289dd
 80123ec:	080287a9 	.word	0x080287a9
 80123f0:	3ff80000 	.word	0x3ff80000
 80123f4:	08028b60 	.word	0x08028b60
 80123f8:	08028a49 	.word	0x08028a49
 80123fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123fe:	9a00      	ldr	r2, [sp, #0]
 8012400:	601a      	str	r2, [r3, #0]
 8012402:	9b01      	ldr	r3, [sp, #4]
 8012404:	2b0e      	cmp	r3, #14
 8012406:	f200 80ad 	bhi.w	8012564 <_dtoa_r+0x484>
 801240a:	2d00      	cmp	r5, #0
 801240c:	f000 80aa 	beq.w	8012564 <_dtoa_r+0x484>
 8012410:	f1ba 0f00 	cmp.w	sl, #0
 8012414:	dd36      	ble.n	8012484 <_dtoa_r+0x3a4>
 8012416:	4ac3      	ldr	r2, [pc, #780]	; (8012724 <_dtoa_r+0x644>)
 8012418:	f00a 030f 	and.w	r3, sl, #15
 801241c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012420:	ed93 7b00 	vldr	d7, [r3]
 8012424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8012428:	ea4f 172a 	mov.w	r7, sl, asr #4
 801242c:	eeb0 8a47 	vmov.f32	s16, s14
 8012430:	eef0 8a67 	vmov.f32	s17, s15
 8012434:	d016      	beq.n	8012464 <_dtoa_r+0x384>
 8012436:	4bbc      	ldr	r3, [pc, #752]	; (8012728 <_dtoa_r+0x648>)
 8012438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801243c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012440:	f7ee fa1c 	bl	800087c <__aeabi_ddiv>
 8012444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012448:	f007 070f 	and.w	r7, r7, #15
 801244c:	2503      	movs	r5, #3
 801244e:	4eb6      	ldr	r6, [pc, #728]	; (8012728 <_dtoa_r+0x648>)
 8012450:	b957      	cbnz	r7, 8012468 <_dtoa_r+0x388>
 8012452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012456:	ec53 2b18 	vmov	r2, r3, d8
 801245a:	f7ee fa0f 	bl	800087c <__aeabi_ddiv>
 801245e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012462:	e029      	b.n	80124b8 <_dtoa_r+0x3d8>
 8012464:	2502      	movs	r5, #2
 8012466:	e7f2      	b.n	801244e <_dtoa_r+0x36e>
 8012468:	07f9      	lsls	r1, r7, #31
 801246a:	d508      	bpl.n	801247e <_dtoa_r+0x39e>
 801246c:	ec51 0b18 	vmov	r0, r1, d8
 8012470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012474:	f7ee f8d8 	bl	8000628 <__aeabi_dmul>
 8012478:	ec41 0b18 	vmov	d8, r0, r1
 801247c:	3501      	adds	r5, #1
 801247e:	107f      	asrs	r7, r7, #1
 8012480:	3608      	adds	r6, #8
 8012482:	e7e5      	b.n	8012450 <_dtoa_r+0x370>
 8012484:	f000 80a6 	beq.w	80125d4 <_dtoa_r+0x4f4>
 8012488:	f1ca 0600 	rsb	r6, sl, #0
 801248c:	4ba5      	ldr	r3, [pc, #660]	; (8012724 <_dtoa_r+0x644>)
 801248e:	4fa6      	ldr	r7, [pc, #664]	; (8012728 <_dtoa_r+0x648>)
 8012490:	f006 020f 	and.w	r2, r6, #15
 8012494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80124a0:	f7ee f8c2 	bl	8000628 <__aeabi_dmul>
 80124a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124a8:	1136      	asrs	r6, r6, #4
 80124aa:	2300      	movs	r3, #0
 80124ac:	2502      	movs	r5, #2
 80124ae:	2e00      	cmp	r6, #0
 80124b0:	f040 8085 	bne.w	80125be <_dtoa_r+0x4de>
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1d2      	bne.n	801245e <_dtoa_r+0x37e>
 80124b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 808c 	beq.w	80125d8 <_dtoa_r+0x4f8>
 80124c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80124c4:	4b99      	ldr	r3, [pc, #612]	; (801272c <_dtoa_r+0x64c>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	4630      	mov	r0, r6
 80124ca:	4639      	mov	r1, r7
 80124cc:	f7ee fb1e 	bl	8000b0c <__aeabi_dcmplt>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	f000 8081 	beq.w	80125d8 <_dtoa_r+0x4f8>
 80124d6:	9b01      	ldr	r3, [sp, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d07d      	beq.n	80125d8 <_dtoa_r+0x4f8>
 80124dc:	f1b9 0f00 	cmp.w	r9, #0
 80124e0:	dd3c      	ble.n	801255c <_dtoa_r+0x47c>
 80124e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80124e6:	9307      	str	r3, [sp, #28]
 80124e8:	2200      	movs	r2, #0
 80124ea:	4b91      	ldr	r3, [pc, #580]	; (8012730 <_dtoa_r+0x650>)
 80124ec:	4630      	mov	r0, r6
 80124ee:	4639      	mov	r1, r7
 80124f0:	f7ee f89a 	bl	8000628 <__aeabi_dmul>
 80124f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124f8:	3501      	adds	r5, #1
 80124fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80124fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012502:	4628      	mov	r0, r5
 8012504:	f7ee f826 	bl	8000554 <__aeabi_i2d>
 8012508:	4632      	mov	r2, r6
 801250a:	463b      	mov	r3, r7
 801250c:	f7ee f88c 	bl	8000628 <__aeabi_dmul>
 8012510:	4b88      	ldr	r3, [pc, #544]	; (8012734 <_dtoa_r+0x654>)
 8012512:	2200      	movs	r2, #0
 8012514:	f7ed fed2 	bl	80002bc <__adddf3>
 8012518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012520:	9303      	str	r3, [sp, #12]
 8012522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012524:	2b00      	cmp	r3, #0
 8012526:	d15c      	bne.n	80125e2 <_dtoa_r+0x502>
 8012528:	4b83      	ldr	r3, [pc, #524]	; (8012738 <_dtoa_r+0x658>)
 801252a:	2200      	movs	r2, #0
 801252c:	4630      	mov	r0, r6
 801252e:	4639      	mov	r1, r7
 8012530:	f7ed fec2 	bl	80002b8 <__aeabi_dsub>
 8012534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012538:	4606      	mov	r6, r0
 801253a:	460f      	mov	r7, r1
 801253c:	f7ee fb04 	bl	8000b48 <__aeabi_dcmpgt>
 8012540:	2800      	cmp	r0, #0
 8012542:	f040 8296 	bne.w	8012a72 <_dtoa_r+0x992>
 8012546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801254a:	4630      	mov	r0, r6
 801254c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012550:	4639      	mov	r1, r7
 8012552:	f7ee fadb 	bl	8000b0c <__aeabi_dcmplt>
 8012556:	2800      	cmp	r0, #0
 8012558:	f040 8288 	bne.w	8012a6c <_dtoa_r+0x98c>
 801255c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012566:	2b00      	cmp	r3, #0
 8012568:	f2c0 8158 	blt.w	801281c <_dtoa_r+0x73c>
 801256c:	f1ba 0f0e 	cmp.w	sl, #14
 8012570:	f300 8154 	bgt.w	801281c <_dtoa_r+0x73c>
 8012574:	4b6b      	ldr	r3, [pc, #428]	; (8012724 <_dtoa_r+0x644>)
 8012576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801257a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801257e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012580:	2b00      	cmp	r3, #0
 8012582:	f280 80e3 	bge.w	801274c <_dtoa_r+0x66c>
 8012586:	9b01      	ldr	r3, [sp, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	f300 80df 	bgt.w	801274c <_dtoa_r+0x66c>
 801258e:	f040 826d 	bne.w	8012a6c <_dtoa_r+0x98c>
 8012592:	4b69      	ldr	r3, [pc, #420]	; (8012738 <_dtoa_r+0x658>)
 8012594:	2200      	movs	r2, #0
 8012596:	4640      	mov	r0, r8
 8012598:	4649      	mov	r1, r9
 801259a:	f7ee f845 	bl	8000628 <__aeabi_dmul>
 801259e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125a2:	f7ee fac7 	bl	8000b34 <__aeabi_dcmpge>
 80125a6:	9e01      	ldr	r6, [sp, #4]
 80125a8:	4637      	mov	r7, r6
 80125aa:	2800      	cmp	r0, #0
 80125ac:	f040 8243 	bne.w	8012a36 <_dtoa_r+0x956>
 80125b0:	9d00      	ldr	r5, [sp, #0]
 80125b2:	2331      	movs	r3, #49	; 0x31
 80125b4:	f805 3b01 	strb.w	r3, [r5], #1
 80125b8:	f10a 0a01 	add.w	sl, sl, #1
 80125bc:	e23f      	b.n	8012a3e <_dtoa_r+0x95e>
 80125be:	07f2      	lsls	r2, r6, #31
 80125c0:	d505      	bpl.n	80125ce <_dtoa_r+0x4ee>
 80125c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125c6:	f7ee f82f 	bl	8000628 <__aeabi_dmul>
 80125ca:	3501      	adds	r5, #1
 80125cc:	2301      	movs	r3, #1
 80125ce:	1076      	asrs	r6, r6, #1
 80125d0:	3708      	adds	r7, #8
 80125d2:	e76c      	b.n	80124ae <_dtoa_r+0x3ce>
 80125d4:	2502      	movs	r5, #2
 80125d6:	e76f      	b.n	80124b8 <_dtoa_r+0x3d8>
 80125d8:	9b01      	ldr	r3, [sp, #4]
 80125da:	f8cd a01c 	str.w	sl, [sp, #28]
 80125de:	930c      	str	r3, [sp, #48]	; 0x30
 80125e0:	e78d      	b.n	80124fe <_dtoa_r+0x41e>
 80125e2:	9900      	ldr	r1, [sp, #0]
 80125e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80125e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125e8:	4b4e      	ldr	r3, [pc, #312]	; (8012724 <_dtoa_r+0x644>)
 80125ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125ee:	4401      	add	r1, r0
 80125f0:	9102      	str	r1, [sp, #8]
 80125f2:	9908      	ldr	r1, [sp, #32]
 80125f4:	eeb0 8a47 	vmov.f32	s16, s14
 80125f8:	eef0 8a67 	vmov.f32	s17, s15
 80125fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012604:	2900      	cmp	r1, #0
 8012606:	d045      	beq.n	8012694 <_dtoa_r+0x5b4>
 8012608:	494c      	ldr	r1, [pc, #304]	; (801273c <_dtoa_r+0x65c>)
 801260a:	2000      	movs	r0, #0
 801260c:	f7ee f936 	bl	800087c <__aeabi_ddiv>
 8012610:	ec53 2b18 	vmov	r2, r3, d8
 8012614:	f7ed fe50 	bl	80002b8 <__aeabi_dsub>
 8012618:	9d00      	ldr	r5, [sp, #0]
 801261a:	ec41 0b18 	vmov	d8, r0, r1
 801261e:	4639      	mov	r1, r7
 8012620:	4630      	mov	r0, r6
 8012622:	f7ee fab1 	bl	8000b88 <__aeabi_d2iz>
 8012626:	900c      	str	r0, [sp, #48]	; 0x30
 8012628:	f7ed ff94 	bl	8000554 <__aeabi_i2d>
 801262c:	4602      	mov	r2, r0
 801262e:	460b      	mov	r3, r1
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ed fe40 	bl	80002b8 <__aeabi_dsub>
 8012638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801263a:	3330      	adds	r3, #48	; 0x30
 801263c:	f805 3b01 	strb.w	r3, [r5], #1
 8012640:	ec53 2b18 	vmov	r2, r3, d8
 8012644:	4606      	mov	r6, r0
 8012646:	460f      	mov	r7, r1
 8012648:	f7ee fa60 	bl	8000b0c <__aeabi_dcmplt>
 801264c:	2800      	cmp	r0, #0
 801264e:	d165      	bne.n	801271c <_dtoa_r+0x63c>
 8012650:	4632      	mov	r2, r6
 8012652:	463b      	mov	r3, r7
 8012654:	4935      	ldr	r1, [pc, #212]	; (801272c <_dtoa_r+0x64c>)
 8012656:	2000      	movs	r0, #0
 8012658:	f7ed fe2e 	bl	80002b8 <__aeabi_dsub>
 801265c:	ec53 2b18 	vmov	r2, r3, d8
 8012660:	f7ee fa54 	bl	8000b0c <__aeabi_dcmplt>
 8012664:	2800      	cmp	r0, #0
 8012666:	f040 80b9 	bne.w	80127dc <_dtoa_r+0x6fc>
 801266a:	9b02      	ldr	r3, [sp, #8]
 801266c:	429d      	cmp	r5, r3
 801266e:	f43f af75 	beq.w	801255c <_dtoa_r+0x47c>
 8012672:	4b2f      	ldr	r3, [pc, #188]	; (8012730 <_dtoa_r+0x650>)
 8012674:	ec51 0b18 	vmov	r0, r1, d8
 8012678:	2200      	movs	r2, #0
 801267a:	f7ed ffd5 	bl	8000628 <__aeabi_dmul>
 801267e:	4b2c      	ldr	r3, [pc, #176]	; (8012730 <_dtoa_r+0x650>)
 8012680:	ec41 0b18 	vmov	d8, r0, r1
 8012684:	2200      	movs	r2, #0
 8012686:	4630      	mov	r0, r6
 8012688:	4639      	mov	r1, r7
 801268a:	f7ed ffcd 	bl	8000628 <__aeabi_dmul>
 801268e:	4606      	mov	r6, r0
 8012690:	460f      	mov	r7, r1
 8012692:	e7c4      	b.n	801261e <_dtoa_r+0x53e>
 8012694:	ec51 0b17 	vmov	r0, r1, d7
 8012698:	f7ed ffc6 	bl	8000628 <__aeabi_dmul>
 801269c:	9b02      	ldr	r3, [sp, #8]
 801269e:	9d00      	ldr	r5, [sp, #0]
 80126a0:	930c      	str	r3, [sp, #48]	; 0x30
 80126a2:	ec41 0b18 	vmov	d8, r0, r1
 80126a6:	4639      	mov	r1, r7
 80126a8:	4630      	mov	r0, r6
 80126aa:	f7ee fa6d 	bl	8000b88 <__aeabi_d2iz>
 80126ae:	9011      	str	r0, [sp, #68]	; 0x44
 80126b0:	f7ed ff50 	bl	8000554 <__aeabi_i2d>
 80126b4:	4602      	mov	r2, r0
 80126b6:	460b      	mov	r3, r1
 80126b8:	4630      	mov	r0, r6
 80126ba:	4639      	mov	r1, r7
 80126bc:	f7ed fdfc 	bl	80002b8 <__aeabi_dsub>
 80126c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126c2:	3330      	adds	r3, #48	; 0x30
 80126c4:	f805 3b01 	strb.w	r3, [r5], #1
 80126c8:	9b02      	ldr	r3, [sp, #8]
 80126ca:	429d      	cmp	r5, r3
 80126cc:	4606      	mov	r6, r0
 80126ce:	460f      	mov	r7, r1
 80126d0:	f04f 0200 	mov.w	r2, #0
 80126d4:	d134      	bne.n	8012740 <_dtoa_r+0x660>
 80126d6:	4b19      	ldr	r3, [pc, #100]	; (801273c <_dtoa_r+0x65c>)
 80126d8:	ec51 0b18 	vmov	r0, r1, d8
 80126dc:	f7ed fdee 	bl	80002bc <__adddf3>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	4630      	mov	r0, r6
 80126e6:	4639      	mov	r1, r7
 80126e8:	f7ee fa2e 	bl	8000b48 <__aeabi_dcmpgt>
 80126ec:	2800      	cmp	r0, #0
 80126ee:	d175      	bne.n	80127dc <_dtoa_r+0x6fc>
 80126f0:	ec53 2b18 	vmov	r2, r3, d8
 80126f4:	4911      	ldr	r1, [pc, #68]	; (801273c <_dtoa_r+0x65c>)
 80126f6:	2000      	movs	r0, #0
 80126f8:	f7ed fdde 	bl	80002b8 <__aeabi_dsub>
 80126fc:	4602      	mov	r2, r0
 80126fe:	460b      	mov	r3, r1
 8012700:	4630      	mov	r0, r6
 8012702:	4639      	mov	r1, r7
 8012704:	f7ee fa02 	bl	8000b0c <__aeabi_dcmplt>
 8012708:	2800      	cmp	r0, #0
 801270a:	f43f af27 	beq.w	801255c <_dtoa_r+0x47c>
 801270e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012710:	1e6b      	subs	r3, r5, #1
 8012712:	930c      	str	r3, [sp, #48]	; 0x30
 8012714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012718:	2b30      	cmp	r3, #48	; 0x30
 801271a:	d0f8      	beq.n	801270e <_dtoa_r+0x62e>
 801271c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012720:	e04a      	b.n	80127b8 <_dtoa_r+0x6d8>
 8012722:	bf00      	nop
 8012724:	08028b60 	.word	0x08028b60
 8012728:	08028b38 	.word	0x08028b38
 801272c:	3ff00000 	.word	0x3ff00000
 8012730:	40240000 	.word	0x40240000
 8012734:	401c0000 	.word	0x401c0000
 8012738:	40140000 	.word	0x40140000
 801273c:	3fe00000 	.word	0x3fe00000
 8012740:	4baf      	ldr	r3, [pc, #700]	; (8012a00 <_dtoa_r+0x920>)
 8012742:	f7ed ff71 	bl	8000628 <__aeabi_dmul>
 8012746:	4606      	mov	r6, r0
 8012748:	460f      	mov	r7, r1
 801274a:	e7ac      	b.n	80126a6 <_dtoa_r+0x5c6>
 801274c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012750:	9d00      	ldr	r5, [sp, #0]
 8012752:	4642      	mov	r2, r8
 8012754:	464b      	mov	r3, r9
 8012756:	4630      	mov	r0, r6
 8012758:	4639      	mov	r1, r7
 801275a:	f7ee f88f 	bl	800087c <__aeabi_ddiv>
 801275e:	f7ee fa13 	bl	8000b88 <__aeabi_d2iz>
 8012762:	9002      	str	r0, [sp, #8]
 8012764:	f7ed fef6 	bl	8000554 <__aeabi_i2d>
 8012768:	4642      	mov	r2, r8
 801276a:	464b      	mov	r3, r9
 801276c:	f7ed ff5c 	bl	8000628 <__aeabi_dmul>
 8012770:	4602      	mov	r2, r0
 8012772:	460b      	mov	r3, r1
 8012774:	4630      	mov	r0, r6
 8012776:	4639      	mov	r1, r7
 8012778:	f7ed fd9e 	bl	80002b8 <__aeabi_dsub>
 801277c:	9e02      	ldr	r6, [sp, #8]
 801277e:	9f01      	ldr	r7, [sp, #4]
 8012780:	3630      	adds	r6, #48	; 0x30
 8012782:	f805 6b01 	strb.w	r6, [r5], #1
 8012786:	9e00      	ldr	r6, [sp, #0]
 8012788:	1bae      	subs	r6, r5, r6
 801278a:	42b7      	cmp	r7, r6
 801278c:	4602      	mov	r2, r0
 801278e:	460b      	mov	r3, r1
 8012790:	d137      	bne.n	8012802 <_dtoa_r+0x722>
 8012792:	f7ed fd93 	bl	80002bc <__adddf3>
 8012796:	4642      	mov	r2, r8
 8012798:	464b      	mov	r3, r9
 801279a:	4606      	mov	r6, r0
 801279c:	460f      	mov	r7, r1
 801279e:	f7ee f9d3 	bl	8000b48 <__aeabi_dcmpgt>
 80127a2:	b9c8      	cbnz	r0, 80127d8 <_dtoa_r+0x6f8>
 80127a4:	4642      	mov	r2, r8
 80127a6:	464b      	mov	r3, r9
 80127a8:	4630      	mov	r0, r6
 80127aa:	4639      	mov	r1, r7
 80127ac:	f7ee f9a4 	bl	8000af8 <__aeabi_dcmpeq>
 80127b0:	b110      	cbz	r0, 80127b8 <_dtoa_r+0x6d8>
 80127b2:	9b02      	ldr	r3, [sp, #8]
 80127b4:	07d9      	lsls	r1, r3, #31
 80127b6:	d40f      	bmi.n	80127d8 <_dtoa_r+0x6f8>
 80127b8:	4620      	mov	r0, r4
 80127ba:	4659      	mov	r1, fp
 80127bc:	f000 fe6a 	bl	8013494 <_Bfree>
 80127c0:	2300      	movs	r3, #0
 80127c2:	702b      	strb	r3, [r5, #0]
 80127c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127c6:	f10a 0001 	add.w	r0, sl, #1
 80127ca:	6018      	str	r0, [r3, #0]
 80127cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f43f acd8 	beq.w	8012184 <_dtoa_r+0xa4>
 80127d4:	601d      	str	r5, [r3, #0]
 80127d6:	e4d5      	b.n	8012184 <_dtoa_r+0xa4>
 80127d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80127dc:	462b      	mov	r3, r5
 80127de:	461d      	mov	r5, r3
 80127e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127e4:	2a39      	cmp	r2, #57	; 0x39
 80127e6:	d108      	bne.n	80127fa <_dtoa_r+0x71a>
 80127e8:	9a00      	ldr	r2, [sp, #0]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d1f7      	bne.n	80127de <_dtoa_r+0x6fe>
 80127ee:	9a07      	ldr	r2, [sp, #28]
 80127f0:	9900      	ldr	r1, [sp, #0]
 80127f2:	3201      	adds	r2, #1
 80127f4:	9207      	str	r2, [sp, #28]
 80127f6:	2230      	movs	r2, #48	; 0x30
 80127f8:	700a      	strb	r2, [r1, #0]
 80127fa:	781a      	ldrb	r2, [r3, #0]
 80127fc:	3201      	adds	r2, #1
 80127fe:	701a      	strb	r2, [r3, #0]
 8012800:	e78c      	b.n	801271c <_dtoa_r+0x63c>
 8012802:	4b7f      	ldr	r3, [pc, #508]	; (8012a00 <_dtoa_r+0x920>)
 8012804:	2200      	movs	r2, #0
 8012806:	f7ed ff0f 	bl	8000628 <__aeabi_dmul>
 801280a:	2200      	movs	r2, #0
 801280c:	2300      	movs	r3, #0
 801280e:	4606      	mov	r6, r0
 8012810:	460f      	mov	r7, r1
 8012812:	f7ee f971 	bl	8000af8 <__aeabi_dcmpeq>
 8012816:	2800      	cmp	r0, #0
 8012818:	d09b      	beq.n	8012752 <_dtoa_r+0x672>
 801281a:	e7cd      	b.n	80127b8 <_dtoa_r+0x6d8>
 801281c:	9a08      	ldr	r2, [sp, #32]
 801281e:	2a00      	cmp	r2, #0
 8012820:	f000 80c4 	beq.w	80129ac <_dtoa_r+0x8cc>
 8012824:	9a05      	ldr	r2, [sp, #20]
 8012826:	2a01      	cmp	r2, #1
 8012828:	f300 80a8 	bgt.w	801297c <_dtoa_r+0x89c>
 801282c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801282e:	2a00      	cmp	r2, #0
 8012830:	f000 80a0 	beq.w	8012974 <_dtoa_r+0x894>
 8012834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012838:	9e06      	ldr	r6, [sp, #24]
 801283a:	4645      	mov	r5, r8
 801283c:	9a04      	ldr	r2, [sp, #16]
 801283e:	2101      	movs	r1, #1
 8012840:	441a      	add	r2, r3
 8012842:	4620      	mov	r0, r4
 8012844:	4498      	add	r8, r3
 8012846:	9204      	str	r2, [sp, #16]
 8012848:	f000 ff2a 	bl	80136a0 <__i2b>
 801284c:	4607      	mov	r7, r0
 801284e:	2d00      	cmp	r5, #0
 8012850:	dd0b      	ble.n	801286a <_dtoa_r+0x78a>
 8012852:	9b04      	ldr	r3, [sp, #16]
 8012854:	2b00      	cmp	r3, #0
 8012856:	dd08      	ble.n	801286a <_dtoa_r+0x78a>
 8012858:	42ab      	cmp	r3, r5
 801285a:	9a04      	ldr	r2, [sp, #16]
 801285c:	bfa8      	it	ge
 801285e:	462b      	movge	r3, r5
 8012860:	eba8 0803 	sub.w	r8, r8, r3
 8012864:	1aed      	subs	r5, r5, r3
 8012866:	1ad3      	subs	r3, r2, r3
 8012868:	9304      	str	r3, [sp, #16]
 801286a:	9b06      	ldr	r3, [sp, #24]
 801286c:	b1fb      	cbz	r3, 80128ae <_dtoa_r+0x7ce>
 801286e:	9b08      	ldr	r3, [sp, #32]
 8012870:	2b00      	cmp	r3, #0
 8012872:	f000 809f 	beq.w	80129b4 <_dtoa_r+0x8d4>
 8012876:	2e00      	cmp	r6, #0
 8012878:	dd11      	ble.n	801289e <_dtoa_r+0x7be>
 801287a:	4639      	mov	r1, r7
 801287c:	4632      	mov	r2, r6
 801287e:	4620      	mov	r0, r4
 8012880:	f000 ffca 	bl	8013818 <__pow5mult>
 8012884:	465a      	mov	r2, fp
 8012886:	4601      	mov	r1, r0
 8012888:	4607      	mov	r7, r0
 801288a:	4620      	mov	r0, r4
 801288c:	f000 ff1e 	bl	80136cc <__multiply>
 8012890:	4659      	mov	r1, fp
 8012892:	9007      	str	r0, [sp, #28]
 8012894:	4620      	mov	r0, r4
 8012896:	f000 fdfd 	bl	8013494 <_Bfree>
 801289a:	9b07      	ldr	r3, [sp, #28]
 801289c:	469b      	mov	fp, r3
 801289e:	9b06      	ldr	r3, [sp, #24]
 80128a0:	1b9a      	subs	r2, r3, r6
 80128a2:	d004      	beq.n	80128ae <_dtoa_r+0x7ce>
 80128a4:	4659      	mov	r1, fp
 80128a6:	4620      	mov	r0, r4
 80128a8:	f000 ffb6 	bl	8013818 <__pow5mult>
 80128ac:	4683      	mov	fp, r0
 80128ae:	2101      	movs	r1, #1
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fef5 	bl	80136a0 <__i2b>
 80128b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	4606      	mov	r6, r0
 80128bc:	dd7c      	ble.n	80129b8 <_dtoa_r+0x8d8>
 80128be:	461a      	mov	r2, r3
 80128c0:	4601      	mov	r1, r0
 80128c2:	4620      	mov	r0, r4
 80128c4:	f000 ffa8 	bl	8013818 <__pow5mult>
 80128c8:	9b05      	ldr	r3, [sp, #20]
 80128ca:	2b01      	cmp	r3, #1
 80128cc:	4606      	mov	r6, r0
 80128ce:	dd76      	ble.n	80129be <_dtoa_r+0x8de>
 80128d0:	2300      	movs	r3, #0
 80128d2:	9306      	str	r3, [sp, #24]
 80128d4:	6933      	ldr	r3, [r6, #16]
 80128d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80128da:	6918      	ldr	r0, [r3, #16]
 80128dc:	f000 fe90 	bl	8013600 <__hi0bits>
 80128e0:	f1c0 0020 	rsb	r0, r0, #32
 80128e4:	9b04      	ldr	r3, [sp, #16]
 80128e6:	4418      	add	r0, r3
 80128e8:	f010 001f 	ands.w	r0, r0, #31
 80128ec:	f000 8086 	beq.w	80129fc <_dtoa_r+0x91c>
 80128f0:	f1c0 0320 	rsb	r3, r0, #32
 80128f4:	2b04      	cmp	r3, #4
 80128f6:	dd7f      	ble.n	80129f8 <_dtoa_r+0x918>
 80128f8:	f1c0 001c 	rsb	r0, r0, #28
 80128fc:	9b04      	ldr	r3, [sp, #16]
 80128fe:	4403      	add	r3, r0
 8012900:	4480      	add	r8, r0
 8012902:	4405      	add	r5, r0
 8012904:	9304      	str	r3, [sp, #16]
 8012906:	f1b8 0f00 	cmp.w	r8, #0
 801290a:	dd05      	ble.n	8012918 <_dtoa_r+0x838>
 801290c:	4659      	mov	r1, fp
 801290e:	4642      	mov	r2, r8
 8012910:	4620      	mov	r0, r4
 8012912:	f000 ffdb 	bl	80138cc <__lshift>
 8012916:	4683      	mov	fp, r0
 8012918:	9b04      	ldr	r3, [sp, #16]
 801291a:	2b00      	cmp	r3, #0
 801291c:	dd05      	ble.n	801292a <_dtoa_r+0x84a>
 801291e:	4631      	mov	r1, r6
 8012920:	461a      	mov	r2, r3
 8012922:	4620      	mov	r0, r4
 8012924:	f000 ffd2 	bl	80138cc <__lshift>
 8012928:	4606      	mov	r6, r0
 801292a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801292c:	2b00      	cmp	r3, #0
 801292e:	d069      	beq.n	8012a04 <_dtoa_r+0x924>
 8012930:	4631      	mov	r1, r6
 8012932:	4658      	mov	r0, fp
 8012934:	f001 f836 	bl	80139a4 <__mcmp>
 8012938:	2800      	cmp	r0, #0
 801293a:	da63      	bge.n	8012a04 <_dtoa_r+0x924>
 801293c:	2300      	movs	r3, #0
 801293e:	4659      	mov	r1, fp
 8012940:	220a      	movs	r2, #10
 8012942:	4620      	mov	r0, r4
 8012944:	f000 fdc8 	bl	80134d8 <__multadd>
 8012948:	9b08      	ldr	r3, [sp, #32]
 801294a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801294e:	4683      	mov	fp, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	f000 818f 	beq.w	8012c74 <_dtoa_r+0xb94>
 8012956:	4639      	mov	r1, r7
 8012958:	2300      	movs	r3, #0
 801295a:	220a      	movs	r2, #10
 801295c:	4620      	mov	r0, r4
 801295e:	f000 fdbb 	bl	80134d8 <__multadd>
 8012962:	f1b9 0f00 	cmp.w	r9, #0
 8012966:	4607      	mov	r7, r0
 8012968:	f300 808e 	bgt.w	8012a88 <_dtoa_r+0x9a8>
 801296c:	9b05      	ldr	r3, [sp, #20]
 801296e:	2b02      	cmp	r3, #2
 8012970:	dc50      	bgt.n	8012a14 <_dtoa_r+0x934>
 8012972:	e089      	b.n	8012a88 <_dtoa_r+0x9a8>
 8012974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801297a:	e75d      	b.n	8012838 <_dtoa_r+0x758>
 801297c:	9b01      	ldr	r3, [sp, #4]
 801297e:	1e5e      	subs	r6, r3, #1
 8012980:	9b06      	ldr	r3, [sp, #24]
 8012982:	42b3      	cmp	r3, r6
 8012984:	bfbf      	itttt	lt
 8012986:	9b06      	ldrlt	r3, [sp, #24]
 8012988:	9606      	strlt	r6, [sp, #24]
 801298a:	1af2      	sublt	r2, r6, r3
 801298c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801298e:	bfb6      	itet	lt
 8012990:	189b      	addlt	r3, r3, r2
 8012992:	1b9e      	subge	r6, r3, r6
 8012994:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012996:	9b01      	ldr	r3, [sp, #4]
 8012998:	bfb8      	it	lt
 801299a:	2600      	movlt	r6, #0
 801299c:	2b00      	cmp	r3, #0
 801299e:	bfb5      	itete	lt
 80129a0:	eba8 0503 	sublt.w	r5, r8, r3
 80129a4:	9b01      	ldrge	r3, [sp, #4]
 80129a6:	2300      	movlt	r3, #0
 80129a8:	4645      	movge	r5, r8
 80129aa:	e747      	b.n	801283c <_dtoa_r+0x75c>
 80129ac:	9e06      	ldr	r6, [sp, #24]
 80129ae:	9f08      	ldr	r7, [sp, #32]
 80129b0:	4645      	mov	r5, r8
 80129b2:	e74c      	b.n	801284e <_dtoa_r+0x76e>
 80129b4:	9a06      	ldr	r2, [sp, #24]
 80129b6:	e775      	b.n	80128a4 <_dtoa_r+0x7c4>
 80129b8:	9b05      	ldr	r3, [sp, #20]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	dc18      	bgt.n	80129f0 <_dtoa_r+0x910>
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	b9b3      	cbnz	r3, 80129f0 <_dtoa_r+0x910>
 80129c2:	9b03      	ldr	r3, [sp, #12]
 80129c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129c8:	b9a3      	cbnz	r3, 80129f4 <_dtoa_r+0x914>
 80129ca:	9b03      	ldr	r3, [sp, #12]
 80129cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129d0:	0d1b      	lsrs	r3, r3, #20
 80129d2:	051b      	lsls	r3, r3, #20
 80129d4:	b12b      	cbz	r3, 80129e2 <_dtoa_r+0x902>
 80129d6:	9b04      	ldr	r3, [sp, #16]
 80129d8:	3301      	adds	r3, #1
 80129da:	9304      	str	r3, [sp, #16]
 80129dc:	f108 0801 	add.w	r8, r8, #1
 80129e0:	2301      	movs	r3, #1
 80129e2:	9306      	str	r3, [sp, #24]
 80129e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f47f af74 	bne.w	80128d4 <_dtoa_r+0x7f4>
 80129ec:	2001      	movs	r0, #1
 80129ee:	e779      	b.n	80128e4 <_dtoa_r+0x804>
 80129f0:	2300      	movs	r3, #0
 80129f2:	e7f6      	b.n	80129e2 <_dtoa_r+0x902>
 80129f4:	9b02      	ldr	r3, [sp, #8]
 80129f6:	e7f4      	b.n	80129e2 <_dtoa_r+0x902>
 80129f8:	d085      	beq.n	8012906 <_dtoa_r+0x826>
 80129fa:	4618      	mov	r0, r3
 80129fc:	301c      	adds	r0, #28
 80129fe:	e77d      	b.n	80128fc <_dtoa_r+0x81c>
 8012a00:	40240000 	.word	0x40240000
 8012a04:	9b01      	ldr	r3, [sp, #4]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	dc38      	bgt.n	8012a7c <_dtoa_r+0x99c>
 8012a0a:	9b05      	ldr	r3, [sp, #20]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	dd35      	ble.n	8012a7c <_dtoa_r+0x99c>
 8012a10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a14:	f1b9 0f00 	cmp.w	r9, #0
 8012a18:	d10d      	bne.n	8012a36 <_dtoa_r+0x956>
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	464b      	mov	r3, r9
 8012a1e:	2205      	movs	r2, #5
 8012a20:	4620      	mov	r0, r4
 8012a22:	f000 fd59 	bl	80134d8 <__multadd>
 8012a26:	4601      	mov	r1, r0
 8012a28:	4606      	mov	r6, r0
 8012a2a:	4658      	mov	r0, fp
 8012a2c:	f000 ffba 	bl	80139a4 <__mcmp>
 8012a30:	2800      	cmp	r0, #0
 8012a32:	f73f adbd 	bgt.w	80125b0 <_dtoa_r+0x4d0>
 8012a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a38:	9d00      	ldr	r5, [sp, #0]
 8012a3a:	ea6f 0a03 	mvn.w	sl, r3
 8012a3e:	f04f 0800 	mov.w	r8, #0
 8012a42:	4631      	mov	r1, r6
 8012a44:	4620      	mov	r0, r4
 8012a46:	f000 fd25 	bl	8013494 <_Bfree>
 8012a4a:	2f00      	cmp	r7, #0
 8012a4c:	f43f aeb4 	beq.w	80127b8 <_dtoa_r+0x6d8>
 8012a50:	f1b8 0f00 	cmp.w	r8, #0
 8012a54:	d005      	beq.n	8012a62 <_dtoa_r+0x982>
 8012a56:	45b8      	cmp	r8, r7
 8012a58:	d003      	beq.n	8012a62 <_dtoa_r+0x982>
 8012a5a:	4641      	mov	r1, r8
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f000 fd19 	bl	8013494 <_Bfree>
 8012a62:	4639      	mov	r1, r7
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 fd15 	bl	8013494 <_Bfree>
 8012a6a:	e6a5      	b.n	80127b8 <_dtoa_r+0x6d8>
 8012a6c:	2600      	movs	r6, #0
 8012a6e:	4637      	mov	r7, r6
 8012a70:	e7e1      	b.n	8012a36 <_dtoa_r+0x956>
 8012a72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012a78:	4637      	mov	r7, r6
 8012a7a:	e599      	b.n	80125b0 <_dtoa_r+0x4d0>
 8012a7c:	9b08      	ldr	r3, [sp, #32]
 8012a7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 80fd 	beq.w	8012c82 <_dtoa_r+0xba2>
 8012a88:	2d00      	cmp	r5, #0
 8012a8a:	dd05      	ble.n	8012a98 <_dtoa_r+0x9b8>
 8012a8c:	4639      	mov	r1, r7
 8012a8e:	462a      	mov	r2, r5
 8012a90:	4620      	mov	r0, r4
 8012a92:	f000 ff1b 	bl	80138cc <__lshift>
 8012a96:	4607      	mov	r7, r0
 8012a98:	9b06      	ldr	r3, [sp, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d05c      	beq.n	8012b58 <_dtoa_r+0xa78>
 8012a9e:	6879      	ldr	r1, [r7, #4]
 8012aa0:	4620      	mov	r0, r4
 8012aa2:	f000 fcb7 	bl	8013414 <_Balloc>
 8012aa6:	4605      	mov	r5, r0
 8012aa8:	b928      	cbnz	r0, 8012ab6 <_dtoa_r+0x9d6>
 8012aaa:	4b80      	ldr	r3, [pc, #512]	; (8012cac <_dtoa_r+0xbcc>)
 8012aac:	4602      	mov	r2, r0
 8012aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012ab2:	f7ff bb2e 	b.w	8012112 <_dtoa_r+0x32>
 8012ab6:	693a      	ldr	r2, [r7, #16]
 8012ab8:	3202      	adds	r2, #2
 8012aba:	0092      	lsls	r2, r2, #2
 8012abc:	f107 010c 	add.w	r1, r7, #12
 8012ac0:	300c      	adds	r0, #12
 8012ac2:	f000 fc99 	bl	80133f8 <memcpy>
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	4629      	mov	r1, r5
 8012aca:	4620      	mov	r0, r4
 8012acc:	f000 fefe 	bl	80138cc <__lshift>
 8012ad0:	9b00      	ldr	r3, [sp, #0]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	9301      	str	r3, [sp, #4]
 8012ad6:	9b00      	ldr	r3, [sp, #0]
 8012ad8:	444b      	add	r3, r9
 8012ada:	9307      	str	r3, [sp, #28]
 8012adc:	9b02      	ldr	r3, [sp, #8]
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	46b8      	mov	r8, r7
 8012ae4:	9306      	str	r3, [sp, #24]
 8012ae6:	4607      	mov	r7, r0
 8012ae8:	9b01      	ldr	r3, [sp, #4]
 8012aea:	4631      	mov	r1, r6
 8012aec:	3b01      	subs	r3, #1
 8012aee:	4658      	mov	r0, fp
 8012af0:	9302      	str	r3, [sp, #8]
 8012af2:	f7ff fa67 	bl	8011fc4 <quorem>
 8012af6:	4603      	mov	r3, r0
 8012af8:	3330      	adds	r3, #48	; 0x30
 8012afa:	9004      	str	r0, [sp, #16]
 8012afc:	4641      	mov	r1, r8
 8012afe:	4658      	mov	r0, fp
 8012b00:	9308      	str	r3, [sp, #32]
 8012b02:	f000 ff4f 	bl	80139a4 <__mcmp>
 8012b06:	463a      	mov	r2, r7
 8012b08:	4681      	mov	r9, r0
 8012b0a:	4631      	mov	r1, r6
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f000 ff65 	bl	80139dc <__mdiff>
 8012b12:	68c2      	ldr	r2, [r0, #12]
 8012b14:	9b08      	ldr	r3, [sp, #32]
 8012b16:	4605      	mov	r5, r0
 8012b18:	bb02      	cbnz	r2, 8012b5c <_dtoa_r+0xa7c>
 8012b1a:	4601      	mov	r1, r0
 8012b1c:	4658      	mov	r0, fp
 8012b1e:	f000 ff41 	bl	80139a4 <__mcmp>
 8012b22:	9b08      	ldr	r3, [sp, #32]
 8012b24:	4602      	mov	r2, r0
 8012b26:	4629      	mov	r1, r5
 8012b28:	4620      	mov	r0, r4
 8012b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012b2e:	f000 fcb1 	bl	8013494 <_Bfree>
 8012b32:	9b05      	ldr	r3, [sp, #20]
 8012b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b36:	9d01      	ldr	r5, [sp, #4]
 8012b38:	ea43 0102 	orr.w	r1, r3, r2
 8012b3c:	9b06      	ldr	r3, [sp, #24]
 8012b3e:	430b      	orrs	r3, r1
 8012b40:	9b08      	ldr	r3, [sp, #32]
 8012b42:	d10d      	bne.n	8012b60 <_dtoa_r+0xa80>
 8012b44:	2b39      	cmp	r3, #57	; 0x39
 8012b46:	d029      	beq.n	8012b9c <_dtoa_r+0xabc>
 8012b48:	f1b9 0f00 	cmp.w	r9, #0
 8012b4c:	dd01      	ble.n	8012b52 <_dtoa_r+0xa72>
 8012b4e:	9b04      	ldr	r3, [sp, #16]
 8012b50:	3331      	adds	r3, #49	; 0x31
 8012b52:	9a02      	ldr	r2, [sp, #8]
 8012b54:	7013      	strb	r3, [r2, #0]
 8012b56:	e774      	b.n	8012a42 <_dtoa_r+0x962>
 8012b58:	4638      	mov	r0, r7
 8012b5a:	e7b9      	b.n	8012ad0 <_dtoa_r+0x9f0>
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	e7e2      	b.n	8012b26 <_dtoa_r+0xa46>
 8012b60:	f1b9 0f00 	cmp.w	r9, #0
 8012b64:	db06      	blt.n	8012b74 <_dtoa_r+0xa94>
 8012b66:	9905      	ldr	r1, [sp, #20]
 8012b68:	ea41 0909 	orr.w	r9, r1, r9
 8012b6c:	9906      	ldr	r1, [sp, #24]
 8012b6e:	ea59 0101 	orrs.w	r1, r9, r1
 8012b72:	d120      	bne.n	8012bb6 <_dtoa_r+0xad6>
 8012b74:	2a00      	cmp	r2, #0
 8012b76:	ddec      	ble.n	8012b52 <_dtoa_r+0xa72>
 8012b78:	4659      	mov	r1, fp
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	f000 fea4 	bl	80138cc <__lshift>
 8012b84:	4631      	mov	r1, r6
 8012b86:	4683      	mov	fp, r0
 8012b88:	f000 ff0c 	bl	80139a4 <__mcmp>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	9b01      	ldr	r3, [sp, #4]
 8012b90:	dc02      	bgt.n	8012b98 <_dtoa_r+0xab8>
 8012b92:	d1de      	bne.n	8012b52 <_dtoa_r+0xa72>
 8012b94:	07da      	lsls	r2, r3, #31
 8012b96:	d5dc      	bpl.n	8012b52 <_dtoa_r+0xa72>
 8012b98:	2b39      	cmp	r3, #57	; 0x39
 8012b9a:	d1d8      	bne.n	8012b4e <_dtoa_r+0xa6e>
 8012b9c:	9a02      	ldr	r2, [sp, #8]
 8012b9e:	2339      	movs	r3, #57	; 0x39
 8012ba0:	7013      	strb	r3, [r2, #0]
 8012ba2:	462b      	mov	r3, r5
 8012ba4:	461d      	mov	r5, r3
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012bac:	2a39      	cmp	r2, #57	; 0x39
 8012bae:	d050      	beq.n	8012c52 <_dtoa_r+0xb72>
 8012bb0:	3201      	adds	r2, #1
 8012bb2:	701a      	strb	r2, [r3, #0]
 8012bb4:	e745      	b.n	8012a42 <_dtoa_r+0x962>
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	dd03      	ble.n	8012bc2 <_dtoa_r+0xae2>
 8012bba:	2b39      	cmp	r3, #57	; 0x39
 8012bbc:	d0ee      	beq.n	8012b9c <_dtoa_r+0xabc>
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	e7c7      	b.n	8012b52 <_dtoa_r+0xa72>
 8012bc2:	9a01      	ldr	r2, [sp, #4]
 8012bc4:	9907      	ldr	r1, [sp, #28]
 8012bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012bca:	428a      	cmp	r2, r1
 8012bcc:	d02a      	beq.n	8012c24 <_dtoa_r+0xb44>
 8012bce:	4659      	mov	r1, fp
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	220a      	movs	r2, #10
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	f000 fc7f 	bl	80134d8 <__multadd>
 8012bda:	45b8      	cmp	r8, r7
 8012bdc:	4683      	mov	fp, r0
 8012bde:	f04f 0300 	mov.w	r3, #0
 8012be2:	f04f 020a 	mov.w	r2, #10
 8012be6:	4641      	mov	r1, r8
 8012be8:	4620      	mov	r0, r4
 8012bea:	d107      	bne.n	8012bfc <_dtoa_r+0xb1c>
 8012bec:	f000 fc74 	bl	80134d8 <__multadd>
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	4607      	mov	r7, r0
 8012bf4:	9b01      	ldr	r3, [sp, #4]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	e775      	b.n	8012ae8 <_dtoa_r+0xa08>
 8012bfc:	f000 fc6c 	bl	80134d8 <__multadd>
 8012c00:	4639      	mov	r1, r7
 8012c02:	4680      	mov	r8, r0
 8012c04:	2300      	movs	r3, #0
 8012c06:	220a      	movs	r2, #10
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f000 fc65 	bl	80134d8 <__multadd>
 8012c0e:	4607      	mov	r7, r0
 8012c10:	e7f0      	b.n	8012bf4 <_dtoa_r+0xb14>
 8012c12:	f1b9 0f00 	cmp.w	r9, #0
 8012c16:	9a00      	ldr	r2, [sp, #0]
 8012c18:	bfcc      	ite	gt
 8012c1a:	464d      	movgt	r5, r9
 8012c1c:	2501      	movle	r5, #1
 8012c1e:	4415      	add	r5, r2
 8012c20:	f04f 0800 	mov.w	r8, #0
 8012c24:	4659      	mov	r1, fp
 8012c26:	2201      	movs	r2, #1
 8012c28:	4620      	mov	r0, r4
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	f000 fe4e 	bl	80138cc <__lshift>
 8012c30:	4631      	mov	r1, r6
 8012c32:	4683      	mov	fp, r0
 8012c34:	f000 feb6 	bl	80139a4 <__mcmp>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	dcb2      	bgt.n	8012ba2 <_dtoa_r+0xac2>
 8012c3c:	d102      	bne.n	8012c44 <_dtoa_r+0xb64>
 8012c3e:	9b01      	ldr	r3, [sp, #4]
 8012c40:	07db      	lsls	r3, r3, #31
 8012c42:	d4ae      	bmi.n	8012ba2 <_dtoa_r+0xac2>
 8012c44:	462b      	mov	r3, r5
 8012c46:	461d      	mov	r5, r3
 8012c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c4c:	2a30      	cmp	r2, #48	; 0x30
 8012c4e:	d0fa      	beq.n	8012c46 <_dtoa_r+0xb66>
 8012c50:	e6f7      	b.n	8012a42 <_dtoa_r+0x962>
 8012c52:	9a00      	ldr	r2, [sp, #0]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d1a5      	bne.n	8012ba4 <_dtoa_r+0xac4>
 8012c58:	f10a 0a01 	add.w	sl, sl, #1
 8012c5c:	2331      	movs	r3, #49	; 0x31
 8012c5e:	e779      	b.n	8012b54 <_dtoa_r+0xa74>
 8012c60:	4b13      	ldr	r3, [pc, #76]	; (8012cb0 <_dtoa_r+0xbd0>)
 8012c62:	f7ff baaf 	b.w	80121c4 <_dtoa_r+0xe4>
 8012c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f47f aa86 	bne.w	801217a <_dtoa_r+0x9a>
 8012c6e:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <_dtoa_r+0xbd4>)
 8012c70:	f7ff baa8 	b.w	80121c4 <_dtoa_r+0xe4>
 8012c74:	f1b9 0f00 	cmp.w	r9, #0
 8012c78:	dc03      	bgt.n	8012c82 <_dtoa_r+0xba2>
 8012c7a:	9b05      	ldr	r3, [sp, #20]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	f73f aec9 	bgt.w	8012a14 <_dtoa_r+0x934>
 8012c82:	9d00      	ldr	r5, [sp, #0]
 8012c84:	4631      	mov	r1, r6
 8012c86:	4658      	mov	r0, fp
 8012c88:	f7ff f99c 	bl	8011fc4 <quorem>
 8012c8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012c90:	f805 3b01 	strb.w	r3, [r5], #1
 8012c94:	9a00      	ldr	r2, [sp, #0]
 8012c96:	1aaa      	subs	r2, r5, r2
 8012c98:	4591      	cmp	r9, r2
 8012c9a:	ddba      	ble.n	8012c12 <_dtoa_r+0xb32>
 8012c9c:	4659      	mov	r1, fp
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	220a      	movs	r2, #10
 8012ca2:	4620      	mov	r0, r4
 8012ca4:	f000 fc18 	bl	80134d8 <__multadd>
 8012ca8:	4683      	mov	fp, r0
 8012caa:	e7eb      	b.n	8012c84 <_dtoa_r+0xba4>
 8012cac:	08028a49 	.word	0x08028a49
 8012cb0:	080287a8 	.word	0x080287a8
 8012cb4:	080289dd 	.word	0x080289dd

08012cb8 <fiprintf>:
 8012cb8:	b40e      	push	{r1, r2, r3}
 8012cba:	b503      	push	{r0, r1, lr}
 8012cbc:	4601      	mov	r1, r0
 8012cbe:	ab03      	add	r3, sp, #12
 8012cc0:	4805      	ldr	r0, [pc, #20]	; (8012cd8 <fiprintf+0x20>)
 8012cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cc6:	6800      	ldr	r0, [r0, #0]
 8012cc8:	9301      	str	r3, [sp, #4]
 8012cca:	f001 fa9d 	bl	8014208 <_vfiprintf_r>
 8012cce:	b002      	add	sp, #8
 8012cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cd4:	b003      	add	sp, #12
 8012cd6:	4770      	bx	lr
 8012cd8:	20000040 	.word	0x20000040

08012cdc <rshift>:
 8012cdc:	6903      	ldr	r3, [r0, #16]
 8012cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012cea:	f100 0414 	add.w	r4, r0, #20
 8012cee:	dd45      	ble.n	8012d7c <rshift+0xa0>
 8012cf0:	f011 011f 	ands.w	r1, r1, #31
 8012cf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012cf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012cfc:	d10c      	bne.n	8012d18 <rshift+0x3c>
 8012cfe:	f100 0710 	add.w	r7, r0, #16
 8012d02:	4629      	mov	r1, r5
 8012d04:	42b1      	cmp	r1, r6
 8012d06:	d334      	bcc.n	8012d72 <rshift+0x96>
 8012d08:	1a9b      	subs	r3, r3, r2
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	1eea      	subs	r2, r5, #3
 8012d0e:	4296      	cmp	r6, r2
 8012d10:	bf38      	it	cc
 8012d12:	2300      	movcc	r3, #0
 8012d14:	4423      	add	r3, r4
 8012d16:	e015      	b.n	8012d44 <rshift+0x68>
 8012d18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012d1c:	f1c1 0820 	rsb	r8, r1, #32
 8012d20:	40cf      	lsrs	r7, r1
 8012d22:	f105 0e04 	add.w	lr, r5, #4
 8012d26:	46a1      	mov	r9, r4
 8012d28:	4576      	cmp	r6, lr
 8012d2a:	46f4      	mov	ip, lr
 8012d2c:	d815      	bhi.n	8012d5a <rshift+0x7e>
 8012d2e:	1a9b      	subs	r3, r3, r2
 8012d30:	009a      	lsls	r2, r3, #2
 8012d32:	3a04      	subs	r2, #4
 8012d34:	3501      	adds	r5, #1
 8012d36:	42ae      	cmp	r6, r5
 8012d38:	bf38      	it	cc
 8012d3a:	2200      	movcc	r2, #0
 8012d3c:	18a3      	adds	r3, r4, r2
 8012d3e:	50a7      	str	r7, [r4, r2]
 8012d40:	b107      	cbz	r7, 8012d44 <rshift+0x68>
 8012d42:	3304      	adds	r3, #4
 8012d44:	1b1a      	subs	r2, r3, r4
 8012d46:	42a3      	cmp	r3, r4
 8012d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d4c:	bf08      	it	eq
 8012d4e:	2300      	moveq	r3, #0
 8012d50:	6102      	str	r2, [r0, #16]
 8012d52:	bf08      	it	eq
 8012d54:	6143      	streq	r3, [r0, #20]
 8012d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d5a:	f8dc c000 	ldr.w	ip, [ip]
 8012d5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012d62:	ea4c 0707 	orr.w	r7, ip, r7
 8012d66:	f849 7b04 	str.w	r7, [r9], #4
 8012d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d6e:	40cf      	lsrs	r7, r1
 8012d70:	e7da      	b.n	8012d28 <rshift+0x4c>
 8012d72:	f851 cb04 	ldr.w	ip, [r1], #4
 8012d76:	f847 cf04 	str.w	ip, [r7, #4]!
 8012d7a:	e7c3      	b.n	8012d04 <rshift+0x28>
 8012d7c:	4623      	mov	r3, r4
 8012d7e:	e7e1      	b.n	8012d44 <rshift+0x68>

08012d80 <__hexdig_fun>:
 8012d80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012d84:	2b09      	cmp	r3, #9
 8012d86:	d802      	bhi.n	8012d8e <__hexdig_fun+0xe>
 8012d88:	3820      	subs	r0, #32
 8012d8a:	b2c0      	uxtb	r0, r0
 8012d8c:	4770      	bx	lr
 8012d8e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012d92:	2b05      	cmp	r3, #5
 8012d94:	d801      	bhi.n	8012d9a <__hexdig_fun+0x1a>
 8012d96:	3847      	subs	r0, #71	; 0x47
 8012d98:	e7f7      	b.n	8012d8a <__hexdig_fun+0xa>
 8012d9a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012d9e:	2b05      	cmp	r3, #5
 8012da0:	d801      	bhi.n	8012da6 <__hexdig_fun+0x26>
 8012da2:	3827      	subs	r0, #39	; 0x27
 8012da4:	e7f1      	b.n	8012d8a <__hexdig_fun+0xa>
 8012da6:	2000      	movs	r0, #0
 8012da8:	4770      	bx	lr
	...

08012dac <__gethex>:
 8012dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	ed2d 8b02 	vpush	{d8}
 8012db4:	b089      	sub	sp, #36	; 0x24
 8012db6:	ee08 0a10 	vmov	s16, r0
 8012dba:	9304      	str	r3, [sp, #16]
 8012dbc:	4bbc      	ldr	r3, [pc, #752]	; (80130b0 <__gethex+0x304>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	9301      	str	r3, [sp, #4]
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	468b      	mov	fp, r1
 8012dc6:	4690      	mov	r8, r2
 8012dc8:	f7ed fa14 	bl	80001f4 <strlen>
 8012dcc:	9b01      	ldr	r3, [sp, #4]
 8012dce:	f8db 2000 	ldr.w	r2, [fp]
 8012dd2:	4403      	add	r3, r0
 8012dd4:	4682      	mov	sl, r0
 8012dd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012dda:	9305      	str	r3, [sp, #20]
 8012ddc:	1c93      	adds	r3, r2, #2
 8012dde:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012de2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012de6:	32fe      	adds	r2, #254	; 0xfe
 8012de8:	18d1      	adds	r1, r2, r3
 8012dea:	461f      	mov	r7, r3
 8012dec:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012df0:	9100      	str	r1, [sp, #0]
 8012df2:	2830      	cmp	r0, #48	; 0x30
 8012df4:	d0f8      	beq.n	8012de8 <__gethex+0x3c>
 8012df6:	f7ff ffc3 	bl	8012d80 <__hexdig_fun>
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	2800      	cmp	r0, #0
 8012dfe:	d13a      	bne.n	8012e76 <__gethex+0xca>
 8012e00:	9901      	ldr	r1, [sp, #4]
 8012e02:	4652      	mov	r2, sl
 8012e04:	4638      	mov	r0, r7
 8012e06:	f001 fb47 	bl	8014498 <strncmp>
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	d168      	bne.n	8012ee2 <__gethex+0x136>
 8012e10:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012e14:	eb07 060a 	add.w	r6, r7, sl
 8012e18:	f7ff ffb2 	bl	8012d80 <__hexdig_fun>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d062      	beq.n	8012ee6 <__gethex+0x13a>
 8012e20:	4633      	mov	r3, r6
 8012e22:	7818      	ldrb	r0, [r3, #0]
 8012e24:	2830      	cmp	r0, #48	; 0x30
 8012e26:	461f      	mov	r7, r3
 8012e28:	f103 0301 	add.w	r3, r3, #1
 8012e2c:	d0f9      	beq.n	8012e22 <__gethex+0x76>
 8012e2e:	f7ff ffa7 	bl	8012d80 <__hexdig_fun>
 8012e32:	2301      	movs	r3, #1
 8012e34:	fab0 f480 	clz	r4, r0
 8012e38:	0964      	lsrs	r4, r4, #5
 8012e3a:	4635      	mov	r5, r6
 8012e3c:	9300      	str	r3, [sp, #0]
 8012e3e:	463a      	mov	r2, r7
 8012e40:	4616      	mov	r6, r2
 8012e42:	3201      	adds	r2, #1
 8012e44:	7830      	ldrb	r0, [r6, #0]
 8012e46:	f7ff ff9b 	bl	8012d80 <__hexdig_fun>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	d1f8      	bne.n	8012e40 <__gethex+0x94>
 8012e4e:	9901      	ldr	r1, [sp, #4]
 8012e50:	4652      	mov	r2, sl
 8012e52:	4630      	mov	r0, r6
 8012e54:	f001 fb20 	bl	8014498 <strncmp>
 8012e58:	b980      	cbnz	r0, 8012e7c <__gethex+0xd0>
 8012e5a:	b94d      	cbnz	r5, 8012e70 <__gethex+0xc4>
 8012e5c:	eb06 050a 	add.w	r5, r6, sl
 8012e60:	462a      	mov	r2, r5
 8012e62:	4616      	mov	r6, r2
 8012e64:	3201      	adds	r2, #1
 8012e66:	7830      	ldrb	r0, [r6, #0]
 8012e68:	f7ff ff8a 	bl	8012d80 <__hexdig_fun>
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	d1f8      	bne.n	8012e62 <__gethex+0xb6>
 8012e70:	1bad      	subs	r5, r5, r6
 8012e72:	00ad      	lsls	r5, r5, #2
 8012e74:	e004      	b.n	8012e80 <__gethex+0xd4>
 8012e76:	2400      	movs	r4, #0
 8012e78:	4625      	mov	r5, r4
 8012e7a:	e7e0      	b.n	8012e3e <__gethex+0x92>
 8012e7c:	2d00      	cmp	r5, #0
 8012e7e:	d1f7      	bne.n	8012e70 <__gethex+0xc4>
 8012e80:	7833      	ldrb	r3, [r6, #0]
 8012e82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012e86:	2b50      	cmp	r3, #80	; 0x50
 8012e88:	d13b      	bne.n	8012f02 <__gethex+0x156>
 8012e8a:	7873      	ldrb	r3, [r6, #1]
 8012e8c:	2b2b      	cmp	r3, #43	; 0x2b
 8012e8e:	d02c      	beq.n	8012eea <__gethex+0x13e>
 8012e90:	2b2d      	cmp	r3, #45	; 0x2d
 8012e92:	d02e      	beq.n	8012ef2 <__gethex+0x146>
 8012e94:	1c71      	adds	r1, r6, #1
 8012e96:	f04f 0900 	mov.w	r9, #0
 8012e9a:	7808      	ldrb	r0, [r1, #0]
 8012e9c:	f7ff ff70 	bl	8012d80 <__hexdig_fun>
 8012ea0:	1e43      	subs	r3, r0, #1
 8012ea2:	b2db      	uxtb	r3, r3
 8012ea4:	2b18      	cmp	r3, #24
 8012ea6:	d82c      	bhi.n	8012f02 <__gethex+0x156>
 8012ea8:	f1a0 0210 	sub.w	r2, r0, #16
 8012eac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012eb0:	f7ff ff66 	bl	8012d80 <__hexdig_fun>
 8012eb4:	1e43      	subs	r3, r0, #1
 8012eb6:	b2db      	uxtb	r3, r3
 8012eb8:	2b18      	cmp	r3, #24
 8012eba:	d91d      	bls.n	8012ef8 <__gethex+0x14c>
 8012ebc:	f1b9 0f00 	cmp.w	r9, #0
 8012ec0:	d000      	beq.n	8012ec4 <__gethex+0x118>
 8012ec2:	4252      	negs	r2, r2
 8012ec4:	4415      	add	r5, r2
 8012ec6:	f8cb 1000 	str.w	r1, [fp]
 8012eca:	b1e4      	cbz	r4, 8012f06 <__gethex+0x15a>
 8012ecc:	9b00      	ldr	r3, [sp, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	bf14      	ite	ne
 8012ed2:	2700      	movne	r7, #0
 8012ed4:	2706      	moveq	r7, #6
 8012ed6:	4638      	mov	r0, r7
 8012ed8:	b009      	add	sp, #36	; 0x24
 8012eda:	ecbd 8b02 	vpop	{d8}
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	463e      	mov	r6, r7
 8012ee4:	4625      	mov	r5, r4
 8012ee6:	2401      	movs	r4, #1
 8012ee8:	e7ca      	b.n	8012e80 <__gethex+0xd4>
 8012eea:	f04f 0900 	mov.w	r9, #0
 8012eee:	1cb1      	adds	r1, r6, #2
 8012ef0:	e7d3      	b.n	8012e9a <__gethex+0xee>
 8012ef2:	f04f 0901 	mov.w	r9, #1
 8012ef6:	e7fa      	b.n	8012eee <__gethex+0x142>
 8012ef8:	230a      	movs	r3, #10
 8012efa:	fb03 0202 	mla	r2, r3, r2, r0
 8012efe:	3a10      	subs	r2, #16
 8012f00:	e7d4      	b.n	8012eac <__gethex+0x100>
 8012f02:	4631      	mov	r1, r6
 8012f04:	e7df      	b.n	8012ec6 <__gethex+0x11a>
 8012f06:	1bf3      	subs	r3, r6, r7
 8012f08:	3b01      	subs	r3, #1
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	2b07      	cmp	r3, #7
 8012f0e:	dc0b      	bgt.n	8012f28 <__gethex+0x17c>
 8012f10:	ee18 0a10 	vmov	r0, s16
 8012f14:	f000 fa7e 	bl	8013414 <_Balloc>
 8012f18:	4604      	mov	r4, r0
 8012f1a:	b940      	cbnz	r0, 8012f2e <__gethex+0x182>
 8012f1c:	4b65      	ldr	r3, [pc, #404]	; (80130b4 <__gethex+0x308>)
 8012f1e:	4602      	mov	r2, r0
 8012f20:	21de      	movs	r1, #222	; 0xde
 8012f22:	4865      	ldr	r0, [pc, #404]	; (80130b8 <__gethex+0x30c>)
 8012f24:	f7ff f830 	bl	8011f88 <__assert_func>
 8012f28:	3101      	adds	r1, #1
 8012f2a:	105b      	asrs	r3, r3, #1
 8012f2c:	e7ee      	b.n	8012f0c <__gethex+0x160>
 8012f2e:	f100 0914 	add.w	r9, r0, #20
 8012f32:	f04f 0b00 	mov.w	fp, #0
 8012f36:	f1ca 0301 	rsb	r3, sl, #1
 8012f3a:	f8cd 9008 	str.w	r9, [sp, #8]
 8012f3e:	f8cd b000 	str.w	fp, [sp]
 8012f42:	9306      	str	r3, [sp, #24]
 8012f44:	42b7      	cmp	r7, r6
 8012f46:	d340      	bcc.n	8012fca <__gethex+0x21e>
 8012f48:	9802      	ldr	r0, [sp, #8]
 8012f4a:	9b00      	ldr	r3, [sp, #0]
 8012f4c:	f840 3b04 	str.w	r3, [r0], #4
 8012f50:	eba0 0009 	sub.w	r0, r0, r9
 8012f54:	1080      	asrs	r0, r0, #2
 8012f56:	0146      	lsls	r6, r0, #5
 8012f58:	6120      	str	r0, [r4, #16]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 fb50 	bl	8013600 <__hi0bits>
 8012f60:	1a30      	subs	r0, r6, r0
 8012f62:	f8d8 6000 	ldr.w	r6, [r8]
 8012f66:	42b0      	cmp	r0, r6
 8012f68:	dd63      	ble.n	8013032 <__gethex+0x286>
 8012f6a:	1b87      	subs	r7, r0, r6
 8012f6c:	4639      	mov	r1, r7
 8012f6e:	4620      	mov	r0, r4
 8012f70:	f000 feea 	bl	8013d48 <__any_on>
 8012f74:	4682      	mov	sl, r0
 8012f76:	b1a8      	cbz	r0, 8012fa4 <__gethex+0x1f8>
 8012f78:	1e7b      	subs	r3, r7, #1
 8012f7a:	1159      	asrs	r1, r3, #5
 8012f7c:	f003 021f 	and.w	r2, r3, #31
 8012f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012f84:	f04f 0a01 	mov.w	sl, #1
 8012f88:	fa0a f202 	lsl.w	r2, sl, r2
 8012f8c:	420a      	tst	r2, r1
 8012f8e:	d009      	beq.n	8012fa4 <__gethex+0x1f8>
 8012f90:	4553      	cmp	r3, sl
 8012f92:	dd05      	ble.n	8012fa0 <__gethex+0x1f4>
 8012f94:	1eb9      	subs	r1, r7, #2
 8012f96:	4620      	mov	r0, r4
 8012f98:	f000 fed6 	bl	8013d48 <__any_on>
 8012f9c:	2800      	cmp	r0, #0
 8012f9e:	d145      	bne.n	801302c <__gethex+0x280>
 8012fa0:	f04f 0a02 	mov.w	sl, #2
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f7ff fe98 	bl	8012cdc <rshift>
 8012fac:	443d      	add	r5, r7
 8012fae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fb2:	42ab      	cmp	r3, r5
 8012fb4:	da4c      	bge.n	8013050 <__gethex+0x2a4>
 8012fb6:	ee18 0a10 	vmov	r0, s16
 8012fba:	4621      	mov	r1, r4
 8012fbc:	f000 fa6a 	bl	8013494 <_Bfree>
 8012fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	6013      	str	r3, [r2, #0]
 8012fc6:	27a3      	movs	r7, #163	; 0xa3
 8012fc8:	e785      	b.n	8012ed6 <__gethex+0x12a>
 8012fca:	1e73      	subs	r3, r6, #1
 8012fcc:	9a05      	ldr	r2, [sp, #20]
 8012fce:	9303      	str	r3, [sp, #12]
 8012fd0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012fd4:	4293      	cmp	r3, r2
 8012fd6:	d019      	beq.n	801300c <__gethex+0x260>
 8012fd8:	f1bb 0f20 	cmp.w	fp, #32
 8012fdc:	d107      	bne.n	8012fee <__gethex+0x242>
 8012fde:	9b02      	ldr	r3, [sp, #8]
 8012fe0:	9a00      	ldr	r2, [sp, #0]
 8012fe2:	f843 2b04 	str.w	r2, [r3], #4
 8012fe6:	9302      	str	r3, [sp, #8]
 8012fe8:	2300      	movs	r3, #0
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	469b      	mov	fp, r3
 8012fee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012ff2:	f7ff fec5 	bl	8012d80 <__hexdig_fun>
 8012ff6:	9b00      	ldr	r3, [sp, #0]
 8012ff8:	f000 000f 	and.w	r0, r0, #15
 8012ffc:	fa00 f00b 	lsl.w	r0, r0, fp
 8013000:	4303      	orrs	r3, r0
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	f10b 0b04 	add.w	fp, fp, #4
 8013008:	9b03      	ldr	r3, [sp, #12]
 801300a:	e00d      	b.n	8013028 <__gethex+0x27c>
 801300c:	9b03      	ldr	r3, [sp, #12]
 801300e:	9a06      	ldr	r2, [sp, #24]
 8013010:	4413      	add	r3, r2
 8013012:	42bb      	cmp	r3, r7
 8013014:	d3e0      	bcc.n	8012fd8 <__gethex+0x22c>
 8013016:	4618      	mov	r0, r3
 8013018:	9901      	ldr	r1, [sp, #4]
 801301a:	9307      	str	r3, [sp, #28]
 801301c:	4652      	mov	r2, sl
 801301e:	f001 fa3b 	bl	8014498 <strncmp>
 8013022:	9b07      	ldr	r3, [sp, #28]
 8013024:	2800      	cmp	r0, #0
 8013026:	d1d7      	bne.n	8012fd8 <__gethex+0x22c>
 8013028:	461e      	mov	r6, r3
 801302a:	e78b      	b.n	8012f44 <__gethex+0x198>
 801302c:	f04f 0a03 	mov.w	sl, #3
 8013030:	e7b8      	b.n	8012fa4 <__gethex+0x1f8>
 8013032:	da0a      	bge.n	801304a <__gethex+0x29e>
 8013034:	1a37      	subs	r7, r6, r0
 8013036:	4621      	mov	r1, r4
 8013038:	ee18 0a10 	vmov	r0, s16
 801303c:	463a      	mov	r2, r7
 801303e:	f000 fc45 	bl	80138cc <__lshift>
 8013042:	1bed      	subs	r5, r5, r7
 8013044:	4604      	mov	r4, r0
 8013046:	f100 0914 	add.w	r9, r0, #20
 801304a:	f04f 0a00 	mov.w	sl, #0
 801304e:	e7ae      	b.n	8012fae <__gethex+0x202>
 8013050:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013054:	42a8      	cmp	r0, r5
 8013056:	dd72      	ble.n	801313e <__gethex+0x392>
 8013058:	1b45      	subs	r5, r0, r5
 801305a:	42ae      	cmp	r6, r5
 801305c:	dc36      	bgt.n	80130cc <__gethex+0x320>
 801305e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013062:	2b02      	cmp	r3, #2
 8013064:	d02a      	beq.n	80130bc <__gethex+0x310>
 8013066:	2b03      	cmp	r3, #3
 8013068:	d02c      	beq.n	80130c4 <__gethex+0x318>
 801306a:	2b01      	cmp	r3, #1
 801306c:	d115      	bne.n	801309a <__gethex+0x2ee>
 801306e:	42ae      	cmp	r6, r5
 8013070:	d113      	bne.n	801309a <__gethex+0x2ee>
 8013072:	2e01      	cmp	r6, #1
 8013074:	d10b      	bne.n	801308e <__gethex+0x2e2>
 8013076:	9a04      	ldr	r2, [sp, #16]
 8013078:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801307c:	6013      	str	r3, [r2, #0]
 801307e:	2301      	movs	r3, #1
 8013080:	6123      	str	r3, [r4, #16]
 8013082:	f8c9 3000 	str.w	r3, [r9]
 8013086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013088:	2762      	movs	r7, #98	; 0x62
 801308a:	601c      	str	r4, [r3, #0]
 801308c:	e723      	b.n	8012ed6 <__gethex+0x12a>
 801308e:	1e71      	subs	r1, r6, #1
 8013090:	4620      	mov	r0, r4
 8013092:	f000 fe59 	bl	8013d48 <__any_on>
 8013096:	2800      	cmp	r0, #0
 8013098:	d1ed      	bne.n	8013076 <__gethex+0x2ca>
 801309a:	ee18 0a10 	vmov	r0, s16
 801309e:	4621      	mov	r1, r4
 80130a0:	f000 f9f8 	bl	8013494 <_Bfree>
 80130a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130a6:	2300      	movs	r3, #0
 80130a8:	6013      	str	r3, [r2, #0]
 80130aa:	2750      	movs	r7, #80	; 0x50
 80130ac:	e713      	b.n	8012ed6 <__gethex+0x12a>
 80130ae:	bf00      	nop
 80130b0:	08028ac4 	.word	0x08028ac4
 80130b4:	08028a49 	.word	0x08028a49
 80130b8:	08028a5a 	.word	0x08028a5a
 80130bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1eb      	bne.n	801309a <__gethex+0x2ee>
 80130c2:	e7d8      	b.n	8013076 <__gethex+0x2ca>
 80130c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d1d5      	bne.n	8013076 <__gethex+0x2ca>
 80130ca:	e7e6      	b.n	801309a <__gethex+0x2ee>
 80130cc:	1e6f      	subs	r7, r5, #1
 80130ce:	f1ba 0f00 	cmp.w	sl, #0
 80130d2:	d131      	bne.n	8013138 <__gethex+0x38c>
 80130d4:	b127      	cbz	r7, 80130e0 <__gethex+0x334>
 80130d6:	4639      	mov	r1, r7
 80130d8:	4620      	mov	r0, r4
 80130da:	f000 fe35 	bl	8013d48 <__any_on>
 80130de:	4682      	mov	sl, r0
 80130e0:	117b      	asrs	r3, r7, #5
 80130e2:	2101      	movs	r1, #1
 80130e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80130e8:	f007 071f 	and.w	r7, r7, #31
 80130ec:	fa01 f707 	lsl.w	r7, r1, r7
 80130f0:	421f      	tst	r7, r3
 80130f2:	4629      	mov	r1, r5
 80130f4:	4620      	mov	r0, r4
 80130f6:	bf18      	it	ne
 80130f8:	f04a 0a02 	orrne.w	sl, sl, #2
 80130fc:	1b76      	subs	r6, r6, r5
 80130fe:	f7ff fded 	bl	8012cdc <rshift>
 8013102:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013106:	2702      	movs	r7, #2
 8013108:	f1ba 0f00 	cmp.w	sl, #0
 801310c:	d048      	beq.n	80131a0 <__gethex+0x3f4>
 801310e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013112:	2b02      	cmp	r3, #2
 8013114:	d015      	beq.n	8013142 <__gethex+0x396>
 8013116:	2b03      	cmp	r3, #3
 8013118:	d017      	beq.n	801314a <__gethex+0x39e>
 801311a:	2b01      	cmp	r3, #1
 801311c:	d109      	bne.n	8013132 <__gethex+0x386>
 801311e:	f01a 0f02 	tst.w	sl, #2
 8013122:	d006      	beq.n	8013132 <__gethex+0x386>
 8013124:	f8d9 0000 	ldr.w	r0, [r9]
 8013128:	ea4a 0a00 	orr.w	sl, sl, r0
 801312c:	f01a 0f01 	tst.w	sl, #1
 8013130:	d10e      	bne.n	8013150 <__gethex+0x3a4>
 8013132:	f047 0710 	orr.w	r7, r7, #16
 8013136:	e033      	b.n	80131a0 <__gethex+0x3f4>
 8013138:	f04f 0a01 	mov.w	sl, #1
 801313c:	e7d0      	b.n	80130e0 <__gethex+0x334>
 801313e:	2701      	movs	r7, #1
 8013140:	e7e2      	b.n	8013108 <__gethex+0x35c>
 8013142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013144:	f1c3 0301 	rsb	r3, r3, #1
 8013148:	9315      	str	r3, [sp, #84]	; 0x54
 801314a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801314c:	2b00      	cmp	r3, #0
 801314e:	d0f0      	beq.n	8013132 <__gethex+0x386>
 8013150:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013154:	f104 0314 	add.w	r3, r4, #20
 8013158:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801315c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013160:	f04f 0c00 	mov.w	ip, #0
 8013164:	4618      	mov	r0, r3
 8013166:	f853 2b04 	ldr.w	r2, [r3], #4
 801316a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801316e:	d01c      	beq.n	80131aa <__gethex+0x3fe>
 8013170:	3201      	adds	r2, #1
 8013172:	6002      	str	r2, [r0, #0]
 8013174:	2f02      	cmp	r7, #2
 8013176:	f104 0314 	add.w	r3, r4, #20
 801317a:	d13f      	bne.n	80131fc <__gethex+0x450>
 801317c:	f8d8 2000 	ldr.w	r2, [r8]
 8013180:	3a01      	subs	r2, #1
 8013182:	42b2      	cmp	r2, r6
 8013184:	d10a      	bne.n	801319c <__gethex+0x3f0>
 8013186:	1171      	asrs	r1, r6, #5
 8013188:	2201      	movs	r2, #1
 801318a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801318e:	f006 061f 	and.w	r6, r6, #31
 8013192:	fa02 f606 	lsl.w	r6, r2, r6
 8013196:	421e      	tst	r6, r3
 8013198:	bf18      	it	ne
 801319a:	4617      	movne	r7, r2
 801319c:	f047 0720 	orr.w	r7, r7, #32
 80131a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131a2:	601c      	str	r4, [r3, #0]
 80131a4:	9b04      	ldr	r3, [sp, #16]
 80131a6:	601d      	str	r5, [r3, #0]
 80131a8:	e695      	b.n	8012ed6 <__gethex+0x12a>
 80131aa:	4299      	cmp	r1, r3
 80131ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80131b0:	d8d8      	bhi.n	8013164 <__gethex+0x3b8>
 80131b2:	68a3      	ldr	r3, [r4, #8]
 80131b4:	459b      	cmp	fp, r3
 80131b6:	db19      	blt.n	80131ec <__gethex+0x440>
 80131b8:	6861      	ldr	r1, [r4, #4]
 80131ba:	ee18 0a10 	vmov	r0, s16
 80131be:	3101      	adds	r1, #1
 80131c0:	f000 f928 	bl	8013414 <_Balloc>
 80131c4:	4681      	mov	r9, r0
 80131c6:	b918      	cbnz	r0, 80131d0 <__gethex+0x424>
 80131c8:	4b1a      	ldr	r3, [pc, #104]	; (8013234 <__gethex+0x488>)
 80131ca:	4602      	mov	r2, r0
 80131cc:	2184      	movs	r1, #132	; 0x84
 80131ce:	e6a8      	b.n	8012f22 <__gethex+0x176>
 80131d0:	6922      	ldr	r2, [r4, #16]
 80131d2:	3202      	adds	r2, #2
 80131d4:	f104 010c 	add.w	r1, r4, #12
 80131d8:	0092      	lsls	r2, r2, #2
 80131da:	300c      	adds	r0, #12
 80131dc:	f000 f90c 	bl	80133f8 <memcpy>
 80131e0:	4621      	mov	r1, r4
 80131e2:	ee18 0a10 	vmov	r0, s16
 80131e6:	f000 f955 	bl	8013494 <_Bfree>
 80131ea:	464c      	mov	r4, r9
 80131ec:	6923      	ldr	r3, [r4, #16]
 80131ee:	1c5a      	adds	r2, r3, #1
 80131f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80131f4:	6122      	str	r2, [r4, #16]
 80131f6:	2201      	movs	r2, #1
 80131f8:	615a      	str	r2, [r3, #20]
 80131fa:	e7bb      	b.n	8013174 <__gethex+0x3c8>
 80131fc:	6922      	ldr	r2, [r4, #16]
 80131fe:	455a      	cmp	r2, fp
 8013200:	dd0b      	ble.n	801321a <__gethex+0x46e>
 8013202:	2101      	movs	r1, #1
 8013204:	4620      	mov	r0, r4
 8013206:	f7ff fd69 	bl	8012cdc <rshift>
 801320a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801320e:	3501      	adds	r5, #1
 8013210:	42ab      	cmp	r3, r5
 8013212:	f6ff aed0 	blt.w	8012fb6 <__gethex+0x20a>
 8013216:	2701      	movs	r7, #1
 8013218:	e7c0      	b.n	801319c <__gethex+0x3f0>
 801321a:	f016 061f 	ands.w	r6, r6, #31
 801321e:	d0fa      	beq.n	8013216 <__gethex+0x46a>
 8013220:	449a      	add	sl, r3
 8013222:	f1c6 0620 	rsb	r6, r6, #32
 8013226:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801322a:	f000 f9e9 	bl	8013600 <__hi0bits>
 801322e:	42b0      	cmp	r0, r6
 8013230:	dbe7      	blt.n	8013202 <__gethex+0x456>
 8013232:	e7f0      	b.n	8013216 <__gethex+0x46a>
 8013234:	08028a49 	.word	0x08028a49

08013238 <L_shift>:
 8013238:	f1c2 0208 	rsb	r2, r2, #8
 801323c:	0092      	lsls	r2, r2, #2
 801323e:	b570      	push	{r4, r5, r6, lr}
 8013240:	f1c2 0620 	rsb	r6, r2, #32
 8013244:	6843      	ldr	r3, [r0, #4]
 8013246:	6804      	ldr	r4, [r0, #0]
 8013248:	fa03 f506 	lsl.w	r5, r3, r6
 801324c:	432c      	orrs	r4, r5
 801324e:	40d3      	lsrs	r3, r2
 8013250:	6004      	str	r4, [r0, #0]
 8013252:	f840 3f04 	str.w	r3, [r0, #4]!
 8013256:	4288      	cmp	r0, r1
 8013258:	d3f4      	bcc.n	8013244 <L_shift+0xc>
 801325a:	bd70      	pop	{r4, r5, r6, pc}

0801325c <__match>:
 801325c:	b530      	push	{r4, r5, lr}
 801325e:	6803      	ldr	r3, [r0, #0]
 8013260:	3301      	adds	r3, #1
 8013262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013266:	b914      	cbnz	r4, 801326e <__match+0x12>
 8013268:	6003      	str	r3, [r0, #0]
 801326a:	2001      	movs	r0, #1
 801326c:	bd30      	pop	{r4, r5, pc}
 801326e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013272:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013276:	2d19      	cmp	r5, #25
 8013278:	bf98      	it	ls
 801327a:	3220      	addls	r2, #32
 801327c:	42a2      	cmp	r2, r4
 801327e:	d0f0      	beq.n	8013262 <__match+0x6>
 8013280:	2000      	movs	r0, #0
 8013282:	e7f3      	b.n	801326c <__match+0x10>

08013284 <__hexnan>:
 8013284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013288:	680b      	ldr	r3, [r1, #0]
 801328a:	6801      	ldr	r1, [r0, #0]
 801328c:	115e      	asrs	r6, r3, #5
 801328e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013292:	f013 031f 	ands.w	r3, r3, #31
 8013296:	b087      	sub	sp, #28
 8013298:	bf18      	it	ne
 801329a:	3604      	addne	r6, #4
 801329c:	2500      	movs	r5, #0
 801329e:	1f37      	subs	r7, r6, #4
 80132a0:	4682      	mov	sl, r0
 80132a2:	4690      	mov	r8, r2
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80132aa:	46b9      	mov	r9, r7
 80132ac:	463c      	mov	r4, r7
 80132ae:	9502      	str	r5, [sp, #8]
 80132b0:	46ab      	mov	fp, r5
 80132b2:	784a      	ldrb	r2, [r1, #1]
 80132b4:	1c4b      	adds	r3, r1, #1
 80132b6:	9303      	str	r3, [sp, #12]
 80132b8:	b342      	cbz	r2, 801330c <__hexnan+0x88>
 80132ba:	4610      	mov	r0, r2
 80132bc:	9105      	str	r1, [sp, #20]
 80132be:	9204      	str	r2, [sp, #16]
 80132c0:	f7ff fd5e 	bl	8012d80 <__hexdig_fun>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d14f      	bne.n	8013368 <__hexnan+0xe4>
 80132c8:	9a04      	ldr	r2, [sp, #16]
 80132ca:	9905      	ldr	r1, [sp, #20]
 80132cc:	2a20      	cmp	r2, #32
 80132ce:	d818      	bhi.n	8013302 <__hexnan+0x7e>
 80132d0:	9b02      	ldr	r3, [sp, #8]
 80132d2:	459b      	cmp	fp, r3
 80132d4:	dd13      	ble.n	80132fe <__hexnan+0x7a>
 80132d6:	454c      	cmp	r4, r9
 80132d8:	d206      	bcs.n	80132e8 <__hexnan+0x64>
 80132da:	2d07      	cmp	r5, #7
 80132dc:	dc04      	bgt.n	80132e8 <__hexnan+0x64>
 80132de:	462a      	mov	r2, r5
 80132e0:	4649      	mov	r1, r9
 80132e2:	4620      	mov	r0, r4
 80132e4:	f7ff ffa8 	bl	8013238 <L_shift>
 80132e8:	4544      	cmp	r4, r8
 80132ea:	d950      	bls.n	801338e <__hexnan+0x10a>
 80132ec:	2300      	movs	r3, #0
 80132ee:	f1a4 0904 	sub.w	r9, r4, #4
 80132f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80132f6:	f8cd b008 	str.w	fp, [sp, #8]
 80132fa:	464c      	mov	r4, r9
 80132fc:	461d      	mov	r5, r3
 80132fe:	9903      	ldr	r1, [sp, #12]
 8013300:	e7d7      	b.n	80132b2 <__hexnan+0x2e>
 8013302:	2a29      	cmp	r2, #41	; 0x29
 8013304:	d156      	bne.n	80133b4 <__hexnan+0x130>
 8013306:	3102      	adds	r1, #2
 8013308:	f8ca 1000 	str.w	r1, [sl]
 801330c:	f1bb 0f00 	cmp.w	fp, #0
 8013310:	d050      	beq.n	80133b4 <__hexnan+0x130>
 8013312:	454c      	cmp	r4, r9
 8013314:	d206      	bcs.n	8013324 <__hexnan+0xa0>
 8013316:	2d07      	cmp	r5, #7
 8013318:	dc04      	bgt.n	8013324 <__hexnan+0xa0>
 801331a:	462a      	mov	r2, r5
 801331c:	4649      	mov	r1, r9
 801331e:	4620      	mov	r0, r4
 8013320:	f7ff ff8a 	bl	8013238 <L_shift>
 8013324:	4544      	cmp	r4, r8
 8013326:	d934      	bls.n	8013392 <__hexnan+0x10e>
 8013328:	f1a8 0204 	sub.w	r2, r8, #4
 801332c:	4623      	mov	r3, r4
 801332e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013332:	f842 1f04 	str.w	r1, [r2, #4]!
 8013336:	429f      	cmp	r7, r3
 8013338:	d2f9      	bcs.n	801332e <__hexnan+0xaa>
 801333a:	1b3b      	subs	r3, r7, r4
 801333c:	f023 0303 	bic.w	r3, r3, #3
 8013340:	3304      	adds	r3, #4
 8013342:	3401      	adds	r4, #1
 8013344:	3e03      	subs	r6, #3
 8013346:	42b4      	cmp	r4, r6
 8013348:	bf88      	it	hi
 801334a:	2304      	movhi	r3, #4
 801334c:	4443      	add	r3, r8
 801334e:	2200      	movs	r2, #0
 8013350:	f843 2b04 	str.w	r2, [r3], #4
 8013354:	429f      	cmp	r7, r3
 8013356:	d2fb      	bcs.n	8013350 <__hexnan+0xcc>
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	b91b      	cbnz	r3, 8013364 <__hexnan+0xe0>
 801335c:	4547      	cmp	r7, r8
 801335e:	d127      	bne.n	80133b0 <__hexnan+0x12c>
 8013360:	2301      	movs	r3, #1
 8013362:	603b      	str	r3, [r7, #0]
 8013364:	2005      	movs	r0, #5
 8013366:	e026      	b.n	80133b6 <__hexnan+0x132>
 8013368:	3501      	adds	r5, #1
 801336a:	2d08      	cmp	r5, #8
 801336c:	f10b 0b01 	add.w	fp, fp, #1
 8013370:	dd06      	ble.n	8013380 <__hexnan+0xfc>
 8013372:	4544      	cmp	r4, r8
 8013374:	d9c3      	bls.n	80132fe <__hexnan+0x7a>
 8013376:	2300      	movs	r3, #0
 8013378:	f844 3c04 	str.w	r3, [r4, #-4]
 801337c:	2501      	movs	r5, #1
 801337e:	3c04      	subs	r4, #4
 8013380:	6822      	ldr	r2, [r4, #0]
 8013382:	f000 000f 	and.w	r0, r0, #15
 8013386:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801338a:	6022      	str	r2, [r4, #0]
 801338c:	e7b7      	b.n	80132fe <__hexnan+0x7a>
 801338e:	2508      	movs	r5, #8
 8013390:	e7b5      	b.n	80132fe <__hexnan+0x7a>
 8013392:	9b01      	ldr	r3, [sp, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d0df      	beq.n	8013358 <__hexnan+0xd4>
 8013398:	f04f 32ff 	mov.w	r2, #4294967295
 801339c:	f1c3 0320 	rsb	r3, r3, #32
 80133a0:	fa22 f303 	lsr.w	r3, r2, r3
 80133a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80133a8:	401a      	ands	r2, r3
 80133aa:	f846 2c04 	str.w	r2, [r6, #-4]
 80133ae:	e7d3      	b.n	8013358 <__hexnan+0xd4>
 80133b0:	3f04      	subs	r7, #4
 80133b2:	e7d1      	b.n	8013358 <__hexnan+0xd4>
 80133b4:	2004      	movs	r0, #4
 80133b6:	b007      	add	sp, #28
 80133b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080133bc <_localeconv_r>:
 80133bc:	4800      	ldr	r0, [pc, #0]	; (80133c0 <_localeconv_r+0x4>)
 80133be:	4770      	bx	lr
 80133c0:	20000198 	.word	0x20000198

080133c4 <malloc>:
 80133c4:	4b02      	ldr	r3, [pc, #8]	; (80133d0 <malloc+0xc>)
 80133c6:	4601      	mov	r1, r0
 80133c8:	6818      	ldr	r0, [r3, #0]
 80133ca:	f000 bd3d 	b.w	8013e48 <_malloc_r>
 80133ce:	bf00      	nop
 80133d0:	20000040 	.word	0x20000040

080133d4 <__ascii_mbtowc>:
 80133d4:	b082      	sub	sp, #8
 80133d6:	b901      	cbnz	r1, 80133da <__ascii_mbtowc+0x6>
 80133d8:	a901      	add	r1, sp, #4
 80133da:	b142      	cbz	r2, 80133ee <__ascii_mbtowc+0x1a>
 80133dc:	b14b      	cbz	r3, 80133f2 <__ascii_mbtowc+0x1e>
 80133de:	7813      	ldrb	r3, [r2, #0]
 80133e0:	600b      	str	r3, [r1, #0]
 80133e2:	7812      	ldrb	r2, [r2, #0]
 80133e4:	1e10      	subs	r0, r2, #0
 80133e6:	bf18      	it	ne
 80133e8:	2001      	movne	r0, #1
 80133ea:	b002      	add	sp, #8
 80133ec:	4770      	bx	lr
 80133ee:	4610      	mov	r0, r2
 80133f0:	e7fb      	b.n	80133ea <__ascii_mbtowc+0x16>
 80133f2:	f06f 0001 	mvn.w	r0, #1
 80133f6:	e7f8      	b.n	80133ea <__ascii_mbtowc+0x16>

080133f8 <memcpy>:
 80133f8:	440a      	add	r2, r1
 80133fa:	4291      	cmp	r1, r2
 80133fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013400:	d100      	bne.n	8013404 <memcpy+0xc>
 8013402:	4770      	bx	lr
 8013404:	b510      	push	{r4, lr}
 8013406:	f811 4b01 	ldrb.w	r4, [r1], #1
 801340a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801340e:	4291      	cmp	r1, r2
 8013410:	d1f9      	bne.n	8013406 <memcpy+0xe>
 8013412:	bd10      	pop	{r4, pc}

08013414 <_Balloc>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013418:	4604      	mov	r4, r0
 801341a:	460d      	mov	r5, r1
 801341c:	b976      	cbnz	r6, 801343c <_Balloc+0x28>
 801341e:	2010      	movs	r0, #16
 8013420:	f7ff ffd0 	bl	80133c4 <malloc>
 8013424:	4602      	mov	r2, r0
 8013426:	6260      	str	r0, [r4, #36]	; 0x24
 8013428:	b920      	cbnz	r0, 8013434 <_Balloc+0x20>
 801342a:	4b18      	ldr	r3, [pc, #96]	; (801348c <_Balloc+0x78>)
 801342c:	4818      	ldr	r0, [pc, #96]	; (8013490 <_Balloc+0x7c>)
 801342e:	2166      	movs	r1, #102	; 0x66
 8013430:	f7fe fdaa 	bl	8011f88 <__assert_func>
 8013434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013438:	6006      	str	r6, [r0, #0]
 801343a:	60c6      	str	r6, [r0, #12]
 801343c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801343e:	68f3      	ldr	r3, [r6, #12]
 8013440:	b183      	cbz	r3, 8013464 <_Balloc+0x50>
 8013442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801344a:	b9b8      	cbnz	r0, 801347c <_Balloc+0x68>
 801344c:	2101      	movs	r1, #1
 801344e:	fa01 f605 	lsl.w	r6, r1, r5
 8013452:	1d72      	adds	r2, r6, #5
 8013454:	0092      	lsls	r2, r2, #2
 8013456:	4620      	mov	r0, r4
 8013458:	f000 fc97 	bl	8013d8a <_calloc_r>
 801345c:	b160      	cbz	r0, 8013478 <_Balloc+0x64>
 801345e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013462:	e00e      	b.n	8013482 <_Balloc+0x6e>
 8013464:	2221      	movs	r2, #33	; 0x21
 8013466:	2104      	movs	r1, #4
 8013468:	4620      	mov	r0, r4
 801346a:	f000 fc8e 	bl	8013d8a <_calloc_r>
 801346e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013470:	60f0      	str	r0, [r6, #12]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d1e4      	bne.n	8013442 <_Balloc+0x2e>
 8013478:	2000      	movs	r0, #0
 801347a:	bd70      	pop	{r4, r5, r6, pc}
 801347c:	6802      	ldr	r2, [r0, #0]
 801347e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013482:	2300      	movs	r3, #0
 8013484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013488:	e7f7      	b.n	801347a <_Balloc+0x66>
 801348a:	bf00      	nop
 801348c:	08028828 	.word	0x08028828
 8013490:	08028ad8 	.word	0x08028ad8

08013494 <_Bfree>:
 8013494:	b570      	push	{r4, r5, r6, lr}
 8013496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013498:	4605      	mov	r5, r0
 801349a:	460c      	mov	r4, r1
 801349c:	b976      	cbnz	r6, 80134bc <_Bfree+0x28>
 801349e:	2010      	movs	r0, #16
 80134a0:	f7ff ff90 	bl	80133c4 <malloc>
 80134a4:	4602      	mov	r2, r0
 80134a6:	6268      	str	r0, [r5, #36]	; 0x24
 80134a8:	b920      	cbnz	r0, 80134b4 <_Bfree+0x20>
 80134aa:	4b09      	ldr	r3, [pc, #36]	; (80134d0 <_Bfree+0x3c>)
 80134ac:	4809      	ldr	r0, [pc, #36]	; (80134d4 <_Bfree+0x40>)
 80134ae:	218a      	movs	r1, #138	; 0x8a
 80134b0:	f7fe fd6a 	bl	8011f88 <__assert_func>
 80134b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80134b8:	6006      	str	r6, [r0, #0]
 80134ba:	60c6      	str	r6, [r0, #12]
 80134bc:	b13c      	cbz	r4, 80134ce <_Bfree+0x3a>
 80134be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80134c0:	6862      	ldr	r2, [r4, #4]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80134c8:	6021      	str	r1, [r4, #0]
 80134ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	08028828 	.word	0x08028828
 80134d4:	08028ad8 	.word	0x08028ad8

080134d8 <__multadd>:
 80134d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134dc:	690e      	ldr	r6, [r1, #16]
 80134de:	4607      	mov	r7, r0
 80134e0:	4698      	mov	r8, r3
 80134e2:	460c      	mov	r4, r1
 80134e4:	f101 0014 	add.w	r0, r1, #20
 80134e8:	2300      	movs	r3, #0
 80134ea:	6805      	ldr	r5, [r0, #0]
 80134ec:	b2a9      	uxth	r1, r5
 80134ee:	fb02 8101 	mla	r1, r2, r1, r8
 80134f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80134f6:	0c2d      	lsrs	r5, r5, #16
 80134f8:	fb02 c505 	mla	r5, r2, r5, ip
 80134fc:	b289      	uxth	r1, r1
 80134fe:	3301      	adds	r3, #1
 8013500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013504:	429e      	cmp	r6, r3
 8013506:	f840 1b04 	str.w	r1, [r0], #4
 801350a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801350e:	dcec      	bgt.n	80134ea <__multadd+0x12>
 8013510:	f1b8 0f00 	cmp.w	r8, #0
 8013514:	d022      	beq.n	801355c <__multadd+0x84>
 8013516:	68a3      	ldr	r3, [r4, #8]
 8013518:	42b3      	cmp	r3, r6
 801351a:	dc19      	bgt.n	8013550 <__multadd+0x78>
 801351c:	6861      	ldr	r1, [r4, #4]
 801351e:	4638      	mov	r0, r7
 8013520:	3101      	adds	r1, #1
 8013522:	f7ff ff77 	bl	8013414 <_Balloc>
 8013526:	4605      	mov	r5, r0
 8013528:	b928      	cbnz	r0, 8013536 <__multadd+0x5e>
 801352a:	4602      	mov	r2, r0
 801352c:	4b0d      	ldr	r3, [pc, #52]	; (8013564 <__multadd+0x8c>)
 801352e:	480e      	ldr	r0, [pc, #56]	; (8013568 <__multadd+0x90>)
 8013530:	21b5      	movs	r1, #181	; 0xb5
 8013532:	f7fe fd29 	bl	8011f88 <__assert_func>
 8013536:	6922      	ldr	r2, [r4, #16]
 8013538:	3202      	adds	r2, #2
 801353a:	f104 010c 	add.w	r1, r4, #12
 801353e:	0092      	lsls	r2, r2, #2
 8013540:	300c      	adds	r0, #12
 8013542:	f7ff ff59 	bl	80133f8 <memcpy>
 8013546:	4621      	mov	r1, r4
 8013548:	4638      	mov	r0, r7
 801354a:	f7ff ffa3 	bl	8013494 <_Bfree>
 801354e:	462c      	mov	r4, r5
 8013550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013554:	3601      	adds	r6, #1
 8013556:	f8c3 8014 	str.w	r8, [r3, #20]
 801355a:	6126      	str	r6, [r4, #16]
 801355c:	4620      	mov	r0, r4
 801355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013562:	bf00      	nop
 8013564:	08028a49 	.word	0x08028a49
 8013568:	08028ad8 	.word	0x08028ad8

0801356c <__s2b>:
 801356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013570:	460c      	mov	r4, r1
 8013572:	4615      	mov	r5, r2
 8013574:	461f      	mov	r7, r3
 8013576:	2209      	movs	r2, #9
 8013578:	3308      	adds	r3, #8
 801357a:	4606      	mov	r6, r0
 801357c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013580:	2100      	movs	r1, #0
 8013582:	2201      	movs	r2, #1
 8013584:	429a      	cmp	r2, r3
 8013586:	db09      	blt.n	801359c <__s2b+0x30>
 8013588:	4630      	mov	r0, r6
 801358a:	f7ff ff43 	bl	8013414 <_Balloc>
 801358e:	b940      	cbnz	r0, 80135a2 <__s2b+0x36>
 8013590:	4602      	mov	r2, r0
 8013592:	4b19      	ldr	r3, [pc, #100]	; (80135f8 <__s2b+0x8c>)
 8013594:	4819      	ldr	r0, [pc, #100]	; (80135fc <__s2b+0x90>)
 8013596:	21ce      	movs	r1, #206	; 0xce
 8013598:	f7fe fcf6 	bl	8011f88 <__assert_func>
 801359c:	0052      	lsls	r2, r2, #1
 801359e:	3101      	adds	r1, #1
 80135a0:	e7f0      	b.n	8013584 <__s2b+0x18>
 80135a2:	9b08      	ldr	r3, [sp, #32]
 80135a4:	6143      	str	r3, [r0, #20]
 80135a6:	2d09      	cmp	r5, #9
 80135a8:	f04f 0301 	mov.w	r3, #1
 80135ac:	6103      	str	r3, [r0, #16]
 80135ae:	dd16      	ble.n	80135de <__s2b+0x72>
 80135b0:	f104 0909 	add.w	r9, r4, #9
 80135b4:	46c8      	mov	r8, r9
 80135b6:	442c      	add	r4, r5
 80135b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80135bc:	4601      	mov	r1, r0
 80135be:	3b30      	subs	r3, #48	; 0x30
 80135c0:	220a      	movs	r2, #10
 80135c2:	4630      	mov	r0, r6
 80135c4:	f7ff ff88 	bl	80134d8 <__multadd>
 80135c8:	45a0      	cmp	r8, r4
 80135ca:	d1f5      	bne.n	80135b8 <__s2b+0x4c>
 80135cc:	f1a5 0408 	sub.w	r4, r5, #8
 80135d0:	444c      	add	r4, r9
 80135d2:	1b2d      	subs	r5, r5, r4
 80135d4:	1963      	adds	r3, r4, r5
 80135d6:	42bb      	cmp	r3, r7
 80135d8:	db04      	blt.n	80135e4 <__s2b+0x78>
 80135da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135de:	340a      	adds	r4, #10
 80135e0:	2509      	movs	r5, #9
 80135e2:	e7f6      	b.n	80135d2 <__s2b+0x66>
 80135e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80135e8:	4601      	mov	r1, r0
 80135ea:	3b30      	subs	r3, #48	; 0x30
 80135ec:	220a      	movs	r2, #10
 80135ee:	4630      	mov	r0, r6
 80135f0:	f7ff ff72 	bl	80134d8 <__multadd>
 80135f4:	e7ee      	b.n	80135d4 <__s2b+0x68>
 80135f6:	bf00      	nop
 80135f8:	08028a49 	.word	0x08028a49
 80135fc:	08028ad8 	.word	0x08028ad8

08013600 <__hi0bits>:
 8013600:	0c03      	lsrs	r3, r0, #16
 8013602:	041b      	lsls	r3, r3, #16
 8013604:	b9d3      	cbnz	r3, 801363c <__hi0bits+0x3c>
 8013606:	0400      	lsls	r0, r0, #16
 8013608:	2310      	movs	r3, #16
 801360a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801360e:	bf04      	itt	eq
 8013610:	0200      	lsleq	r0, r0, #8
 8013612:	3308      	addeq	r3, #8
 8013614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013618:	bf04      	itt	eq
 801361a:	0100      	lsleq	r0, r0, #4
 801361c:	3304      	addeq	r3, #4
 801361e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013622:	bf04      	itt	eq
 8013624:	0080      	lsleq	r0, r0, #2
 8013626:	3302      	addeq	r3, #2
 8013628:	2800      	cmp	r0, #0
 801362a:	db05      	blt.n	8013638 <__hi0bits+0x38>
 801362c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013630:	f103 0301 	add.w	r3, r3, #1
 8013634:	bf08      	it	eq
 8013636:	2320      	moveq	r3, #32
 8013638:	4618      	mov	r0, r3
 801363a:	4770      	bx	lr
 801363c:	2300      	movs	r3, #0
 801363e:	e7e4      	b.n	801360a <__hi0bits+0xa>

08013640 <__lo0bits>:
 8013640:	6803      	ldr	r3, [r0, #0]
 8013642:	f013 0207 	ands.w	r2, r3, #7
 8013646:	4601      	mov	r1, r0
 8013648:	d00b      	beq.n	8013662 <__lo0bits+0x22>
 801364a:	07da      	lsls	r2, r3, #31
 801364c:	d424      	bmi.n	8013698 <__lo0bits+0x58>
 801364e:	0798      	lsls	r0, r3, #30
 8013650:	bf49      	itett	mi
 8013652:	085b      	lsrmi	r3, r3, #1
 8013654:	089b      	lsrpl	r3, r3, #2
 8013656:	2001      	movmi	r0, #1
 8013658:	600b      	strmi	r3, [r1, #0]
 801365a:	bf5c      	itt	pl
 801365c:	600b      	strpl	r3, [r1, #0]
 801365e:	2002      	movpl	r0, #2
 8013660:	4770      	bx	lr
 8013662:	b298      	uxth	r0, r3
 8013664:	b9b0      	cbnz	r0, 8013694 <__lo0bits+0x54>
 8013666:	0c1b      	lsrs	r3, r3, #16
 8013668:	2010      	movs	r0, #16
 801366a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801366e:	bf04      	itt	eq
 8013670:	0a1b      	lsreq	r3, r3, #8
 8013672:	3008      	addeq	r0, #8
 8013674:	071a      	lsls	r2, r3, #28
 8013676:	bf04      	itt	eq
 8013678:	091b      	lsreq	r3, r3, #4
 801367a:	3004      	addeq	r0, #4
 801367c:	079a      	lsls	r2, r3, #30
 801367e:	bf04      	itt	eq
 8013680:	089b      	lsreq	r3, r3, #2
 8013682:	3002      	addeq	r0, #2
 8013684:	07da      	lsls	r2, r3, #31
 8013686:	d403      	bmi.n	8013690 <__lo0bits+0x50>
 8013688:	085b      	lsrs	r3, r3, #1
 801368a:	f100 0001 	add.w	r0, r0, #1
 801368e:	d005      	beq.n	801369c <__lo0bits+0x5c>
 8013690:	600b      	str	r3, [r1, #0]
 8013692:	4770      	bx	lr
 8013694:	4610      	mov	r0, r2
 8013696:	e7e8      	b.n	801366a <__lo0bits+0x2a>
 8013698:	2000      	movs	r0, #0
 801369a:	4770      	bx	lr
 801369c:	2020      	movs	r0, #32
 801369e:	4770      	bx	lr

080136a0 <__i2b>:
 80136a0:	b510      	push	{r4, lr}
 80136a2:	460c      	mov	r4, r1
 80136a4:	2101      	movs	r1, #1
 80136a6:	f7ff feb5 	bl	8013414 <_Balloc>
 80136aa:	4602      	mov	r2, r0
 80136ac:	b928      	cbnz	r0, 80136ba <__i2b+0x1a>
 80136ae:	4b05      	ldr	r3, [pc, #20]	; (80136c4 <__i2b+0x24>)
 80136b0:	4805      	ldr	r0, [pc, #20]	; (80136c8 <__i2b+0x28>)
 80136b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80136b6:	f7fe fc67 	bl	8011f88 <__assert_func>
 80136ba:	2301      	movs	r3, #1
 80136bc:	6144      	str	r4, [r0, #20]
 80136be:	6103      	str	r3, [r0, #16]
 80136c0:	bd10      	pop	{r4, pc}
 80136c2:	bf00      	nop
 80136c4:	08028a49 	.word	0x08028a49
 80136c8:	08028ad8 	.word	0x08028ad8

080136cc <__multiply>:
 80136cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d0:	4614      	mov	r4, r2
 80136d2:	690a      	ldr	r2, [r1, #16]
 80136d4:	6923      	ldr	r3, [r4, #16]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	bfb8      	it	lt
 80136da:	460b      	movlt	r3, r1
 80136dc:	460d      	mov	r5, r1
 80136de:	bfbc      	itt	lt
 80136e0:	4625      	movlt	r5, r4
 80136e2:	461c      	movlt	r4, r3
 80136e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80136e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80136ec:	68ab      	ldr	r3, [r5, #8]
 80136ee:	6869      	ldr	r1, [r5, #4]
 80136f0:	eb0a 0709 	add.w	r7, sl, r9
 80136f4:	42bb      	cmp	r3, r7
 80136f6:	b085      	sub	sp, #20
 80136f8:	bfb8      	it	lt
 80136fa:	3101      	addlt	r1, #1
 80136fc:	f7ff fe8a 	bl	8013414 <_Balloc>
 8013700:	b930      	cbnz	r0, 8013710 <__multiply+0x44>
 8013702:	4602      	mov	r2, r0
 8013704:	4b42      	ldr	r3, [pc, #264]	; (8013810 <__multiply+0x144>)
 8013706:	4843      	ldr	r0, [pc, #268]	; (8013814 <__multiply+0x148>)
 8013708:	f240 115d 	movw	r1, #349	; 0x15d
 801370c:	f7fe fc3c 	bl	8011f88 <__assert_func>
 8013710:	f100 0614 	add.w	r6, r0, #20
 8013714:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013718:	4633      	mov	r3, r6
 801371a:	2200      	movs	r2, #0
 801371c:	4543      	cmp	r3, r8
 801371e:	d31e      	bcc.n	801375e <__multiply+0x92>
 8013720:	f105 0c14 	add.w	ip, r5, #20
 8013724:	f104 0314 	add.w	r3, r4, #20
 8013728:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801372c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013730:	9202      	str	r2, [sp, #8]
 8013732:	ebac 0205 	sub.w	r2, ip, r5
 8013736:	3a15      	subs	r2, #21
 8013738:	f022 0203 	bic.w	r2, r2, #3
 801373c:	3204      	adds	r2, #4
 801373e:	f105 0115 	add.w	r1, r5, #21
 8013742:	458c      	cmp	ip, r1
 8013744:	bf38      	it	cc
 8013746:	2204      	movcc	r2, #4
 8013748:	9201      	str	r2, [sp, #4]
 801374a:	9a02      	ldr	r2, [sp, #8]
 801374c:	9303      	str	r3, [sp, #12]
 801374e:	429a      	cmp	r2, r3
 8013750:	d808      	bhi.n	8013764 <__multiply+0x98>
 8013752:	2f00      	cmp	r7, #0
 8013754:	dc55      	bgt.n	8013802 <__multiply+0x136>
 8013756:	6107      	str	r7, [r0, #16]
 8013758:	b005      	add	sp, #20
 801375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375e:	f843 2b04 	str.w	r2, [r3], #4
 8013762:	e7db      	b.n	801371c <__multiply+0x50>
 8013764:	f8b3 a000 	ldrh.w	sl, [r3]
 8013768:	f1ba 0f00 	cmp.w	sl, #0
 801376c:	d020      	beq.n	80137b0 <__multiply+0xe4>
 801376e:	f105 0e14 	add.w	lr, r5, #20
 8013772:	46b1      	mov	r9, r6
 8013774:	2200      	movs	r2, #0
 8013776:	f85e 4b04 	ldr.w	r4, [lr], #4
 801377a:	f8d9 b000 	ldr.w	fp, [r9]
 801377e:	b2a1      	uxth	r1, r4
 8013780:	fa1f fb8b 	uxth.w	fp, fp
 8013784:	fb0a b101 	mla	r1, sl, r1, fp
 8013788:	4411      	add	r1, r2
 801378a:	f8d9 2000 	ldr.w	r2, [r9]
 801378e:	0c24      	lsrs	r4, r4, #16
 8013790:	0c12      	lsrs	r2, r2, #16
 8013792:	fb0a 2404 	mla	r4, sl, r4, r2
 8013796:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801379a:	b289      	uxth	r1, r1
 801379c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80137a0:	45f4      	cmp	ip, lr
 80137a2:	f849 1b04 	str.w	r1, [r9], #4
 80137a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80137aa:	d8e4      	bhi.n	8013776 <__multiply+0xaa>
 80137ac:	9901      	ldr	r1, [sp, #4]
 80137ae:	5072      	str	r2, [r6, r1]
 80137b0:	9a03      	ldr	r2, [sp, #12]
 80137b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80137b6:	3304      	adds	r3, #4
 80137b8:	f1b9 0f00 	cmp.w	r9, #0
 80137bc:	d01f      	beq.n	80137fe <__multiply+0x132>
 80137be:	6834      	ldr	r4, [r6, #0]
 80137c0:	f105 0114 	add.w	r1, r5, #20
 80137c4:	46b6      	mov	lr, r6
 80137c6:	f04f 0a00 	mov.w	sl, #0
 80137ca:	880a      	ldrh	r2, [r1, #0]
 80137cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80137d0:	fb09 b202 	mla	r2, r9, r2, fp
 80137d4:	4492      	add	sl, r2
 80137d6:	b2a4      	uxth	r4, r4
 80137d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80137dc:	f84e 4b04 	str.w	r4, [lr], #4
 80137e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80137e4:	f8be 2000 	ldrh.w	r2, [lr]
 80137e8:	0c24      	lsrs	r4, r4, #16
 80137ea:	fb09 2404 	mla	r4, r9, r4, r2
 80137ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80137f2:	458c      	cmp	ip, r1
 80137f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80137f8:	d8e7      	bhi.n	80137ca <__multiply+0xfe>
 80137fa:	9a01      	ldr	r2, [sp, #4]
 80137fc:	50b4      	str	r4, [r6, r2]
 80137fe:	3604      	adds	r6, #4
 8013800:	e7a3      	b.n	801374a <__multiply+0x7e>
 8013802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1a5      	bne.n	8013756 <__multiply+0x8a>
 801380a:	3f01      	subs	r7, #1
 801380c:	e7a1      	b.n	8013752 <__multiply+0x86>
 801380e:	bf00      	nop
 8013810:	08028a49 	.word	0x08028a49
 8013814:	08028ad8 	.word	0x08028ad8

08013818 <__pow5mult>:
 8013818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801381c:	4615      	mov	r5, r2
 801381e:	f012 0203 	ands.w	r2, r2, #3
 8013822:	4606      	mov	r6, r0
 8013824:	460f      	mov	r7, r1
 8013826:	d007      	beq.n	8013838 <__pow5mult+0x20>
 8013828:	4c25      	ldr	r4, [pc, #148]	; (80138c0 <__pow5mult+0xa8>)
 801382a:	3a01      	subs	r2, #1
 801382c:	2300      	movs	r3, #0
 801382e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013832:	f7ff fe51 	bl	80134d8 <__multadd>
 8013836:	4607      	mov	r7, r0
 8013838:	10ad      	asrs	r5, r5, #2
 801383a:	d03d      	beq.n	80138b8 <__pow5mult+0xa0>
 801383c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801383e:	b97c      	cbnz	r4, 8013860 <__pow5mult+0x48>
 8013840:	2010      	movs	r0, #16
 8013842:	f7ff fdbf 	bl	80133c4 <malloc>
 8013846:	4602      	mov	r2, r0
 8013848:	6270      	str	r0, [r6, #36]	; 0x24
 801384a:	b928      	cbnz	r0, 8013858 <__pow5mult+0x40>
 801384c:	4b1d      	ldr	r3, [pc, #116]	; (80138c4 <__pow5mult+0xac>)
 801384e:	481e      	ldr	r0, [pc, #120]	; (80138c8 <__pow5mult+0xb0>)
 8013850:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013854:	f7fe fb98 	bl	8011f88 <__assert_func>
 8013858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801385c:	6004      	str	r4, [r0, #0]
 801385e:	60c4      	str	r4, [r0, #12]
 8013860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013868:	b94c      	cbnz	r4, 801387e <__pow5mult+0x66>
 801386a:	f240 2171 	movw	r1, #625	; 0x271
 801386e:	4630      	mov	r0, r6
 8013870:	f7ff ff16 	bl	80136a0 <__i2b>
 8013874:	2300      	movs	r3, #0
 8013876:	f8c8 0008 	str.w	r0, [r8, #8]
 801387a:	4604      	mov	r4, r0
 801387c:	6003      	str	r3, [r0, #0]
 801387e:	f04f 0900 	mov.w	r9, #0
 8013882:	07eb      	lsls	r3, r5, #31
 8013884:	d50a      	bpl.n	801389c <__pow5mult+0x84>
 8013886:	4639      	mov	r1, r7
 8013888:	4622      	mov	r2, r4
 801388a:	4630      	mov	r0, r6
 801388c:	f7ff ff1e 	bl	80136cc <__multiply>
 8013890:	4639      	mov	r1, r7
 8013892:	4680      	mov	r8, r0
 8013894:	4630      	mov	r0, r6
 8013896:	f7ff fdfd 	bl	8013494 <_Bfree>
 801389a:	4647      	mov	r7, r8
 801389c:	106d      	asrs	r5, r5, #1
 801389e:	d00b      	beq.n	80138b8 <__pow5mult+0xa0>
 80138a0:	6820      	ldr	r0, [r4, #0]
 80138a2:	b938      	cbnz	r0, 80138b4 <__pow5mult+0x9c>
 80138a4:	4622      	mov	r2, r4
 80138a6:	4621      	mov	r1, r4
 80138a8:	4630      	mov	r0, r6
 80138aa:	f7ff ff0f 	bl	80136cc <__multiply>
 80138ae:	6020      	str	r0, [r4, #0]
 80138b0:	f8c0 9000 	str.w	r9, [r0]
 80138b4:	4604      	mov	r4, r0
 80138b6:	e7e4      	b.n	8013882 <__pow5mult+0x6a>
 80138b8:	4638      	mov	r0, r7
 80138ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138be:	bf00      	nop
 80138c0:	08028c28 	.word	0x08028c28
 80138c4:	08028828 	.word	0x08028828
 80138c8:	08028ad8 	.word	0x08028ad8

080138cc <__lshift>:
 80138cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138d0:	460c      	mov	r4, r1
 80138d2:	6849      	ldr	r1, [r1, #4]
 80138d4:	6923      	ldr	r3, [r4, #16]
 80138d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80138da:	68a3      	ldr	r3, [r4, #8]
 80138dc:	4607      	mov	r7, r0
 80138de:	4691      	mov	r9, r2
 80138e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80138e4:	f108 0601 	add.w	r6, r8, #1
 80138e8:	42b3      	cmp	r3, r6
 80138ea:	db0b      	blt.n	8013904 <__lshift+0x38>
 80138ec:	4638      	mov	r0, r7
 80138ee:	f7ff fd91 	bl	8013414 <_Balloc>
 80138f2:	4605      	mov	r5, r0
 80138f4:	b948      	cbnz	r0, 801390a <__lshift+0x3e>
 80138f6:	4602      	mov	r2, r0
 80138f8:	4b28      	ldr	r3, [pc, #160]	; (801399c <__lshift+0xd0>)
 80138fa:	4829      	ldr	r0, [pc, #164]	; (80139a0 <__lshift+0xd4>)
 80138fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013900:	f7fe fb42 	bl	8011f88 <__assert_func>
 8013904:	3101      	adds	r1, #1
 8013906:	005b      	lsls	r3, r3, #1
 8013908:	e7ee      	b.n	80138e8 <__lshift+0x1c>
 801390a:	2300      	movs	r3, #0
 801390c:	f100 0114 	add.w	r1, r0, #20
 8013910:	f100 0210 	add.w	r2, r0, #16
 8013914:	4618      	mov	r0, r3
 8013916:	4553      	cmp	r3, sl
 8013918:	db33      	blt.n	8013982 <__lshift+0xb6>
 801391a:	6920      	ldr	r0, [r4, #16]
 801391c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013920:	f104 0314 	add.w	r3, r4, #20
 8013924:	f019 091f 	ands.w	r9, r9, #31
 8013928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801392c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013930:	d02b      	beq.n	801398a <__lshift+0xbe>
 8013932:	f1c9 0e20 	rsb	lr, r9, #32
 8013936:	468a      	mov	sl, r1
 8013938:	2200      	movs	r2, #0
 801393a:	6818      	ldr	r0, [r3, #0]
 801393c:	fa00 f009 	lsl.w	r0, r0, r9
 8013940:	4302      	orrs	r2, r0
 8013942:	f84a 2b04 	str.w	r2, [sl], #4
 8013946:	f853 2b04 	ldr.w	r2, [r3], #4
 801394a:	459c      	cmp	ip, r3
 801394c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013950:	d8f3      	bhi.n	801393a <__lshift+0x6e>
 8013952:	ebac 0304 	sub.w	r3, ip, r4
 8013956:	3b15      	subs	r3, #21
 8013958:	f023 0303 	bic.w	r3, r3, #3
 801395c:	3304      	adds	r3, #4
 801395e:	f104 0015 	add.w	r0, r4, #21
 8013962:	4584      	cmp	ip, r0
 8013964:	bf38      	it	cc
 8013966:	2304      	movcc	r3, #4
 8013968:	50ca      	str	r2, [r1, r3]
 801396a:	b10a      	cbz	r2, 8013970 <__lshift+0xa4>
 801396c:	f108 0602 	add.w	r6, r8, #2
 8013970:	3e01      	subs	r6, #1
 8013972:	4638      	mov	r0, r7
 8013974:	612e      	str	r6, [r5, #16]
 8013976:	4621      	mov	r1, r4
 8013978:	f7ff fd8c 	bl	8013494 <_Bfree>
 801397c:	4628      	mov	r0, r5
 801397e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013982:	f842 0f04 	str.w	r0, [r2, #4]!
 8013986:	3301      	adds	r3, #1
 8013988:	e7c5      	b.n	8013916 <__lshift+0x4a>
 801398a:	3904      	subs	r1, #4
 801398c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013990:	f841 2f04 	str.w	r2, [r1, #4]!
 8013994:	459c      	cmp	ip, r3
 8013996:	d8f9      	bhi.n	801398c <__lshift+0xc0>
 8013998:	e7ea      	b.n	8013970 <__lshift+0xa4>
 801399a:	bf00      	nop
 801399c:	08028a49 	.word	0x08028a49
 80139a0:	08028ad8 	.word	0x08028ad8

080139a4 <__mcmp>:
 80139a4:	b530      	push	{r4, r5, lr}
 80139a6:	6902      	ldr	r2, [r0, #16]
 80139a8:	690c      	ldr	r4, [r1, #16]
 80139aa:	1b12      	subs	r2, r2, r4
 80139ac:	d10e      	bne.n	80139cc <__mcmp+0x28>
 80139ae:	f100 0314 	add.w	r3, r0, #20
 80139b2:	3114      	adds	r1, #20
 80139b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80139b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80139bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80139c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80139c4:	42a5      	cmp	r5, r4
 80139c6:	d003      	beq.n	80139d0 <__mcmp+0x2c>
 80139c8:	d305      	bcc.n	80139d6 <__mcmp+0x32>
 80139ca:	2201      	movs	r2, #1
 80139cc:	4610      	mov	r0, r2
 80139ce:	bd30      	pop	{r4, r5, pc}
 80139d0:	4283      	cmp	r3, r0
 80139d2:	d3f3      	bcc.n	80139bc <__mcmp+0x18>
 80139d4:	e7fa      	b.n	80139cc <__mcmp+0x28>
 80139d6:	f04f 32ff 	mov.w	r2, #4294967295
 80139da:	e7f7      	b.n	80139cc <__mcmp+0x28>

080139dc <__mdiff>:
 80139dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e0:	460c      	mov	r4, r1
 80139e2:	4606      	mov	r6, r0
 80139e4:	4611      	mov	r1, r2
 80139e6:	4620      	mov	r0, r4
 80139e8:	4617      	mov	r7, r2
 80139ea:	f7ff ffdb 	bl	80139a4 <__mcmp>
 80139ee:	1e05      	subs	r5, r0, #0
 80139f0:	d110      	bne.n	8013a14 <__mdiff+0x38>
 80139f2:	4629      	mov	r1, r5
 80139f4:	4630      	mov	r0, r6
 80139f6:	f7ff fd0d 	bl	8013414 <_Balloc>
 80139fa:	b930      	cbnz	r0, 8013a0a <__mdiff+0x2e>
 80139fc:	4b39      	ldr	r3, [pc, #228]	; (8013ae4 <__mdiff+0x108>)
 80139fe:	4602      	mov	r2, r0
 8013a00:	f240 2132 	movw	r1, #562	; 0x232
 8013a04:	4838      	ldr	r0, [pc, #224]	; (8013ae8 <__mdiff+0x10c>)
 8013a06:	f7fe fabf 	bl	8011f88 <__assert_func>
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a14:	bfa4      	itt	ge
 8013a16:	463b      	movge	r3, r7
 8013a18:	4627      	movge	r7, r4
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	6879      	ldr	r1, [r7, #4]
 8013a1e:	bfa6      	itte	ge
 8013a20:	461c      	movge	r4, r3
 8013a22:	2500      	movge	r5, #0
 8013a24:	2501      	movlt	r5, #1
 8013a26:	f7ff fcf5 	bl	8013414 <_Balloc>
 8013a2a:	b920      	cbnz	r0, 8013a36 <__mdiff+0x5a>
 8013a2c:	4b2d      	ldr	r3, [pc, #180]	; (8013ae4 <__mdiff+0x108>)
 8013a2e:	4602      	mov	r2, r0
 8013a30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013a34:	e7e6      	b.n	8013a04 <__mdiff+0x28>
 8013a36:	693e      	ldr	r6, [r7, #16]
 8013a38:	60c5      	str	r5, [r0, #12]
 8013a3a:	6925      	ldr	r5, [r4, #16]
 8013a3c:	f107 0114 	add.w	r1, r7, #20
 8013a40:	f104 0914 	add.w	r9, r4, #20
 8013a44:	f100 0e14 	add.w	lr, r0, #20
 8013a48:	f107 0210 	add.w	r2, r7, #16
 8013a4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013a50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013a54:	46f2      	mov	sl, lr
 8013a56:	2700      	movs	r7, #0
 8013a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8013a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013a60:	fa1f f883 	uxth.w	r8, r3
 8013a64:	fa17 f78b 	uxtah	r7, r7, fp
 8013a68:	0c1b      	lsrs	r3, r3, #16
 8013a6a:	eba7 0808 	sub.w	r8, r7, r8
 8013a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013a76:	fa1f f888 	uxth.w	r8, r8
 8013a7a:	141f      	asrs	r7, r3, #16
 8013a7c:	454d      	cmp	r5, r9
 8013a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013a82:	f84a 3b04 	str.w	r3, [sl], #4
 8013a86:	d8e7      	bhi.n	8013a58 <__mdiff+0x7c>
 8013a88:	1b2b      	subs	r3, r5, r4
 8013a8a:	3b15      	subs	r3, #21
 8013a8c:	f023 0303 	bic.w	r3, r3, #3
 8013a90:	3304      	adds	r3, #4
 8013a92:	3415      	adds	r4, #21
 8013a94:	42a5      	cmp	r5, r4
 8013a96:	bf38      	it	cc
 8013a98:	2304      	movcc	r3, #4
 8013a9a:	4419      	add	r1, r3
 8013a9c:	4473      	add	r3, lr
 8013a9e:	469e      	mov	lr, r3
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	4565      	cmp	r5, ip
 8013aa4:	d30e      	bcc.n	8013ac4 <__mdiff+0xe8>
 8013aa6:	f10c 0203 	add.w	r2, ip, #3
 8013aaa:	1a52      	subs	r2, r2, r1
 8013aac:	f022 0203 	bic.w	r2, r2, #3
 8013ab0:	3903      	subs	r1, #3
 8013ab2:	458c      	cmp	ip, r1
 8013ab4:	bf38      	it	cc
 8013ab6:	2200      	movcc	r2, #0
 8013ab8:	441a      	add	r2, r3
 8013aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013abe:	b17b      	cbz	r3, 8013ae0 <__mdiff+0x104>
 8013ac0:	6106      	str	r6, [r0, #16]
 8013ac2:	e7a5      	b.n	8013a10 <__mdiff+0x34>
 8013ac4:	f855 8b04 	ldr.w	r8, [r5], #4
 8013ac8:	fa17 f488 	uxtah	r4, r7, r8
 8013acc:	1422      	asrs	r2, r4, #16
 8013ace:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013ad2:	b2a4      	uxth	r4, r4
 8013ad4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013ad8:	f84e 4b04 	str.w	r4, [lr], #4
 8013adc:	1417      	asrs	r7, r2, #16
 8013ade:	e7e0      	b.n	8013aa2 <__mdiff+0xc6>
 8013ae0:	3e01      	subs	r6, #1
 8013ae2:	e7ea      	b.n	8013aba <__mdiff+0xde>
 8013ae4:	08028a49 	.word	0x08028a49
 8013ae8:	08028ad8 	.word	0x08028ad8

08013aec <__ulp>:
 8013aec:	b082      	sub	sp, #8
 8013aee:	ed8d 0b00 	vstr	d0, [sp]
 8013af2:	9b01      	ldr	r3, [sp, #4]
 8013af4:	4912      	ldr	r1, [pc, #72]	; (8013b40 <__ulp+0x54>)
 8013af6:	4019      	ands	r1, r3
 8013af8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013afc:	2900      	cmp	r1, #0
 8013afe:	dd05      	ble.n	8013b0c <__ulp+0x20>
 8013b00:	2200      	movs	r2, #0
 8013b02:	460b      	mov	r3, r1
 8013b04:	ec43 2b10 	vmov	d0, r2, r3
 8013b08:	b002      	add	sp, #8
 8013b0a:	4770      	bx	lr
 8013b0c:	4249      	negs	r1, r1
 8013b0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013b12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013b16:	f04f 0200 	mov.w	r2, #0
 8013b1a:	f04f 0300 	mov.w	r3, #0
 8013b1e:	da04      	bge.n	8013b2a <__ulp+0x3e>
 8013b20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013b24:	fa41 f300 	asr.w	r3, r1, r0
 8013b28:	e7ec      	b.n	8013b04 <__ulp+0x18>
 8013b2a:	f1a0 0114 	sub.w	r1, r0, #20
 8013b2e:	291e      	cmp	r1, #30
 8013b30:	bfda      	itte	le
 8013b32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013b36:	fa20 f101 	lsrle.w	r1, r0, r1
 8013b3a:	2101      	movgt	r1, #1
 8013b3c:	460a      	mov	r2, r1
 8013b3e:	e7e1      	b.n	8013b04 <__ulp+0x18>
 8013b40:	7ff00000 	.word	0x7ff00000

08013b44 <__b2d>:
 8013b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b46:	6905      	ldr	r5, [r0, #16]
 8013b48:	f100 0714 	add.w	r7, r0, #20
 8013b4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013b50:	1f2e      	subs	r6, r5, #4
 8013b52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013b56:	4620      	mov	r0, r4
 8013b58:	f7ff fd52 	bl	8013600 <__hi0bits>
 8013b5c:	f1c0 0320 	rsb	r3, r0, #32
 8013b60:	280a      	cmp	r0, #10
 8013b62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013be0 <__b2d+0x9c>
 8013b66:	600b      	str	r3, [r1, #0]
 8013b68:	dc14      	bgt.n	8013b94 <__b2d+0x50>
 8013b6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8013b6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013b72:	42b7      	cmp	r7, r6
 8013b74:	ea41 030c 	orr.w	r3, r1, ip
 8013b78:	bf34      	ite	cc
 8013b7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b7e:	2100      	movcs	r1, #0
 8013b80:	3015      	adds	r0, #21
 8013b82:	fa04 f000 	lsl.w	r0, r4, r0
 8013b86:	fa21 f10e 	lsr.w	r1, r1, lr
 8013b8a:	ea40 0201 	orr.w	r2, r0, r1
 8013b8e:	ec43 2b10 	vmov	d0, r2, r3
 8013b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b94:	42b7      	cmp	r7, r6
 8013b96:	bf3a      	itte	cc
 8013b98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013b9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013ba0:	2100      	movcs	r1, #0
 8013ba2:	380b      	subs	r0, #11
 8013ba4:	d017      	beq.n	8013bd6 <__b2d+0x92>
 8013ba6:	f1c0 0c20 	rsb	ip, r0, #32
 8013baa:	fa04 f500 	lsl.w	r5, r4, r0
 8013bae:	42be      	cmp	r6, r7
 8013bb0:	fa21 f40c 	lsr.w	r4, r1, ip
 8013bb4:	ea45 0504 	orr.w	r5, r5, r4
 8013bb8:	bf8c      	ite	hi
 8013bba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013bbe:	2400      	movls	r4, #0
 8013bc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013bc4:	fa01 f000 	lsl.w	r0, r1, r0
 8013bc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8013bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013bd0:	ea40 0204 	orr.w	r2, r0, r4
 8013bd4:	e7db      	b.n	8013b8e <__b2d+0x4a>
 8013bd6:	ea44 030c 	orr.w	r3, r4, ip
 8013bda:	460a      	mov	r2, r1
 8013bdc:	e7d7      	b.n	8013b8e <__b2d+0x4a>
 8013bde:	bf00      	nop
 8013be0:	3ff00000 	.word	0x3ff00000

08013be4 <__d2b>:
 8013be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013be8:	4689      	mov	r9, r1
 8013bea:	2101      	movs	r1, #1
 8013bec:	ec57 6b10 	vmov	r6, r7, d0
 8013bf0:	4690      	mov	r8, r2
 8013bf2:	f7ff fc0f 	bl	8013414 <_Balloc>
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	b930      	cbnz	r0, 8013c08 <__d2b+0x24>
 8013bfa:	4602      	mov	r2, r0
 8013bfc:	4b25      	ldr	r3, [pc, #148]	; (8013c94 <__d2b+0xb0>)
 8013bfe:	4826      	ldr	r0, [pc, #152]	; (8013c98 <__d2b+0xb4>)
 8013c00:	f240 310a 	movw	r1, #778	; 0x30a
 8013c04:	f7fe f9c0 	bl	8011f88 <__assert_func>
 8013c08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c10:	bb35      	cbnz	r5, 8013c60 <__d2b+0x7c>
 8013c12:	2e00      	cmp	r6, #0
 8013c14:	9301      	str	r3, [sp, #4]
 8013c16:	d028      	beq.n	8013c6a <__d2b+0x86>
 8013c18:	4668      	mov	r0, sp
 8013c1a:	9600      	str	r6, [sp, #0]
 8013c1c:	f7ff fd10 	bl	8013640 <__lo0bits>
 8013c20:	9900      	ldr	r1, [sp, #0]
 8013c22:	b300      	cbz	r0, 8013c66 <__d2b+0x82>
 8013c24:	9a01      	ldr	r2, [sp, #4]
 8013c26:	f1c0 0320 	rsb	r3, r0, #32
 8013c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8013c2e:	430b      	orrs	r3, r1
 8013c30:	40c2      	lsrs	r2, r0
 8013c32:	6163      	str	r3, [r4, #20]
 8013c34:	9201      	str	r2, [sp, #4]
 8013c36:	9b01      	ldr	r3, [sp, #4]
 8013c38:	61a3      	str	r3, [r4, #24]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	bf14      	ite	ne
 8013c3e:	2202      	movne	r2, #2
 8013c40:	2201      	moveq	r2, #1
 8013c42:	6122      	str	r2, [r4, #16]
 8013c44:	b1d5      	cbz	r5, 8013c7c <__d2b+0x98>
 8013c46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c4a:	4405      	add	r5, r0
 8013c4c:	f8c9 5000 	str.w	r5, [r9]
 8013c50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c54:	f8c8 0000 	str.w	r0, [r8]
 8013c58:	4620      	mov	r0, r4
 8013c5a:	b003      	add	sp, #12
 8013c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c64:	e7d5      	b.n	8013c12 <__d2b+0x2e>
 8013c66:	6161      	str	r1, [r4, #20]
 8013c68:	e7e5      	b.n	8013c36 <__d2b+0x52>
 8013c6a:	a801      	add	r0, sp, #4
 8013c6c:	f7ff fce8 	bl	8013640 <__lo0bits>
 8013c70:	9b01      	ldr	r3, [sp, #4]
 8013c72:	6163      	str	r3, [r4, #20]
 8013c74:	2201      	movs	r2, #1
 8013c76:	6122      	str	r2, [r4, #16]
 8013c78:	3020      	adds	r0, #32
 8013c7a:	e7e3      	b.n	8013c44 <__d2b+0x60>
 8013c7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c84:	f8c9 0000 	str.w	r0, [r9]
 8013c88:	6918      	ldr	r0, [r3, #16]
 8013c8a:	f7ff fcb9 	bl	8013600 <__hi0bits>
 8013c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c92:	e7df      	b.n	8013c54 <__d2b+0x70>
 8013c94:	08028a49 	.word	0x08028a49
 8013c98:	08028ad8 	.word	0x08028ad8

08013c9c <__ratio>:
 8013c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ca0:	4688      	mov	r8, r1
 8013ca2:	4669      	mov	r1, sp
 8013ca4:	4681      	mov	r9, r0
 8013ca6:	f7ff ff4d 	bl	8013b44 <__b2d>
 8013caa:	a901      	add	r1, sp, #4
 8013cac:	4640      	mov	r0, r8
 8013cae:	ec55 4b10 	vmov	r4, r5, d0
 8013cb2:	f7ff ff47 	bl	8013b44 <__b2d>
 8013cb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013cba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013cbe:	eba3 0c02 	sub.w	ip, r3, r2
 8013cc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013cc6:	1a9b      	subs	r3, r3, r2
 8013cc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013ccc:	ec51 0b10 	vmov	r0, r1, d0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	bfd6      	itet	le
 8013cd4:	460a      	movle	r2, r1
 8013cd6:	462a      	movgt	r2, r5
 8013cd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013cdc:	468b      	mov	fp, r1
 8013cde:	462f      	mov	r7, r5
 8013ce0:	bfd4      	ite	le
 8013ce2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013ce6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013cea:	4620      	mov	r0, r4
 8013cec:	ee10 2a10 	vmov	r2, s0
 8013cf0:	465b      	mov	r3, fp
 8013cf2:	4639      	mov	r1, r7
 8013cf4:	f7ec fdc2 	bl	800087c <__aeabi_ddiv>
 8013cf8:	ec41 0b10 	vmov	d0, r0, r1
 8013cfc:	b003      	add	sp, #12
 8013cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d02 <__copybits>:
 8013d02:	3901      	subs	r1, #1
 8013d04:	b570      	push	{r4, r5, r6, lr}
 8013d06:	1149      	asrs	r1, r1, #5
 8013d08:	6914      	ldr	r4, [r2, #16]
 8013d0a:	3101      	adds	r1, #1
 8013d0c:	f102 0314 	add.w	r3, r2, #20
 8013d10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013d14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013d18:	1f05      	subs	r5, r0, #4
 8013d1a:	42a3      	cmp	r3, r4
 8013d1c:	d30c      	bcc.n	8013d38 <__copybits+0x36>
 8013d1e:	1aa3      	subs	r3, r4, r2
 8013d20:	3b11      	subs	r3, #17
 8013d22:	f023 0303 	bic.w	r3, r3, #3
 8013d26:	3211      	adds	r2, #17
 8013d28:	42a2      	cmp	r2, r4
 8013d2a:	bf88      	it	hi
 8013d2c:	2300      	movhi	r3, #0
 8013d2e:	4418      	add	r0, r3
 8013d30:	2300      	movs	r3, #0
 8013d32:	4288      	cmp	r0, r1
 8013d34:	d305      	bcc.n	8013d42 <__copybits+0x40>
 8013d36:	bd70      	pop	{r4, r5, r6, pc}
 8013d38:	f853 6b04 	ldr.w	r6, [r3], #4
 8013d3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013d40:	e7eb      	b.n	8013d1a <__copybits+0x18>
 8013d42:	f840 3b04 	str.w	r3, [r0], #4
 8013d46:	e7f4      	b.n	8013d32 <__copybits+0x30>

08013d48 <__any_on>:
 8013d48:	f100 0214 	add.w	r2, r0, #20
 8013d4c:	6900      	ldr	r0, [r0, #16]
 8013d4e:	114b      	asrs	r3, r1, #5
 8013d50:	4298      	cmp	r0, r3
 8013d52:	b510      	push	{r4, lr}
 8013d54:	db11      	blt.n	8013d7a <__any_on+0x32>
 8013d56:	dd0a      	ble.n	8013d6e <__any_on+0x26>
 8013d58:	f011 011f 	ands.w	r1, r1, #31
 8013d5c:	d007      	beq.n	8013d6e <__any_on+0x26>
 8013d5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013d62:	fa24 f001 	lsr.w	r0, r4, r1
 8013d66:	fa00 f101 	lsl.w	r1, r0, r1
 8013d6a:	428c      	cmp	r4, r1
 8013d6c:	d10b      	bne.n	8013d86 <__any_on+0x3e>
 8013d6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d803      	bhi.n	8013d7e <__any_on+0x36>
 8013d76:	2000      	movs	r0, #0
 8013d78:	bd10      	pop	{r4, pc}
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	e7f7      	b.n	8013d6e <__any_on+0x26>
 8013d7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d82:	2900      	cmp	r1, #0
 8013d84:	d0f5      	beq.n	8013d72 <__any_on+0x2a>
 8013d86:	2001      	movs	r0, #1
 8013d88:	e7f6      	b.n	8013d78 <__any_on+0x30>

08013d8a <_calloc_r>:
 8013d8a:	b513      	push	{r0, r1, r4, lr}
 8013d8c:	434a      	muls	r2, r1
 8013d8e:	4611      	mov	r1, r2
 8013d90:	9201      	str	r2, [sp, #4]
 8013d92:	f000 f859 	bl	8013e48 <_malloc_r>
 8013d96:	4604      	mov	r4, r0
 8013d98:	b118      	cbz	r0, 8013da2 <_calloc_r+0x18>
 8013d9a:	9a01      	ldr	r2, [sp, #4]
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	f7fc fb25 	bl	80103ec <memset>
 8013da2:	4620      	mov	r0, r4
 8013da4:	b002      	add	sp, #8
 8013da6:	bd10      	pop	{r4, pc}

08013da8 <_free_r>:
 8013da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013daa:	2900      	cmp	r1, #0
 8013dac:	d048      	beq.n	8013e40 <_free_r+0x98>
 8013dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013db2:	9001      	str	r0, [sp, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	f1a1 0404 	sub.w	r4, r1, #4
 8013dba:	bfb8      	it	lt
 8013dbc:	18e4      	addlt	r4, r4, r3
 8013dbe:	f000 fe8b 	bl	8014ad8 <__malloc_lock>
 8013dc2:	4a20      	ldr	r2, [pc, #128]	; (8013e44 <_free_r+0x9c>)
 8013dc4:	9801      	ldr	r0, [sp, #4]
 8013dc6:	6813      	ldr	r3, [r2, #0]
 8013dc8:	4615      	mov	r5, r2
 8013dca:	b933      	cbnz	r3, 8013dda <_free_r+0x32>
 8013dcc:	6063      	str	r3, [r4, #4]
 8013dce:	6014      	str	r4, [r2, #0]
 8013dd0:	b003      	add	sp, #12
 8013dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013dd6:	f000 be85 	b.w	8014ae4 <__malloc_unlock>
 8013dda:	42a3      	cmp	r3, r4
 8013ddc:	d90b      	bls.n	8013df6 <_free_r+0x4e>
 8013dde:	6821      	ldr	r1, [r4, #0]
 8013de0:	1862      	adds	r2, r4, r1
 8013de2:	4293      	cmp	r3, r2
 8013de4:	bf04      	itt	eq
 8013de6:	681a      	ldreq	r2, [r3, #0]
 8013de8:	685b      	ldreq	r3, [r3, #4]
 8013dea:	6063      	str	r3, [r4, #4]
 8013dec:	bf04      	itt	eq
 8013dee:	1852      	addeq	r2, r2, r1
 8013df0:	6022      	streq	r2, [r4, #0]
 8013df2:	602c      	str	r4, [r5, #0]
 8013df4:	e7ec      	b.n	8013dd0 <_free_r+0x28>
 8013df6:	461a      	mov	r2, r3
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	b10b      	cbz	r3, 8013e00 <_free_r+0x58>
 8013dfc:	42a3      	cmp	r3, r4
 8013dfe:	d9fa      	bls.n	8013df6 <_free_r+0x4e>
 8013e00:	6811      	ldr	r1, [r2, #0]
 8013e02:	1855      	adds	r5, r2, r1
 8013e04:	42a5      	cmp	r5, r4
 8013e06:	d10b      	bne.n	8013e20 <_free_r+0x78>
 8013e08:	6824      	ldr	r4, [r4, #0]
 8013e0a:	4421      	add	r1, r4
 8013e0c:	1854      	adds	r4, r2, r1
 8013e0e:	42a3      	cmp	r3, r4
 8013e10:	6011      	str	r1, [r2, #0]
 8013e12:	d1dd      	bne.n	8013dd0 <_free_r+0x28>
 8013e14:	681c      	ldr	r4, [r3, #0]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	6053      	str	r3, [r2, #4]
 8013e1a:	4421      	add	r1, r4
 8013e1c:	6011      	str	r1, [r2, #0]
 8013e1e:	e7d7      	b.n	8013dd0 <_free_r+0x28>
 8013e20:	d902      	bls.n	8013e28 <_free_r+0x80>
 8013e22:	230c      	movs	r3, #12
 8013e24:	6003      	str	r3, [r0, #0]
 8013e26:	e7d3      	b.n	8013dd0 <_free_r+0x28>
 8013e28:	6825      	ldr	r5, [r4, #0]
 8013e2a:	1961      	adds	r1, r4, r5
 8013e2c:	428b      	cmp	r3, r1
 8013e2e:	bf04      	itt	eq
 8013e30:	6819      	ldreq	r1, [r3, #0]
 8013e32:	685b      	ldreq	r3, [r3, #4]
 8013e34:	6063      	str	r3, [r4, #4]
 8013e36:	bf04      	itt	eq
 8013e38:	1949      	addeq	r1, r1, r5
 8013e3a:	6021      	streq	r1, [r4, #0]
 8013e3c:	6054      	str	r4, [r2, #4]
 8013e3e:	e7c7      	b.n	8013dd0 <_free_r+0x28>
 8013e40:	b003      	add	sp, #12
 8013e42:	bd30      	pop	{r4, r5, pc}
 8013e44:	200002b8 	.word	0x200002b8

08013e48 <_malloc_r>:
 8013e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4a:	1ccd      	adds	r5, r1, #3
 8013e4c:	f025 0503 	bic.w	r5, r5, #3
 8013e50:	3508      	adds	r5, #8
 8013e52:	2d0c      	cmp	r5, #12
 8013e54:	bf38      	it	cc
 8013e56:	250c      	movcc	r5, #12
 8013e58:	2d00      	cmp	r5, #0
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	db01      	blt.n	8013e62 <_malloc_r+0x1a>
 8013e5e:	42a9      	cmp	r1, r5
 8013e60:	d903      	bls.n	8013e6a <_malloc_r+0x22>
 8013e62:	230c      	movs	r3, #12
 8013e64:	6033      	str	r3, [r6, #0]
 8013e66:	2000      	movs	r0, #0
 8013e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e6a:	f000 fe35 	bl	8014ad8 <__malloc_lock>
 8013e6e:	4921      	ldr	r1, [pc, #132]	; (8013ef4 <_malloc_r+0xac>)
 8013e70:	680a      	ldr	r2, [r1, #0]
 8013e72:	4614      	mov	r4, r2
 8013e74:	b99c      	cbnz	r4, 8013e9e <_malloc_r+0x56>
 8013e76:	4f20      	ldr	r7, [pc, #128]	; (8013ef8 <_malloc_r+0xb0>)
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	b923      	cbnz	r3, 8013e86 <_malloc_r+0x3e>
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	4630      	mov	r0, r6
 8013e80:	f000 fafa 	bl	8014478 <_sbrk_r>
 8013e84:	6038      	str	r0, [r7, #0]
 8013e86:	4629      	mov	r1, r5
 8013e88:	4630      	mov	r0, r6
 8013e8a:	f000 faf5 	bl	8014478 <_sbrk_r>
 8013e8e:	1c43      	adds	r3, r0, #1
 8013e90:	d123      	bne.n	8013eda <_malloc_r+0x92>
 8013e92:	230c      	movs	r3, #12
 8013e94:	6033      	str	r3, [r6, #0]
 8013e96:	4630      	mov	r0, r6
 8013e98:	f000 fe24 	bl	8014ae4 <__malloc_unlock>
 8013e9c:	e7e3      	b.n	8013e66 <_malloc_r+0x1e>
 8013e9e:	6823      	ldr	r3, [r4, #0]
 8013ea0:	1b5b      	subs	r3, r3, r5
 8013ea2:	d417      	bmi.n	8013ed4 <_malloc_r+0x8c>
 8013ea4:	2b0b      	cmp	r3, #11
 8013ea6:	d903      	bls.n	8013eb0 <_malloc_r+0x68>
 8013ea8:	6023      	str	r3, [r4, #0]
 8013eaa:	441c      	add	r4, r3
 8013eac:	6025      	str	r5, [r4, #0]
 8013eae:	e004      	b.n	8013eba <_malloc_r+0x72>
 8013eb0:	6863      	ldr	r3, [r4, #4]
 8013eb2:	42a2      	cmp	r2, r4
 8013eb4:	bf0c      	ite	eq
 8013eb6:	600b      	streq	r3, [r1, #0]
 8013eb8:	6053      	strne	r3, [r2, #4]
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f000 fe12 	bl	8014ae4 <__malloc_unlock>
 8013ec0:	f104 000b 	add.w	r0, r4, #11
 8013ec4:	1d23      	adds	r3, r4, #4
 8013ec6:	f020 0007 	bic.w	r0, r0, #7
 8013eca:	1ac2      	subs	r2, r0, r3
 8013ecc:	d0cc      	beq.n	8013e68 <_malloc_r+0x20>
 8013ece:	1a1b      	subs	r3, r3, r0
 8013ed0:	50a3      	str	r3, [r4, r2]
 8013ed2:	e7c9      	b.n	8013e68 <_malloc_r+0x20>
 8013ed4:	4622      	mov	r2, r4
 8013ed6:	6864      	ldr	r4, [r4, #4]
 8013ed8:	e7cc      	b.n	8013e74 <_malloc_r+0x2c>
 8013eda:	1cc4      	adds	r4, r0, #3
 8013edc:	f024 0403 	bic.w	r4, r4, #3
 8013ee0:	42a0      	cmp	r0, r4
 8013ee2:	d0e3      	beq.n	8013eac <_malloc_r+0x64>
 8013ee4:	1a21      	subs	r1, r4, r0
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f000 fac6 	bl	8014478 <_sbrk_r>
 8013eec:	3001      	adds	r0, #1
 8013eee:	d1dd      	bne.n	8013eac <_malloc_r+0x64>
 8013ef0:	e7cf      	b.n	8013e92 <_malloc_r+0x4a>
 8013ef2:	bf00      	nop
 8013ef4:	200002b8 	.word	0x200002b8
 8013ef8:	200002bc 	.word	0x200002bc

08013efc <__ssputs_r>:
 8013efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f00:	688e      	ldr	r6, [r1, #8]
 8013f02:	429e      	cmp	r6, r3
 8013f04:	4682      	mov	sl, r0
 8013f06:	460c      	mov	r4, r1
 8013f08:	4690      	mov	r8, r2
 8013f0a:	461f      	mov	r7, r3
 8013f0c:	d838      	bhi.n	8013f80 <__ssputs_r+0x84>
 8013f0e:	898a      	ldrh	r2, [r1, #12]
 8013f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f14:	d032      	beq.n	8013f7c <__ssputs_r+0x80>
 8013f16:	6825      	ldr	r5, [r4, #0]
 8013f18:	6909      	ldr	r1, [r1, #16]
 8013f1a:	eba5 0901 	sub.w	r9, r5, r1
 8013f1e:	6965      	ldr	r5, [r4, #20]
 8013f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013f28:	3301      	adds	r3, #1
 8013f2a:	444b      	add	r3, r9
 8013f2c:	106d      	asrs	r5, r5, #1
 8013f2e:	429d      	cmp	r5, r3
 8013f30:	bf38      	it	cc
 8013f32:	461d      	movcc	r5, r3
 8013f34:	0553      	lsls	r3, r2, #21
 8013f36:	d531      	bpl.n	8013f9c <__ssputs_r+0xa0>
 8013f38:	4629      	mov	r1, r5
 8013f3a:	f7ff ff85 	bl	8013e48 <_malloc_r>
 8013f3e:	4606      	mov	r6, r0
 8013f40:	b950      	cbnz	r0, 8013f58 <__ssputs_r+0x5c>
 8013f42:	230c      	movs	r3, #12
 8013f44:	f8ca 3000 	str.w	r3, [sl]
 8013f48:	89a3      	ldrh	r3, [r4, #12]
 8013f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f4e:	81a3      	strh	r3, [r4, #12]
 8013f50:	f04f 30ff 	mov.w	r0, #4294967295
 8013f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f58:	6921      	ldr	r1, [r4, #16]
 8013f5a:	464a      	mov	r2, r9
 8013f5c:	f7ff fa4c 	bl	80133f8 <memcpy>
 8013f60:	89a3      	ldrh	r3, [r4, #12]
 8013f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	6126      	str	r6, [r4, #16]
 8013f6e:	6165      	str	r5, [r4, #20]
 8013f70:	444e      	add	r6, r9
 8013f72:	eba5 0509 	sub.w	r5, r5, r9
 8013f76:	6026      	str	r6, [r4, #0]
 8013f78:	60a5      	str	r5, [r4, #8]
 8013f7a:	463e      	mov	r6, r7
 8013f7c:	42be      	cmp	r6, r7
 8013f7e:	d900      	bls.n	8013f82 <__ssputs_r+0x86>
 8013f80:	463e      	mov	r6, r7
 8013f82:	4632      	mov	r2, r6
 8013f84:	6820      	ldr	r0, [r4, #0]
 8013f86:	4641      	mov	r1, r8
 8013f88:	f000 fd8c 	bl	8014aa4 <memmove>
 8013f8c:	68a3      	ldr	r3, [r4, #8]
 8013f8e:	6822      	ldr	r2, [r4, #0]
 8013f90:	1b9b      	subs	r3, r3, r6
 8013f92:	4432      	add	r2, r6
 8013f94:	60a3      	str	r3, [r4, #8]
 8013f96:	6022      	str	r2, [r4, #0]
 8013f98:	2000      	movs	r0, #0
 8013f9a:	e7db      	b.n	8013f54 <__ssputs_r+0x58>
 8013f9c:	462a      	mov	r2, r5
 8013f9e:	f000 fda7 	bl	8014af0 <_realloc_r>
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d1e1      	bne.n	8013f6c <__ssputs_r+0x70>
 8013fa8:	6921      	ldr	r1, [r4, #16]
 8013faa:	4650      	mov	r0, sl
 8013fac:	f7ff fefc 	bl	8013da8 <_free_r>
 8013fb0:	e7c7      	b.n	8013f42 <__ssputs_r+0x46>
	...

08013fb4 <_svfiprintf_r>:
 8013fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fb8:	4698      	mov	r8, r3
 8013fba:	898b      	ldrh	r3, [r1, #12]
 8013fbc:	061b      	lsls	r3, r3, #24
 8013fbe:	b09d      	sub	sp, #116	; 0x74
 8013fc0:	4607      	mov	r7, r0
 8013fc2:	460d      	mov	r5, r1
 8013fc4:	4614      	mov	r4, r2
 8013fc6:	d50e      	bpl.n	8013fe6 <_svfiprintf_r+0x32>
 8013fc8:	690b      	ldr	r3, [r1, #16]
 8013fca:	b963      	cbnz	r3, 8013fe6 <_svfiprintf_r+0x32>
 8013fcc:	2140      	movs	r1, #64	; 0x40
 8013fce:	f7ff ff3b 	bl	8013e48 <_malloc_r>
 8013fd2:	6028      	str	r0, [r5, #0]
 8013fd4:	6128      	str	r0, [r5, #16]
 8013fd6:	b920      	cbnz	r0, 8013fe2 <_svfiprintf_r+0x2e>
 8013fd8:	230c      	movs	r3, #12
 8013fda:	603b      	str	r3, [r7, #0]
 8013fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe0:	e0d1      	b.n	8014186 <_svfiprintf_r+0x1d2>
 8013fe2:	2340      	movs	r3, #64	; 0x40
 8013fe4:	616b      	str	r3, [r5, #20]
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8013fea:	2320      	movs	r3, #32
 8013fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ff4:	2330      	movs	r3, #48	; 0x30
 8013ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80141a0 <_svfiprintf_r+0x1ec>
 8013ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ffe:	f04f 0901 	mov.w	r9, #1
 8014002:	4623      	mov	r3, r4
 8014004:	469a      	mov	sl, r3
 8014006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801400a:	b10a      	cbz	r2, 8014010 <_svfiprintf_r+0x5c>
 801400c:	2a25      	cmp	r2, #37	; 0x25
 801400e:	d1f9      	bne.n	8014004 <_svfiprintf_r+0x50>
 8014010:	ebba 0b04 	subs.w	fp, sl, r4
 8014014:	d00b      	beq.n	801402e <_svfiprintf_r+0x7a>
 8014016:	465b      	mov	r3, fp
 8014018:	4622      	mov	r2, r4
 801401a:	4629      	mov	r1, r5
 801401c:	4638      	mov	r0, r7
 801401e:	f7ff ff6d 	bl	8013efc <__ssputs_r>
 8014022:	3001      	adds	r0, #1
 8014024:	f000 80aa 	beq.w	801417c <_svfiprintf_r+0x1c8>
 8014028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801402a:	445a      	add	r2, fp
 801402c:	9209      	str	r2, [sp, #36]	; 0x24
 801402e:	f89a 3000 	ldrb.w	r3, [sl]
 8014032:	2b00      	cmp	r3, #0
 8014034:	f000 80a2 	beq.w	801417c <_svfiprintf_r+0x1c8>
 8014038:	2300      	movs	r3, #0
 801403a:	f04f 32ff 	mov.w	r2, #4294967295
 801403e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014042:	f10a 0a01 	add.w	sl, sl, #1
 8014046:	9304      	str	r3, [sp, #16]
 8014048:	9307      	str	r3, [sp, #28]
 801404a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801404e:	931a      	str	r3, [sp, #104]	; 0x68
 8014050:	4654      	mov	r4, sl
 8014052:	2205      	movs	r2, #5
 8014054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014058:	4851      	ldr	r0, [pc, #324]	; (80141a0 <_svfiprintf_r+0x1ec>)
 801405a:	f7ec f8d9 	bl	8000210 <memchr>
 801405e:	9a04      	ldr	r2, [sp, #16]
 8014060:	b9d8      	cbnz	r0, 801409a <_svfiprintf_r+0xe6>
 8014062:	06d0      	lsls	r0, r2, #27
 8014064:	bf44      	itt	mi
 8014066:	2320      	movmi	r3, #32
 8014068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801406c:	0711      	lsls	r1, r2, #28
 801406e:	bf44      	itt	mi
 8014070:	232b      	movmi	r3, #43	; 0x2b
 8014072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014076:	f89a 3000 	ldrb.w	r3, [sl]
 801407a:	2b2a      	cmp	r3, #42	; 0x2a
 801407c:	d015      	beq.n	80140aa <_svfiprintf_r+0xf6>
 801407e:	9a07      	ldr	r2, [sp, #28]
 8014080:	4654      	mov	r4, sl
 8014082:	2000      	movs	r0, #0
 8014084:	f04f 0c0a 	mov.w	ip, #10
 8014088:	4621      	mov	r1, r4
 801408a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801408e:	3b30      	subs	r3, #48	; 0x30
 8014090:	2b09      	cmp	r3, #9
 8014092:	d94e      	bls.n	8014132 <_svfiprintf_r+0x17e>
 8014094:	b1b0      	cbz	r0, 80140c4 <_svfiprintf_r+0x110>
 8014096:	9207      	str	r2, [sp, #28]
 8014098:	e014      	b.n	80140c4 <_svfiprintf_r+0x110>
 801409a:	eba0 0308 	sub.w	r3, r0, r8
 801409e:	fa09 f303 	lsl.w	r3, r9, r3
 80140a2:	4313      	orrs	r3, r2
 80140a4:	9304      	str	r3, [sp, #16]
 80140a6:	46a2      	mov	sl, r4
 80140a8:	e7d2      	b.n	8014050 <_svfiprintf_r+0x9c>
 80140aa:	9b03      	ldr	r3, [sp, #12]
 80140ac:	1d19      	adds	r1, r3, #4
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	9103      	str	r1, [sp, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	bfbb      	ittet	lt
 80140b6:	425b      	neglt	r3, r3
 80140b8:	f042 0202 	orrlt.w	r2, r2, #2
 80140bc:	9307      	strge	r3, [sp, #28]
 80140be:	9307      	strlt	r3, [sp, #28]
 80140c0:	bfb8      	it	lt
 80140c2:	9204      	strlt	r2, [sp, #16]
 80140c4:	7823      	ldrb	r3, [r4, #0]
 80140c6:	2b2e      	cmp	r3, #46	; 0x2e
 80140c8:	d10c      	bne.n	80140e4 <_svfiprintf_r+0x130>
 80140ca:	7863      	ldrb	r3, [r4, #1]
 80140cc:	2b2a      	cmp	r3, #42	; 0x2a
 80140ce:	d135      	bne.n	801413c <_svfiprintf_r+0x188>
 80140d0:	9b03      	ldr	r3, [sp, #12]
 80140d2:	1d1a      	adds	r2, r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	9203      	str	r2, [sp, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	bfb8      	it	lt
 80140dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80140e0:	3402      	adds	r4, #2
 80140e2:	9305      	str	r3, [sp, #20]
 80140e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80141b0 <_svfiprintf_r+0x1fc>
 80140e8:	7821      	ldrb	r1, [r4, #0]
 80140ea:	2203      	movs	r2, #3
 80140ec:	4650      	mov	r0, sl
 80140ee:	f7ec f88f 	bl	8000210 <memchr>
 80140f2:	b140      	cbz	r0, 8014106 <_svfiprintf_r+0x152>
 80140f4:	2340      	movs	r3, #64	; 0x40
 80140f6:	eba0 000a 	sub.w	r0, r0, sl
 80140fa:	fa03 f000 	lsl.w	r0, r3, r0
 80140fe:	9b04      	ldr	r3, [sp, #16]
 8014100:	4303      	orrs	r3, r0
 8014102:	3401      	adds	r4, #1
 8014104:	9304      	str	r3, [sp, #16]
 8014106:	f814 1b01 	ldrb.w	r1, [r4], #1
 801410a:	4826      	ldr	r0, [pc, #152]	; (80141a4 <_svfiprintf_r+0x1f0>)
 801410c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014110:	2206      	movs	r2, #6
 8014112:	f7ec f87d 	bl	8000210 <memchr>
 8014116:	2800      	cmp	r0, #0
 8014118:	d038      	beq.n	801418c <_svfiprintf_r+0x1d8>
 801411a:	4b23      	ldr	r3, [pc, #140]	; (80141a8 <_svfiprintf_r+0x1f4>)
 801411c:	bb1b      	cbnz	r3, 8014166 <_svfiprintf_r+0x1b2>
 801411e:	9b03      	ldr	r3, [sp, #12]
 8014120:	3307      	adds	r3, #7
 8014122:	f023 0307 	bic.w	r3, r3, #7
 8014126:	3308      	adds	r3, #8
 8014128:	9303      	str	r3, [sp, #12]
 801412a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801412c:	4433      	add	r3, r6
 801412e:	9309      	str	r3, [sp, #36]	; 0x24
 8014130:	e767      	b.n	8014002 <_svfiprintf_r+0x4e>
 8014132:	fb0c 3202 	mla	r2, ip, r2, r3
 8014136:	460c      	mov	r4, r1
 8014138:	2001      	movs	r0, #1
 801413a:	e7a5      	b.n	8014088 <_svfiprintf_r+0xd4>
 801413c:	2300      	movs	r3, #0
 801413e:	3401      	adds	r4, #1
 8014140:	9305      	str	r3, [sp, #20]
 8014142:	4619      	mov	r1, r3
 8014144:	f04f 0c0a 	mov.w	ip, #10
 8014148:	4620      	mov	r0, r4
 801414a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801414e:	3a30      	subs	r2, #48	; 0x30
 8014150:	2a09      	cmp	r2, #9
 8014152:	d903      	bls.n	801415c <_svfiprintf_r+0x1a8>
 8014154:	2b00      	cmp	r3, #0
 8014156:	d0c5      	beq.n	80140e4 <_svfiprintf_r+0x130>
 8014158:	9105      	str	r1, [sp, #20]
 801415a:	e7c3      	b.n	80140e4 <_svfiprintf_r+0x130>
 801415c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014160:	4604      	mov	r4, r0
 8014162:	2301      	movs	r3, #1
 8014164:	e7f0      	b.n	8014148 <_svfiprintf_r+0x194>
 8014166:	ab03      	add	r3, sp, #12
 8014168:	9300      	str	r3, [sp, #0]
 801416a:	462a      	mov	r2, r5
 801416c:	4b0f      	ldr	r3, [pc, #60]	; (80141ac <_svfiprintf_r+0x1f8>)
 801416e:	a904      	add	r1, sp, #16
 8014170:	4638      	mov	r0, r7
 8014172:	f7fc f9e3 	bl	801053c <_printf_float>
 8014176:	1c42      	adds	r2, r0, #1
 8014178:	4606      	mov	r6, r0
 801417a:	d1d6      	bne.n	801412a <_svfiprintf_r+0x176>
 801417c:	89ab      	ldrh	r3, [r5, #12]
 801417e:	065b      	lsls	r3, r3, #25
 8014180:	f53f af2c 	bmi.w	8013fdc <_svfiprintf_r+0x28>
 8014184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014186:	b01d      	add	sp, #116	; 0x74
 8014188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801418c:	ab03      	add	r3, sp, #12
 801418e:	9300      	str	r3, [sp, #0]
 8014190:	462a      	mov	r2, r5
 8014192:	4b06      	ldr	r3, [pc, #24]	; (80141ac <_svfiprintf_r+0x1f8>)
 8014194:	a904      	add	r1, sp, #16
 8014196:	4638      	mov	r0, r7
 8014198:	f7fc fc74 	bl	8010a84 <_printf_i>
 801419c:	e7eb      	b.n	8014176 <_svfiprintf_r+0x1c2>
 801419e:	bf00      	nop
 80141a0:	08028c34 	.word	0x08028c34
 80141a4:	08028c3e 	.word	0x08028c3e
 80141a8:	0801053d 	.word	0x0801053d
 80141ac:	08013efd 	.word	0x08013efd
 80141b0:	08028c3a 	.word	0x08028c3a

080141b4 <__sfputc_r>:
 80141b4:	6893      	ldr	r3, [r2, #8]
 80141b6:	3b01      	subs	r3, #1
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	b410      	push	{r4}
 80141bc:	6093      	str	r3, [r2, #8]
 80141be:	da08      	bge.n	80141d2 <__sfputc_r+0x1e>
 80141c0:	6994      	ldr	r4, [r2, #24]
 80141c2:	42a3      	cmp	r3, r4
 80141c4:	db01      	blt.n	80141ca <__sfputc_r+0x16>
 80141c6:	290a      	cmp	r1, #10
 80141c8:	d103      	bne.n	80141d2 <__sfputc_r+0x1e>
 80141ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ce:	f000 b975 	b.w	80144bc <__swbuf_r>
 80141d2:	6813      	ldr	r3, [r2, #0]
 80141d4:	1c58      	adds	r0, r3, #1
 80141d6:	6010      	str	r0, [r2, #0]
 80141d8:	7019      	strb	r1, [r3, #0]
 80141da:	4608      	mov	r0, r1
 80141dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e0:	4770      	bx	lr

080141e2 <__sfputs_r>:
 80141e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141e4:	4606      	mov	r6, r0
 80141e6:	460f      	mov	r7, r1
 80141e8:	4614      	mov	r4, r2
 80141ea:	18d5      	adds	r5, r2, r3
 80141ec:	42ac      	cmp	r4, r5
 80141ee:	d101      	bne.n	80141f4 <__sfputs_r+0x12>
 80141f0:	2000      	movs	r0, #0
 80141f2:	e007      	b.n	8014204 <__sfputs_r+0x22>
 80141f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141f8:	463a      	mov	r2, r7
 80141fa:	4630      	mov	r0, r6
 80141fc:	f7ff ffda 	bl	80141b4 <__sfputc_r>
 8014200:	1c43      	adds	r3, r0, #1
 8014202:	d1f3      	bne.n	80141ec <__sfputs_r+0xa>
 8014204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014208 <_vfiprintf_r>:
 8014208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801420c:	460d      	mov	r5, r1
 801420e:	b09d      	sub	sp, #116	; 0x74
 8014210:	4614      	mov	r4, r2
 8014212:	4698      	mov	r8, r3
 8014214:	4606      	mov	r6, r0
 8014216:	b118      	cbz	r0, 8014220 <_vfiprintf_r+0x18>
 8014218:	6983      	ldr	r3, [r0, #24]
 801421a:	b90b      	cbnz	r3, 8014220 <_vfiprintf_r+0x18>
 801421c:	f000 fb3e 	bl	801489c <__sinit>
 8014220:	4b89      	ldr	r3, [pc, #548]	; (8014448 <_vfiprintf_r+0x240>)
 8014222:	429d      	cmp	r5, r3
 8014224:	d11b      	bne.n	801425e <_vfiprintf_r+0x56>
 8014226:	6875      	ldr	r5, [r6, #4]
 8014228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801422a:	07d9      	lsls	r1, r3, #31
 801422c:	d405      	bmi.n	801423a <_vfiprintf_r+0x32>
 801422e:	89ab      	ldrh	r3, [r5, #12]
 8014230:	059a      	lsls	r2, r3, #22
 8014232:	d402      	bmi.n	801423a <_vfiprintf_r+0x32>
 8014234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014236:	f000 fbcf 	bl	80149d8 <__retarget_lock_acquire_recursive>
 801423a:	89ab      	ldrh	r3, [r5, #12]
 801423c:	071b      	lsls	r3, r3, #28
 801423e:	d501      	bpl.n	8014244 <_vfiprintf_r+0x3c>
 8014240:	692b      	ldr	r3, [r5, #16]
 8014242:	b9eb      	cbnz	r3, 8014280 <_vfiprintf_r+0x78>
 8014244:	4629      	mov	r1, r5
 8014246:	4630      	mov	r0, r6
 8014248:	f000 f998 	bl	801457c <__swsetup_r>
 801424c:	b1c0      	cbz	r0, 8014280 <_vfiprintf_r+0x78>
 801424e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014250:	07dc      	lsls	r4, r3, #31
 8014252:	d50e      	bpl.n	8014272 <_vfiprintf_r+0x6a>
 8014254:	f04f 30ff 	mov.w	r0, #4294967295
 8014258:	b01d      	add	sp, #116	; 0x74
 801425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801425e:	4b7b      	ldr	r3, [pc, #492]	; (801444c <_vfiprintf_r+0x244>)
 8014260:	429d      	cmp	r5, r3
 8014262:	d101      	bne.n	8014268 <_vfiprintf_r+0x60>
 8014264:	68b5      	ldr	r5, [r6, #8]
 8014266:	e7df      	b.n	8014228 <_vfiprintf_r+0x20>
 8014268:	4b79      	ldr	r3, [pc, #484]	; (8014450 <_vfiprintf_r+0x248>)
 801426a:	429d      	cmp	r5, r3
 801426c:	bf08      	it	eq
 801426e:	68f5      	ldreq	r5, [r6, #12]
 8014270:	e7da      	b.n	8014228 <_vfiprintf_r+0x20>
 8014272:	89ab      	ldrh	r3, [r5, #12]
 8014274:	0598      	lsls	r0, r3, #22
 8014276:	d4ed      	bmi.n	8014254 <_vfiprintf_r+0x4c>
 8014278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801427a:	f000 fbae 	bl	80149da <__retarget_lock_release_recursive>
 801427e:	e7e9      	b.n	8014254 <_vfiprintf_r+0x4c>
 8014280:	2300      	movs	r3, #0
 8014282:	9309      	str	r3, [sp, #36]	; 0x24
 8014284:	2320      	movs	r3, #32
 8014286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801428a:	f8cd 800c 	str.w	r8, [sp, #12]
 801428e:	2330      	movs	r3, #48	; 0x30
 8014290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014454 <_vfiprintf_r+0x24c>
 8014294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014298:	f04f 0901 	mov.w	r9, #1
 801429c:	4623      	mov	r3, r4
 801429e:	469a      	mov	sl, r3
 80142a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142a4:	b10a      	cbz	r2, 80142aa <_vfiprintf_r+0xa2>
 80142a6:	2a25      	cmp	r2, #37	; 0x25
 80142a8:	d1f9      	bne.n	801429e <_vfiprintf_r+0x96>
 80142aa:	ebba 0b04 	subs.w	fp, sl, r4
 80142ae:	d00b      	beq.n	80142c8 <_vfiprintf_r+0xc0>
 80142b0:	465b      	mov	r3, fp
 80142b2:	4622      	mov	r2, r4
 80142b4:	4629      	mov	r1, r5
 80142b6:	4630      	mov	r0, r6
 80142b8:	f7ff ff93 	bl	80141e2 <__sfputs_r>
 80142bc:	3001      	adds	r0, #1
 80142be:	f000 80aa 	beq.w	8014416 <_vfiprintf_r+0x20e>
 80142c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142c4:	445a      	add	r2, fp
 80142c6:	9209      	str	r2, [sp, #36]	; 0x24
 80142c8:	f89a 3000 	ldrb.w	r3, [sl]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f000 80a2 	beq.w	8014416 <_vfiprintf_r+0x20e>
 80142d2:	2300      	movs	r3, #0
 80142d4:	f04f 32ff 	mov.w	r2, #4294967295
 80142d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142dc:	f10a 0a01 	add.w	sl, sl, #1
 80142e0:	9304      	str	r3, [sp, #16]
 80142e2:	9307      	str	r3, [sp, #28]
 80142e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142e8:	931a      	str	r3, [sp, #104]	; 0x68
 80142ea:	4654      	mov	r4, sl
 80142ec:	2205      	movs	r2, #5
 80142ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142f2:	4858      	ldr	r0, [pc, #352]	; (8014454 <_vfiprintf_r+0x24c>)
 80142f4:	f7eb ff8c 	bl	8000210 <memchr>
 80142f8:	9a04      	ldr	r2, [sp, #16]
 80142fa:	b9d8      	cbnz	r0, 8014334 <_vfiprintf_r+0x12c>
 80142fc:	06d1      	lsls	r1, r2, #27
 80142fe:	bf44      	itt	mi
 8014300:	2320      	movmi	r3, #32
 8014302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014306:	0713      	lsls	r3, r2, #28
 8014308:	bf44      	itt	mi
 801430a:	232b      	movmi	r3, #43	; 0x2b
 801430c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014310:	f89a 3000 	ldrb.w	r3, [sl]
 8014314:	2b2a      	cmp	r3, #42	; 0x2a
 8014316:	d015      	beq.n	8014344 <_vfiprintf_r+0x13c>
 8014318:	9a07      	ldr	r2, [sp, #28]
 801431a:	4654      	mov	r4, sl
 801431c:	2000      	movs	r0, #0
 801431e:	f04f 0c0a 	mov.w	ip, #10
 8014322:	4621      	mov	r1, r4
 8014324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014328:	3b30      	subs	r3, #48	; 0x30
 801432a:	2b09      	cmp	r3, #9
 801432c:	d94e      	bls.n	80143cc <_vfiprintf_r+0x1c4>
 801432e:	b1b0      	cbz	r0, 801435e <_vfiprintf_r+0x156>
 8014330:	9207      	str	r2, [sp, #28]
 8014332:	e014      	b.n	801435e <_vfiprintf_r+0x156>
 8014334:	eba0 0308 	sub.w	r3, r0, r8
 8014338:	fa09 f303 	lsl.w	r3, r9, r3
 801433c:	4313      	orrs	r3, r2
 801433e:	9304      	str	r3, [sp, #16]
 8014340:	46a2      	mov	sl, r4
 8014342:	e7d2      	b.n	80142ea <_vfiprintf_r+0xe2>
 8014344:	9b03      	ldr	r3, [sp, #12]
 8014346:	1d19      	adds	r1, r3, #4
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	9103      	str	r1, [sp, #12]
 801434c:	2b00      	cmp	r3, #0
 801434e:	bfbb      	ittet	lt
 8014350:	425b      	neglt	r3, r3
 8014352:	f042 0202 	orrlt.w	r2, r2, #2
 8014356:	9307      	strge	r3, [sp, #28]
 8014358:	9307      	strlt	r3, [sp, #28]
 801435a:	bfb8      	it	lt
 801435c:	9204      	strlt	r2, [sp, #16]
 801435e:	7823      	ldrb	r3, [r4, #0]
 8014360:	2b2e      	cmp	r3, #46	; 0x2e
 8014362:	d10c      	bne.n	801437e <_vfiprintf_r+0x176>
 8014364:	7863      	ldrb	r3, [r4, #1]
 8014366:	2b2a      	cmp	r3, #42	; 0x2a
 8014368:	d135      	bne.n	80143d6 <_vfiprintf_r+0x1ce>
 801436a:	9b03      	ldr	r3, [sp, #12]
 801436c:	1d1a      	adds	r2, r3, #4
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	9203      	str	r2, [sp, #12]
 8014372:	2b00      	cmp	r3, #0
 8014374:	bfb8      	it	lt
 8014376:	f04f 33ff 	movlt.w	r3, #4294967295
 801437a:	3402      	adds	r4, #2
 801437c:	9305      	str	r3, [sp, #20]
 801437e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014464 <_vfiprintf_r+0x25c>
 8014382:	7821      	ldrb	r1, [r4, #0]
 8014384:	2203      	movs	r2, #3
 8014386:	4650      	mov	r0, sl
 8014388:	f7eb ff42 	bl	8000210 <memchr>
 801438c:	b140      	cbz	r0, 80143a0 <_vfiprintf_r+0x198>
 801438e:	2340      	movs	r3, #64	; 0x40
 8014390:	eba0 000a 	sub.w	r0, r0, sl
 8014394:	fa03 f000 	lsl.w	r0, r3, r0
 8014398:	9b04      	ldr	r3, [sp, #16]
 801439a:	4303      	orrs	r3, r0
 801439c:	3401      	adds	r4, #1
 801439e:	9304      	str	r3, [sp, #16]
 80143a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143a4:	482c      	ldr	r0, [pc, #176]	; (8014458 <_vfiprintf_r+0x250>)
 80143a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143aa:	2206      	movs	r2, #6
 80143ac:	f7eb ff30 	bl	8000210 <memchr>
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d03f      	beq.n	8014434 <_vfiprintf_r+0x22c>
 80143b4:	4b29      	ldr	r3, [pc, #164]	; (801445c <_vfiprintf_r+0x254>)
 80143b6:	bb1b      	cbnz	r3, 8014400 <_vfiprintf_r+0x1f8>
 80143b8:	9b03      	ldr	r3, [sp, #12]
 80143ba:	3307      	adds	r3, #7
 80143bc:	f023 0307 	bic.w	r3, r3, #7
 80143c0:	3308      	adds	r3, #8
 80143c2:	9303      	str	r3, [sp, #12]
 80143c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143c6:	443b      	add	r3, r7
 80143c8:	9309      	str	r3, [sp, #36]	; 0x24
 80143ca:	e767      	b.n	801429c <_vfiprintf_r+0x94>
 80143cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80143d0:	460c      	mov	r4, r1
 80143d2:	2001      	movs	r0, #1
 80143d4:	e7a5      	b.n	8014322 <_vfiprintf_r+0x11a>
 80143d6:	2300      	movs	r3, #0
 80143d8:	3401      	adds	r4, #1
 80143da:	9305      	str	r3, [sp, #20]
 80143dc:	4619      	mov	r1, r3
 80143de:	f04f 0c0a 	mov.w	ip, #10
 80143e2:	4620      	mov	r0, r4
 80143e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143e8:	3a30      	subs	r2, #48	; 0x30
 80143ea:	2a09      	cmp	r2, #9
 80143ec:	d903      	bls.n	80143f6 <_vfiprintf_r+0x1ee>
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d0c5      	beq.n	801437e <_vfiprintf_r+0x176>
 80143f2:	9105      	str	r1, [sp, #20]
 80143f4:	e7c3      	b.n	801437e <_vfiprintf_r+0x176>
 80143f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80143fa:	4604      	mov	r4, r0
 80143fc:	2301      	movs	r3, #1
 80143fe:	e7f0      	b.n	80143e2 <_vfiprintf_r+0x1da>
 8014400:	ab03      	add	r3, sp, #12
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	462a      	mov	r2, r5
 8014406:	4b16      	ldr	r3, [pc, #88]	; (8014460 <_vfiprintf_r+0x258>)
 8014408:	a904      	add	r1, sp, #16
 801440a:	4630      	mov	r0, r6
 801440c:	f7fc f896 	bl	801053c <_printf_float>
 8014410:	4607      	mov	r7, r0
 8014412:	1c78      	adds	r0, r7, #1
 8014414:	d1d6      	bne.n	80143c4 <_vfiprintf_r+0x1bc>
 8014416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014418:	07d9      	lsls	r1, r3, #31
 801441a:	d405      	bmi.n	8014428 <_vfiprintf_r+0x220>
 801441c:	89ab      	ldrh	r3, [r5, #12]
 801441e:	059a      	lsls	r2, r3, #22
 8014420:	d402      	bmi.n	8014428 <_vfiprintf_r+0x220>
 8014422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014424:	f000 fad9 	bl	80149da <__retarget_lock_release_recursive>
 8014428:	89ab      	ldrh	r3, [r5, #12]
 801442a:	065b      	lsls	r3, r3, #25
 801442c:	f53f af12 	bmi.w	8014254 <_vfiprintf_r+0x4c>
 8014430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014432:	e711      	b.n	8014258 <_vfiprintf_r+0x50>
 8014434:	ab03      	add	r3, sp, #12
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	462a      	mov	r2, r5
 801443a:	4b09      	ldr	r3, [pc, #36]	; (8014460 <_vfiprintf_r+0x258>)
 801443c:	a904      	add	r1, sp, #16
 801443e:	4630      	mov	r0, r6
 8014440:	f7fc fb20 	bl	8010a84 <_printf_i>
 8014444:	e7e4      	b.n	8014410 <_vfiprintf_r+0x208>
 8014446:	bf00      	nop
 8014448:	08028c68 	.word	0x08028c68
 801444c:	08028c88 	.word	0x08028c88
 8014450:	08028c48 	.word	0x08028c48
 8014454:	08028c34 	.word	0x08028c34
 8014458:	08028c3e 	.word	0x08028c3e
 801445c:	0801053d 	.word	0x0801053d
 8014460:	080141e3 	.word	0x080141e3
 8014464:	08028c3a 	.word	0x08028c3a

08014468 <nan>:
 8014468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014470 <nan+0x8>
 801446c:	4770      	bx	lr
 801446e:	bf00      	nop
 8014470:	00000000 	.word	0x00000000
 8014474:	7ff80000 	.word	0x7ff80000

08014478 <_sbrk_r>:
 8014478:	b538      	push	{r3, r4, r5, lr}
 801447a:	4d06      	ldr	r5, [pc, #24]	; (8014494 <_sbrk_r+0x1c>)
 801447c:	2300      	movs	r3, #0
 801447e:	4604      	mov	r4, r0
 8014480:	4608      	mov	r0, r1
 8014482:	602b      	str	r3, [r5, #0]
 8014484:	f7f4 fe92 	bl	80091ac <_sbrk>
 8014488:	1c43      	adds	r3, r0, #1
 801448a:	d102      	bne.n	8014492 <_sbrk_r+0x1a>
 801448c:	682b      	ldr	r3, [r5, #0]
 801448e:	b103      	cbz	r3, 8014492 <_sbrk_r+0x1a>
 8014490:	6023      	str	r3, [r4, #0]
 8014492:	bd38      	pop	{r3, r4, r5, pc}
 8014494:	2000090c 	.word	0x2000090c

08014498 <strncmp>:
 8014498:	b510      	push	{r4, lr}
 801449a:	b16a      	cbz	r2, 80144b8 <strncmp+0x20>
 801449c:	3901      	subs	r1, #1
 801449e:	1884      	adds	r4, r0, r2
 80144a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80144a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d103      	bne.n	80144b4 <strncmp+0x1c>
 80144ac:	42a0      	cmp	r0, r4
 80144ae:	d001      	beq.n	80144b4 <strncmp+0x1c>
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d1f5      	bne.n	80144a0 <strncmp+0x8>
 80144b4:	1a98      	subs	r0, r3, r2
 80144b6:	bd10      	pop	{r4, pc}
 80144b8:	4610      	mov	r0, r2
 80144ba:	e7fc      	b.n	80144b6 <strncmp+0x1e>

080144bc <__swbuf_r>:
 80144bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144be:	460e      	mov	r6, r1
 80144c0:	4614      	mov	r4, r2
 80144c2:	4605      	mov	r5, r0
 80144c4:	b118      	cbz	r0, 80144ce <__swbuf_r+0x12>
 80144c6:	6983      	ldr	r3, [r0, #24]
 80144c8:	b90b      	cbnz	r3, 80144ce <__swbuf_r+0x12>
 80144ca:	f000 f9e7 	bl	801489c <__sinit>
 80144ce:	4b21      	ldr	r3, [pc, #132]	; (8014554 <__swbuf_r+0x98>)
 80144d0:	429c      	cmp	r4, r3
 80144d2:	d12b      	bne.n	801452c <__swbuf_r+0x70>
 80144d4:	686c      	ldr	r4, [r5, #4]
 80144d6:	69a3      	ldr	r3, [r4, #24]
 80144d8:	60a3      	str	r3, [r4, #8]
 80144da:	89a3      	ldrh	r3, [r4, #12]
 80144dc:	071a      	lsls	r2, r3, #28
 80144de:	d52f      	bpl.n	8014540 <__swbuf_r+0x84>
 80144e0:	6923      	ldr	r3, [r4, #16]
 80144e2:	b36b      	cbz	r3, 8014540 <__swbuf_r+0x84>
 80144e4:	6923      	ldr	r3, [r4, #16]
 80144e6:	6820      	ldr	r0, [r4, #0]
 80144e8:	1ac0      	subs	r0, r0, r3
 80144ea:	6963      	ldr	r3, [r4, #20]
 80144ec:	b2f6      	uxtb	r6, r6
 80144ee:	4283      	cmp	r3, r0
 80144f0:	4637      	mov	r7, r6
 80144f2:	dc04      	bgt.n	80144fe <__swbuf_r+0x42>
 80144f4:	4621      	mov	r1, r4
 80144f6:	4628      	mov	r0, r5
 80144f8:	f000 f93c 	bl	8014774 <_fflush_r>
 80144fc:	bb30      	cbnz	r0, 801454c <__swbuf_r+0x90>
 80144fe:	68a3      	ldr	r3, [r4, #8]
 8014500:	3b01      	subs	r3, #1
 8014502:	60a3      	str	r3, [r4, #8]
 8014504:	6823      	ldr	r3, [r4, #0]
 8014506:	1c5a      	adds	r2, r3, #1
 8014508:	6022      	str	r2, [r4, #0]
 801450a:	701e      	strb	r6, [r3, #0]
 801450c:	6963      	ldr	r3, [r4, #20]
 801450e:	3001      	adds	r0, #1
 8014510:	4283      	cmp	r3, r0
 8014512:	d004      	beq.n	801451e <__swbuf_r+0x62>
 8014514:	89a3      	ldrh	r3, [r4, #12]
 8014516:	07db      	lsls	r3, r3, #31
 8014518:	d506      	bpl.n	8014528 <__swbuf_r+0x6c>
 801451a:	2e0a      	cmp	r6, #10
 801451c:	d104      	bne.n	8014528 <__swbuf_r+0x6c>
 801451e:	4621      	mov	r1, r4
 8014520:	4628      	mov	r0, r5
 8014522:	f000 f927 	bl	8014774 <_fflush_r>
 8014526:	b988      	cbnz	r0, 801454c <__swbuf_r+0x90>
 8014528:	4638      	mov	r0, r7
 801452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801452c:	4b0a      	ldr	r3, [pc, #40]	; (8014558 <__swbuf_r+0x9c>)
 801452e:	429c      	cmp	r4, r3
 8014530:	d101      	bne.n	8014536 <__swbuf_r+0x7a>
 8014532:	68ac      	ldr	r4, [r5, #8]
 8014534:	e7cf      	b.n	80144d6 <__swbuf_r+0x1a>
 8014536:	4b09      	ldr	r3, [pc, #36]	; (801455c <__swbuf_r+0xa0>)
 8014538:	429c      	cmp	r4, r3
 801453a:	bf08      	it	eq
 801453c:	68ec      	ldreq	r4, [r5, #12]
 801453e:	e7ca      	b.n	80144d6 <__swbuf_r+0x1a>
 8014540:	4621      	mov	r1, r4
 8014542:	4628      	mov	r0, r5
 8014544:	f000 f81a 	bl	801457c <__swsetup_r>
 8014548:	2800      	cmp	r0, #0
 801454a:	d0cb      	beq.n	80144e4 <__swbuf_r+0x28>
 801454c:	f04f 37ff 	mov.w	r7, #4294967295
 8014550:	e7ea      	b.n	8014528 <__swbuf_r+0x6c>
 8014552:	bf00      	nop
 8014554:	08028c68 	.word	0x08028c68
 8014558:	08028c88 	.word	0x08028c88
 801455c:	08028c48 	.word	0x08028c48

08014560 <__ascii_wctomb>:
 8014560:	b149      	cbz	r1, 8014576 <__ascii_wctomb+0x16>
 8014562:	2aff      	cmp	r2, #255	; 0xff
 8014564:	bf85      	ittet	hi
 8014566:	238a      	movhi	r3, #138	; 0x8a
 8014568:	6003      	strhi	r3, [r0, #0]
 801456a:	700a      	strbls	r2, [r1, #0]
 801456c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014570:	bf98      	it	ls
 8014572:	2001      	movls	r0, #1
 8014574:	4770      	bx	lr
 8014576:	4608      	mov	r0, r1
 8014578:	4770      	bx	lr
	...

0801457c <__swsetup_r>:
 801457c:	4b32      	ldr	r3, [pc, #200]	; (8014648 <__swsetup_r+0xcc>)
 801457e:	b570      	push	{r4, r5, r6, lr}
 8014580:	681d      	ldr	r5, [r3, #0]
 8014582:	4606      	mov	r6, r0
 8014584:	460c      	mov	r4, r1
 8014586:	b125      	cbz	r5, 8014592 <__swsetup_r+0x16>
 8014588:	69ab      	ldr	r3, [r5, #24]
 801458a:	b913      	cbnz	r3, 8014592 <__swsetup_r+0x16>
 801458c:	4628      	mov	r0, r5
 801458e:	f000 f985 	bl	801489c <__sinit>
 8014592:	4b2e      	ldr	r3, [pc, #184]	; (801464c <__swsetup_r+0xd0>)
 8014594:	429c      	cmp	r4, r3
 8014596:	d10f      	bne.n	80145b8 <__swsetup_r+0x3c>
 8014598:	686c      	ldr	r4, [r5, #4]
 801459a:	89a3      	ldrh	r3, [r4, #12]
 801459c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145a0:	0719      	lsls	r1, r3, #28
 80145a2:	d42c      	bmi.n	80145fe <__swsetup_r+0x82>
 80145a4:	06dd      	lsls	r5, r3, #27
 80145a6:	d411      	bmi.n	80145cc <__swsetup_r+0x50>
 80145a8:	2309      	movs	r3, #9
 80145aa:	6033      	str	r3, [r6, #0]
 80145ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80145b0:	81a3      	strh	r3, [r4, #12]
 80145b2:	f04f 30ff 	mov.w	r0, #4294967295
 80145b6:	e03e      	b.n	8014636 <__swsetup_r+0xba>
 80145b8:	4b25      	ldr	r3, [pc, #148]	; (8014650 <__swsetup_r+0xd4>)
 80145ba:	429c      	cmp	r4, r3
 80145bc:	d101      	bne.n	80145c2 <__swsetup_r+0x46>
 80145be:	68ac      	ldr	r4, [r5, #8]
 80145c0:	e7eb      	b.n	801459a <__swsetup_r+0x1e>
 80145c2:	4b24      	ldr	r3, [pc, #144]	; (8014654 <__swsetup_r+0xd8>)
 80145c4:	429c      	cmp	r4, r3
 80145c6:	bf08      	it	eq
 80145c8:	68ec      	ldreq	r4, [r5, #12]
 80145ca:	e7e6      	b.n	801459a <__swsetup_r+0x1e>
 80145cc:	0758      	lsls	r0, r3, #29
 80145ce:	d512      	bpl.n	80145f6 <__swsetup_r+0x7a>
 80145d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145d2:	b141      	cbz	r1, 80145e6 <__swsetup_r+0x6a>
 80145d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145d8:	4299      	cmp	r1, r3
 80145da:	d002      	beq.n	80145e2 <__swsetup_r+0x66>
 80145dc:	4630      	mov	r0, r6
 80145de:	f7ff fbe3 	bl	8013da8 <_free_r>
 80145e2:	2300      	movs	r3, #0
 80145e4:	6363      	str	r3, [r4, #52]	; 0x34
 80145e6:	89a3      	ldrh	r3, [r4, #12]
 80145e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	2300      	movs	r3, #0
 80145f0:	6063      	str	r3, [r4, #4]
 80145f2:	6923      	ldr	r3, [r4, #16]
 80145f4:	6023      	str	r3, [r4, #0]
 80145f6:	89a3      	ldrh	r3, [r4, #12]
 80145f8:	f043 0308 	orr.w	r3, r3, #8
 80145fc:	81a3      	strh	r3, [r4, #12]
 80145fe:	6923      	ldr	r3, [r4, #16]
 8014600:	b94b      	cbnz	r3, 8014616 <__swsetup_r+0x9a>
 8014602:	89a3      	ldrh	r3, [r4, #12]
 8014604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801460c:	d003      	beq.n	8014616 <__swsetup_r+0x9a>
 801460e:	4621      	mov	r1, r4
 8014610:	4630      	mov	r0, r6
 8014612:	f000 fa07 	bl	8014a24 <__smakebuf_r>
 8014616:	89a0      	ldrh	r0, [r4, #12]
 8014618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801461c:	f010 0301 	ands.w	r3, r0, #1
 8014620:	d00a      	beq.n	8014638 <__swsetup_r+0xbc>
 8014622:	2300      	movs	r3, #0
 8014624:	60a3      	str	r3, [r4, #8]
 8014626:	6963      	ldr	r3, [r4, #20]
 8014628:	425b      	negs	r3, r3
 801462a:	61a3      	str	r3, [r4, #24]
 801462c:	6923      	ldr	r3, [r4, #16]
 801462e:	b943      	cbnz	r3, 8014642 <__swsetup_r+0xc6>
 8014630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014634:	d1ba      	bne.n	80145ac <__swsetup_r+0x30>
 8014636:	bd70      	pop	{r4, r5, r6, pc}
 8014638:	0781      	lsls	r1, r0, #30
 801463a:	bf58      	it	pl
 801463c:	6963      	ldrpl	r3, [r4, #20]
 801463e:	60a3      	str	r3, [r4, #8]
 8014640:	e7f4      	b.n	801462c <__swsetup_r+0xb0>
 8014642:	2000      	movs	r0, #0
 8014644:	e7f7      	b.n	8014636 <__swsetup_r+0xba>
 8014646:	bf00      	nop
 8014648:	20000040 	.word	0x20000040
 801464c:	08028c68 	.word	0x08028c68
 8014650:	08028c88 	.word	0x08028c88
 8014654:	08028c48 	.word	0x08028c48

08014658 <abort>:
 8014658:	b508      	push	{r3, lr}
 801465a:	2006      	movs	r0, #6
 801465c:	f000 fa96 	bl	8014b8c <raise>
 8014660:	2001      	movs	r0, #1
 8014662:	f7f4 fd2b 	bl	80090bc <_exit>
	...

08014668 <__sflush_r>:
 8014668:	898a      	ldrh	r2, [r1, #12]
 801466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801466e:	4605      	mov	r5, r0
 8014670:	0710      	lsls	r0, r2, #28
 8014672:	460c      	mov	r4, r1
 8014674:	d458      	bmi.n	8014728 <__sflush_r+0xc0>
 8014676:	684b      	ldr	r3, [r1, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	dc05      	bgt.n	8014688 <__sflush_r+0x20>
 801467c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801467e:	2b00      	cmp	r3, #0
 8014680:	dc02      	bgt.n	8014688 <__sflush_r+0x20>
 8014682:	2000      	movs	r0, #0
 8014684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801468a:	2e00      	cmp	r6, #0
 801468c:	d0f9      	beq.n	8014682 <__sflush_r+0x1a>
 801468e:	2300      	movs	r3, #0
 8014690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014694:	682f      	ldr	r7, [r5, #0]
 8014696:	602b      	str	r3, [r5, #0]
 8014698:	d032      	beq.n	8014700 <__sflush_r+0x98>
 801469a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801469c:	89a3      	ldrh	r3, [r4, #12]
 801469e:	075a      	lsls	r2, r3, #29
 80146a0:	d505      	bpl.n	80146ae <__sflush_r+0x46>
 80146a2:	6863      	ldr	r3, [r4, #4]
 80146a4:	1ac0      	subs	r0, r0, r3
 80146a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80146a8:	b10b      	cbz	r3, 80146ae <__sflush_r+0x46>
 80146aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146ac:	1ac0      	subs	r0, r0, r3
 80146ae:	2300      	movs	r3, #0
 80146b0:	4602      	mov	r2, r0
 80146b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80146b4:	6a21      	ldr	r1, [r4, #32]
 80146b6:	4628      	mov	r0, r5
 80146b8:	47b0      	blx	r6
 80146ba:	1c43      	adds	r3, r0, #1
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	d106      	bne.n	80146ce <__sflush_r+0x66>
 80146c0:	6829      	ldr	r1, [r5, #0]
 80146c2:	291d      	cmp	r1, #29
 80146c4:	d82c      	bhi.n	8014720 <__sflush_r+0xb8>
 80146c6:	4a2a      	ldr	r2, [pc, #168]	; (8014770 <__sflush_r+0x108>)
 80146c8:	40ca      	lsrs	r2, r1
 80146ca:	07d6      	lsls	r6, r2, #31
 80146cc:	d528      	bpl.n	8014720 <__sflush_r+0xb8>
 80146ce:	2200      	movs	r2, #0
 80146d0:	6062      	str	r2, [r4, #4]
 80146d2:	04d9      	lsls	r1, r3, #19
 80146d4:	6922      	ldr	r2, [r4, #16]
 80146d6:	6022      	str	r2, [r4, #0]
 80146d8:	d504      	bpl.n	80146e4 <__sflush_r+0x7c>
 80146da:	1c42      	adds	r2, r0, #1
 80146dc:	d101      	bne.n	80146e2 <__sflush_r+0x7a>
 80146de:	682b      	ldr	r3, [r5, #0]
 80146e0:	b903      	cbnz	r3, 80146e4 <__sflush_r+0x7c>
 80146e2:	6560      	str	r0, [r4, #84]	; 0x54
 80146e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146e6:	602f      	str	r7, [r5, #0]
 80146e8:	2900      	cmp	r1, #0
 80146ea:	d0ca      	beq.n	8014682 <__sflush_r+0x1a>
 80146ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146f0:	4299      	cmp	r1, r3
 80146f2:	d002      	beq.n	80146fa <__sflush_r+0x92>
 80146f4:	4628      	mov	r0, r5
 80146f6:	f7ff fb57 	bl	8013da8 <_free_r>
 80146fa:	2000      	movs	r0, #0
 80146fc:	6360      	str	r0, [r4, #52]	; 0x34
 80146fe:	e7c1      	b.n	8014684 <__sflush_r+0x1c>
 8014700:	6a21      	ldr	r1, [r4, #32]
 8014702:	2301      	movs	r3, #1
 8014704:	4628      	mov	r0, r5
 8014706:	47b0      	blx	r6
 8014708:	1c41      	adds	r1, r0, #1
 801470a:	d1c7      	bne.n	801469c <__sflush_r+0x34>
 801470c:	682b      	ldr	r3, [r5, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d0c4      	beq.n	801469c <__sflush_r+0x34>
 8014712:	2b1d      	cmp	r3, #29
 8014714:	d001      	beq.n	801471a <__sflush_r+0xb2>
 8014716:	2b16      	cmp	r3, #22
 8014718:	d101      	bne.n	801471e <__sflush_r+0xb6>
 801471a:	602f      	str	r7, [r5, #0]
 801471c:	e7b1      	b.n	8014682 <__sflush_r+0x1a>
 801471e:	89a3      	ldrh	r3, [r4, #12]
 8014720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014724:	81a3      	strh	r3, [r4, #12]
 8014726:	e7ad      	b.n	8014684 <__sflush_r+0x1c>
 8014728:	690f      	ldr	r7, [r1, #16]
 801472a:	2f00      	cmp	r7, #0
 801472c:	d0a9      	beq.n	8014682 <__sflush_r+0x1a>
 801472e:	0793      	lsls	r3, r2, #30
 8014730:	680e      	ldr	r6, [r1, #0]
 8014732:	bf08      	it	eq
 8014734:	694b      	ldreq	r3, [r1, #20]
 8014736:	600f      	str	r7, [r1, #0]
 8014738:	bf18      	it	ne
 801473a:	2300      	movne	r3, #0
 801473c:	eba6 0807 	sub.w	r8, r6, r7
 8014740:	608b      	str	r3, [r1, #8]
 8014742:	f1b8 0f00 	cmp.w	r8, #0
 8014746:	dd9c      	ble.n	8014682 <__sflush_r+0x1a>
 8014748:	6a21      	ldr	r1, [r4, #32]
 801474a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801474c:	4643      	mov	r3, r8
 801474e:	463a      	mov	r2, r7
 8014750:	4628      	mov	r0, r5
 8014752:	47b0      	blx	r6
 8014754:	2800      	cmp	r0, #0
 8014756:	dc06      	bgt.n	8014766 <__sflush_r+0xfe>
 8014758:	89a3      	ldrh	r3, [r4, #12]
 801475a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801475e:	81a3      	strh	r3, [r4, #12]
 8014760:	f04f 30ff 	mov.w	r0, #4294967295
 8014764:	e78e      	b.n	8014684 <__sflush_r+0x1c>
 8014766:	4407      	add	r7, r0
 8014768:	eba8 0800 	sub.w	r8, r8, r0
 801476c:	e7e9      	b.n	8014742 <__sflush_r+0xda>
 801476e:	bf00      	nop
 8014770:	20400001 	.word	0x20400001

08014774 <_fflush_r>:
 8014774:	b538      	push	{r3, r4, r5, lr}
 8014776:	690b      	ldr	r3, [r1, #16]
 8014778:	4605      	mov	r5, r0
 801477a:	460c      	mov	r4, r1
 801477c:	b913      	cbnz	r3, 8014784 <_fflush_r+0x10>
 801477e:	2500      	movs	r5, #0
 8014780:	4628      	mov	r0, r5
 8014782:	bd38      	pop	{r3, r4, r5, pc}
 8014784:	b118      	cbz	r0, 801478e <_fflush_r+0x1a>
 8014786:	6983      	ldr	r3, [r0, #24]
 8014788:	b90b      	cbnz	r3, 801478e <_fflush_r+0x1a>
 801478a:	f000 f887 	bl	801489c <__sinit>
 801478e:	4b14      	ldr	r3, [pc, #80]	; (80147e0 <_fflush_r+0x6c>)
 8014790:	429c      	cmp	r4, r3
 8014792:	d11b      	bne.n	80147cc <_fflush_r+0x58>
 8014794:	686c      	ldr	r4, [r5, #4]
 8014796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d0ef      	beq.n	801477e <_fflush_r+0xa>
 801479e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80147a0:	07d0      	lsls	r0, r2, #31
 80147a2:	d404      	bmi.n	80147ae <_fflush_r+0x3a>
 80147a4:	0599      	lsls	r1, r3, #22
 80147a6:	d402      	bmi.n	80147ae <_fflush_r+0x3a>
 80147a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147aa:	f000 f915 	bl	80149d8 <__retarget_lock_acquire_recursive>
 80147ae:	4628      	mov	r0, r5
 80147b0:	4621      	mov	r1, r4
 80147b2:	f7ff ff59 	bl	8014668 <__sflush_r>
 80147b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147b8:	07da      	lsls	r2, r3, #31
 80147ba:	4605      	mov	r5, r0
 80147bc:	d4e0      	bmi.n	8014780 <_fflush_r+0xc>
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	059b      	lsls	r3, r3, #22
 80147c2:	d4dd      	bmi.n	8014780 <_fflush_r+0xc>
 80147c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147c6:	f000 f908 	bl	80149da <__retarget_lock_release_recursive>
 80147ca:	e7d9      	b.n	8014780 <_fflush_r+0xc>
 80147cc:	4b05      	ldr	r3, [pc, #20]	; (80147e4 <_fflush_r+0x70>)
 80147ce:	429c      	cmp	r4, r3
 80147d0:	d101      	bne.n	80147d6 <_fflush_r+0x62>
 80147d2:	68ac      	ldr	r4, [r5, #8]
 80147d4:	e7df      	b.n	8014796 <_fflush_r+0x22>
 80147d6:	4b04      	ldr	r3, [pc, #16]	; (80147e8 <_fflush_r+0x74>)
 80147d8:	429c      	cmp	r4, r3
 80147da:	bf08      	it	eq
 80147dc:	68ec      	ldreq	r4, [r5, #12]
 80147de:	e7da      	b.n	8014796 <_fflush_r+0x22>
 80147e0:	08028c68 	.word	0x08028c68
 80147e4:	08028c88 	.word	0x08028c88
 80147e8:	08028c48 	.word	0x08028c48

080147ec <std>:
 80147ec:	2300      	movs	r3, #0
 80147ee:	b510      	push	{r4, lr}
 80147f0:	4604      	mov	r4, r0
 80147f2:	e9c0 3300 	strd	r3, r3, [r0]
 80147f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147fa:	6083      	str	r3, [r0, #8]
 80147fc:	8181      	strh	r1, [r0, #12]
 80147fe:	6643      	str	r3, [r0, #100]	; 0x64
 8014800:	81c2      	strh	r2, [r0, #14]
 8014802:	6183      	str	r3, [r0, #24]
 8014804:	4619      	mov	r1, r3
 8014806:	2208      	movs	r2, #8
 8014808:	305c      	adds	r0, #92	; 0x5c
 801480a:	f7fb fdef 	bl	80103ec <memset>
 801480e:	4b05      	ldr	r3, [pc, #20]	; (8014824 <std+0x38>)
 8014810:	6263      	str	r3, [r4, #36]	; 0x24
 8014812:	4b05      	ldr	r3, [pc, #20]	; (8014828 <std+0x3c>)
 8014814:	62a3      	str	r3, [r4, #40]	; 0x28
 8014816:	4b05      	ldr	r3, [pc, #20]	; (801482c <std+0x40>)
 8014818:	62e3      	str	r3, [r4, #44]	; 0x2c
 801481a:	4b05      	ldr	r3, [pc, #20]	; (8014830 <std+0x44>)
 801481c:	6224      	str	r4, [r4, #32]
 801481e:	6323      	str	r3, [r4, #48]	; 0x30
 8014820:	bd10      	pop	{r4, pc}
 8014822:	bf00      	nop
 8014824:	08014bc5 	.word	0x08014bc5
 8014828:	08014be7 	.word	0x08014be7
 801482c:	08014c1f 	.word	0x08014c1f
 8014830:	08014c43 	.word	0x08014c43

08014834 <_cleanup_r>:
 8014834:	4901      	ldr	r1, [pc, #4]	; (801483c <_cleanup_r+0x8>)
 8014836:	f000 b8af 	b.w	8014998 <_fwalk_reent>
 801483a:	bf00      	nop
 801483c:	08014775 	.word	0x08014775

08014840 <__sfmoreglue>:
 8014840:	b570      	push	{r4, r5, r6, lr}
 8014842:	1e4a      	subs	r2, r1, #1
 8014844:	2568      	movs	r5, #104	; 0x68
 8014846:	4355      	muls	r5, r2
 8014848:	460e      	mov	r6, r1
 801484a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801484e:	f7ff fafb 	bl	8013e48 <_malloc_r>
 8014852:	4604      	mov	r4, r0
 8014854:	b140      	cbz	r0, 8014868 <__sfmoreglue+0x28>
 8014856:	2100      	movs	r1, #0
 8014858:	e9c0 1600 	strd	r1, r6, [r0]
 801485c:	300c      	adds	r0, #12
 801485e:	60a0      	str	r0, [r4, #8]
 8014860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014864:	f7fb fdc2 	bl	80103ec <memset>
 8014868:	4620      	mov	r0, r4
 801486a:	bd70      	pop	{r4, r5, r6, pc}

0801486c <__sfp_lock_acquire>:
 801486c:	4801      	ldr	r0, [pc, #4]	; (8014874 <__sfp_lock_acquire+0x8>)
 801486e:	f000 b8b3 	b.w	80149d8 <__retarget_lock_acquire_recursive>
 8014872:	bf00      	nop
 8014874:	20000908 	.word	0x20000908

08014878 <__sfp_lock_release>:
 8014878:	4801      	ldr	r0, [pc, #4]	; (8014880 <__sfp_lock_release+0x8>)
 801487a:	f000 b8ae 	b.w	80149da <__retarget_lock_release_recursive>
 801487e:	bf00      	nop
 8014880:	20000908 	.word	0x20000908

08014884 <__sinit_lock_acquire>:
 8014884:	4801      	ldr	r0, [pc, #4]	; (801488c <__sinit_lock_acquire+0x8>)
 8014886:	f000 b8a7 	b.w	80149d8 <__retarget_lock_acquire_recursive>
 801488a:	bf00      	nop
 801488c:	20000903 	.word	0x20000903

08014890 <__sinit_lock_release>:
 8014890:	4801      	ldr	r0, [pc, #4]	; (8014898 <__sinit_lock_release+0x8>)
 8014892:	f000 b8a2 	b.w	80149da <__retarget_lock_release_recursive>
 8014896:	bf00      	nop
 8014898:	20000903 	.word	0x20000903

0801489c <__sinit>:
 801489c:	b510      	push	{r4, lr}
 801489e:	4604      	mov	r4, r0
 80148a0:	f7ff fff0 	bl	8014884 <__sinit_lock_acquire>
 80148a4:	69a3      	ldr	r3, [r4, #24]
 80148a6:	b11b      	cbz	r3, 80148b0 <__sinit+0x14>
 80148a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148ac:	f7ff bff0 	b.w	8014890 <__sinit_lock_release>
 80148b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80148b4:	6523      	str	r3, [r4, #80]	; 0x50
 80148b6:	4b13      	ldr	r3, [pc, #76]	; (8014904 <__sinit+0x68>)
 80148b8:	4a13      	ldr	r2, [pc, #76]	; (8014908 <__sinit+0x6c>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80148be:	42a3      	cmp	r3, r4
 80148c0:	bf04      	itt	eq
 80148c2:	2301      	moveq	r3, #1
 80148c4:	61a3      	streq	r3, [r4, #24]
 80148c6:	4620      	mov	r0, r4
 80148c8:	f000 f820 	bl	801490c <__sfp>
 80148cc:	6060      	str	r0, [r4, #4]
 80148ce:	4620      	mov	r0, r4
 80148d0:	f000 f81c 	bl	801490c <__sfp>
 80148d4:	60a0      	str	r0, [r4, #8]
 80148d6:	4620      	mov	r0, r4
 80148d8:	f000 f818 	bl	801490c <__sfp>
 80148dc:	2200      	movs	r2, #0
 80148de:	60e0      	str	r0, [r4, #12]
 80148e0:	2104      	movs	r1, #4
 80148e2:	6860      	ldr	r0, [r4, #4]
 80148e4:	f7ff ff82 	bl	80147ec <std>
 80148e8:	68a0      	ldr	r0, [r4, #8]
 80148ea:	2201      	movs	r2, #1
 80148ec:	2109      	movs	r1, #9
 80148ee:	f7ff ff7d 	bl	80147ec <std>
 80148f2:	68e0      	ldr	r0, [r4, #12]
 80148f4:	2202      	movs	r2, #2
 80148f6:	2112      	movs	r1, #18
 80148f8:	f7ff ff78 	bl	80147ec <std>
 80148fc:	2301      	movs	r3, #1
 80148fe:	61a3      	str	r3, [r4, #24]
 8014900:	e7d2      	b.n	80148a8 <__sinit+0xc>
 8014902:	bf00      	nop
 8014904:	08028794 	.word	0x08028794
 8014908:	08014835 	.word	0x08014835

0801490c <__sfp>:
 801490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490e:	4607      	mov	r7, r0
 8014910:	f7ff ffac 	bl	801486c <__sfp_lock_acquire>
 8014914:	4b1e      	ldr	r3, [pc, #120]	; (8014990 <__sfp+0x84>)
 8014916:	681e      	ldr	r6, [r3, #0]
 8014918:	69b3      	ldr	r3, [r6, #24]
 801491a:	b913      	cbnz	r3, 8014922 <__sfp+0x16>
 801491c:	4630      	mov	r0, r6
 801491e:	f7ff ffbd 	bl	801489c <__sinit>
 8014922:	3648      	adds	r6, #72	; 0x48
 8014924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014928:	3b01      	subs	r3, #1
 801492a:	d503      	bpl.n	8014934 <__sfp+0x28>
 801492c:	6833      	ldr	r3, [r6, #0]
 801492e:	b30b      	cbz	r3, 8014974 <__sfp+0x68>
 8014930:	6836      	ldr	r6, [r6, #0]
 8014932:	e7f7      	b.n	8014924 <__sfp+0x18>
 8014934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014938:	b9d5      	cbnz	r5, 8014970 <__sfp+0x64>
 801493a:	4b16      	ldr	r3, [pc, #88]	; (8014994 <__sfp+0x88>)
 801493c:	60e3      	str	r3, [r4, #12]
 801493e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014942:	6665      	str	r5, [r4, #100]	; 0x64
 8014944:	f000 f847 	bl	80149d6 <__retarget_lock_init_recursive>
 8014948:	f7ff ff96 	bl	8014878 <__sfp_lock_release>
 801494c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014954:	6025      	str	r5, [r4, #0]
 8014956:	61a5      	str	r5, [r4, #24]
 8014958:	2208      	movs	r2, #8
 801495a:	4629      	mov	r1, r5
 801495c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014960:	f7fb fd44 	bl	80103ec <memset>
 8014964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801496c:	4620      	mov	r0, r4
 801496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014970:	3468      	adds	r4, #104	; 0x68
 8014972:	e7d9      	b.n	8014928 <__sfp+0x1c>
 8014974:	2104      	movs	r1, #4
 8014976:	4638      	mov	r0, r7
 8014978:	f7ff ff62 	bl	8014840 <__sfmoreglue>
 801497c:	4604      	mov	r4, r0
 801497e:	6030      	str	r0, [r6, #0]
 8014980:	2800      	cmp	r0, #0
 8014982:	d1d5      	bne.n	8014930 <__sfp+0x24>
 8014984:	f7ff ff78 	bl	8014878 <__sfp_lock_release>
 8014988:	230c      	movs	r3, #12
 801498a:	603b      	str	r3, [r7, #0]
 801498c:	e7ee      	b.n	801496c <__sfp+0x60>
 801498e:	bf00      	nop
 8014990:	08028794 	.word	0x08028794
 8014994:	ffff0001 	.word	0xffff0001

08014998 <_fwalk_reent>:
 8014998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801499c:	4606      	mov	r6, r0
 801499e:	4688      	mov	r8, r1
 80149a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80149a4:	2700      	movs	r7, #0
 80149a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149aa:	f1b9 0901 	subs.w	r9, r9, #1
 80149ae:	d505      	bpl.n	80149bc <_fwalk_reent+0x24>
 80149b0:	6824      	ldr	r4, [r4, #0]
 80149b2:	2c00      	cmp	r4, #0
 80149b4:	d1f7      	bne.n	80149a6 <_fwalk_reent+0xe>
 80149b6:	4638      	mov	r0, r7
 80149b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149bc:	89ab      	ldrh	r3, [r5, #12]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d907      	bls.n	80149d2 <_fwalk_reent+0x3a>
 80149c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149c6:	3301      	adds	r3, #1
 80149c8:	d003      	beq.n	80149d2 <_fwalk_reent+0x3a>
 80149ca:	4629      	mov	r1, r5
 80149cc:	4630      	mov	r0, r6
 80149ce:	47c0      	blx	r8
 80149d0:	4307      	orrs	r7, r0
 80149d2:	3568      	adds	r5, #104	; 0x68
 80149d4:	e7e9      	b.n	80149aa <_fwalk_reent+0x12>

080149d6 <__retarget_lock_init_recursive>:
 80149d6:	4770      	bx	lr

080149d8 <__retarget_lock_acquire_recursive>:
 80149d8:	4770      	bx	lr

080149da <__retarget_lock_release_recursive>:
 80149da:	4770      	bx	lr

080149dc <__swhatbuf_r>:
 80149dc:	b570      	push	{r4, r5, r6, lr}
 80149de:	460e      	mov	r6, r1
 80149e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e4:	2900      	cmp	r1, #0
 80149e6:	b096      	sub	sp, #88	; 0x58
 80149e8:	4614      	mov	r4, r2
 80149ea:	461d      	mov	r5, r3
 80149ec:	da07      	bge.n	80149fe <__swhatbuf_r+0x22>
 80149ee:	2300      	movs	r3, #0
 80149f0:	602b      	str	r3, [r5, #0]
 80149f2:	89b3      	ldrh	r3, [r6, #12]
 80149f4:	061a      	lsls	r2, r3, #24
 80149f6:	d410      	bmi.n	8014a1a <__swhatbuf_r+0x3e>
 80149f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149fc:	e00e      	b.n	8014a1c <__swhatbuf_r+0x40>
 80149fe:	466a      	mov	r2, sp
 8014a00:	f000 f946 	bl	8014c90 <_fstat_r>
 8014a04:	2800      	cmp	r0, #0
 8014a06:	dbf2      	blt.n	80149ee <__swhatbuf_r+0x12>
 8014a08:	9a01      	ldr	r2, [sp, #4]
 8014a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014a0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014a12:	425a      	negs	r2, r3
 8014a14:	415a      	adcs	r2, r3
 8014a16:	602a      	str	r2, [r5, #0]
 8014a18:	e7ee      	b.n	80149f8 <__swhatbuf_r+0x1c>
 8014a1a:	2340      	movs	r3, #64	; 0x40
 8014a1c:	2000      	movs	r0, #0
 8014a1e:	6023      	str	r3, [r4, #0]
 8014a20:	b016      	add	sp, #88	; 0x58
 8014a22:	bd70      	pop	{r4, r5, r6, pc}

08014a24 <__smakebuf_r>:
 8014a24:	898b      	ldrh	r3, [r1, #12]
 8014a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a28:	079d      	lsls	r5, r3, #30
 8014a2a:	4606      	mov	r6, r0
 8014a2c:	460c      	mov	r4, r1
 8014a2e:	d507      	bpl.n	8014a40 <__smakebuf_r+0x1c>
 8014a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a34:	6023      	str	r3, [r4, #0]
 8014a36:	6123      	str	r3, [r4, #16]
 8014a38:	2301      	movs	r3, #1
 8014a3a:	6163      	str	r3, [r4, #20]
 8014a3c:	b002      	add	sp, #8
 8014a3e:	bd70      	pop	{r4, r5, r6, pc}
 8014a40:	ab01      	add	r3, sp, #4
 8014a42:	466a      	mov	r2, sp
 8014a44:	f7ff ffca 	bl	80149dc <__swhatbuf_r>
 8014a48:	9900      	ldr	r1, [sp, #0]
 8014a4a:	4605      	mov	r5, r0
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f7ff f9fb 	bl	8013e48 <_malloc_r>
 8014a52:	b948      	cbnz	r0, 8014a68 <__smakebuf_r+0x44>
 8014a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a58:	059a      	lsls	r2, r3, #22
 8014a5a:	d4ef      	bmi.n	8014a3c <__smakebuf_r+0x18>
 8014a5c:	f023 0303 	bic.w	r3, r3, #3
 8014a60:	f043 0302 	orr.w	r3, r3, #2
 8014a64:	81a3      	strh	r3, [r4, #12]
 8014a66:	e7e3      	b.n	8014a30 <__smakebuf_r+0xc>
 8014a68:	4b0d      	ldr	r3, [pc, #52]	; (8014aa0 <__smakebuf_r+0x7c>)
 8014a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a6c:	89a3      	ldrh	r3, [r4, #12]
 8014a6e:	6020      	str	r0, [r4, #0]
 8014a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a74:	81a3      	strh	r3, [r4, #12]
 8014a76:	9b00      	ldr	r3, [sp, #0]
 8014a78:	6163      	str	r3, [r4, #20]
 8014a7a:	9b01      	ldr	r3, [sp, #4]
 8014a7c:	6120      	str	r0, [r4, #16]
 8014a7e:	b15b      	cbz	r3, 8014a98 <__smakebuf_r+0x74>
 8014a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a84:	4630      	mov	r0, r6
 8014a86:	f000 f915 	bl	8014cb4 <_isatty_r>
 8014a8a:	b128      	cbz	r0, 8014a98 <__smakebuf_r+0x74>
 8014a8c:	89a3      	ldrh	r3, [r4, #12]
 8014a8e:	f023 0303 	bic.w	r3, r3, #3
 8014a92:	f043 0301 	orr.w	r3, r3, #1
 8014a96:	81a3      	strh	r3, [r4, #12]
 8014a98:	89a0      	ldrh	r0, [r4, #12]
 8014a9a:	4305      	orrs	r5, r0
 8014a9c:	81a5      	strh	r5, [r4, #12]
 8014a9e:	e7cd      	b.n	8014a3c <__smakebuf_r+0x18>
 8014aa0:	08014835 	.word	0x08014835

08014aa4 <memmove>:
 8014aa4:	4288      	cmp	r0, r1
 8014aa6:	b510      	push	{r4, lr}
 8014aa8:	eb01 0402 	add.w	r4, r1, r2
 8014aac:	d902      	bls.n	8014ab4 <memmove+0x10>
 8014aae:	4284      	cmp	r4, r0
 8014ab0:	4623      	mov	r3, r4
 8014ab2:	d807      	bhi.n	8014ac4 <memmove+0x20>
 8014ab4:	1e43      	subs	r3, r0, #1
 8014ab6:	42a1      	cmp	r1, r4
 8014ab8:	d008      	beq.n	8014acc <memmove+0x28>
 8014aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014abe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ac2:	e7f8      	b.n	8014ab6 <memmove+0x12>
 8014ac4:	4402      	add	r2, r0
 8014ac6:	4601      	mov	r1, r0
 8014ac8:	428a      	cmp	r2, r1
 8014aca:	d100      	bne.n	8014ace <memmove+0x2a>
 8014acc:	bd10      	pop	{r4, pc}
 8014ace:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ad2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ad6:	e7f7      	b.n	8014ac8 <memmove+0x24>

08014ad8 <__malloc_lock>:
 8014ad8:	4801      	ldr	r0, [pc, #4]	; (8014ae0 <__malloc_lock+0x8>)
 8014ada:	f7ff bf7d 	b.w	80149d8 <__retarget_lock_acquire_recursive>
 8014ade:	bf00      	nop
 8014ae0:	20000904 	.word	0x20000904

08014ae4 <__malloc_unlock>:
 8014ae4:	4801      	ldr	r0, [pc, #4]	; (8014aec <__malloc_unlock+0x8>)
 8014ae6:	f7ff bf78 	b.w	80149da <__retarget_lock_release_recursive>
 8014aea:	bf00      	nop
 8014aec:	20000904 	.word	0x20000904

08014af0 <_realloc_r>:
 8014af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af2:	4607      	mov	r7, r0
 8014af4:	4614      	mov	r4, r2
 8014af6:	460e      	mov	r6, r1
 8014af8:	b921      	cbnz	r1, 8014b04 <_realloc_r+0x14>
 8014afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014afe:	4611      	mov	r1, r2
 8014b00:	f7ff b9a2 	b.w	8013e48 <_malloc_r>
 8014b04:	b922      	cbnz	r2, 8014b10 <_realloc_r+0x20>
 8014b06:	f7ff f94f 	bl	8013da8 <_free_r>
 8014b0a:	4625      	mov	r5, r4
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b10:	f000 f8f2 	bl	8014cf8 <_malloc_usable_size_r>
 8014b14:	42a0      	cmp	r0, r4
 8014b16:	d20f      	bcs.n	8014b38 <_realloc_r+0x48>
 8014b18:	4621      	mov	r1, r4
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	f7ff f994 	bl	8013e48 <_malloc_r>
 8014b20:	4605      	mov	r5, r0
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d0f2      	beq.n	8014b0c <_realloc_r+0x1c>
 8014b26:	4631      	mov	r1, r6
 8014b28:	4622      	mov	r2, r4
 8014b2a:	f7fe fc65 	bl	80133f8 <memcpy>
 8014b2e:	4631      	mov	r1, r6
 8014b30:	4638      	mov	r0, r7
 8014b32:	f7ff f939 	bl	8013da8 <_free_r>
 8014b36:	e7e9      	b.n	8014b0c <_realloc_r+0x1c>
 8014b38:	4635      	mov	r5, r6
 8014b3a:	e7e7      	b.n	8014b0c <_realloc_r+0x1c>

08014b3c <_raise_r>:
 8014b3c:	291f      	cmp	r1, #31
 8014b3e:	b538      	push	{r3, r4, r5, lr}
 8014b40:	4604      	mov	r4, r0
 8014b42:	460d      	mov	r5, r1
 8014b44:	d904      	bls.n	8014b50 <_raise_r+0x14>
 8014b46:	2316      	movs	r3, #22
 8014b48:	6003      	str	r3, [r0, #0]
 8014b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b4e:	bd38      	pop	{r3, r4, r5, pc}
 8014b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b52:	b112      	cbz	r2, 8014b5a <_raise_r+0x1e>
 8014b54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b58:	b94b      	cbnz	r3, 8014b6e <_raise_r+0x32>
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f000 f830 	bl	8014bc0 <_getpid_r>
 8014b60:	462a      	mov	r2, r5
 8014b62:	4601      	mov	r1, r0
 8014b64:	4620      	mov	r0, r4
 8014b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b6a:	f000 b817 	b.w	8014b9c <_kill_r>
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	d00a      	beq.n	8014b88 <_raise_r+0x4c>
 8014b72:	1c59      	adds	r1, r3, #1
 8014b74:	d103      	bne.n	8014b7e <_raise_r+0x42>
 8014b76:	2316      	movs	r3, #22
 8014b78:	6003      	str	r3, [r0, #0]
 8014b7a:	2001      	movs	r0, #1
 8014b7c:	e7e7      	b.n	8014b4e <_raise_r+0x12>
 8014b7e:	2400      	movs	r4, #0
 8014b80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014b84:	4628      	mov	r0, r5
 8014b86:	4798      	blx	r3
 8014b88:	2000      	movs	r0, #0
 8014b8a:	e7e0      	b.n	8014b4e <_raise_r+0x12>

08014b8c <raise>:
 8014b8c:	4b02      	ldr	r3, [pc, #8]	; (8014b98 <raise+0xc>)
 8014b8e:	4601      	mov	r1, r0
 8014b90:	6818      	ldr	r0, [r3, #0]
 8014b92:	f7ff bfd3 	b.w	8014b3c <_raise_r>
 8014b96:	bf00      	nop
 8014b98:	20000040 	.word	0x20000040

08014b9c <_kill_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4d07      	ldr	r5, [pc, #28]	; (8014bbc <_kill_r+0x20>)
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	4608      	mov	r0, r1
 8014ba6:	4611      	mov	r1, r2
 8014ba8:	602b      	str	r3, [r5, #0]
 8014baa:	f7f4 fa77 	bl	800909c <_kill>
 8014bae:	1c43      	adds	r3, r0, #1
 8014bb0:	d102      	bne.n	8014bb8 <_kill_r+0x1c>
 8014bb2:	682b      	ldr	r3, [r5, #0]
 8014bb4:	b103      	cbz	r3, 8014bb8 <_kill_r+0x1c>
 8014bb6:	6023      	str	r3, [r4, #0]
 8014bb8:	bd38      	pop	{r3, r4, r5, pc}
 8014bba:	bf00      	nop
 8014bbc:	2000090c 	.word	0x2000090c

08014bc0 <_getpid_r>:
 8014bc0:	f7f4 ba64 	b.w	800908c <_getpid>

08014bc4 <__sread>:
 8014bc4:	b510      	push	{r4, lr}
 8014bc6:	460c      	mov	r4, r1
 8014bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bcc:	f000 f89c 	bl	8014d08 <_read_r>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	bfab      	itete	ge
 8014bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8014bd8:	181b      	addge	r3, r3, r0
 8014bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bde:	bfac      	ite	ge
 8014be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014be2:	81a3      	strhlt	r3, [r4, #12]
 8014be4:	bd10      	pop	{r4, pc}

08014be6 <__swrite>:
 8014be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bea:	461f      	mov	r7, r3
 8014bec:	898b      	ldrh	r3, [r1, #12]
 8014bee:	05db      	lsls	r3, r3, #23
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	460c      	mov	r4, r1
 8014bf4:	4616      	mov	r6, r2
 8014bf6:	d505      	bpl.n	8014c04 <__swrite+0x1e>
 8014bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	2200      	movs	r2, #0
 8014c00:	f000 f868 	bl	8014cd4 <_lseek_r>
 8014c04:	89a3      	ldrh	r3, [r4, #12]
 8014c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c0e:	81a3      	strh	r3, [r4, #12]
 8014c10:	4632      	mov	r2, r6
 8014c12:	463b      	mov	r3, r7
 8014c14:	4628      	mov	r0, r5
 8014c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1a:	f000 b817 	b.w	8014c4c <_write_r>

08014c1e <__sseek>:
 8014c1e:	b510      	push	{r4, lr}
 8014c20:	460c      	mov	r4, r1
 8014c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c26:	f000 f855 	bl	8014cd4 <_lseek_r>
 8014c2a:	1c43      	adds	r3, r0, #1
 8014c2c:	89a3      	ldrh	r3, [r4, #12]
 8014c2e:	bf15      	itete	ne
 8014c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c3a:	81a3      	strheq	r3, [r4, #12]
 8014c3c:	bf18      	it	ne
 8014c3e:	81a3      	strhne	r3, [r4, #12]
 8014c40:	bd10      	pop	{r4, pc}

08014c42 <__sclose>:
 8014c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c46:	f000 b813 	b.w	8014c70 <_close_r>
	...

08014c4c <_write_r>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4d07      	ldr	r5, [pc, #28]	; (8014c6c <_write_r+0x20>)
 8014c50:	4604      	mov	r4, r0
 8014c52:	4608      	mov	r0, r1
 8014c54:	4611      	mov	r1, r2
 8014c56:	2200      	movs	r2, #0
 8014c58:	602a      	str	r2, [r5, #0]
 8014c5a:	461a      	mov	r2, r3
 8014c5c:	f7f4 fa55 	bl	800910a <_write>
 8014c60:	1c43      	adds	r3, r0, #1
 8014c62:	d102      	bne.n	8014c6a <_write_r+0x1e>
 8014c64:	682b      	ldr	r3, [r5, #0]
 8014c66:	b103      	cbz	r3, 8014c6a <_write_r+0x1e>
 8014c68:	6023      	str	r3, [r4, #0]
 8014c6a:	bd38      	pop	{r3, r4, r5, pc}
 8014c6c:	2000090c 	.word	0x2000090c

08014c70 <_close_r>:
 8014c70:	b538      	push	{r3, r4, r5, lr}
 8014c72:	4d06      	ldr	r5, [pc, #24]	; (8014c8c <_close_r+0x1c>)
 8014c74:	2300      	movs	r3, #0
 8014c76:	4604      	mov	r4, r0
 8014c78:	4608      	mov	r0, r1
 8014c7a:	602b      	str	r3, [r5, #0]
 8014c7c:	f7f4 fa61 	bl	8009142 <_close>
 8014c80:	1c43      	adds	r3, r0, #1
 8014c82:	d102      	bne.n	8014c8a <_close_r+0x1a>
 8014c84:	682b      	ldr	r3, [r5, #0]
 8014c86:	b103      	cbz	r3, 8014c8a <_close_r+0x1a>
 8014c88:	6023      	str	r3, [r4, #0]
 8014c8a:	bd38      	pop	{r3, r4, r5, pc}
 8014c8c:	2000090c 	.word	0x2000090c

08014c90 <_fstat_r>:
 8014c90:	b538      	push	{r3, r4, r5, lr}
 8014c92:	4d07      	ldr	r5, [pc, #28]	; (8014cb0 <_fstat_r+0x20>)
 8014c94:	2300      	movs	r3, #0
 8014c96:	4604      	mov	r4, r0
 8014c98:	4608      	mov	r0, r1
 8014c9a:	4611      	mov	r1, r2
 8014c9c:	602b      	str	r3, [r5, #0]
 8014c9e:	f7f4 fa5c 	bl	800915a <_fstat>
 8014ca2:	1c43      	adds	r3, r0, #1
 8014ca4:	d102      	bne.n	8014cac <_fstat_r+0x1c>
 8014ca6:	682b      	ldr	r3, [r5, #0]
 8014ca8:	b103      	cbz	r3, 8014cac <_fstat_r+0x1c>
 8014caa:	6023      	str	r3, [r4, #0]
 8014cac:	bd38      	pop	{r3, r4, r5, pc}
 8014cae:	bf00      	nop
 8014cb0:	2000090c 	.word	0x2000090c

08014cb4 <_isatty_r>:
 8014cb4:	b538      	push	{r3, r4, r5, lr}
 8014cb6:	4d06      	ldr	r5, [pc, #24]	; (8014cd0 <_isatty_r+0x1c>)
 8014cb8:	2300      	movs	r3, #0
 8014cba:	4604      	mov	r4, r0
 8014cbc:	4608      	mov	r0, r1
 8014cbe:	602b      	str	r3, [r5, #0]
 8014cc0:	f7f4 fa5b 	bl	800917a <_isatty>
 8014cc4:	1c43      	adds	r3, r0, #1
 8014cc6:	d102      	bne.n	8014cce <_isatty_r+0x1a>
 8014cc8:	682b      	ldr	r3, [r5, #0]
 8014cca:	b103      	cbz	r3, 8014cce <_isatty_r+0x1a>
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	bd38      	pop	{r3, r4, r5, pc}
 8014cd0:	2000090c 	.word	0x2000090c

08014cd4 <_lseek_r>:
 8014cd4:	b538      	push	{r3, r4, r5, lr}
 8014cd6:	4d07      	ldr	r5, [pc, #28]	; (8014cf4 <_lseek_r+0x20>)
 8014cd8:	4604      	mov	r4, r0
 8014cda:	4608      	mov	r0, r1
 8014cdc:	4611      	mov	r1, r2
 8014cde:	2200      	movs	r2, #0
 8014ce0:	602a      	str	r2, [r5, #0]
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f7f4 fa54 	bl	8009190 <_lseek>
 8014ce8:	1c43      	adds	r3, r0, #1
 8014cea:	d102      	bne.n	8014cf2 <_lseek_r+0x1e>
 8014cec:	682b      	ldr	r3, [r5, #0]
 8014cee:	b103      	cbz	r3, 8014cf2 <_lseek_r+0x1e>
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	bd38      	pop	{r3, r4, r5, pc}
 8014cf4:	2000090c 	.word	0x2000090c

08014cf8 <_malloc_usable_size_r>:
 8014cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cfc:	1f18      	subs	r0, r3, #4
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	bfbc      	itt	lt
 8014d02:	580b      	ldrlt	r3, [r1, r0]
 8014d04:	18c0      	addlt	r0, r0, r3
 8014d06:	4770      	bx	lr

08014d08 <_read_r>:
 8014d08:	b538      	push	{r3, r4, r5, lr}
 8014d0a:	4d07      	ldr	r5, [pc, #28]	; (8014d28 <_read_r+0x20>)
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	4608      	mov	r0, r1
 8014d10:	4611      	mov	r1, r2
 8014d12:	2200      	movs	r2, #0
 8014d14:	602a      	str	r2, [r5, #0]
 8014d16:	461a      	mov	r2, r3
 8014d18:	f7f4 f9da 	bl	80090d0 <_read>
 8014d1c:	1c43      	adds	r3, r0, #1
 8014d1e:	d102      	bne.n	8014d26 <_read_r+0x1e>
 8014d20:	682b      	ldr	r3, [r5, #0]
 8014d22:	b103      	cbz	r3, 8014d26 <_read_r+0x1e>
 8014d24:	6023      	str	r3, [r4, #0]
 8014d26:	bd38      	pop	{r3, r4, r5, pc}
 8014d28:	2000090c 	.word	0x2000090c

08014d2c <_init>:
 8014d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d2e:	bf00      	nop
 8014d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d32:	bc08      	pop	{r3}
 8014d34:	469e      	mov	lr, r3
 8014d36:	4770      	bx	lr

08014d38 <_fini>:
 8014d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3a:	bf00      	nop
 8014d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d3e:	bc08      	pop	{r3}
 8014d40:	469e      	mov	lr, r3
 8014d42:	4770      	bx	lr
